[
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I had the same issue.</p>  <p>What I found was that the error message was misleading.</p>  <p>Here's what worked for me:</p>  <p>Try this:</p>  <pre><code>protoc ./proto/hello/hello.proto --go_out=plugins=grpc:./outputDirectory -I ./proto/hello/hello.proto </code></pre>  <p>Parts of the command obviously look redundant, but this was what I had to do to get it working.  I recommend trying this, and see if it runs.  If it does then you can see if you're able to tweak it, but I don't think so.  </p>  <p>if '.' is your output, then do this:</p>  <pre><code>protoc ./proto/hello/hello.proto --go_out=plugins=grpc:. -I ./proto/hello/hello.proto </code></pre>  <p>Notice that you don't need space.</p> "
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>My previous answer didn't make sense (I mistakenly thought that Maven dependencies were handled at run time and they are handled at <code>ONBUILD</code> instructions instead). But I'll try to give a second explanation of why these specific dependencies are not cached.</p>  <p>The downloaded dependencies listed in the question are from the builtin plugins for Maven <code>clean</code>. In the parent <code>Dockerfile</code> we download the project dependencies at <a href='https://github.com/heroku/docker-java/blob/master/Dockerfile#L14' rel='nofollow noreferrer'>https://github.com/heroku/docker-java/blob/master/Dockerfile#L14</a> (everything in your POM). Then, later on in the <code>Dockerfile</code> it runs the <code>clean</code> at <a href='https://github.com/heroku/docker-java/blob/master/Dockerfile#L18' rel='nofollow noreferrer'>https://github.com/heroku/docker-java/blob/master/Dockerfile#L18</a>. Since the <code>maven-clean-plugin</code> isn't part of your POM, it gets downloaded automatically at the clean step (it isn't cached from the previous <code>Dockerfile</code> instructions).</p>  <p>So, if you wanted to cache the <code>maven-clean-plugin</code> as well, you may need to add it as a dependency in your POM (you might be able to get away with just <code>&lt;scope&gt;import&lt;/scope&gt;</code>).</p> "
  },
  {
    "Id": "57464720",
    "PostTypeId": "1",
    "CreationDate": "2019-08-12T16:15:38.490",
    "Score": "5",
    "ViewCount": "5798",
    "Body": "<p>I've been trying to create a multi-stage docker build for my spring-boot-application. The problem is on every change on the master branch, the pom.xml file changes (thanks to maven release plugin), so it's kind of hard to make use of docker build-cache during the build stage and all the dependencies will be downloaded every time I run the build. As far as I know, I can't mount volumes during the building of the image. The experimental version of the docker allows you to mount volumes during the build but it's still experimental so I'm trying to avoid it.</p>  <p>So I decided to try my luck with docker-compose, where the first service will run 'mvn package' inside the container and create a jar file inside a shared volume, which will be then used by the second service to build its own image (basically adding that jar inside its image), which will be published to docker hub. Whatever I was trying to do didn't seem right. Now I'm not really expert of docker-compose here, but is this the right approach to do it?<br> I'm using <code>Docker version 18.09.0, build 4d60db4</code></p>  <pre><code>version: '3' #Specify all the services you want to create services:   #service name   build-service:     context: .     dockerfile: Dockerfile-build     volumes:       - ./:/usr/app       - '$(HOME)'/.m2:/usr/mvn/.m2   spring-app:     conext: .     dockerfile: Dockerfile-jar     volumes:       - ./:/usr/app </code></pre>  <p>Is there any way to make use of local .m2 repository during the first stage. Or any other suggestions are welcome.</p> ",
    "OwnerUserId": "5700299",
    "LastActivityDate": "2019-08-13T05:43:19.073",
    "Title": "How to use maven local repository in Multi-stage docker build?",
    "Tags": "<java><maven><docker-compose><dockerfile><docker-multi-stage-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The short answer is that you cannot. The only way you could use the maven repository during build would be to copy it inside the image in the first stage. But you cannot do that because normally the location of the maven repository is outside your build context. Of course you can change that for your project (place the .m2 folder in your current project) and then this approach might work. I am not recommending this approach, I am merely mentioning it as an option.</p>  <p>However, I think you can solve your issue by following the best practice of not using Docker during development. While Docker is an awesome tool, it does slow down development. The build and push of the image should be delegated to your CI/CD pipeline (Jenkins, Gitlab CI, etc.). During day to day activities it is better and faster to just run your maven builds locally.</p> "
  },
  {
    "Id": "58681074",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62205339",
    "CreationDate": "2019-11-03T14:23:04.653",
    "Score": "5",
    "ViewCount": "3472",
    "Body": "<p>I would like to ask for some recommendations for development workflow for application with stack mentioned in the title. Before I switched to use Docker all I had to do was:</p>  <ol> <li>Go to start.spring.io and download project starter</li> <li>Import it into intelliJ</li> <li>Develop features, hit green arrow to start app or red square to stop and repeat it with every change in code</li> </ol>  <p>Now when I switched to docker, after step 2, I do this:</p>  <ol> <li>Create Dockerfile and docker-compose.yml (where I start my app and also mysql service). </li> <li>Right click on docker-compose and hit run. Then it builds my app image (i use --build flag in my run configuration so it builds images every time it I hit run on docker-compose) and starts two services: app and mysql, and everything works.</li> </ol>  <p>The problem is when I change sth in my code then I have to:</p>  <ol> <li>Execute mvn clean and install steps manually, to produce new jar under /target folder</li> <li>Then stop previous docker compose and run it again. Then it builds new images from what is in /target </li> </ol>  <p>I would rather like to have something like one-click solution, like it was before I started to use docker. So when I change code then I press only one button and new image is generated and run with all changes applied. Is it possible? Do I miss something? Could you tell me if your workflow is similar to mine? Maybe you could recommend some tools or different config?</p> ",
    "OwnerUserId": "4910038",
    "LastActivityDate": "2020-06-04T22:42:14.420",
    "Title": "Development workflow for Spring Boot + Maven + Docker + IntelliJ",
    "Tags": "<java><maven><docker><intellij-idea><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You can set up Spring Boot dev tools to live reload inside a Docker container.</p>  <p>Ensure spring-boot-devtools dependency is in your pom.xml:</p>  <pre><code>&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;   &lt;scope&gt;runtime&lt;/scope&gt;   &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; </code></pre>  <p>Then create a docker-compose.yml file with</p>  <pre><code>version: '3.1' services:   backend:     image: maven:3.6.3-jdk-8     command: mvn spring-boot:run     ports:       - 8000:8000     volumes:       - .:/usr/src/mymaven:rw     working_dir: /usr/src/mymaven </code></pre>  <p>This uses the <a href='https://hub.docker.com/_/maven' rel='noreferrer'>Maven Docker image</a> so when you run <code>docker-compose up</code>, it will run the image and map your source code folder as a volume. Then maven will run the application using <code>mvn spring-boot:run</code></p>  <p>Whenever you make a change to the source code, it will reload with the same functionality as <code>mvn spring-boot:run</code>.</p> ",
    "highest_rated_answer": "<ol> <li>Create a separate release module - <em>project-name</em>-release - which brings down the old image, build the new image and run/publish it</li> <li>Use <a href='https://github.com/spotify/dockerfile-maven' rel='nofollow noreferrer'>docker maven plugin</a> in the config</li> </ol>  <p>Sample project - <a href='https://github.com/spring-guides/gs-spring-boot-docker' rel='nofollow noreferrer'>https://github.com/spring-guides/gs-spring-boot-docker</a></p> "
  },
  {
    "Id": "39977955",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39978198",
    "CreationDate": "2016-10-11T13:06:39.467",
    "Score": "4",
    "ViewCount": "3568",
    "Body": "<p>I have a Maven project. I'm running my Maven builds inside Docker. But the problem with that is it downloads all of the Maven dependencies every time I run it and it does not cache any of those Maven downloads. </p>  <p>I found some work arounds for that, where you mount your local .m2 folder into Docker container. But this will make the builds depend on local setup. What I would like to do is to create a volume (long live) and link/mount that volume to <code>.m2</code> folder inside Docker. That way when I run the Docker build for the 2nd time, it will not download everything. And it will not be dependent on environment.</p>  <p>How can I do this with docker-compose?</p> ",
    "OwnerUserId": "393639",
    "LastEditorUserId": "1228454",
    "LastEditDate": "2016-10-11T13:42:48.680",
    "LastActivityDate": "2016-10-11T13:42:48.680",
    "Title": "How to mount docker volume into my docker project using compose?",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Without knowing your exact configuration, I would use something like this...</p>  <pre><code>version: '2'  services:   maven:     image: whatever     volumes:       - m2-repo:/home/foo/.m2/repository  volumes:   m2-repo: </code></pre>  <p>This will create a data volume called <code>m2-repo</code> that is mapped to the <code>/home/foo/.m2/repository</code> (adjust path as necessary). The data volume will survive up/down/start/stop of the Docker Compose project.</p>  <p>You can delete the volume by running something like <code>docker-compose down -v</code>, which will destroy containers and volumes.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "41411593",
    "PostTypeId": "1",
    "AcceptedAnswerId": "41434110",
    "CreationDate": "2016-12-31T20:43:34.057",
    "Score": "4",
    "ViewCount": "4133",
    "Body": "<p>I'm new to Docker, but have a Java web app project for which my Maven build produces and installs a Docker image. i.e.</p>  <pre><code>mvn clean install </code></pre>  <p>Produces:</p>  <pre><code>REPOSITORY                             TAG                  IMAGE ID            CREATED             SIZE registry.gitlab.com/me/myapp   0.0.1-SNAPSHOT-dev   12d69e5ab28b        45 minutes ago      666 MB </code></pre>  <p>I'm making use of Spotify's Maven plugin to build this, which I can then deploy to the repository using:</p>  <pre><code>mvn docker:push </code></pre>  <p>Which works great. <strong>However:</strong> I'm using GitLab for CI, and my <code>.gitlab-ci.yml</code> file contains:</p>  <pre><code>image: maven:3.3.9-jdk-8  build:   script: 'mvn clean install &amp;&amp; mvn docker:push' </code></pre>  <p>This nearly works, but fails as Docker is not installed <em>in my container</em> which is running the build:</p>  <pre><code>[INFO] Building image registry.gitlab.com/me/myapp Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: Retrying request to {}-&gt;unix://localhost:80 Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory ... (more of the same) ... </code></pre>  <p>It seems the solution here is to install Docker into the container. I can't find a pre-built image that has Java, Maven <em>and</em> Docker, but I did try configuring Docker as a service:</p>  <pre><code>services:   - docker:1.13-rc </code></pre>  <p>But the result is the same - it seems services are meant to be used as external services that can be <em>connected to</em>, but that are not immediately installed within the same container.</p>  <p><strong>How should I go about</strong> updating my <code>.yml</code> file so that the GitLab build can build and push a Docker image?</p> ",
    "OwnerUserId": "88111",
    "LastActivityDate": "2017-01-02T22:37:49.457",
    "Title": "Install Docker in container for use by GitLab CI build",
    "Tags": "<maven><docker><gitlab><docker-compose><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>I think you're very close.</p>  <p>Gitlab works in <em>stages</em>, and you've correctly defined a proper <code>build</code> stage for your java app. However, you need another stage that will then build your docker image. I'm not all that familiar with Maven and what's configured for your <code>mvn docker:push</code> step, but I'm going to assume that it's a pretty simple wrapper around the <code>docker build</code> and <code>docker push</code> commands.</p>  <p>I'd recommend separating things out into different stages and using artifacts to transfer the built files between containers.</p>  <p>I'd imagine your <code>.gitlab-ci.yml</code> file should look something like this:</p>  <pre><code>image: maven:3.3.9-jdk-8 stages:   - build_application   - build_image  # This stage builds your application build_application:   stage: build_application   script:     - mvn clean install   artifacts:     paths:       - my-application.jar  build_image:     image: docker:latest     services:       - docker:dind     stage: build_image     # Remember that even though the JAR file was built in a separate image     #  Gitlab CI will make it available in this image because I specified it in artifacts     #     # All I really need to build the Docker image is the artifact(s) &amp; Dockerfile     script:       - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com       - docker build --no-cache=true -t registry.gitlab.com/me/myapp .       - docker push registry.gitlab.com/me/myapp </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I've solved my problem and tried to create simple guide for ones who are encountered this problem.</p> <h3>BUILD FOR OTHER OS (multi-architecture / buildx command)</h3> <ol> <li>Turn On &quot;experimental&quot; feature's on Docker Settings. <ul> <li><em><strong>For Linux OS</strong></em>: <ol> <li><code>sudo nano /etc/docker/daemon.json</code></li> <li>Add below content to it: <pre class='lang-json prettyprint-override'><code>{   &quot;experimental&quot;: true } </code></pre> </li> </ol> </li> <li><em><strong>For Win10 OS / MAC OS</strong></em>: <ol> <li>Open <strong>Docker Desktop</strong> application.</li> <li>Go to Settings.</li> <li>Select <em><strong>Docker Engine</strong></em> Tab on the left-side.</li> <li>Find <code>&quot;experimental&quot;: false</code>.</li> <li>Change it to <code>&quot;experimental&quot;: true</code>.</li> </ol> </li> </ul> </li> <li>Restart Docker.</li> <li>Create multi-architecture os. (<em><strong>Important</strong>: The <strong>image</strong> you are using should contain the <strong>OS</strong> you want to create it</em>) <ul> <li><p>Creating a just <strong>SINGLE OS</strong> :</p> <ol> <li>You can use load or push commands. <ul> <li><code>--load</code> means that docker saves it to local disk: <pre><code>docker buildx build --load --platform linux/arm64 -t &lt;dockerhub_username&gt;/&lt;repository_name&gt;:&lt;tag_name&gt; . </code></pre> </li> <li><code>--push</code> means that docker doesn't save it to local disk but save it to cloud (docker hub): <pre><code>docker buildx build --push --platform linux/arm64 -t &lt;dockerhub_username&gt;/&lt;repository_name&gt;:&lt;tag_name&gt; . </code></pre> </li> <li><code>--load</code> and <code>--push</code> can not be set together.</li> </ul> </li> </ol> </li> <li><p>Creating a <strong>MANY OS</strong> :</p> <ol start='2'> <li><p>You can just use push command with many OS.</p> <ul> <li><p><code>--push</code> means that docker doesn't save it to local disk but save it to cloud (docker hub):</p> <pre><code>docker buildx build --push --platform linux/amd64,linux/arm64,linux/ppc64le -t &lt;dockerhub_username&gt;/&lt;repository_name&gt;:&lt;tag_name&gt; . </code></pre> </li> </ul> </li> </ol> </li> </ul> </li> </ol> ",
    "highest_rated_answer": null
  },
  {
    "Id": "76652984",
    "PostTypeId": "1",
    "CreationDate": "2023-07-10T10:49:46.723",
    "Score": "4",
    "ViewCount": "128",
    "Body": "<p>On Github I find ComposeContainer in <a href='https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers' rel='nofollow noreferrer'>https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers</a>, i.e. the containers subdirectory. When searching on Maven Central, (i.e. <a href='https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions' rel='nofollow noreferrer'>https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions</a>) I find <code>testcontainers-1.18.3.jar</code>, but this archive does not contain <code>ComposeContainer.class</code>). Is this my fault?</p> <p>Since I find <code>DockerComposeContainer</code> at the expected location I expect <code>ComposeContainer</code> there as well.</p> ",
    "OwnerUserId": "18307258",
    "LastEditorUserId": "3764965",
    "LastEditDate": "2023-07-10T10:55:15.980",
    "LastActivityDate": "2023-07-10T10:55:15.980",
    "Title": "testcontainers ComposeContainer missing in Maven Central?",
    "Tags": "<java><docker><maven><docker-compose><testcontainers>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "35594188",
    "PostTypeId": "1",
    "CreationDate": "2016-02-24T05:44:39.027",
    "Score": "3",
    "ViewCount": "3485",
    "Body": "<p>I want to run Junit tests in a Docker container, and have the container fail if the tests fail. </p>  <p>In my Docker file I have :</p>  <pre><code>FROM maven:3.2-jdk-7-onbuild CMD mvn verify </code></pre>  <p>I'm kicking this off from a Go CI server running a docker compose command. </p>  <p>What I'm seeing is that this starts a background thread of execution and the tests start running - and the Go CI server gets an OK - just as the maven process has started. The test finishes running with some failures, but by then the Go server has already displayed a green 'all good' status. </p>  <p>Part of the problem is I need the <code>EXEC</code> command to block until the tests have finished running. </p>  <p>My question is: <strong>How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?</strong></p> ",
    "OwnerUserId": "15441",
    "LastActivityDate": "2016-02-25T04:20:40.837",
    "Title": "How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?",
    "Tags": "<maven><junit><docker><continuous-integration><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You want to use <code>docker-compose run</code> instead of <code>docker-compose up</code>.</p>  <p><code>run</code> will block, and exit with the same exit status as the process in the container.</p> "
  },
  {
    "Id": "44242091",
    "PostTypeId": "1",
    "CreationDate": "2017-05-29T12:06:18.367",
    "Score": "3",
    "ViewCount": "7351",
    "Body": "<p>I have a jboss image hosted in Docker, along with several others. I am able to run the jboss image and use it as container to deploy webapps. Currently using IntelliJ to configure a Docker configuration and deploy war files directly from IntelliJ and pointing to the docker configuration within IntelliJ.</p>  <p>I am looking for ways by which I can deploy this war file directly in my jboss image at Docker. Basically looking at ways to deploy war file without any IntelliJ intervention, with the use of docker-compose to build jboss image along with added war targets successfully deployed. What sort of changes need to be done in jboss.yml file and Dockerfile for jboss image?</p> ",
    "OwnerUserId": "6159397",
    "LastActivityDate": "2017-05-29T15:35:03.153",
    "Title": "Docker | How to build and deploy war file in jboss container hosted in Docker",
    "Tags": "<maven><docker><jboss><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>If you want the .war file to be integral part of your image, then you just need to add it as a file resource to your jboss deployment dir during your image assembly via dockerfile. Say your docker file goes like this:</p>  <pre><code>FROM jboss/wildfly COPY myapp.war /opt/jboss/wildfly/standalone/deployments/ </code></pre>  <p>Of course you need to adjust the paths to match your setup and distribution, you can for example use <a href='https://github.com/spotify/docker-maven-plugin' rel='nofollow noreferrer'>maven docker plugin</a>.</p>  <p>Other option is just to build your server without any deployments and use jboss cli or web admin interface to deploy it. Again you can automate it via maven or RUN command in dockerfile.</p> "
  },
  {
    "Id": "46387862",
    "PostTypeId": "1",
    "CreationDate": "2017-09-24T07:53:45.073",
    "Score": "3",
    "ViewCount": "1916",
    "Body": "<p>I trying to use Fabric8 docker-maven-plugin, though I was successful in configuring plugin for individual module and run <code>docker:build docker:start</code> Maven goal without using docker-compose.yml, however I needed externalize ports and link the different module, hence I intended to use docker-compose.yml. Below is my project structure.</p>  <pre><code>--kp-parent       |       --- docker-compose.yml       --- pom.xml       |       ---- rest1       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile       ---- rest2       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile </code></pre>  <p>Here are my configurations</p>  <p><strong>Dockerfile[both rest1 and rest2 use identical file except the different port]</strong></p>  <pre><code>FROM openjdk:8-jdk-alpine MAINTAINER 'Karthik Prasad'  ARG IMAGE_VERSION ARG JAR_FILE ENV JAVA_OPTS=''  LABEL version = IMAGE_VERSION  VOLUME /tmp ADD /maven/${JAR_FILE}.jar app.jar   ENTRYPOINT [ 'sh', '-c', 'java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar' ] EXPOSE 8000 </code></pre>  <p><strong>.maven-dockerignore[In both child modules identical file]</strong></p>  <pre><code>target/** </code></pre>  <p><strong>pom.xml [Both rest1 and rest2 pom files are same except the artifcatid and name of the project]</strong></p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;rest2&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;rest2&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;         &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skip&gt;false&lt;/skip&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;external&gt;                                 &lt;type&gt;compose&lt;/type&gt;                                 &lt;basedir&gt;../&lt;/basedir&gt;                                 &lt;ignoreBuild&gt;true&lt;/ignoreBuild&gt;                             &lt;/external&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>parent pom.xml</strong></p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;     &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;     &lt;name&gt;kp-docker-multimodule-fabric8-parent&lt;/name&gt;     &lt;description&gt;Microservice Parent Pom file&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;modules&gt;         &lt;module&gt;rest1&lt;/module&gt;         &lt;module&gt;rest2&lt;/module&gt;     &lt;/modules&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;docker.image.prefix&gt;kp-ms&lt;/docker.image.prefix&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;0.22.1&lt;/version&gt;                     &lt;configuration&gt;                         &lt;skip&gt;true&lt;/skip&gt;                         &lt;images&gt;                             &lt;image&gt;                                 &lt;alias&gt;${project.artifactId}&lt;/alias&gt;                                 &lt;name&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/name&gt;                                 &lt;build&gt;                                     &lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;                                     &lt;assembly&gt;                                         &lt;inline&gt;                                             &lt;id&gt;default&lt;/id&gt;                                             &lt;fileSet&gt;                                                 &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                                                 &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;                                                 &lt;includes&gt;                                                     &lt;include&gt;*.jar&lt;/include&gt;                                                 &lt;/includes&gt;                                             &lt;/fileSet&gt;                                          &lt;/inline&gt;                                     &lt;/assembly&gt;                                 &lt;/build&gt;                             &lt;/image&gt;                         &lt;/images&gt;                         &lt;buildArgs&gt;                             &lt;IMAGE_VERSION&gt;${project.version}&lt;/IMAGE_VERSION&gt;                             &lt;JAR_FILE&gt;${project.artifactId}-${project.version}&lt;/JAR_FILE&gt;                         &lt;/buildArgs&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>And finally docker-compose.yml</strong></p>  <pre><code>version: '2' services:   rest1:     image: kp-ms/rest1:0.0.1-SNAPSHOT     ports:     - 8000:8000   rest2:     image: kp-ms/rest2:0.0.1-SNAPSHOT     ports:     - 8001:8001     links:     - rest1 </code></pre>  <p>When I run the <code>docker:build docker:start</code> I get below error.</p>  <pre><code>[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.22.1:start (default-cli) on project rest1: I/O Error: Unable to pull 'kp-ms/rest2:0.0.1-SNAPSHOT' : repository kp-ms/rest2 not found: does not exist or no pull access (Not Found: 404) -&gt; [Help 1] [ERROR] </code></pre>  <p>However If I remove rest2 section in docker-compose.yml, build goes fine and I'm able to find the container start successfully.</p>  <p>Another problem I noticed is that even if do not give image name in docker-compose.yml build fails with error image is null. However I'm not sure why I need to provide image can't the plugin map from plugin configuration as I had provided alias. As you can notice I'm trying to generate image name dynamically. </p> ",
    "OwnerUserId": "1279145",
    "LastEditorUserId": "472495",
    "LastEditDate": "2018-04-13T09:49:12.503",
    "LastActivityDate": "2018-04-13T09:49:12.503",
    "Title": "Fabric8 Docker Maven plugin not working for compose.yml on Multi module project",
    "Tags": "<maven><docker><docker-compose><dockerfile><fabric8>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "49071113",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49071281",
    "CreationDate": "2018-03-02T14:26:19.700",
    "Score": "3",
    "ViewCount": "575",
    "Body": "<p>I have a microservice which I am testing (Java maven project with JUnit). This has a dependency on another microservice. I am writing an e-2-e system test and want to spin up the external service from a Docker image for a full automated test.</p>  <p>My question is what is the best way to have a maven project spin up a docker image instance which can then be used in an automated test suite?</p>  <p>At the moment I a using maven-exec plugin to call a shell script during the integration-phase which starts the docker container. It may not be the most elegant solution, and I also have no way of knowing when the container is ready.</p>  <p>Any thoughts or help would be appreciated.</p>  <p>Please note: This is for full system testing against real services so I don't want to mock or stub the external service.</p> ",
    "OwnerUserId": "5294334",
    "LastActivityDate": "2018-03-02T14:35:52.447",
    "Title": "Integration Testing against a service in docker",
    "Tags": "<java><maven><unit-testing><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Take a look at <a href='https://github.com/spotify/docker-maven-plugin#testing' rel='nofollow noreferrer'>Spotify maven plugin</a> for docker or <a href='https://github.com/fabric8io/docker-maven-plugin' rel='nofollow noreferrer'>Fabric8 maven pluign</a></p>  <p>Fabric8 has goals as build, run and stop. This may not help you knowing if a container is ready for testing. (Could you have a sort of ping service in your test code that suspended tests until you got a OK 200?)</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I came across similar problem before, and would like to share my experience. </p>  <p>Basically, we need to wait for a while to make sure mongodb is completely boot up, here is the <a href='https://github.com/ufoscout/docker-compose-wait' rel='nofollow noreferrer'>tool</a> that you can leverage. It's fairly easy to use.</p> "
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The problem with your solution is that there are 2 debug sessions being started. 1 for the maven command and 1 for the forked JVM voor Spring Boot. Hence the error and changing the port won't solve this as the problem will remain.</p> <p>What you need to do is remove the <code>JAVA_TOOL_OPTIONS</code> from your docker compose file and instead add the following to your entry point</p> <pre><code>-Dspring-boot.run.jvmArguments=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 </code></pre> <p>That way it will only apply to the Spring Boot plugin and will be taken into account when launching the app in a new JVM.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "45981735",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45984993",
    "CreationDate": "2017-08-31T12:42:28.327",
    "Score": "2",
    "ViewCount": "2881",
    "Body": "<p>this is my Dockerfile,but if I changed the java code ,and then enter 'docker-compose up -d --build' to terminal,maven will re-download the jars, how to avoid duplication of the download?</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src RUN mvn verify ENTRYPOINT ['java','-jar','target/cloud-user.jar'] </code></pre>  <p>docker-compose.yml:</p>  <pre><code>version: '2' services:   cloud-nginx:     build: cloud-nginx     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-nginx     restart: always     ports: ['80:80']   cloud-consul:     image: consul:0.9.2     command: consul agent -dev -client 0.0.0.0   cloud-front:     build: cloud-front     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-front     restart: always     volumes:       - ./cloud-front/static:/app   cloud-user:     build: cloud-user     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-user     restart: always   mysql:      image: mysql:5.7.19     hostname: mysql     volumes:        - ./docker/mysql/data:/var/lib/mysql        - ./docker/mysql/conf:/etc/mysql/conf.d        - /etc/localtime:/etc/localtime     ulimits:        nproc: 65535     mem_limit: 1024m      restart: always      environment:       MYSQL_ROOT_PASSWORD: root     ports:       - '3306:3306' </code></pre>  <hr>  <p>I streamlined my test project, and then use the spring-boot plugin for maven </p>  <blockquote>   <p>mvn spring-boot:run</p> </blockquote>  <p>to start the project, now that mount .m2 folder first and then run mvn command.  But after I changing the java source code ,it does not loading automatically by devtools, how to solve?</p>  <p>and this is my Dockerfile/docker-compose.yml :</p>  <p>Dockerfile:</p>  <pre><code>version: '2' services:   user:     build: user     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - ./user/src:/app/src     ports:       - '8080:8080' </code></pre>  <p>docker-compose.yml:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src ENTRYPOINT ['mvn','spring-boot:run'] </code></pre> ",
    "OwnerUserId": "7035447",
    "LastEditorUserId": "7035447",
    "LastEditDate": "2017-08-31T15:19:53.887",
    "LastActivityDate": "2017-08-31T15:21:18.070",
    "Title": "How to use maven-docker on development-environment to avoid repeated download jars?",
    "Tags": "<java><maven><docker><docker-compose><development-environment>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Resolved, I mount target folder to container,it's can be automatically loaded, which is the final dockerfile and docker-compose.yml, of course, in the production environment, we can not write:</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src ENTRYPOINT ['mvn','spring-boot:run'] </code></pre>  <p>docker-compose.yml</p>  <pre><code>version: '2' services:   user:     build: user     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - ./user/target:/app/target     ports:       - '8080:8080'       - '5005:5005' </code></pre>  <p>pom.xml:</p>  <pre><code>    &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;mainClass&gt;cn.codeforfun.Application&lt;/mainClass&gt;           &lt;jvmArguments&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&lt;/jvmArguments&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt; </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "46719537",
    "PostTypeId": "1",
    "CreationDate": "2017-10-12T22:00:01.930",
    "Score": "2",
    "ViewCount": "582",
    "Body": "<p>The project structure is like </p>  <pre><code>parent-project -- pom.xml -- child-project-1     -- pom.xml     -- Dockerfile -- child-project-2     -- pom.xml </code></pre>  <p>When mvn test is run in child-project-1 locally it works fine. However, when mvn test is run within the Docker image of child-project-1 it is not finding the parent pom.</p>  <p>I tried adding parent pom.xml using ADD/COPY in Dockerfile but it is throwing out of build context error. Wondering how to reference the parent pom from the maven module for which we are building Docker image</p>  <p>Below is the log, <strong>as mentioned earlier there is no issue with child-project-1 pom.xml and it is building fine when built outside Docker</strong>.</p>  <pre><code>+ docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml build test Building test Step 1/5 : FROM maven:3.5-jdk-8  ---&gt; 080cf1fccf1c Step 2/5 : COPY . /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; af309a791cce Step 3/5 : WORKDIR /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; f9fa9a23570f Step 4/5 : RUN chmod +x /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 3263333ba5a4 Step 5/5 : CMD /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 32d391ba99a3 Successfully built 32d391ba99a3 Successfully tagged config_test:latest + docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml up test Creating config_component_1 ...   [36mtest_1            |[0m ------------ End Environment ------------ [36mtest_1            |[0m /usr/src/parent-project/child-project-1 [36mtest_1            |[0m [INFO] Scanning for projects... [36mtest_1            |[0m [ERROR] [ERROR] Some problems were encountered while processing the POMs: [36mtest_1            |[0m [FATAL] Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 [36mtest_1            |[0m  @  [36mtest_1            |[0m [ERROR] The build could not read 1 project -&gt; [Help 1] [36mtest_1            |[0m [ERROR]    [36mtest_1            |[0m [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error [36mtest_1            |[0m [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2]  test_1            | [ERROR] The build could not read 1 project -&gt; [Help 1] test_1            | [ERROR]    test_1            | [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error test_1            | [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2] </code></pre> ",
    "OwnerUserId": "2915705",
    "LastEditorUserId": "2915705",
    "LastEditDate": "2017-10-12T23:48:07.907",
    "LastActivityDate": "2017-10-12T23:48:07.907",
    "Title": "Maven child module failing to find parent pom/artifact within image built with Docker",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "50805431",
    "PostTypeId": "1",
    "CreationDate": "2018-06-11T20:20:22.150",
    "Score": "2",
    "ViewCount": "1567",
    "Body": "<p>I have a java project that is running using maven through a docker container. I have a properties file that specifies local environment variables. However, I want modify the environment variables in java or possibly through maven pom.xml or docker file/docker compose. </p>  <p>I tried setting my environment variables in docker file using </p>  <pre><code>ENV new_env = old_env  </code></pre>  <p>format but when I ran docker:run, it didn't work. This is what I got.</p>  <pre><code>bc6cc4&gt; Execute a program under the supervision of a valid init process (tini) bc6cc4&gt;  bc6cc4&gt; Command line options: bc6cc4&gt;  bc6cc4&gt;   --version: Show version and exit. bc6cc4&gt;   -h: Show this help message and exit. bc6cc4&gt;   -s: Register as a process subreaper (requires Linux &gt;= 3.4). bc6cc4&gt;   -v: Generate more verbose output. Repeat up to 3 times. bc6cc4&gt;   -g: Send signals to the child's process group. bc6cc4&gt;   -l: Show license and exit. bc6cc4&gt;  bc6cc4&gt; Environment variables: bc6cc4&gt;  bc6cc4&gt;   TINI_SUBREAPER: Register as a process subreaper (requires Linux &gt;= 3.4) bc6cc4&gt;   TINI_VERBOSITY: Set the verbosity level (default: 1) bc6cc4&gt;  </code></pre>  <p>After these errors my project just stopped and I had to manually quit out. Any suggestions?  </p> ",
    "OwnerDisplayName": "user9121114",
    "LastEditorDisplayName": "user9121114",
    "LastEditDate": "2018-06-11T20:36:18.527",
    "LastActivityDate": "2018-06-11T20:38:38.390",
    "Title": "How to set environment variables for a java project running through docker?",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>If you want to run with docker use the <code>-e</code> flag</p>  <p>More information from the docs:</p>  <p><a href='https://docs.docker.com/engine/reference/run/#env-environment-variables' rel='nofollow noreferrer'>https://docs.docker.com/engine/reference/run/#env-environment-variables</a> </p> "
  },
  {
    "Id": "53106535",
    "PostTypeId": "1",
    "CreationDate": "2018-11-01T17:40:02.100",
    "Score": "2",
    "ViewCount": "9089",
    "Body": "<p>I am trying to build a docker image for a maven project with the command: <code>mvn clean install -DskipTests -Pdocker</code></p>  <p>I have the following <strong>Dockerfile</strong>:</p>  <pre><code>FROM openjdk:8-jre  ARG serviceuser=${project.artifactId}  ##UPDATES AND INSTALL REQUIRED PACKAGES RUN apt-get update &amp;&amp; \\     apt-get install -y gettext-base sudo &amp;&amp; \\     apt-get install -y iptables sudo &amp;&amp; \\     adduser --shell /bin/bash ${serviceuser} &amp;&amp; \\     adduser ${serviceuser} sudo &amp;&amp; \\     echo '%sudo ALL=NOPASSWD: ALL' &gt;&gt; /etc/sudoers  USER ${serviceuser}  ##MOVE AND COPY PROJECT FILES INTO CONTAINER COPY ${project.build.finalName}.jar /home/${serviceuser}/  WORKDIR /home/${serviceuser} </code></pre>  <p>The <strong>pom.xml</strong> file has some of the following contents: (Have made it shorter just for explaination)</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.book.app&lt;/groupId&gt;   &lt;artifactId&gt;book-app&lt;/artifactId&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;name&gt;book-app&lt;/name&gt;   &lt;url&gt;http://maven.apache.org&lt;/url&gt;   &lt;profiles&gt;     &lt;profile&gt;       &lt;id&gt;docker&lt;/id&gt;       &lt;build&gt;         &lt;resources&gt;           &lt;resource&gt;             &lt;directory&gt;docker&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;targetPath&gt;${project.build.directory}&lt;/targetPath&gt;           &lt;/resource&gt;         &lt;/resources&gt;         &lt;plugins&gt;           &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.3.3&lt;/version&gt;             &lt;executions&gt;               &lt;execution&gt;                 &lt;id&gt;default&lt;/id&gt;                 &lt;goals&gt;                   &lt;goal&gt;build&lt;/goal&gt;                   &lt;goal&gt;push&lt;/goal&gt;                 &lt;/goals&gt;               &lt;/execution&gt;             &lt;/executions&gt;             &lt;configuration&gt;               &lt;contextDirectory&gt;${project.build.directory}&lt;/contextDirectory&gt;               &lt;repository&gt;test-img:2000/v1/${project.artifactId}&lt;/repository&gt;               &lt;tag&gt;${project.version}&lt;/tag&gt;               &lt;tag&gt;latest&lt;/tag&gt;             &lt;/configuration&gt;           &lt;/plugin&gt;         &lt;/plugins&gt;       &lt;/build&gt;     &lt;/profile&gt;   &lt;/profiles&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;   &lt;/parent&gt;   &lt;dependencies&gt;     ...   &lt;/dependencies&gt;   &lt;build&gt;     ...   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>When i build, it gives me the following error message...</p>  <p>Caused by: com.spotify.docker.client.exceptions.DockerException: failed to process '${project.artifactId}': missing ':' in substitution</p>  <p>[ERROR] failed to process <strong>'${project.artifactId}': missing ':' in substitution</strong></p>  <p><strong>[INFO] BUILD FAILURE</strong></p>  <p>I would appreciate any hints or help, thank you.</p> ",
    "OwnerUserId": "8863970",
    "LastActivityDate": "2019-09-17T22:51:24.180",
    "Title": "Unable to build docker image due to failed to process '${project.artifactId}': missing ':' in substitution",
    "Tags": "<maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Docker throws this misleading error whenever you have certain non alpha-numeric characters in your variable name.</p>  <p>I assume that it is trying to interpret them as syntax to specify bash style <a href='http://www.tldp.org/LDP/abs/html/parameter-substitution.html' rel='nofollow noreferrer'>default value substitution</a>.</p>  <p>To prevent this error, remove the character from your variable name.</p>  <p>In your example it is the <code>.</code> causing the error, for me it was a <code>-</code> which I had to replace with an <code>_</code>.</p> "
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The solution is to utilize artifacts in the gitlab-ci.yml file to store the dependencies needed for the docker build (ie. *.jar and *.zip files)</p>  <pre><code>image: docker:latest stages:   - build   - deploy  build_artifacts:   image: maven:3.6.0-jdk-8-slim   stage: build   script:       - mvn clean install -Dmaven.test.skip=true   artifacts:     paths:       - archivist/target/*.jar       - elasticsearch/*.zip  build_archivist_elasticsearch:   stage: deploy   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxxx/xxxxxx:development . </code></pre>  <p>`</p>  <p><a href='https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts' rel='nofollow noreferrer'>https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts</a></p> "
  },
  {
    "Id": "56261144",
    "PostTypeId": "1",
    "CreationDate": "2019-05-22T16:17:45.393",
    "Score": "2",
    "ViewCount": "1755",
    "Body": "<p>i'm facing an issue using spring cloud dataflow connected to a remote repository.</p>  <p>I think i managed to connect the dataflow server to the repository correctly because at first i couldn't import apps and now i can</p>  <p>The problem is that when i try to deploy a stream the dataflow server doesn't see the remote repository.</p>  <p>Here's an example to make myself clear</p>  <p>When i try to import a jar that does not exist the import is successful but if i try to open the details from the UI i get:</p>  <p>Failed to resolve MavenResource: [JAR-NAME] Configured remote repositories: : [repo1],[springRepo]</p>  <p>So i guess that the system sees 'repo1'</p>  <p>But then when i deploy a stream (with all valid apps) i get:</p>  <p>Error Message = [Failed to resolve MavenResource: [JAR-NAME] Configured remote repository: : [springRepo]]</p>  <p>I followed this:  <a href='https://github.com/spring-cloud/spring-cloud-dataflow/issues/982' rel='nofollow noreferrer'>https://github.com/spring-cloud/spring-cloud-dataflow/issues/982</a></p>  <p>And this: <a href='https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html' rel='nofollow noreferrer'>https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html</a></p>  <p>This is my docker-compose.yml:</p>  <pre><code>version: '3'  services:   kafka:     image: wurstmeister/kafka:2.11-0.11.0.3     expose:       - '9092'     environment:       - KAFKA_ADVERTISED_PORT=9092       - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181       - KAFKA_ADVERTISED_HOST_NAME=kafka     depends_on:       - zookeeper   zookeeper:     image: wurstmeister/zookeeper     expose:       - '2181'   dataflow-server:     image: springcloud/spring-cloud-dataflow-server:2.0.2.RELEASE     container_name: dataflow-server     ports:       - '9393:9393'     environment:       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=kafka:9092       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181       - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.enabled=true       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.db=myinfluxdb       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.uri=http://influxdb:8086       - spring.cloud.dataflow.grafana-info.url=http://localhost:3000       - maven.localRepository=null       - maven.remote-repositories.repo1.url= [URL]       - maven.remote-repositories.repo1.auth.username=***       - maven.remote-repositories.repo1.auth.password=***     depends_on:       - kafka     volumes:       - ~/.m2/repository:/m2repo   app-import:     image: springcloud/openjdk:latest     depends_on:       - dataflow-server     command: &gt;       /bin/sh -c '         while ! nc -z dataflow-server 9393;         do           sleep 1;         done;         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Einstein.RELEASE/spring-cloud-stream-app-descriptor-Einstein.RELEASE.stream-apps-kafka-maven&amp;force=true';         echo 'Stream apps imported'         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release-local/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Dearborn.SR1/spring-cloud-task-app-descriptor-Dearborn.SR1.task-apps-maven&amp;force=true';         echo 'Task apps imported''   skipper-server:     image: springcloud/spring-cloud-skipper-server:2.0.1.RELEASE     container_name: skipper     ports:     - '7577:7577'     - '9000-9010:9000-9010'    influxdb:     image: influxdb:1.7.4     container_name: 'influxdb'     ports:       - '8086:8086'    grafana:     image: springcloud/spring-cloud-dataflow-grafana-influxdb:2.0.2.RELEASE     container_name: 'grafana'     ports:       - '3000:3000' volumes:   scdf-targets: </code></pre> ",
    "OwnerUserId": "5157724",
    "LastActivityDate": "2023-03-21T15:55:00.747",
    "Title": "Issue with spring cloud dataflow and Remote Repository: Apps are installed but i can't deploy streams",
    "Tags": "<maven><docker-compose><nexus><spring-cloud-dataflow>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The alternative way to set maven repository is <code>SPRING_APPLICATION_JSON</code> environment. See <a href='https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#configuration-maven' rel='nofollow noreferrer'>here</a> for the official documentation. Docker compose line should be like this</p> <pre><code>- SPRING_APPLICATION_JSON={&quot;maven&quot;:{&quot;local-repository&quot;:&quot;local&quot;,&quot;remote-repositories&quot;:{&quot;repo1&quot;:{&quot;url&quot;:&quot;https://URL/repository/maven-release&quot;,&quot;auth&quot;:{&quot;username&quot;:&quot;*&quot;,&quot;password&quot;:&quot;*&quot;}}}}} </code></pre> <p>To prevent access to default spring repository just replace <code>repo1</code> to <code>springRepo</code> .</p> "
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Don't confuse having n-tiers in your application with a micro-service architecture. </p>  <p>Micro-services are separate units of deployment and communicate among themselves over some sort of protocol (http, a message bus, something).  Calling a function in process (from one jar to another) is not that, and so your individual maven modules aren't candidates for being put in containers and orchestrated by docker-compose.</p>  <p>If your web app communicated with the Domain Layer via, say, a restful api, then you could use docker compose to spin up two separate containers. </p>  <p>But if, as is likely, your 'api' is handled by controllers in the web app making in-process calls to your domain layer, you only have a single container to create and deploy.</p>  <p>There might still be good reasons to containerize your monolithic application. Perhaps it has complex OS dependencies and/or you want to deploy it to a PAAS like AWS Fargate or gCloud. </p>  <p>You might still want to use docker-compose as well, to deploy mysql in a container along side your web app. </p> ",
    "highest_rated_answer": "<p>Agree with Robert, each jar/module does <em>not</em> equal a single Docker image (and thus container) in most cases.</p>  <p>I wanted to add that each boot application (i.e. each class with a main method) will likely end up in its own container (not always but it's a good rule of thumb). This is because each Docker image can have a single entrypoint, which is really just the command that executes to start the container. Thus each main method you create is a good candidate to put in its own container, because the <code>java</code> command can only execute one main method on startup.</p>  <p>Docker Compose is great for automating the startup of containers together, but it's just one of many tools that can do this (<a href='https://docs.docker.com/engine/swarm/' rel='nofollow noreferrer'>docker swarm</a>, <a href='https://rancher.com/' rel='nofollow noreferrer'>rancher</a>, and <a href='https://kubernetes.io/' rel='nofollow noreferrer'>kubernetes</a> being other tools you can look at). Keep in mind, however, that these are others are heavy duty, production quality services and likely overkill for simple dev or test setups. Docker Compose works great for cases where you don't need automated scaling, fault tolerance, complex security policies, secrets management, etc.</p> "
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I found the better solution! <a href='http://www.littlebigextra.com/use-spring-profiles-docker-containers/' rel='nofollow noreferrer'>http://www.littlebigextra.com/use-spring-profiles-docker-containers/</a></p>  <p>I can compile without usisng a profile but then i can use java -jar selecting the spring profile!</p>  <p>thanks for your comments, responses!</p> ",
    "highest_rated_answer": "<p>You must be able to use RUN on your Dockerfile, and give <code>maven clean install</code>. But why do you want to do that? Integrate Docker build into your maven, and configure the same on your profile where you want to build the images. <a href='https://github.com/spotify/docker-maven-plugin' rel='nofollow noreferrer'>Refer here</a>.</p> "
  },
  {
    "Id": "62782921",
    "PostTypeId": "1",
    "CreationDate": "2020-07-07T19:53:32.770",
    "Score": "2",
    "ViewCount": "4933",
    "Body": "<p>I have a ci service (specifically gitlab ci, if it matters) that is docker-compose'ing a postgres instance at <code>0.0.0.0:5432</code> which is then needed for maven integration tests I run within a dockerfile.</p> <p>For some reason, and you can see the stack trace, the dockerfile maven integration tests can't connect to the container open on 5432.</p> <p>Why is this happening and how do I fix the connection?</p> <p>FWIW, when I run <code>docker-compose up</code> and run the integration tests locally (as opposed to within a dockerfile) everything passes fine.</p> <pre class='lang-sh prettyprint-override'><code>$ docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES 28d4ca05dd26        postgres:12.3       &quot;docker-entrypoint.s\u2026&quot;   27 seconds ago      Up 22 seconds       0.0.0.0:5432-&gt;5432/tcp   ************db_1 $ docker run --name ************ ************ </code></pre> <pre class='lang-sh prettyprint-override'><code>07-07-2020 20:46:01.634 [main] INFO  com.zaxxer.hikari.HikariDataSource.getConnection - HikariPool-1 - Starting... 07-07-2020 20:46:02.721 [main] ERROR com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException - HikariPool-1 - Exception during pool initialization. org.postgresql.util.PSQLException: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:280)     at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)     at org.postgresql.jdbc.PgConnection.&lt;init&gt;(PgConnection.java:195)     at org.postgresql.Driver.makeConnection(Driver.java:458)     at org.postgresql.Driver.connect(Driver.java:260)     at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)     at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)     at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115)     at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)     at org.flywaydb.core.internal.jdbc.JdbcUtils.openConnection(JdbcUtils.java:56)     at org.flywaydb.core.internal.database.DatabaseFactory.createDatabase(DatabaseFactory.java:72)     at org.flywaydb.core.Flyway.execute(Flyway.java:1670)     at org.flywaydb.core.Flyway.migrate(Flyway.java:1356)     at org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer.afterPropertiesSet(FlywayMigrationInitializer.java:65)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:119)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)     at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349)     at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349)     at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)     at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)     at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)     at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)     at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)     at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)     at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)     at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263)     at java.base/java.util.Optional.orElseGet(Optional.java:369)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$before$0(ClassTestDescriptor.java:192)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:191)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:74)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:105)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:142)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:117)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:383)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:344)     at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:417) Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)     at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)     at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)     at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)     at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)     at java.base/java.net.Socket.connect(Socket.java:591)     at org.postgresql.core.PGStream.&lt;init&gt;(PGStream.java:75)     at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:91)     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:192)     ... 83 common frames omitted 07-07-2020 20:46:02.765 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. 07-07-2020 20:46:03.472 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.logMessage -  Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 07-07-2020 20:46:03.531 [main] ERROR org.springframework.boot.SpringApplication.reportFailure - Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- </code></pre> <h3>will update with answers</h3> <blockquote> <p>Have you tried checking if you flushed the iptables rules that docker created? if so restart docker service, and double check the iptables rules: iptables -nvL</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ iptables -nvL Chain INPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination   </code></pre> <blockquote> <p>What OS are you running? is SELinux in enforcing mode? getenforce if so check if something got denied: grep -i denied /var/log/audit/audit.log</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ cat /etc/*release 3.12.0 NAME=&quot;Alpine Linux&quot; ID=alpine VERSION_ID=3.12.0 PRETTY_NAME=&quot;Alpine Linux v3.12&quot; HOME_URL=&quot;https://alpinelinux.org/&quot; BUG_REPORT_URL=&quot;https://bugs.alpinelinux.org/&quot; </code></pre> <blockquote> <p>I don't think this is a pg_hba.conf but it does not hurt to check the config.</p> </blockquote> <p>I'm not sure how to do that?</p> <blockquote> <h1>test with telnet in you can mannualy connect: telnet localhost 5432</h1> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ telnet localhost 5432 telnet: can't connect to remote host (127.0.0.1): Connection refused </code></pre> <blockquote> <p>As a last resort while running docker-compose up watch a tcpdump: tcpdump -nni any port 5432 maybe the traffic got redirected somewhere, or localhost is badly defined in /etc/hosts</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ tcpdump -nni any port 5432 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes </code></pre> <h3>when i try different host</h3> <p><strong>application properties</strong></p> <pre><code>spring.datasource.url=jdbc:postgresql://db:5432/*****************db </code></pre> <pre class='lang-sh prettyprint-override'><code>08-07-2020 16:24:57.484 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: The connection attempt failed. ------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : The connection attempt failed. </code></pre> ",
    "OwnerUserId": "8652920",
    "LastEditorUserId": "8652920",
    "LastEditDate": "2020-07-08T15:28:24.620",
    "LastActivityDate": "2022-04-03T20:30:51.333",
    "Title": "Connection to localhost:5432 refused after docker run when port 5432 is clearly open and listening?",
    "Tags": "<spring><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>It is because if you are using docker compose to expose a service port, you need to connect to the <code>service name</code> instead of localhost</p> <p><a href='https://docs.docker.com/compose/networking/' rel='nofollow noreferrer'>https://docs.docker.com/compose/networking/</a></p> <p>If the name of your service is <code>postgres</code> just point your app to <code>postgres:5432</code></p> "
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Works for me if I change from:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package </code></pre> <p>TO:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ WORKDIR /app RUN mvn clean package </code></pre> <p>Main problem I saw was purely that no pom was available in the current working dir.. <code>/</code> (root dir).. setting the <code>WORKDIR</code> to the <code>/app</code> worked perfectly though.</p> "
  },
  {
    "Id": "52120845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52129134",
    "CreationDate": "2018-08-31T18:16:34.017",
    "Score": "13",
    "ViewCount": "25867",
    "Body": "<p>When building my Spring-boot image using Maven I now do this inside the Dockerfile. Maven will download all dependencies and then compile my files. This takes quite some time. </p>  <p>How can I specify that the build process via docker-compose (Dockerfile) re-uses my 'Windows10 Home' Maven repository? So, the number of (new) downloads is minimal. My dev context: I use the Docker quickstart terminal, so using a docker-machine. </p>  <p>The is is a part of my docker-compose.yml file: </p>  <pre><code>version: '3' services:   spring-boot-app:     image: spring-boot-image     build:       context: ./       dockerfile: Dockerfile     depends_on:       - mysql-docker-container     ports:       - 8087:8080     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - /data/spring-boot-app </code></pre>  <p>My Dockerfile is: </p>  <pre><code>FROM java:8 FROM maven:alpine WORKDIR /app COPY . /app RUN mvn -v RUN mvn clean install -DskipTests EXPOSE 8080 LABEL maintainer=\u201cxyz@holland.nl\u201d ADD ./target/spring-boot-example-0.0.1-SNAPSHOT.jar /developments/ ENTRYPOINT ['java','-jar','/developments/spring-boot-example-0.0.1-SNAPSHOT.jar'] </code></pre> ",
    "OwnerUserId": "3143823",
    "LastEditorUserId": "3143823",
    "LastEditDate": "2018-09-01T16:50:52.730",
    "LastActivityDate": "2018-09-01T16:50:52.730",
    "Title": "Docker-compose - build with maven that re-uses the maven repository",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p><strong>@Jack Gore</strong> - thank you very much for pointing me the way. I had seen the post, but there was not a definitive answer yet. After diving in all seperate answers, the info provided me both an answer to the symptom as well with insights how to solve similar questions. </p>  <p><strong>ANSWER</strong>: Via the Dockerfile you can build the final images via 1 or more subsequent image layers. To prevent the step from re-downloading the dependencies each time, you can make an image layer for the 'downloading the world' of dependencies. Re-downloading will only be done when a dependency changes in the pom.xml file. </p>  <p>To do so, you split the Dockerfile in 2 build steps: first copy the pom.xml file and build it. That will create an image layer with all dependencies. As a second step you build the application. </p>  <pre><code>FROM java:8 FROM maven:alpine  # image layer WORKDIR /app ADD pom.xml /app RUN mvn verify clean --fail-never  # Image layer: with the application COPY . /app RUN mvn -v RUN mvn clean install -DskipTests EXPOSE 8080 ADD ./target/your.jar /developments/ ENTRYPOINT ['java','-jar','/developments/your.jar'] </code></pre>  <p>Then you get the following build scenario's: </p>  <ul> <li>The <strong>first time</strong> you build this (docker build .)  the dependencies are downloaded and as step 2 the application jar is build. </li> <li>When you rebuild immediately the dependencies (pom.xml) and the application sources were not changed. So, the image layers don't need to be changed. The build is ready in no time. </li> <li>If you change 1 of your application source files, only a few downloads are downloaded and the application is build. So you are NOT downloading the world. </li> <li>If you change the pom.xml file, thus changing the dependencies, then all dependency downloads are done. </li> </ul>  <p>The impact of seperating image layers is shown via a <a href='https://keyholesoftware.com/2015/01/05/caching-for-maven-docker-builds/' rel='noreferrer'>number of very short videos</a>. </p>  <p>The disadvantage of this way of building is of course that the final (production) image contains more than the appication. Not only the JAR is in it, but also a number of dependencies. </p>  <p>How to solve this iamge being far too big: </p>  <ul> <li>Reduce the image size via a trick. Use the option: --squash. This is explained in <a href='https://medium.com/pismolabs/reducing-image-sizes-and-caching-maven-dependencies-in-docker-builds-b388d3f7aa88' rel='noreferrer'>this post</a>. </li> <li>Seperate the build process (here: maven and/or ng build --prod) as a step before the docker build step. Then execute the docker build and put ONLY the jar file in final image. </li> <li>Use an CI/CD environment with e.g. a Jenkinsfile (pipeline). In the Jenkins pipeline you first build the image. All dependencies are already there. You only rebuild the application. The you perform a docker build, etc. </li> </ul>  <p>For my case this is the best option possible. You automate the process AND keep the image size low. </p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "31156892",
    "PostTypeId": "1",
    "CreationDate": "2015-07-01T08:58:48.337",
    "Score": "1",
    "ViewCount": "1017",
    "Body": "<p>I have a simple Tic-tac-toe Java web app <a href='https://github.com/rajaraodv/tictactoe' rel='nofollow'>https://github.com/rajaraodv/tictactoe</a> It is a Maven project. It uses Jetty to run the web app by doing <code>mvn jetty:run</code> While it is running locally, I can easily modify a JavaScript file and see the changes immediately when I refresh the browser. But, when I run it via Docker where I am mounting the source directory, similar change doesn't get reflected.</p>  <p>Note: I am mounting the source directory in docker-compose.yml file. And I see the change reflected in the file but jetty doesn't pick up the change.</p>  <p><strong>Please Note: It needs JDK 7</strong>  </p>  <p>To test on localhost:</p>  <pre><code>  mvn clean install   mvn jetty:run   Open localhost:8080 to see the app.   Add an alert(1); in `doInit` function in this JavaScript https://github.com/rajaraodv/tictactoe/blob/master/src/main/webapp/WEB-INF/components/ttt/TicTacToeGrid/TicTacToeGridController.js   Refresh the browser and you'll see an alert dialog </code></pre>  <p>To test on Docker (using <a href='https://docs.docker.com/compose/' rel='nofollow'>Docker compose</a>):</p>  <pre><code>    docker-compose up     Add an alert(1); in `doInit` function in [this JavaScript][3]         ...Refresh browser, but the change is not reflected </code></pre>  <p>What am I missing?</p> ",
    "OwnerUserId": "1553014",
    "LastActivityDate": "2015-07-02T02:41:55.617",
    "Title": "mvn jetty:run not reflecting changes when run inside docker",
    "Tags": "<java><maven><docker><jetty><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>In your Dockerfile you do an ADD for source dir. Instead, specify a volume for that path. With the dockerfile as you have it it adds the src at container build time, then the mount does not do anything in compose.</p> "
  },
  {
    "Id": "36985860",
    "PostTypeId": "1",
    "AcceptedAnswerId": "36985950",
    "CreationDate": "2016-05-02T15:15:35.793",
    "Score": "1",
    "ViewCount": "1275",
    "Body": "<p>I have built docker image using following command. (Used com.spotify:docker-maven-plugin:0.3.3 maven plugin). I am using Docker Tool Box in Windows.</p>  <pre><code>mvn clean package docker:build </code></pre>  <p>It gave SUCCESS with following description.</p>  <pre><code>Successfully built d27ae98a8879 [INFO] Built localhost/my-tt-server [INFO] Tagging localhost/my-tt-server with 1.1.x-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ </code></pre>  <p>After this, if I run 'docker ps -a', it should have displayed this new image. But I am not seeing any image related to this. Hence I am not able to start/run the new image.</p>  <p>I am not able to run 'docker-compose up my-tt-server' using following configuration in docker-compose.yml</p>  <pre><code>my-tt-server:   container_name: my-tt-server   image: localhost/my-tt-server:1.1.x-SNAPSHOT   ports:   - '21883:1883'   - '28000:8000' </code></pre>  <p>It gives following error</p>  <pre><code> Creating my-tt-server     \u2190[31mERROR\u2190[0m: Container command not found or does not exist. </code></pre>  <p>I am not sure where it went wrong.</p>  <p>Please help me to solve this. Looks like maven plugin is not correctly deploying the image. How to make it deploy correctly?</p>  <pre><code> &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.3.3&lt;/version&gt;             &lt;configuration&gt;                 &lt;dockerDirectory&gt;${project.basedir}/src/main/docker&lt;/dockerDirectory&gt;                  &lt;imageName&gt;localhost/my-tt-server&lt;/imageName&gt;                 &lt;imageTags&gt;                     &lt;imageTag&gt;${project.version}&lt;/imageTag&gt;                 &lt;/imageTags&gt;                 &lt;forceTags&gt;true&lt;/forceTags&gt;               &lt;/configuration&gt;         &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "2160694",
    "LastActivityDate": "2016-05-02T15:29:39.723",
    "Title": "Docker image is not listed though I built using maven docker plugin",
    "Tags": "<docker><docker-compose><maven-docker-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<blockquote>   <p>if I run '<code>docker ps -a</code>', it should have displayed this new image. But I am not seeing any image related to this. Hence I am not able to start/run the new image.</p> </blockquote>  <p>No: <code>docker ps -a</code> list the containers, not the images.<br> Do a <code>docker images</code> to see the list of images, and launch a container with <code>docker run &lt;anImage&gt;</code>.</p>  <p>If your image is built locally, the <a href='https://docs.docker.com/compose/compose-file/#image' rel='nofollow'><code>image</code> directive of docker-compose</a> should be:</p>  <pre><code>image: localhost/my-tt-server:1.1.x-SNAPSHOT </code></pre>  <p>Make sure there is no extra space at the end of that line.</p>  <p>Regarding the error message '<code>Container command not found or does not exist</code>', see <a href='https://github.com/docker/docker/issues/20789' rel='nofollow'>issue 20789</a>:</p>  <blockquote>   <p>Turns out my issue was the volumes section was not mounting properly because on the windows version only the C:\\Users directory gets mounted</p> </blockquote>  <p>or</p>  <blockquote>   <p>Turns out that those shell scripts use bash -- of course! Simply change to sh, as bash is not present, resulting in the above error</p> </blockquote> ",
    "highest_rated_answer": null
  },
  {
    "Id": "39739271",
    "PostTypeId": "1",
    "CreationDate": "2016-09-28T06:10:59.590",
    "Score": "1",
    "ViewCount": "220",
    "Body": "<p>I am new to docker.I am using <strong>Windows 10</strong> and installed docker for my machine and working docker via power-shell.</p>  <p>My problem was i can't copy my files from docker-compose.yml file</p>  <p>My file look like below</p>  <pre><code>version: '2' services:       maven:    image: maven:3.3.3-jdk-8    volumes:     - ~/.m2:/root/.m2     - /d/projects/test/:/code working_dir: /code links:     - mongodb entrypoint: /code/wait-for-it.sh mongodb:27017 -- mvn clean install environment:          - mongodb_hosts=mongodb mongodb:   image: mongo:3.2.4 zookeeper:   image: wurstmeister/zookeeper ports:   - '2181:2181' kafka:   build: .   ports:   - '9092' </code></pre>  <p>This test project i'm using maven and i have lot of files on it. But it's give the error, like </p>  <hr>  <blockquote>   <p>ERROR: for maven  Cannot start service maven: oci runtime error: exec:   '/code/wait-for-it.sh': stat /code/wait-for-it.sh: no such file or   directory ERROR: Encountered errors while bringing up the project.</p> </blockquote>  <hr>  <p>I shared my local drive also in docker settings, still mount problem was there.</p>  <p>Please help me, thanks for advance.</p> ",
    "OwnerUserId": "1914757",
    "LastEditorUserId": "1515819",
    "LastEditDate": "2016-09-28T17:43:29.813",
    "LastActivityDate": "2016-09-28T17:43:29.813",
    "Title": "Mount volume not working in docker",
    "Tags": "<maven><docker><docker-compose><mount>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "44890034",
    "PostTypeId": "1",
    "CreationDate": "2017-07-03T16:11:57.193",
    "Score": "1",
    "ViewCount": "5038",
    "Body": "<p>I have several java components (WARs), all of them expose webservices, and they happen to use the samemessaging objects (DTOs).</p>  <p>This components all share a common maven dependency for the DTOs, let's call it 'messaging-dtos.jar'. This common dependency has a version number, for example messaging-dtos-1.2.3.jar, where <code>1.2.3</code> is the maven version for that artifact, which is published in a nexus repository and the like.</p>  <p>In the maven world, docker aside, it can get tedious to work with closed version dependencies. The solution for that is maven SNAPSHOTS. When you use for example Eclipse IDE, and you set a dependency to a SNAPSHOT version, this will cause the IDE to take the version from your current workspace instead of nexus, saving time by not having to close a version each time you make a small change.</p>  <p>Now, I don't know how to make this development cycle to work with docker and docker-compose. I have 'Component A' which lives in its own git repo, and messaging-dtos.jar, which lives in another git repo, and it's published in nexus.</p>  <p>My Dockerfile simpy does a <code>RUN mvn clean install</code> at some point, bringing the closed version for this dependency (we are using Dockerfiles for the actual deployments, but for local environments we use docker-compose). This works for closed versions, but not for SNAPSHOTS (at least not for local SNAPSHOTs, I could publish the SNAPSHOT in nexus, but that creates another set of problems, with different content overwriting the same SNAPSHOT and such, been there and I would like to not come back).</p>  <p>I've been thinking about using docker-compose volumes at some point, maybe to mount whatever is in my local .m2 so ComponentA can find the snapshot dependency when it builds, but this doesn't feel 'clean' enough, the build would depend partially on whatever is specified in the Dockerfile and partially on things build locally. I'm not sure that'd be the correct way.</p>  <p>Any ideas? Thanks!</p> ",
    "OwnerUserId": "4416221",
    "LastActivityDate": "2017-07-03T17:11:53.907",
    "Title": "how to use docker-compose and maven snaphot dependencies from external repos",
    "Tags": "<java><maven><docker><docker-compose><snapshot>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I propose maintain two approaches: one for your local development environment (i.e. your machine) and another for building in your current CI tool.</p>  <ul> <li><p>For your local dev environment: </p>  <ol> <li>A Dockerfile that provides the system needs for your War application (i.e. Tomcat)</li> <li><code>docker-compose</code> to mount a volume with the built war app, from Eclipse or whatever IDE.</li> </ol></li> <li><p>For CI (not your dev environment):</p>  <ol> <li>A very similar Dockerfile but one that can build your application (with maven installed)</li> </ol></li> </ul>  <hr>  <h2>A practical example</h2>  <p>I use the docker feature: <a href='https://docs.docker.com/engine/userguide/eng-image/multistage-build/' rel='nofollow noreferrer'>multi stage build</a>.  A single Dockerfile for both Dev and CI envs that might be splited but I prefer to maintain only one:</p>  <pre><code>FROM maven as build ARG LOCAL_ENV=false COPY ./src /app/ RUN mkdir /app/target/ RUN touch /app/target/app.war WORKDIR /app # Run the following only if we are not in Dev Environment: RUN test $LOCAL_ENV = 'false' &amp;&amp; mvn clean install  FROM tomcat COPY --from=build /app/target/app.war /usr/local/tomcat/webapps </code></pre>  <p>The multi-stage build saves a lot of disk space discarding everything from the build, except what is being <code>COPY --from=</code>'ed.</p>  <p>Then, <code>docker-compose.yml</code> used in Dev env:</p>  <pre><code>version: '3' services:   app:     build:       context: .       args:         LOCAL_ENV: true     volumes:       - ./target/app.war:/usr/local/tomcat/webapps/app.war </code></pre>  <h2>Build in CI (not your local machine):</h2>  <pre><code># Will run `mvn clean install`, fetching whatever it needs from Nexus and so on. docker build .        </code></pre>  <h2>Run in local env (your local machine):</h2>  <pre><code># Will inject the war that should be available after a build from your IDE docker-compose up </code></pre> "
  },
  {
    "Id": "44953686",
    "PostTypeId": "1",
    "CreationDate": "2017-07-06T15:52:05.280",
    "Score": "1",
    "ViewCount": "98",
    "Body": "<p>I am new in docker, I want to know how to install dependency locally in maven while using docker compose yml file.</p>  <p>Like, I have 3 micro services and those I configured in <strong>docker-compose.yml</strong> file but I want one dependency to be installed in local maven using maven install so that I can use that dependency in other micro services by importing.</p>  <p>Is this possible ? </p>  <p>Thanks in advance.</p> ",
    "OwnerUserId": "5693627",
    "LastActivityDate": "2017-07-06T15:52:05.280",
    "Title": "Configure Docker container for spring boot micro services",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "47364417",
    "PostTypeId": "1",
    "CreationDate": "2017-11-18T09:18:08.233",
    "Score": "1",
    "ViewCount": "3359",
    "Body": "<p>I have Docker Compose file with below info    image: ${DOCKER_REGISTRY}/mdm-elasticsearch:${SEARCH_IMAGE_VERSION}</p>  <p>I want to set the SEARCH_IMAGE_VERSION with value from POM or from command  mvn clean install -D {build number}</p> ",
    "OwnerUserId": "5702955",
    "LastActivityDate": "2017-11-18T12:42:49.147",
    "Title": "How to set value from Maven to Docker Compose File",
    "Tags": "<java><maven><docker-compose><maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You have to configure the <a href='https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html' rel='nofollow noreferrer'>Resources to have filtering set to true</a> and include your file. For example, if your Docker Compose file is located at <code>src/main/docker/docker-compose.yml</code>, you can have the following configuration in your pom.xml:</p>  <pre><code>&lt;project&gt;   ...   &lt;build&gt;     ...     &lt;resources&gt;       &lt;resource&gt;         &lt;directory&gt;src/main/docker&lt;/directory&gt;         &lt;filtering&gt;true&lt;/filtering&gt;       &lt;/resource&gt;       ...     &lt;/resources&gt;     ...   &lt;/build&gt;   ... &lt;/project&gt; </code></pre>  <p>You can then specify the parameters directly in your pom under <code>properties</code> such as</p>  <pre><code>&lt;project&gt;   ...   &lt;properties&gt;     &lt;DOCKER_REGISTRY&gt;...&lt;/DOCKER_REGISTRY&gt;     &lt;SEARCH_IMAGE_VERSION&gt;...&lt;/SEARCH_IMAGE_VERSION&gt;   &lt;/properties&gt;   ... &lt;/project&gt; </code></pre>  <p>Or directly on the command line:</p>  <pre><code>mvn clean install -DDOCKER_REGISTRY=... -DSEARCH_IMAGE_VERSION=... </code></pre>  <p>When you run <code>mvn</code> command every variable denoted with <code>${...}</code> will be filtered and replaced by their value configured in the pom or on command line. By default the output file will be copied in <code>target/classes/docker-compose.yml</code></p>  <p>If you want to specify another output directory, you should configure a <a href='https://maven.apache.org/plugins/maven-resources-plugin/examples/copy-resources.html' rel='nofollow noreferrer'>Resources Plugin</a> execution and specify the <code>outputDirectory</code> such as:</p>  <pre><code>      &lt;plugin&gt;         &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;         &lt;version&gt;3.0.2&lt;/version&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;copy-docker-compose&lt;/id&gt;             &lt;phase&gt;validate&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;copy-resources&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;               &lt;outputDirectory&gt;${basedir}/target/docker&lt;/outputDirectory&gt;               &lt;resources&gt;                           &lt;resource&gt;                   &lt;directory&gt;src/main/docker&lt;/directory&gt;                   &lt;filtering&gt;true&lt;/filtering&gt;                 &lt;/resource&gt;               &lt;/resources&gt;                           &lt;/configuration&gt;                       &lt;/execution&gt;         &lt;/executions&gt;       &lt;/plugin&gt; </code></pre>  <p>Note that will filter every files in the configured directory. If you need to only filter certain files, use the <a href='https://maven.apache.org/plugins/maven-resources-plugin/examples/include-exclude.html' rel='nofollow noreferrer'><code>include</code> and <code>exclude</code> parameters</a>. </p> "
  },
  {
    "Id": "50932259",
    "PostTypeId": "1",
    "AcceptedAnswerId": "50935664",
    "CreationDate": "2018-06-19T15:41:33.320",
    "Score": "1",
    "ViewCount": "3835",
    "Body": "<p>I'm probably new on the docker area and try to combine my Spring-Boot project with docker and docker-compose, but somehow docker-compose does not work.</p>  <p>I'm using the com.spotify maven plugin as described in the spring boot documentation. I can build and run docker images with the spotify plugin and also from command line using the docker command, but not when I try to use docker-compose up.</p>  <p>Here I always get the error 'Error: Invalid or corrupt jarfile /app.jar'.</p>  <p>I'm sure that it has to do with the ARG JAR_FILE which is passed from the spotify plugin to the docker command. I don't know how to setup this ARG_FILE in the docker-compose.yml so that i'm able to start with docker-compose up and also run only the docker image using the spotify plugin.</p>  <p>Here is my setup:</p>  <p>pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; </code></pre>  <p>http://maven.apache.org/xsd/maven-4.0.0.xsd'>     4.0.0</p>  <pre><code>&lt;groupId&gt;eu.devroyal&lt;/groupId&gt; &lt;artifactId&gt;someProject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt;  &lt;name&gt;someProject&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;  &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;postgres.version&gt;42.2.2&lt;/postgres.version&gt;     &lt;docker.image.prefix&gt;eu.devroyal&lt;/docker.image.prefix&gt; &lt;/properties&gt;  &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;        &lt;!--dependency&gt;         &lt;groupId&gt;postgresql&lt;/groupId&gt;         &lt;artifactId&gt;postgresql&lt;/artifactId&gt;         &lt;version&gt;${postgres.version}&lt;/version&gt;         &lt;scope&gt;runtime&lt;/scope&gt;     &lt;/dependency--&gt;     &lt;!-- https://mvnrepository.com/artifact/org.postgresql/postgresql --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.postgresql&lt;/groupId&gt;         &lt;artifactId&gt;postgresql&lt;/artifactId&gt;         &lt;version&gt;${postgres.version}&lt;/version&gt;         &lt;scope&gt;runtime&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;      &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;         &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;         &lt;version&gt;3.7&lt;/version&gt;     &lt;/dependency&gt;      &lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;com.h2database&lt;/groupId&gt;         &lt;artifactId&gt;h2&lt;/artifactId&gt;         &lt;version&gt;1.4.196&lt;/version&gt;      &lt;/dependency&gt;   &lt;/dependencies&gt;  &lt;build&gt;     &lt;finalName&gt;someProject-app&lt;/finalName&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;          &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.3.6&lt;/version&gt;             &lt;configuration&gt;                 &lt;repository&gt;${docker.image.prefix}/${project.artifactId}&lt;/repository&gt;                 &lt;buildArgs&gt;                     &lt;JAR_FILE&gt;target/${project.build.finalName}.jar&lt;/JAR_FILE&gt;                 &lt;/buildArgs&gt;             &lt;/configuration&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p></p>  <p>Dockerfile:</p>  <pre><code>FROM openjdk:8-jdk-alpine VOLUME /tmp ARG JAR_FILE COPY ${JAR_FILE} app.jar ENTRYPOINT ['java','-Djava.security.egd=file:/dev/./urandom','-jar','/app.jar'] EXPOSE 8188 </code></pre>  <p>docker-compose.yml:</p>  <pre><code> version: '3' services:    web:         environment:             - JAR_FILE=target/someProject-app.jar         build: ./         ports:             - '8188:8188' </code></pre> ",
    "OwnerUserId": "2784507",
    "LastActivityDate": "2018-06-19T19:45:06.400",
    "Title": "Spring Boot and Docker-compose setting arguments",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>At the time you build the dockerfile, you must add this parameter</p>  <p><code>docker build --build-arg JAR_FILE=jar_file_path .</code> </p>  <p>alternative way to do it in the docker-compose.yml</p>  <pre><code>version: '3' services:    web:       build:         context: ./         args:           JAR_FILE: jar_file_path       ports:         - '8188:8188' </code></pre> ",
    "highest_rated_answer": "<p>I would recommend this way</p>  <pre><code>FROM openjdk:8-jdk-alpine VOLUME /tmp COPY target/someproject-app.jar /app.jar ENTRYPOINT ['java','-Djava.security.egd=file:/dev/./urandom','-jar','/app.jar'] EXPOSE 8188 </code></pre>  <p>When Dockerfile gets executed the respective jar in the target will be copied. </p> "
  },
  {
    "Id": "55345182",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55361827",
    "CreationDate": "2019-03-25T19:32:44.373",
    "Score": "1",
    "ViewCount": "1497",
    "Body": "<p>I have a Spring Boot application running in a docker container using JDK 8. I have a Maven goal that builds the docker container and it pulls down jce_policy-8.zip from Oracle's website before building the image.  The build suddenly broke a couple of weeks ago when trying to download jce_policy-8.zip.  I changed nothing and suddenly it stopped working.  </p>  <p>I changed the command that downloads the zip file to a wget instead of a curl and the image then built successfully, but I got an exception on startup in the service.  Did something change in jce_policy-8.zip that broke my build? </p>  <p>Here is the Dockerfile that builds the image:</p>  <pre><code>FROM openjdk:8-jdk-alpine RUN  apk update &amp;&amp; apk upgrade &amp;&amp; apk add netcat-openbsd &amp;&amp; apk add curl RUN mkdir -p /usr/local/configserver RUN cd /tmp/ &amp;&amp; \\      curl -k -LO 'http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip' -H 'Cookie: oraclelicense=accept-securebackup-cookie' &amp;&amp; \\     unzip jce_policy-8.zip &amp;&amp; \\     rm jce_policy-8.zip &amp;&amp; \\     yes |cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /usr/lib/jvm/java-1.8-openjdk/jre/lib/security/ ADD @project.build.finalName@.jar /usr/local/configserver/ ADD run.sh run.sh RUN chmod +x run.sh CMD ./run.sh </code></pre>  <p>This is the exception that I'm getting on startup:</p>  <pre><code>2019-03-25 19:16:49.971 ERROR 21 --- [nio-8888-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.security.ssl.SSLSessionImpl] with root cause    </code></pre>  <p>I'm puzzled as to why everything worked 2 weeks ago but suddenly stopped working without me changing the code.</p>  <p>Here's another line from the log that might help pinpoint the problem:</p>  <pre><code>java.lang.NoClassDefFoundError: Could not initialize class sun.security.ssl.SSLSessionImpl </code></pre>  <p>Actually, here's the entire stack trace:</p>  <pre><code>th path [] threw exception [Handler dispatch failed; nested exception is java.lang.ExceptionInInitializerError] with root cause configserver_1         |  configserver_1         | java.io.FileNotFoundException: /usr/lib/libnss3.so configserver_1         |    at sun.security.pkcs11.Secmod.initialize(Secmod.java:193) ~[sunpkcs11.jar:1.8.0_191] configserver_1         |    at sun.security.pkcs11.SunPKCS11.&lt;init&gt;(SunPKCS11.java:218) ~[sunpkcs11.jar:1.8.0_191] configserver_1         |    at sun.security.pkcs11.SunPKCS11.&lt;init&gt;(SunPKCS11.java:103) ~[sunpkcs11.jar:1.8.0_191] configserver_1         |    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_191] configserver_1         |    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_191] configserver_1         |    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_191] configserver_1         |    at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:224) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderConfig$2.run(ProviderConfig.java:206) ~[na:1.8.0_191] configserver_1         |    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:206) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:187) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderList.getProvider(ProviderList.java:233) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderList.getIndex(ProviderList.java:263) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderList.getProviderConfig(ProviderList.java:247) ~[na:1.8.0_191] configserver_1         |    at sun.security.jca.ProviderList.getProvider(ProviderList.java:253) ~[na:1.8.0_191] configserver_1         |    at java.security.Security.getProvider(Security.java:503) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SignatureAndHashAlgorithm.&lt;clinit&gt;(SignatureAndHashAlgorithm.java:415) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSessionImpl.&lt;init&gt;(SSLSessionImpl.java:188) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSessionImpl.&lt;init&gt;(SSLSessionImpl.java:152) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSessionImpl.&lt;clinit&gt;(SSLSessionImpl.java:79) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSocketImpl.init(SSLSocketImpl.java:598) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSocketImpl.&lt;init&gt;(SSLSocketImpl.java:536) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSocketFactoryImpl.createSocket(SSLSocketFactoryImpl.java:72) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.createSocket(HttpsClient.java:405) ~[na:1.8.0_191] configserver_1         |    at sun.net.NetworkClient.doConnect(NetworkClient.java:162) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.http.HttpClient.openServer(HttpClient.java:463) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.http.HttpClient.openServer(HttpClient.java:558) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.&lt;init&gt;(HttpsClient.java:264) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:367) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1199) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492) ~[na:1.8.0_191] configserver_1         |    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:347) ~[na:1.8.0_191] configserver_1         |    at org.eclipse.jgit.transport.http.JDKHttpConnection.getResponseCode(JDKHttpConnection.java:98) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.util.HttpSupport.response(HttpSupport.java:168) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:475) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.TransportHttp.openFetch(TransportHttp.java:309) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:136) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:122) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1115) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:130) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.api.CloneCommand.fetch(CloneCommand.java:178) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:125) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.cloneToBasedir(JGitEnvironmentRepository.java:391) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.copyRepository(JGitEnvironmentRepository.java:364) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.createGitClient(JGitEnvironmentRepository.java:349) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.refresh(JGitEnvironmentRepository.java:165) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.getLocations(JGitEnvironmentRepository.java:144) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.getLocations(MultipleJGitEnvironmentRepository.java:116) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.AbstractScmEnvironmentRepository.findOne(AbstractScmEnvironmentRepository.java:40) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.findOne(MultipleJGitEnvironmentRepository.java:154) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentEncryptorEnvironmentRepository.findOne(EnvironmentEncryptorEnvironmentRepository.java:53) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentController.labelled(EnvironmentController.java:112) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentController.defaultLabel(EnvironmentController.java:101) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_191] configserver_1         |    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_191] configserver_1         |    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191] configserver_1         |    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191] configserver_1         |    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.4.4.RELEASE.jar!/:1.4.4.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) ~[spring-boot-actuator-1.4.4.RELEASE.jar!/:1.4.4.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) ~[spring-boot-actuator-1.4.4.RELEASE.jar!/:1.4.4.RELEASE] configserver_1         |    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191] configserver_1         |    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191] configserver_1         |    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191] configserver_1         |  configserver_1         | 2019-03-26 13:48:32.540 ERROR 22 --- [nio-8888-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: Could not initialize class sun.security.ssl.SSLSessionImpl] with root cause configserver_1         |  configserver_1         | java.lang.NoClassDefFoundError: Could not initialize class sun.security.ssl.SSLSessionImpl configserver_1         |    at sun.security.ssl.SSLSocketImpl.init(SSLSocketImpl.java:598) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSocketImpl.&lt;init&gt;(SSLSocketImpl.java:536) ~[na:1.8.0_191] configserver_1         |    at sun.security.ssl.SSLSocketFactoryImpl.createSocket(SSLSocketFactoryImpl.java:72) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.createSocket(HttpsClient.java:405) ~[na:1.8.0_191] configserver_1         |    at sun.net.NetworkClient.doConnect(NetworkClient.java:162) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.http.HttpClient.openServer(HttpClient.java:463) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.http.HttpClient.openServer(HttpClient.java:558) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.&lt;init&gt;(HttpsClient.java:264) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:367) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1199) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492) ~[na:1.8.0_191] configserver_1         |    at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_191] configserver_1         |    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:347) ~[na:1.8.0_191] configserver_1         |    at org.eclipse.jgit.transport.http.JDKHttpConnection.getResponseCode(JDKHttpConnection.java:98) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.util.HttpSupport.response(HttpSupport.java:168) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.TransportHttp.connect(TransportHttp.java:475) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.TransportHttp.openFetch(TransportHttp.java:309) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:136) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:122) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1115) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:130) ~[org.eclipse.jgit-3.5.3.201412180710-r.jar!/:3.5.3.201412180710-r] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.fetch(JGitEnvironmentRepository.java:294) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.refresh(JGitEnvironmentRepository.java:167) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.JGitEnvironmentRepository.getLocations(JGitEnvironmentRepository.java:144) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.getLocations(MultipleJGitEnvironmentRepository.java:116) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.AbstractScmEnvironmentRepository.findOne(AbstractScmEnvironmentRepository.java:40) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.MultipleJGitEnvironmentRepository.findOne(MultipleJGitEnvironmentRepository.java:154) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentEncryptorEnvironmentRepository.findOne(EnvironmentEncryptorEnvironmentRepository.java:53) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentController.labelled(EnvironmentController.java:112) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at org.springframework.cloud.config.server.environment.EnvironmentController.defaultLabel(EnvironmentController.java:101) ~[spring-cloud-config-server-1.2.2.RELEASE.jar!/:1.2.2.RELEASE] configserver_1         |    at  </code></pre> ",
    "OwnerUserId": "6311964",
    "LastEditorUserId": "7256341",
    "LastEditDate": "2019-04-14T08:43:43.843",
    "LastActivityDate": "2019-04-14T08:43:43.843",
    "Title": "NoClassDefFoundError in service on startup. Is jce_policy-8.zip for security the culprit?",
    "Tags": "<java><maven><docker><docker-compose><alpine-linux>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I found the solution to the problem! There was a file missing from the image for some reason: <code>java.io.FileNotFoundException: /usr/lib/libnss3.so</code>  </p>  <p>I used this command: <code>RUN apk add --no-cache nss</code> and suddenly everything worked.  Not quite sure why.  Hope this helps someone. </p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "55515900",
    "PostTypeId": "1",
    "CreationDate": "2019-04-04T12:21:25.533",
    "Score": "1",
    "ViewCount": "8396",
    "Body": "<p>I have Maven Multi-Modules Project (Angular Frontend Module + SpringBoot Backend Module) residing under same Parent Maven Project. I want to run the application in Docker Multi-containers (docker container for Frontend + docker container for Backend + docker container for database). How can I use Docker Compose to run docker multi-containers? </p>  <p>I created 'docker-compose.yml' in the parent project, and in each module I add 'Dockerfile'.<br> Here is structure of my project</p>  <p><a href='https://i.stack.imgur.com/MFx0A.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/MFx0A.png' alt='enter image description here'></a></p>  <p>docker-compose.yml File</p>  <pre><code>version: '3'  services:   docker-container-application-mariadb:     image: mariadb:latest     environment:       - MYSQL_ROOT_PASSWORD=*****       - MYSQL_DATABASE=*******       - MYSQL_USER=*******       - MYSQL_PASSWORD=*******     volumes:       - /data/application-mariadb   docker-container-application-backend:     image: docker-image-application-backend     build:       context: ./application-backend       dockerfile: Dockerfile     depends_on:       - docker-container-application-mariadb     ports:       - 8087:8080     volumes:       - /data/application-backend </code></pre>  <p>Backend Dockerfile:</p>  <pre><code>FROM openjdk:8 EXPOSE 8080 ADD target/application_backend.jar application_backend.jar # Run the jar file ENTRYPOINT ['java', '-jar', 'application_backend.jar'] ENTRYPOINT ['java', '-jar', 'application_backend.jar'] </code></pre>  <p>When I run: </p>  <pre><code>docker-compose up </code></pre>  <p>here is the error I am getting:</p>  <pre><code>Step 4/6 : ADD $PWD/application-backend/target/application_backend.jar application_backend.jar ERROR: Service 'docker-container-application-backend' failed to build: ADD failed: stat /var/lib/docker/tmp/docker-builder971325573/esysync-backend/target/application_backend.jar: no such file or directory </code></pre>  <p>Error after code update: <a href='https://i.stack.imgur.com/iuYly.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/iuYly.png' alt='enter image description here'></a></p>  <p>Error after Code update suggested by @Milah: <a href='https://i.stack.imgur.com/WG6C0.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/WG6C0.png' alt='enter image description here'></a></p> ",
    "OwnerUserId": "9905919",
    "LastEditorUserId": "482717",
    "LastEditDate": "2021-03-24T02:41:09.073",
    "LastActivityDate": "2021-03-24T02:41:09.073",
    "Title": "Docker Containers for Maven Multi-module Spring Boot project with Angular Frontend module",
    "Tags": "<maven><docker><docker-compose><multi-module><docker-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>This should work. I don't have your environment to test so if you get errors let me know and I'll fix them.</p>  <p>Place this Docker file at the root of the project (same level as docker-compose).</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.6.0-jdk-8-alpine as build  WORKDIR /app  COPY . .  WORKDIR /app/application-backend  RUN mvn clean package -DskipTests=true  FROM openjdk:8  WORKDIR /app  COPY --from=build /app/application-backend/target/*.jar ./  EXPOSE 8080  # Run the jar file ENTRYPOINT ['java', '-jar', '/app/application_backend.jar'] </code></pre>  <p>Next to the Dockerfile there should be also an ignore file.</p>  <p>.dockerignore</p>  <pre><code>application-frontend/ </code></pre>  <p>You should change the docker-compose file as follows:</p>  <pre><code>...   docker-container-application-backend:     image: docker-image-application-backend     build:       context: ./       dockerfile: Dockerfile ... </code></pre>  <p>The declaration <code>dockerfile: Dockerfile</code> is redundant, can be rmoved.</p> "
  },
  {
    "Id": "56599603",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56599938",
    "CreationDate": "2019-06-14T13:52:02.720",
    "Score": "1",
    "ViewCount": "3144",
    "Body": "<p>I'm trying to run a SpringBoot project that runs with docker-compose. i started its dependencies (Redis, MongoDB ,and RabbitMQ) with <code>docker-compose up</code> </p>  <p>and i'm building the project and running it with these commands <code>mvn clean package -DskipTests &amp;&amp; mvn spring-boot:run</code> </p>  <p>I keep having these errors :</p>  <p><code>Error processing condition on org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOp  erationsConfiguration$RequestScopedConfiguration</code></p>  <p><code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'OAUTH_CLIENTID' in value '${OAUTH_CLIENTID}'</code></p>  <p>In the docker-compose file, the values of the environment variables are defined in the environment section.</p>  <pre><code> environment:       - RABBIT_HOST=rabbitstomp       - RABBIT_USER=guest       - RABBIT_PASS=user       - MONGO_HOST=mongodb://localhost:27017       - OAUTH_CLIENTID=nz-kek       - OAUTH_CLIENT_SECRET=DzXZxeOZOJHFZIUhObSpsne       - SSO_HOST=https://webweb.com       - CORS_HOSTS=HOST1,HOST2       - SES_HOST=ses       - SES_PORT=6000       - REDIS_HOST=localhost       - REDIS_PORT=6379  </code></pre>  <p>This is how application.yml looks like : </p>  <pre><code>     spring.data.mongodb:   database: ${DB_NAME} #notificationdb   uri: ${MONGO_HOST} security:   oauth2:     resource:       jwk:         key-set-uri: ${auth-server:${SSO_HOST}}/keys       token-info-uri: ${auth-server:${SSO_HOST}}/userinfo     client:       client-id: ${OAUTH_CLIENTID}           client-secret: ${OAUTH_CLIENT_SECRET}`  </code></pre>  <p>So when running the project without docker-compose, am i supposed to put the values in the application.yml ?</p>  <p>i also tried <code>mvn spring-boot:run -Dspring-boot.run.arguments=--path.to.value=value1</code>, but i'm not sure how the path should be with variables like <code>key-set-uri: ${auth-server:${SSO_HOST}}/keys</code></p> ",
    "OwnerUserId": "6566294",
    "LastEditorUserId": "6566294",
    "LastEditDate": "2019-06-14T14:10:35.953",
    "LastActivityDate": "2019-06-16T18:22:24.630",
    "Title": "SpringBoot project, Environment Variable in application.yml always empty",
    "Tags": "<maven><spring-boot><docker-compose><environment-variables>",
    "AnswerCount": "2",
    "CommentCount": "7",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Spring has support for providing default values in the configuration via the <a href='https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.html' rel='nofollow noreferrer'>PlaceholderConfigurerSupport</a>. The default value is what comes after the <code>:</code>. In your case, you should write:</p>  <pre><code>client-id: ${OAUTH_CLIENTID:yourDevelopmentDefaultClientID} </code></pre>  <p>If you use the <code>@Value</code> annotation to inject the values, you have support to SpEL for using expressions of the type: <code>#{someExpression}</code> for more complex cases.</p>  <p><strong>UPDATE:</strong></p>  <p>In your case, I believe you are reversing the position of the variables. The correct should be: </p>  <pre><code>key-set-uri: ${SSO_HOST:auth-server}/keys </code></pre>  <p>Here is what it means: first, it will try to use the <code>SSO_HOST</code> environment variable, which is provided to the container through docker-compose. In case this variable is not provided to the process, Spring will use <code>auth-server</code> as the address of the server. It seems to me that this address is visible only inside the docker-compose network, so if you are running your app outside this network, the <code>auth-server</code> address will not be visible. Do you know where is the auth server? Is it another docker container? Is it running on localhost?</p>  <p>Some interesting reference: <a href='https://www.baeldung.com/spring-value-defaults' rel='nofollow noreferrer'>https://www.baeldung.com/spring-value-defaults</a></p> ",
    "highest_rated_answer": "<p>Pass env variables in docker compose as object not a list:  </p>  <pre><code>environment:   RABBIT_HOST: rabbitstomp   RABBIT_USER: guest   RABBIT_PASS: user   MONGO_HOST: mongodb://localhost:27017   OAUTH_CLIENTID: nz-kek   OAUTH_CLIENT_SECRET: DzXZxeOZOJHFZIUhObSpsne   SSO_HOST: https://webweb.com   CORS_HOSTS: HOST1,HOST2   SES_HOST: ses   SES_PORT: 6000   REDIS_HOST: localhost   REDIS_PORT: 6379`  </code></pre> "
  },
  {
    "Id": "57105061",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57111240",
    "CreationDate": "2019-07-19T03:17:54.207",
    "Score": "1",
    "ViewCount": "4870",
    "Body": "<p>From the docs <a href='https://github.com/spotify/dockerfile-maven' rel='nofollow noreferrer'>https://github.com/spotify/dockerfile-maven</a>, it says: </p>  <p>For example, a docker-compose.yml might look like:</p>  <pre><code> service-a:    build: a/    ports:    - '80'   service-b:    build: b/    links:    - service-a </code></pre>  <p>Now, docker-compose up and docker-compose build will work as expected.</p>  <p>But how to write the <code>pom.xml</code> file, still like as if not using compose? Set the goal to be 'build'?</p>  <pre><code>&lt;plugin&gt;   &lt;groupId&gt;com.spotify&lt;/groupId&gt;   &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;   &lt;executions&gt;     &lt;execution&gt;       &lt;id&gt;default&lt;/id&gt;       &lt;goals&gt;         &lt;goal&gt;build&lt;/goal&gt;       &lt;/goals&gt;     &lt;/execution&gt;   &lt;/executions&gt; &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "3552178",
    "LastEditorUserId": "5260982",
    "LastEditDate": "2019-07-19T15:34:01.533",
    "LastActivityDate": "2019-07-19T15:34:01.533",
    "Title": "How's spotify dockerfile-maven-plugin uses 'docker-compose build'?",
    "Tags": "<docker-compose><dockerfile><dockerfile-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You cannot build the images starting from a docker-compose.yml file using the spotify plugin. The readme mentions that the design goal was:</p>  <blockquote>   <p>Don't do anything fancy. Dockerfiles are how you build Docker   projects; that's what this plugin uses.</p> </blockquote>  <p>That section of the docs you quoted actually says that on a maven multi-module project structure one can easily use other build tools such as <code>docker-compose</code>. </p>  <p>Nevertheless, there are ways to build with maven from a <code>docker-compose.yml</code>. One is with the <a href='https://www.mojohaus.org/exec-maven-plugin/' rel='nofollow noreferrer'>maven-exec</a></p>  <p>For the file in question:</p>  <pre><code>version: '2' services:   service-a:     build: a/     image: imga    service-b:     build: b/     image: imgb     links:       - service-a </code></pre>  <p>the relevant part of the <code>pom.xml</code> would be something like the following:    </p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;         &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;1.6.0&lt;/version&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;docker-build&lt;/id&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;exec&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;               &lt;executable&gt;docker-compose&lt;/executable&gt;               &lt;workingDirectory&gt;${project.basedir}&lt;/workingDirectory&gt;               &lt;arguments&gt;                 &lt;argument&gt;build&lt;/argument&gt;               &lt;/arguments&gt;             &lt;/configuration&gt;           &lt;/execution&gt;         &lt;/executions&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt; </code></pre>  <p>Another solution is to use <a href='https://dmp.fabric8.io/' rel='nofollow noreferrer'>fabric8</a></p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;io.fabric8&lt;/groupId&gt;         &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;0.26.0&lt;/version&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;docker-build&lt;/id&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;build&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;         &lt;/executions&gt;         &lt;configuration&gt;           &lt;images&gt;             &lt;image&gt;               &lt;external&gt;                 &lt;type&gt;compose&lt;/type&gt;                 &lt;basedir&gt;${project.basedir}&lt;/basedir&gt;                 &lt;composeFile&gt;docker-compose.yml&lt;/composeFile&gt;               &lt;/external&gt;             &lt;/image&gt;           &lt;/images&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt; </code></pre>  <p>Use the one that suits you best. </p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "57321812",
    "PostTypeId": "1",
    "CreationDate": "2019-08-02T07:32:11.613",
    "Score": "1",
    "ViewCount": "312",
    "Body": "<p>We are developing a jira plugin. For integration tests I want to run the plugin in a dockerized container with postgresql as my db (standard integration tests from atlassian-sdk are no option because of testdata). When running both containers with docker-compose everything works as expected. </p>  <p>When I use the mvn-docker plugin, both containers are fired up, and the jira container can connect to the postgres container. The jira startup stops during the startup checks and freezes (The container is reachable and shows some message about database problems on the jira http address. </p>  <p>The postgresql container gives following log message:  FATAL:  database 'jiradb'' does not exist</p>  <p>Logging into the postgres container and a running psql -U jira -d jiradb succeeds, so the database is existing.</p>  <p>Used docker images are:</p>  <ul> <li>postgres:9.5-alpine</li> <li>ownjira, it is based upon teamatldocker/jira and only copies our plugin into the jira, otherwise it is the teamatldocker/jira image (see Dockerfile below)</li> </ul>  <p>Docker-maven plugin section from pom.xml (database is not found):</p>  <pre class='lang-xml prettyprint-override'><code> &lt;plugin&gt;         &lt;groupId&gt;io.fabric8&lt;/groupId&gt;         &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;${docker.maven.plugin.fabric8.version}&lt;/version&gt;         &lt;configuration&gt;           &lt;autoCreateCustomNetworks&gt;true&lt;/autoCreateCustomNetworks&gt;           &lt;logDate&gt;default&lt;/logDate&gt;           &lt;autoPull&gt;true&lt;/autoPull&gt;           &lt;verbose&gt;true&lt;/verbose&gt;           &lt;images&gt;             &lt;image&gt;               &lt;alias&gt;postgresql&lt;/alias&gt;               &lt;name&gt;postgres:9.5-alpine&lt;/name&gt;               &lt;run&gt;                 &lt;network&gt;                   &lt;mode&gt;custom&lt;/mode&gt;                   &lt;name&gt;test-network&lt;/name&gt;                   &lt;alias&gt;postgresql&lt;/alias&gt;                   &lt;alias&gt;db-alternative&lt;/alias&gt;                 &lt;/network&gt;                 &lt;env&gt;                   &lt;POSTGRES_USER&gt;jira&lt;/POSTGRES_USER&gt;                   &lt;POSTGRES_PASSWORD&gt;jellyfish&lt;/POSTGRES_PASSWORD&gt;                   &lt;POSTGRES_DB&gt;jiradb&lt;/POSTGRES_DB&gt;                   &lt;POSTGRES_ENCODING&gt;UNICODE&lt;/POSTGRES_ENCODING&gt;                   &lt;POSTGRES_COLLATE&gt;C&lt;/POSTGRES_COLLATE&gt;                   &lt;POSTGRES_COLLATE_TYPE&gt;C&lt;/POSTGRES_COLLATE_TYPE&gt;                 &lt;/env&gt;                 &lt;volumes&gt;                   &lt;bind&gt;                     &lt;volume&gt;./postgresqldata/:/var/lib/postgresql/data&lt;/volume&gt;                   &lt;/bind&gt;                 &lt;/volumes&gt;                  &lt;wait&gt;                   &lt;log&gt;database system is ready to accept connections&lt;/log&gt;                   &lt;time&gt;200000&lt;/time&gt;                 &lt;/wait&gt;                 &lt;log&gt;                   &lt;prefix&gt;DB&lt;/prefix&gt;                   &lt;color&gt;yellow&lt;/color&gt;                 &lt;/log&gt;               &lt;/run&gt;             &lt;/image&gt;              &lt;image&gt;               &lt;alias&gt;jira&lt;/alias&gt;               &lt;!-- &lt;name&gt;teamatldocker/jira&lt;/name&gt; --&gt;               &lt;!-- ownjira is teamatldocker/jira only with a copy of our plugin--&gt;               &lt;name&gt;ownjira&lt;/name&gt;               &lt;run&gt;                 &lt;network&gt;                   &lt;mode&gt;custom&lt;/mode&gt;                   &lt;name&gt;test-network&lt;/name&gt;                   &lt;alias&gt;jira&lt;/alias&gt;                 &lt;/network&gt;                 &lt;env&gt;                   &lt;JIRA_DATABASE_URL&gt;postgresql://jira@postgresql/jiradb'&lt;/JIRA_DATABASE_URL&gt;                   &lt;JIRA_DB_PASSWORD&gt;jellyfish&lt;/JIRA_DB_PASSWORD&gt;                   &lt;SETENV_JVM_MINIMUM_MEMORY&gt;2048m&lt;/SETENV_JVM_MINIMUM_MEMORY&gt;                   &lt;SETENV_JVM_MAXIMUM_MEMORY&gt;4096m&lt;/SETENV_JVM_MAXIMUM_MEMORY&gt;                   &lt;DOCKER_WAIT_HOST&gt;postgresql&lt;/DOCKER_WAIT_HOST&gt;                   &lt;DOCKER_WAIT_PORT&gt;5432&lt;/DOCKER_WAIT_PORT&gt;                   &lt;JIRA_PROXY_NAME&gt;&lt;/JIRA_PROXY_NAME&gt;                   &lt;JIRA_PROXY_PORT&gt;&lt;/JIRA_PROXY_PORT&gt;                   &lt;JIRA_PROXY_SCHEME&gt;&lt;/JIRA_PROXY_SCHEME&gt;                 &lt;/env&gt;                 &lt;volumes&gt;                   &lt;bind&gt;                     &lt;volume&gt;./jiradata/:/var/atlassian/jira&lt;/volume&gt;                   &lt;/bind&gt;                 &lt;/volumes&gt;                 &lt;ports&gt;                   &lt;port&gt;80:8080&lt;/port&gt;                   &lt;port&gt;2990:2990&lt;/port&gt;                 &lt;/ports&gt;                 &lt;wait&gt;                   &lt;log&gt;Plugins upgrades completed successfully&lt;/log&gt;                   &lt;time&gt;3000000&lt;/time&gt;                 &lt;/wait&gt;                 &lt;log&gt;                   &lt;prefix&gt;JIRA&lt;/prefix&gt;                   &lt;color&gt;cyan&lt;/color&gt;                 &lt;/log&gt;               &lt;/run&gt;             &lt;/image&gt;           &lt;/images&gt;         &lt;/configuration&gt;          &lt;!-- Hooking into the lifecycle --&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;start&lt;/id&gt;             &lt;phase&gt;pre-integration-test&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;build&lt;/goal&gt;               &lt;goal&gt;start&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;           &lt;execution&gt;             &lt;id&gt;stop&lt;/id&gt;             &lt;phase&gt;post-integration-test&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;stop&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;         &lt;/executions&gt;       &lt;/plugin&gt; </code></pre>  <p>docker-compose (everything works fine):</p>  <pre><code>version: '3.7'  services:    jira:     depends_on:       - postgresql     # image: teamatldocker/jira     image: ownjira     networks:       - jiranet     volumes:       - ./jiradata/:/var/atlassian/jira     ports:       - '80:8080'       - '2990:2990'     environment:       - 'JIRA_DATABASE_URL=postgresql://jira@postgresql/jiradb'       - 'JIRA_DB_PASSWORD=jellyfish'       - 'SETENV_JVM_MINIMUM_MEMORY=2048m'       - 'SETENV_JVM_MAXIMUM_MEMORY=4096m'       - 'DOCKER_WAIT_HOST=postgresql'       - 'DOCKER_WAIT_PORT=5432'       - 'JIRA_PROXY_NAME='       - 'JIRA_PROXY_PORT='       - 'JIRA_PROXY_SCHEME='     logging:       # limit logs retained on host to 25MB       driver: 'json-file'       options:         max-size: '500k'         max-file: '50'    postgresql:     image: postgres:9.5-alpine     networks:       - jiranet     volumes:       - ./postgresqldata/:/var/lib/postgresql/data     environment:       - 'POSTGRES_USER=jira'       # CHANGE THE PASSWORD!       - 'POSTGRES_PASSWORD=jellyfish'       - 'POSTGRES_DB=jiradb'       - 'POSTGRES_ENCODING=UNICODE'       - 'POSTGRES_COLLATE=C'       - 'POSTGRES_COLLATE_TYPE=C'     logging:       # limit logs retained on host to 25MB       driver: 'json-file'       options:         max-size: '500k'         max-file: '50'  volumes:   setupdata:     external: false   jiradata:     external: false   postgresqldata:     external: false    networks:   jiranet:     driver: bridge </code></pre>  <p>Dockerfile for ownjira image:</p>  <pre><code>FROM teamatldocker/jira  USER root  COPY *.obr /var/atlassian/jira/plugins/installed-plugins/  USER jira CMD ['jira'] </code></pre>  <p>Any I think the problem is either in the JIRA_DATABASE_URL of the mvn-docker plugin or in the network setup. But I tried a lot of different combinations there, and if I change the host I get a host not reachable, so I guess the network is working correctly. </p>  <p>Any ideas what could be wrong?</p>  <p>Update: Additional Information: Same problem occurs with mysql instead of Postgresql or with other Postgresql versions.</p> ",
    "OwnerUserId": "7652397",
    "LastEditorUserId": "7652397",
    "LastEditDate": "2019-08-19T09:10:21.813",
    "LastActivityDate": "2019-08-19T09:10:21.813",
    "Title": "JIra container cannot find postgresql when run with mvn-docker plugin",
    "Tags": "<postgresql><maven><docker><docker-compose><jira>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "57676769",
    "PostTypeId": "1",
    "CreationDate": "2019-08-27T14:21:07.460",
    "Score": "1",
    "ViewCount": "1360",
    "Body": "<p>I'm running my testng xml from docker file. When I tried docker run, it throws 'You must specify a valid lifecycle phase or a goal in the format'</p>  <p>The same command is executing in the CLI mode. Below is my docker file</p>  <pre><code>FROM maven:3.6.0-jdk-8 ADD pom.xml pom.xml RUN mvn compile ADD . . CMD ['mvn','clean install test -Dsurefire.suiteXmlFiles=testng.xml'] </code></pre> ",
    "OwnerUserId": "11341832",
    "LastEditorUserId": "1369579",
    "LastEditDate": "2019-08-27T16:39:18.523",
    "LastActivityDate": "2019-08-27T16:39:18.523",
    "Title": "Unknown lifecycle phase 'clean install test -Dsurefire.suiteXmlFiles=testng.xml' while running the testng xml from docker file",
    "Tags": "<maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>your</p>  <pre><code>CMD ['mvn','clean install test -Dsurefire.suiteXmlFiles=testng.xml'] </code></pre>  <p>is the equivalent of </p>  <pre><code>mvn 'clean install test -Dsurefire.suiteXmlFiles=testng.xml' </code></pre>  <p>outside the container. It other words the whole <code>clean install test -Dsurefire.suiteXmlFiles=testng.xml</code> is treated as maven phase and of course it can not be found.</p>  <p>What you are trying to do can be correctly written like this: </p>  <pre><code>CMD ['mvn','clean', 'install', 'test', '-Dsurefire.suiteXmlFiles=testng.xml'] </code></pre>  <p>That said, there are few other issues with your approach:</p>  <ul> <li>You run <code>mvn compile</code> after just adding the POM (before adding the working dir). Depending on what is in the POM that may do nothing or fail.</li> <li>There is no need to call <code>install</code> in a container. It will add the resulting artifact in the local (to the container) repo which will be destroyed together with the container. Unless there is something else in the container that expects to find your artifact in the local repo this is pointless. Normally <code>verify</code> or <code>package</code> (if there are no integration tests) is more than enough</li> <li>you run <code>install</code> first and <code>test</code> later. However both are part of the same <a href='https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Build_Lifecycle_Basics' rel='nofollow noreferrer'>build lifecycle</a>. So what will happen is, all phases (including <code>test</code>) up to <code>install</code> will be executed. Then all phases up to <code>test</code> will be executed again. That is probably not what you want</li> </ul> "
  },
  {
    "Id": "60709358",
    "PostTypeId": "1",
    "AcceptedAnswerId": "60743167",
    "CreationDate": "2020-03-16T16:06:05.420",
    "Score": "1",
    "ViewCount": "1510",
    "Body": "<p>I am trying to run a spring-boot app in docker but when I try and parse environment variables in the dockerfile entrypoint I am getting the following error:</p> <p>Unable to open JDBC Connection for DDL execution</p> <p>My dockerfile looks like this</p> <pre><code>FROM maven:3.6-jdk-8  COPY . /usr/src/api WORKDIR /usr/src/api  ENV SPRING_URL ${SPRING_DATASOURCE_URL} ENV SPRING_USERNAME ${SPRING_DATASOURCE_USERNAME} ENV SPRING_PASSWORD ${SPRING_DATASOURCE_PASSWORD}  RUN mvn install:install-file \\      -Dfile=.mvn/wrapper/maven-wrapper.jar \\      -Dversion=1.0 \\      -Dpackaging=jar \\      -DgeneratePom=true \\      -DSPRING_DATASOURCE_URL=SPRING_URL \\      -DSPRING_DATASOURCE_USERNAME=SPRING_USERNAME \\      -DSPRING_DATASOURCE_PASSWORD=SPRING_PASSWORD  ENTRYPOINT mvn -DSPRING_DATASOURCE_URL=SPRING_URL -DSPRING_DATASOURCE_USERNAME=SPRING_USERNAME -DSPRING_DATASOURCE_PASSWORD=SPRING_PASSWORD spring-boot:run </code></pre> <p>The env variables are coming from the docker-compose file. I am running <code>docker-compose build</code>, which builds successfully (including the tests being passed) and <code>docker-compose -p 0.0.0.0:8080:8080 run api</code> which fails with the above error.</p> <p>My docker-compose.yml looks like this:</p> <pre><code>version: '3' services:   api:     image: test/api:1.0     build:       context: .       dockerfile: Dockerfile     environment:         - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}         - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}         - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD} </code></pre> <p>The problem is in how I am parsing env variables to the entrypoint. On the mvn install, it seems to be working fine, but not on the spring-boot:run. Is the shell form of entrypoint te right command and how should I be parsing the variables?</p> ",
    "OwnerUserId": "7610321",
    "LastEditorUserId": "11984670",
    "LastEditDate": "2020-09-28T19:26:15.053",
    "LastActivityDate": "2020-09-28T19:26:15.053",
    "Title": "Parse environment variables in dockerfile entrypoint for mvn spring-boot:run",
    "Tags": "<spring-boot><maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I followed this <a href='https://spring.io/blog/2018/11/08/spring-boot-in-a-container' rel='nofollow noreferrer'>https://spring.io/blog/2018/11/08/spring-boot-in-a-container</a> to dockerize the app with my application.properties looking like this: </p>  <pre><code>spring.datasource.url=${SPRING_DATASOURCE_URL} spring.datasource.username = ${SPRING_DATASOURCE_USERNAME} spring.datasource.password = ${SPRING_DATASOURCE_PASSWORD} </code></pre>  <p>Then my docker-compose.yml remained the same and my Dockerfile looks like this: </p>  <pre><code>FROM openjdk:8-jdk-alpine RUN addgroup -S spring &amp;&amp; adduser -S spring -G spring USER spring:spring  ARG DEPENDENCY=target/dependency ARG SPRING_DATASOURCE_URL ARG SPRING_DATASOURCE_USERNAME ARG SPRING_DATASOURCE_PASSWORD  ENV SPRING_DATASOURCE_URL ${SPRING_DATASOURCE_URL} ENV SPRING_DATASOURCE_USERNAME ${SPRING_DATASOURCE_USERNAME} ENV SPRING_DATASOURCE_PASSWORD ${SPRING_DATASOURCE_PASSWORD}  COPY ${DEPENDENCY}/BOOT-INF/lib /app/lib COPY ${DEPENDENCY}/META-INF /app/META-INF COPY ${DEPENDENCY}/BOOT-INF/classes /app  EXPOSE 8080  ENTRYPOINT ['java','- cp','app:app/lib/*','test.ApiApplication'] </code></pre>  <p>I found this page very useful in explained ARGs and ENVs in dockerfile <a href='https://vsupalov.com/docker-arg-env-variable-guide/' rel='nofollow noreferrer'>https://vsupalov.com/docker-arg-env-variable-guide/</a> </p>  <p>Also to make my original dockerization approach to work my application.properties and docker-compose remained the same and my dockerfile was like this:</p>  <pre><code>FROM maven:3.6-jdk-8  COPY . /usr/src/api WORKDIR /usr/src/api ARG SPRING_DATASOURCE_URL ARG SPRING_DATASOURCE_USERNAME ARG SPRING_DATASOURCE_PASSWORD  RUN mvn install:install-file \\      -Dfile=.mvn/wrapper/maven-wrapper.jar \\      -DgroupId=test.ApiApplication \\      -DartifactId=api \\      -Dversion=1.0 \\      -Dpackaging=jar \\      -DgeneratePom=true \\      -DSPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL} \\      -DSPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME} \\      -DSPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}  ENV SPRING_DATASOURCE_URL ${SPRING_DATASOURCE_URL} ENV SPRING_DATASOURCE_USERNAME ${SPRING_DATASOURCE_USERNAME} ENV SPRING_DATASOURCE_PASSWORD ${SPRING_DATASOURCE_PASSWORD}  EXPOSE 8080  ENTRYPOINT mvn -DSPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL} - DSPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME} - DSPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD} spring-boot:run </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "61141285",
    "PostTypeId": "1",
    "CreationDate": "2020-04-10T13:26:44.983",
    "Score": "1",
    "ViewCount": "904",
    "Body": "<p>Trying to drag this dependency from maven but get error, what could be the issue? Cannot resolve com.palantir.docker.compose:docker-compose-rule-junit4:0.32.0</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;com.palantir.docker.compose&lt;/groupId&gt;     &lt;artifactId&gt;docker-compose-rule-junit4&lt;/artifactId&gt;     &lt;version&gt;0.32.0&lt;/version&gt; &lt;/dependency&gt; </code></pre> ",
    "OwnerUserId": "7900087",
    "LastActivityDate": "2020-04-13T09:44:42.080",
    "Title": "Cannot resolve com.palantir.docker.compose:docker-compose-rule-junit4:0.32.0",
    "Tags": "<java><docker><maven><docker-compose><maven-dependency>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The packet did not exist in maven central repo  <a href='https://repo.maven.apache.org/maven2' rel='nofollow noreferrer'>https://repo.maven.apache.org/maven2</a>, so I had to add extra one.</p>  <pre><code>&lt;repositories&gt;     &lt;repository&gt;         &lt;id&gt;Palantir&lt;/id&gt;         &lt;url&gt;https://dl.bintray.com/palantir/releases/&lt;/url&gt;     &lt;/repository&gt; &lt;/repositories&gt; </code></pre> "
  },
  {
    "Id": "61753872",
    "PostTypeId": "1",
    "AcceptedAnswerId": "61758491",
    "CreationDate": "2020-05-12T14:07:37.297",
    "Score": "1",
    "ViewCount": "1114",
    "Body": "<p>I am using the fabric8 docker-maven-plugin to build image for my Spring boot microservices.</p>  <pre><code>&lt;groupId&gt;io.fabric8&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; </code></pre>  <p>The problem is that while running the application in docker containers I have to specify the Eureka Server Container name to Eureka Client. But if I run it directly as a 'Spring Boot APP' I have to use 'Localhost:8761/Eureka'. Is there a way to make it work both with/without docker something like given below ?</p>  <pre><code>eureka:   client:     service-url:       defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka} </code></pre>  <p>I am not able to pass the value of 'EUREKA_SERVER' from the fabrib8 plugin. I have tried the below code to pass the value but it does not work.</p>  <pre><code>&lt;docker.env.JAVA_OPTS&gt;-DEUREKA_SERVER=http://discovery:8761/eureka&lt;/docker.env.JAVA_OPTS&gt; </code></pre> ",
    "OwnerUserId": "9721761",
    "LastActivityDate": "2020-05-12T17:47:32.390",
    "Title": "How do I keep the Eureka server url dynamic in the Eureka Client while using docker?",
    "Tags": "<spring-boot><docker><docker-compose><microservices><fabric8-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Spring can pickup Environment Variables. So if you add Environment Variables to the Docker Container that Spring Boot is running in, they will work. This avoids the need to provide a static URL up front.</p>  <p>If you use Docker Compose, it could look like this:</p>  <pre><code>services:   eureka:     image: springcloud/eureka     container_name: eureka     ports:       - '8761:8761'     networks:       - 'discovery'     environment:       - EUREKA_INSTANCE_PREFERIPADDRESS=true    spring:     build:       context: .       dockerfile: ./src/main/docker/Dockerfile     depends_on:       - eureka     container_name: spring     ports:      - '8080:8080'     networks:      - 'discovery'     environment:       - EUREKA_SERVICE_URL=http://eureka:8761 // This overrides your Spring Property       - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true       - LOGGING_FILE=/tmp/admin.log </code></pre>  <p>Note: Since Environment Variables are not YAML, you need to change the format a bit. <a href='https://docs.spring.io/spring-boot/docs/1.5.5.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding' rel='nofollow noreferrer'>https://docs.spring.io/spring-boot/docs/1.5.5.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding</a></p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "63618494",
    "PostTypeId": "1",
    "CreationDate": "2020-08-27T14:42:25.747",
    "Score": "1",
    "ViewCount": "305",
    "Body": "<p>I am establishing inter communication with Micro services in a Spring boot application. The response is generated in JSON format and logged in log file using logback.xml. This is further leveraged on ELK side with docker-maven plugins. While performing mvn clean install, it throws exception during creation of docker image through pom.xml</p> <p>Error stack :</p> <blockquote> <p>Caused by: com.spotify.docker.client.exceptions.DockerException: com.spotify.docker.client.shaded.com.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens at [Source: (File); line: 1, column: 2] at com.spotify.docker.client.auth.ConfigFileRegistryAuthSupplier.authForBuild (ConfigFileRegistryAuthSupplier.java:108) at com.spotify.docker.client.auth.MultiRegistryAuthSupplier.authForBuild (MultiRegistryAuthSupplier.java:77) at com.spotify.docker.client.DefaultDockerClient.build (DefaultDockerClient.java:1483) at com.spotify.docker.client.DefaultDockerClient.build (DefaultDockerClient.java:1460) at com.spotify.plugin.dockerfile.BuildMojo.buildImage (BuildMojo.java:240) at com.spotify.plugin.dockerfile.BuildMojo.execute (BuildMojo.java:135) at com.spotify.plugin.dockerfile.AbstractDockerMojo.tryExecute (AbstractDockerMojo.java:265) at com.spotify.plugin.dockerfile.AbstractDockerMojo.execute (AbstractDockerMojo.java:254) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137) at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)</p> </blockquote> <p>pom.xml:</p> <pre><code>&lt;!-- Dockerfile from Spotify --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;1.4.11&lt;/version&gt;                 &lt;configuration&gt;                     &lt;repository&gt;${docker.image.prefix}/${project.artifactId}&lt;/repository&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;default&lt;/id&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt; </code></pre> <p>I debugged code and found the cause of error. This is caused in below method at line highlighted:</p> <pre><code>private List&lt;Comment&gt; findCommentsForFeed(Feeds feed) {         log.info(&quot;Finding comments of feed with id {}&quot;, feed.getId());                  String url = UriComponentsBuilder.fromHttpUrl(commentServiceBaseUrl).path(&quot;comments&quot;)                 .queryParam(&quot;feedId&quot;, feed.getId()).toUriString();          // ** THIS LINE CAUSES ERROR... **         ResponseEntity&lt;List&lt;Comment&gt;&gt; response = restTemplate.exchange(url, HttpMethod.GET, null,                 new ParameterizedTypeReference&lt;List&lt;Comment&gt;&gt;() {                 });          List&lt;Comment&gt; comments = Objects.isNull(response.getBody()) ? new ArrayList&lt;&gt;() : response.getBody();         log.info(&quot;Found {} comment(s) of feed with id {}&quot;, comments.size(), feed.getId());         return comments;     } </code></pre> <p>My controller looks like :</p> <pre><code>@RestController @RequiredArgsConstructor @RequestMapping(value = &quot;/feeds&quot;, produces = MediaType.APPLICATION_JSON_VALUE) public class FeedController {      @Autowired     private final FeedService service;      @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)     public ResponseEntity&lt;List&lt;Feeds&gt;&gt; getFeeds() {         List&lt;Feeds&gt; feeds = service.getFeeds();         return ResponseEntity.ok(feeds);     }      @GetMapping(path = &quot;/{id}&quot;, produces = MediaType.APPLICATION_JSON_VALUE)     public ResponseEntity&lt;FeedWithComment&gt; getFeed(@PathVariable Long id) {         FeedWithComment feedWithComments = service.getFeed(id).orElseThrow(ResourceNotFoundException::new);         return ResponseEntity.ok(feedWithComments);     } </code></pre> <p>My logback.xml file for json output appears like:</p> <pre><code>&lt;springProfile name=&quot;docker&quot;&gt;      &lt;appender name=&quot;jsonConsoleAppender&quot;         class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;         &lt;encoder             class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;             &lt;providers&gt;                 &lt;timestamp&gt;                     &lt;timeZone&gt;UTC&lt;/timeZone&gt;                 &lt;/timestamp&gt;                 &lt;version /&gt;                 &lt;logLevel /&gt;                 &lt;message /&gt;                 &lt;loggerName /&gt;                 &lt;threadName /&gt;                 &lt;context /&gt;                 &lt;pattern&gt;                     &lt;omitEmptyFields&gt;true&lt;/omitEmptyFields&gt;                     &lt;pattern&gt;                         {                         &quot;trace&quot;: {                         &quot;trace_id&quot;: &quot;%mdc{X-B3-TraceId}&quot;,                         &quot;span_id&quot;:                         &quot;%mdc{X-B3-SpanId}&quot;,                         &quot;parent_span_id&quot;: &quot;%mdc{X-B3-ParentSpanId}&quot;,                         &quot;exportable&quot;: &quot;%mdc{X-Span-Export}&quot;                         }                         }                     &lt;/pattern&gt;                 &lt;/pattern&gt;                 &lt;mdc&gt;                     &lt;excludeMdcKeyName&gt;traceId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;spanId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;parentId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;spanExportable&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;X-B3-TraceId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;X-B3-SpanId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;X-B3-ParentSpanId&lt;/excludeMdcKeyName&gt;                     &lt;excludeMdcKeyName&gt;X-Span-Export&lt;/excludeMdcKeyName&gt;                 &lt;/mdc&gt;                 &lt;stackTrace /&gt;             &lt;/providers&gt;         &lt;/encoder&gt;     &lt;/appender&gt;      &lt;root level=&quot;INFO&quot;&gt;         &lt;appender-ref ref=&quot;jsonConsoleAppender&quot; /&gt;     &lt;/root&gt;  &lt;/springProfile&gt; </code></pre> ",
    "OwnerUserId": "3397979",
    "LastEditorUserId": "569662",
    "LastEditDate": "2020-08-30T09:58:47.080",
    "LastActivityDate": "2020-09-08T05:28:29.873",
    "Title": "Illegal character causes spring boot microservice build to fail during creation of docker image",
    "Tags": "<spring-boot><docker-compose><microservices><elastic-stack><maven-docker-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I did some analysis and found the issue is because of Spring boot version. There has been changes in directory structure of Spring boot after the introduction of Springboot 2.3.0. I am using Spring boot version 2.3.3.  I did some changes in dockerfile and it worked. Maven docker plugin successfully created the image. Dockerfile :</p> <pre><code>FROM adoptopenjdk/openjdk14 as builder  WORKDIR application ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} application.jar RUN java -Djarmode=layertools -jar application.jar extract  FROM adoptopenjdk/openjdk14 WORKDIR application COPY --from=builder application/dependencies/ ./ COPY --from=builder application/snapshot-dependencies/ ./ COPY --from=builder application/spring-boot-loader/ ./ COPY --from=builder application/application/ ./ ENTRYPOINT [&quot;java&quot;, &quot;-Dspring.profiles.active=docker&quot;, &quot;org.springframework.boot.loader.JarLauncher&quot;] </code></pre> "
  },
  {
    "Id": "67091667",
    "PostTypeId": "1",
    "CreationDate": "2021-04-14T12:20:57.167",
    "Score": "1",
    "ViewCount": "807",
    "Body": "<p>I have a docker compose file where i have two services the <code>flamup</code> service is used for building my spring boot application and links to a postgres image defined by the <code>db</code> service.</p> <p>Here's the docker-compose.yml file</p> <pre><code>version: '3.8'   volumes:   postgres_data:  services:    flamup:     build: .     container_name: flamup     environment:       - DB_SERVER=db       - POSTGRES_DB=flamup       - POSTGRES_USER=postgres       - POSTGRES_PASSWORD=postgres     ports:       - &quot;8080:8080&quot; # Forward the exposed port 8080 on the container to port 8080 on the host machine     depends_on:       - db     links:       - db      db:     image: &quot;postgres:9.6-alpine&quot;     container_name: postgres_container     restart: always      volumes:       - postgres_data:/var/lib/postgresql/data      ports:       - &quot;5432:5432&quot;      environment:       - POSTGRES_DB=flamup       - POSTGRES_USER=postgres       - POSTGRES_PASSWORD=postgres       - PGDATA=/var/lib/postgresql/data/pgdata </code></pre> <p>Here's the Dockerfile for the spring boot application</p> <pre><code>FROM maven:3.6.1-jdk-8-slim AS build RUN mkdir -p workspace WORKDIR workspace COPY pom.xml /workspace COPY src /workspace/src COPY frontend /workspace/frontend COPY data2.csv /workspace RUN mvn -f pom.xml clean package #RUN ./mvnw clean package -DskipTests  #FROM adoptopenjdk/openjdk11:alpine-jre FROM openjdk:8-alpine COPY --from=build /workspace/target/*.jar app.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;] </code></pre> <p>I am using the <a href='https://github.com/eirslett/frontend-maven-plugin' rel='nofollow noreferrer'>frontend-maven-plugin</a> for bootstrapping the frontend with the spring boot application. Everything works fine locally.</p> <p>However when i try to run it via docker-compose i made some changes in the application-properties.yml</p> <pre><code>server:   error:     include-message: always     include-binding-errors: always   spring:   datasource:     url : jdbc:postgresql://${DB_SERVER}/${POSTGRES_DB}     username : ${POSTGRES_USER}     password : ${POSTGRES_PASSWORD}    jpa:     hibernate:       ddl-auto: create     properties:       hibernate:         dialect: org.hibernate.dialect.PostgreSQLDialect         format_sql: true         jdbc:           lob:             non_contextual_creation: true     show-sql: true    session:     store-type: jdbc     jdbc:       table-name: SPRING_SESSION       initialize-schema: never </code></pre> <p>However the build get's failed everytime, because of this</p> <pre><code>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.JDBCConnectionException: Unable to open JDBC Connection for DDL execution Caused by: javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.JDBCConnectionException: Unable to open JDBC Connection for DDL execution Caused by: org.hibernate.exception.JDBCConnectionException: Unable to open JDBC Connection for DDL execution Caused by: org.postgresql.util.PSQLException: The connection attempt failed. Caused by: java.net.UnknownHostException: ${DB_SERVER} </code></pre> <p>Things i have tried</p> <ul> <li>Hard coding the <code>DB_SERVER</code> variable and replacing with <code>localhost:5432</code> , <code>db</code> , <code>db:5432</code>. None of the seems to work.</li> <li>Adding depends on field in the <code>flamup</code> service.</li> <li>Adding networks field in both the services and connecting them via a bridge.</li> <li>Tried different versions of postgres and maven</li> </ul> <p>Nothing seems to be the solution, any help will be highly appreciated.</p> ",
    "OwnerUserId": "8143504",
    "LastActivityDate": "2021-04-15T14:11:59.923",
    "Title": "Proper setup of docker compose with spring boot and postgres",
    "Tags": "<postgresql><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>So  a working solution to the problem ( though may not be that efficient ), is running the maven build by skipping the tests. Apparently hibernate results in running the JPA statements which results in failure of JDBC postgres exception as there is yet no container of postgres running.</p> <p>Thus changing the dockerfile to</p> <pre><code>RUN mvn -f pom.xml clean install -DskipTests=true </code></pre> <p>instead of</p> <pre><code>RUN mvn -f pom.xml clean package </code></pre> <p>caused in successful creation of the jar file which could be run as a docker container.</p> "
  },
  {
    "Id": "67224788",
    "PostTypeId": "1",
    "CreationDate": "2021-04-23T06:11:34.523",
    "Score": "1",
    "ViewCount": "291",
    "Body": "<p>I am using latest Jhipster vesion v7.0.1 and generated monolithic client application [angular] and separate monolithic server application. I want to create separate docker image for these two application. But observed that <strong>Docker Folder</strong> is not generated in client application.</p> <p>Can any one please help me here to achieve this dockerization.</p> ",
    "OwnerDisplayName": "user3770669",
    "LastEditorDisplayName": "user3770669",
    "LastEditDate": "2021-04-23T10:53:03.210",
    "LastActivityDate": "2021-04-23T10:53:03.210",
    "Title": "How to dockerize Jhipster monolothic Angular application as docker folder is missing in Client application",
    "Tags": "<docker-compose><dockerfile><jhipster><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "67888577",
    "PostTypeId": "1",
    "CreationDate": "2021-06-08T14:01:15.627",
    "Score": "1",
    "ViewCount": "307",
    "Body": "<p>I was given a multy-steps task and im stuck !!</p> <p>im trying to connect my Java container to my MYSQL container,but im getting <strong>503 ERROR</strong></p> <pre><code>HTTP ERROR 503 Problem accessing /. Reason:     Service Unavailable </code></pre> <p>docker-compose file :</p> <pre><code>version: &quot;3.3&quot;   services:      lavagna:         build: .         ports:             - &quot;8080:8080&quot;         networks:              - back_net         depends_on:             - my_db         environment:              spring.datasource.url: &quot;jdbc:mysql://my-db:3306/lavagna&quot;      my_db:          image: mysql:5.7         ports:              - &quot;3306:3306&quot;          networks:              - back_net         volumes:              - $PWD/mysql:/var/lib/mysql         environment:              MYSQL_ROOT_PASSWORD: 123             MYSQL_USER: eyal             MYSQL_PASSWORD: 123 networks:      back_net:         driver: bridge </code></pre> <p>I got the JAVA src files,i just used maven localy to build it and use target for the Java Dockerfile</p> <p>java app dockerfile :</p> <pre><code>FROM openjdk:8-jre-alpine EXPOSE 8080 COPY ./target/. . COPY ./entrypoint.sh .  ENV DB_DIALECT MYSQL ENV DB_URL jdbc:mysql://localhost:3306/lavagna ENV DB_USER &quot;root&quot; ENV DB_PASS &quot;123&quot; ENV SPRING_PROFILE dev RUN apk update \\     &amp;&amp; apk add ca-certificates \\     &amp;&amp; update-ca-certificates &amp;&amp; apk add openssl RUN chmod 774 entrypoint.sh ENTRYPOINT [ &quot;./entrypoint.sh&quot; ] </code></pre> ",
    "OwnerUserId": "15648070",
    "LastActivityDate": "2021-06-08T21:06:50.570",
    "Title": "Java container cant connect to MYSQL container with docker-compose",
    "Tags": "<java><mysql><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I think you need a combination of comments and answers given already. Your containers are on the same network, so it appears to boil down to configuration.</p> <p>In your docker file update your DB_URL to:</p> <p><code>ENV DB_URL jdbc:mysql://my_db:3306/lavagna</code></p> <p>If you use localhost your container will loopback to itself, and never hit the network.</p> <p>In your docker-compose yml file, you have a typo in the url, try updating to:</p> <p><code>spring.datasource.url: &quot;jdbc:mysql://my_db:3306/lavagna&quot;</code></p> <p>As an aside, using <code>depends_on</code> does not wait for the service to be ready. It simply dictates start order as the <a href='https://docs.docker.com/compose/compose-file/compose-file-v3/#depends_on' rel='nofollow noreferrer'>documentation states</a>:</p> <blockquote> <p>There are several things to be aware of when using depends_on:</p> <p>depends_on does not wait for db and redis to be \u201cready\u201d before starting web - only until they have been started. If you need to wait for a service to be ready...</p> </blockquote> "
  },
  {
    "Id": "68014528",
    "PostTypeId": "1",
    "AcceptedAnswerId": "68029801",
    "CreationDate": "2021-06-17T07:09:07.420",
    "Score": "1",
    "ViewCount": "1926",
    "Body": "<p><em>War</em> file generated successfully using <code>mvn clean install</code>, Then tried with  <code>docker compose up --build</code> in terminal.The logs in terminal shows that there is no tables created and unable to reach endpoints properly using postman, tomcat is in unreachable state, because of improper deployment of war file. I need a solution to connect the database with the server and to reach the endpoints. I don't find any helpful information to solve this issue.Help me to attain proper deployment.</p> <p><a href='https://i.stack.imgur.com/SVOSG.png' rel='nofollow noreferrer'>File structure</a></p> <p><strong>pom.xml</strong></p>  <p></p> <pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.5.0&lt;/version&gt;     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.demo&lt;/groupId&gt; &lt;artifactId&gt;EcomApplication&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;EcomApplication&lt;/name&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt;     &lt;java.version&gt;11&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;         &lt;artifactId&gt;lombok&lt;/artifactId&gt;         &lt;optional&gt;true&lt;/optional&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.postgresql&lt;/groupId&gt;         &lt;artifactId&gt;postgresql&lt;/artifactId&gt;         &lt;scope&gt;runtime&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;junit&lt;/groupId&gt;         &lt;artifactId&gt;junit&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;  &lt;build&gt;     &lt;finalName&gt;ecom&lt;/finalName&gt;     &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.4.2&lt;/version&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;      &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p><strong>Terminal logs:</strong></p> <pre><code>sowbharnika@SowbharnikasMBP EcomApplication % docker compose up --build  [+] Building 4.7s (11/11) FINISHED                                                                                                                                       =&gt; [itomcat-ecom internal] load build definition from Dockerfile                                                                                                 0.0s  =&gt; =&gt; transferring dockerfile: 217B                                                                                                                              0.0s  =&gt; [ipostgres-ecom internal] load build definition from Dockerfile                                                                                               0.0s  =&gt; =&gt; transferring dockerfile: 137B                                                                                                                              0.0s  =&gt; [itomcat-ecom internal] load .dockerignore                                                                                                                    0.0s  =&gt; =&gt; transferring context: 2B                                                                                                                                   0.0s  =&gt; [ipostgres-ecom internal] load .dockerignore                                                                                                                  0.0s  =&gt; =&gt; transferring context: 2B                                                                                                                                   0.0s  =&gt; [itomcat-ecom internal] load metadata for docker.io/library/tomcat:8.0-jre8                                                                                   3.1s  =&gt; [ipostgres-ecom internal] load metadata for docker.io/library/postgres:10.2                                                                                   3.1s  =&gt; CACHED [ipostgres-ecom 1/1] FROM docker.io/library/postgres:10.2@sha256:7361bae1fbf5642099663d1f02dc949cabde1f86727bf8ff00d0a8806640a617                      0.0s  =&gt; [itomcat-ecom] exporting to image                                                                                                                             0.2s  =&gt; =&gt; exporting layers                                                                                                                                           0.2s  =&gt; =&gt; writing image sha256:388cf029752f4cac431dfb8eb41170dbd547bdb25e2542222d85355af59d96ed                                                                      0.0s  =&gt; =&gt; naming to docker.io/library/ipostgres-ecom                                                                                                                 0.0s  =&gt; =&gt; writing image sha256:619f0674184633b5b1c4c81d08fc714b42625b547bd341486f321e706c75f744                                                                      0.0s  =&gt; =&gt; naming to docker.io/library/itomcat-ecom                                                                                                                   0.0s  =&gt; [itomcat-ecom internal] load build context                                                                                                                    1.0s  =&gt; =&gt; transferring context: 37.56MB                                                                                                                              1.0s  =&gt; CACHED [itomcat-ecom 1/2] FROM docker.io/library/tomcat:8.0-jre8@sha256:268403c3fa09afd9310ced7e83ac021927dca0f04a394a80a0b0220f62e056ed                      0.0s  =&gt; [itomcat-ecom 2/2] ADD target/ecom.war /usr/local/tomcat/webapps                                                                                              0.1s  Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them [+] Running 3/2  \u283f Network ecomapplication_default        Created                                                                                                                 3.9s  \u283f Container ecomapplication_cpostgres_1  Created                                                                                                                 0.0s  \u283f Container ecomapplication_ctomcat_1    Created                                                                                                                 0.0s Attaching to cpostgres_1, ctomcat_1 cpostgres_1  | The files belonging to this database system will be owned by user &quot;postgres&quot;. cpostgres_1  | This user must also own the server process. cpostgres_1  |  cpostgres_1  | The database cluster will be initialized with locale &quot;en_US.utf8&quot;. cpostgres_1  | The default database encoding has accordingly been set to &quot;UTF8&quot;. cpostgres_1  | The default text search configuration will be set to &quot;english&quot;. cpostgres_1  |  cpostgres_1  | Data page checksums are disabled. cpostgres_1  |  cpostgres_1  | fixing permissions on existing directory /var/lib/postgresql/data ... ok cpostgres_1  | creating subdirectories ... ok cpostgres_1  | selecting default max_connections ... 100 cpostgres_1  | selecting default shared_buffers ... 128MB cpostgres_1  | selecting dynamic shared memory implementation ... posix cpostgres_1  | creating configuration files ... ok cpostgres_1  | running bootstrap script ... ok cpostgres_1  | performing post-bootstrap initialization ... ok cpostgres_1  | syncing data to disk ... ok cpostgres_1  |  cpostgres_1  | Success. You can now start the database server using: cpostgres_1  |  cpostgres_1  |     pg_ctl -D /var/lib/postgresql/data -l logfile start cpostgres_1  |  cpostgres_1  |  cpostgres_1  | WARNING: enabling &quot;trust&quot; authentication for local connections cpostgres_1  | You can change this by editing pg_hba.conf or using the option -A, or cpostgres_1  | --auth-local and --auth-host, the next time you run initdb. cpostgres_1  | waiting for server to start....2021-06-17 05:54:27.217 UTC [40] LOG:  listening on IPv4 address &quot;127.0.0.1&quot;, port 5432 cpostgres_1  | 2021-06-17 05:54:27.217 UTC [40] LOG:  could not bind IPv6 address &quot;::1&quot;: Cannot assign requested address cpostgres_1  | 2021-06-17 05:54:27.217 UTC [40] HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry. cpostgres_1  | 2021-06-17 05:54:27.221 UTC [40] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; cpostgres_1  | 2021-06-17 05:54:27.235 UTC [41] LOG:  database system was shut down at 2021-06-17 05:54:26 UTC cpostgres_1  | 2021-06-17 05:54:27.242 UTC [40] LOG:  database system is ready to accept connections cpostgres_1  |  done cpostgres_1  | server started cpostgres_1  | CREATE DATABASE cpostgres_1  |  cpostgres_1  | ALTER ROLE cpostgres_1  |  cpostgres_1  |  cpostgres_1  | /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/* cpostgres_1  |  cpostgres_1  | waiting for server to shut down....2021-06-17 05:54:27.715 UTC [40] LOG:  received fast shutdown request cpostgres_1  | 2021-06-17 05:54:27.718 UTC [40] LOG:  aborting any active transactions cpostgres_1  | 2021-06-17 05:54:27.719 UTC [40] LOG:  worker process: logical replication launcher (PID 47) exited with exit code 1 cpostgres_1  | 2021-06-17 05:54:27.723 UTC [42] LOG:  shutting down cpostgres_1  | 2021-06-17 05:54:27.744 UTC [40] LOG:  database system is shut down cpostgres_1  |  done cpostgres_1  | server stopped cpostgres_1  |  cpostgres_1  | PostgreSQL init process complete; ready for start up. cpostgres_1  |  cpostgres_1  | 2021-06-17 05:54:27.828 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432 cpostgres_1  | 2021-06-17 05:54:27.828 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432 cpostgres_1  | 2021-06-17 05:54:27.832 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; cpostgres_1  | 2021-06-17 05:54:27.845 UTC [67] LOG:  database system was shut down at 2021-06-17 05:54:27 UTC cpostgres_1  | 2021-06-17 05:54:27.852 UTC [1] LOG:  database system is ready to accept connections ctomcat_1    | Listening for transport dt_socket at address: 18000 ctomcat_1    | 17-Jun-2021 05:54:32.012 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.0.53 ctomcat_1    | 17-Jun-2021 05:54:32.017 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Jun 29 2018 14:42:45 UTC ctomcat_1    | 17-Jun-2021 05:54:32.017 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.0.53.0 ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            5.10.25-linuxkit ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64 ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/lib/jvm/java-8-openjdk-amd64/jre ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_181-8u181-b13-1~deb9u1-b13 ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation ctomcat_1    | 17-Jun-2021 05:54:32.018 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat ctomcat_1    | 17-Jun-2021 05:54:32.019 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat ctomcat_1    | 17-Jun-2021 05:54:32.019 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties ctomcat_1    | 17-Jun-2021 05:54:32.019 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager ctomcat_1    | 17-Jun-2021 05:54:32.019 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048 ctomcat_1    | 17-Jun-2021 05:54:32.019 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -agentlib:jdwp=transport=dt_socket,address=18000,server=y,suspend=n ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs= ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp ctomcat_1    | 17-Jun-2021 05:54:32.020 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library 1.2.17 using APR version 1.5.2. ctomcat_1    | 17-Jun-2021 05:54:32.021 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true]. ctomcat_1    | 17-Jun-2021 05:54:32.026 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized (OpenSSL 1.1.0f  25 May 2017) ctomcat_1    | 17-Jun-2021 05:54:32.198 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;http-apr-8080&quot;] ctomcat_1    | 17-Jun-2021 05:54:32.212 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;ajp-apr-8009&quot;] ctomcat_1    | 17-Jun-2021 05:54:32.214 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 863 ms ctomcat_1    | 17-Jun-2021 05:54:32.270 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service Catalina ctomcat_1    | 17-Jun-2021 05:54:32.270 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.0.53 ctomcat_1    | 17-Jun-2021 05:54:32.320 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive /usr/local/tomcat/webapps/ecom.war ctomcat_1    | 17-Jun-2021 05:54:33.034 WARNING [localhost-startStop-1] org.apache.tomcat.util.descriptor.web.WebXml.setVersion Unknown version string [4.0]. Default version will be used. ctomcat_1    | 17-Jun-2021 05:54:33.037 WARNING [localhost-startStop-1] org.apache.tomcat.util.descriptor.web.WebXml.setVersion Unknown version string [4.0]. Default version will be used. ctomcat_1    | 17-Jun-2021 05:54:35.180 INFO [localhost-startStop-1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time. ctomcat_1    | 17-Jun-2021 05:54:35.450 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployWAR Deployment of web application archive /usr/local/tomcat/webapps/ecom.war has finished in 3,130 ms ctomcat_1    | 17-Jun-2021 05:54:35.452 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/examples ctomcat_1    | 17-Jun-2021 05:54:35.651 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/examples has finished in 198 ms ctomcat_1    | 17-Jun-2021 05:54:35.651 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/manager ctomcat_1    | 17-Jun-2021 05:54:35.682 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/manager has finished in 31 ms ctomcat_1    | 17-Jun-2021 05:54:35.683 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/ROOT ctomcat_1    | 17-Jun-2021 05:54:35.701 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/ROOT has finished in 18 ms ctomcat_1    | 17-Jun-2021 05:54:35.701 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/host-manager ctomcat_1    | 17-Jun-2021 05:54:35.727 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/host-manager has finished in 25 ms ctomcat_1    | 17-Jun-2021 05:54:35.727 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/tomcat/webapps/docs ctomcat_1    | 17-Jun-2021 05:54:35.744 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/tomcat/webapps/docs has finished in 17 ms ctomcat_1    | 17-Jun-2021 05:54:35.763 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-apr-8080&quot;] ctomcat_1    | 17-Jun-2021 05:54:35.788 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-apr-8009&quot;] ctomcat_1    | 17-Jun-2021 05:54:35.799 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 3584 ms </code></pre> <p>While debugging tomcat container logs doesn\u2019t show any error stating the problem in reaching tomcat server.So it is difficult to debug.</p> <p><strong>Postman</strong></p> <p><a href='https://i.stack.imgur.com/cFQT8.png' rel='nofollow noreferrer'>Endpoint status</a></p> <p><strong>Docker Compose File</strong></p> <pre><code>version: '2' services:   ctomcat:     build:       context: .       dockerfile: ./docker/tomcat/Dockerfile     ports:       - &quot;8080:8080&quot;       - &quot;18000:18000&quot;     image: itomcat-ecom     depends_on:       - cpostgres    cpostgres:     build:       context: &quot;./docker/postgres&quot;     restart: always     image: ipostgres-ecom     ports:       - 15432:5432 </code></pre> <p><strong>Docker File for postgres</strong></p> <pre><code>FROM postgres:10.2 ENV POSTGRES_USER postgres ENV POSTGRES_PASSWORD password ENV POSTGRES_DB ecomdb </code></pre> <p><strong>Docker File for tomcat</strong></p> <pre><code>FROM tomcat:8.0-jre8 ADD target/ecom.war /usr/local/tomcat/webapps ENV JPDA_ADDRESS 18000 ENV JPDA_TRANSPORT=dt_socket EXPOSE 8080 EXPOSE 18000 CMD [&quot;catalina.sh&quot;, &quot;jpda&quot;, &quot;run&quot;] </code></pre> <p><strong>application.properties</strong></p> <pre><code>spring.datasource.url=jdbc:postgresql://cpostgres:5432/ecomdb spring.datasource.username=postgres spring.datasource.password=password spring.datasource.initialization-mode=always spring.datasource.initialize=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.show_sql=true </code></pre> ",
    "OwnerUserId": "16249330",
    "LastEditorUserId": "15746199",
    "LastEditDate": "2021-06-21T13:12:53.583",
    "LastActivityDate": "2021-10-08T08:47:47.707",
    "Title": "Unable to reach tomcat, war file not deployed while integrating with docker",
    "Tags": "<postgresql><maven><tomcat><docker-compose><war-filedeployment>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>In Docker compose file, pulled image for tomcat is having different version which does support particular java versions only. Therefore, either you change tomcat image version file which supports Java version 11(in pom file) or change Java version as mentioned below:</p> <p>In POM file under properties do changes as such -</p> <pre><code>&lt;properties&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; </code></pre> <blockquote> <p><em><strong>Error shown in terminal logs is tough to debug as it does not show any error at all instead of it, it completely ignores the artifactId if it can't be deployed.</strong></em></p> </blockquote> <p><strong>Note</strong></p> <p>Three things we need to make sure\u2026</p> <ol> <li><p>War should be copied to the correct directory inside tomcat as - <em><strong>(/usr/local/tomcat/webapps)</strong></em>.</p> </li> <li><p>Make sure your java version matches the tomcat image you are are using.</p> </li> <li><p>Make sure your sprint boot application class is proper and has implemented <em><strong>SpringBootServletInitializer</strong></em></p> </li> </ol> <ul> <li></li> </ul> <blockquote> <p>After doing above mentioned changes, project will get deployed successfully, will get connected to database &amp; will access endpoints as well.</p> </blockquote> <ul> <li></li> </ul> ",
    "highest_rated_answer": null
  },
  {
    "Id": "68478399",
    "PostTypeId": "1",
    "CreationDate": "2021-07-22T02:22:18.650",
    "Score": "1",
    "ViewCount": "898",
    "Body": "<p>I know there is a way to pass parameters in maven through the POM.</p> <p><strong>POM MAVEN</strong></p> <pre><code>&lt;properties&gt;     &lt;webproperty&gt; ${webproperty} &lt;/webproperty&gt; &lt;/properties&gt; </code></pre> <p><strong>COMMAND LINE WITH MAVEN</strong></p> <pre><code>mvn install &quot;-Dwebproperty=chrome&quot; </code></pre> <p>I recently switched over to Docker and I was wondering if there was still a way to pass the parameters through the POM? I was looking at some examples and was wondering if I was going about it the right way.</p> <p><strong>Docker YAML</strong></p> <pre><code> build:     image: something/webtest      environment:      - HUB_HOST=hub     browser:      - BROWSER=${BROWSER_TYPE} </code></pre> <p><strong>COMMAND LINE WITH DOCKER</strong></p> <pre><code>docker-compose up BROWSER_TYPE=chrome </code></pre> <p>Also will this command still work.</p> <pre><code>System.getProperty(&quot;BROWSER_TYPE&quot;); </code></pre> <p>Thanks in advance!</p> ",
    "OwnerUserId": "10271874",
    "LastActivityDate": "2021-07-24T02:08:12.507",
    "Title": "Passing parameters in docker-compose and into POM",
    "Tags": "<java><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The pom's parameters can not be passed in out side of pom xml. I think you can use a template file to generate each pom file seperately.</p> "
  },
  {
    "Id": "68703466",
    "PostTypeId": "1",
    "AcceptedAnswerId": "68703793",
    "CreationDate": "2021-08-08T18:04:36.183",
    "Score": "1",
    "ViewCount": "1042",
    "Body": "<p>Hello I'm starting with docker and docker compose and I have the following problem:</p> <p>I'm working in a spring micro services architecture where I have one configuration service, one discovery service, one gateway service and multiple resource services. To run these services, I build jar files, which I place in separated folder per service with their config files (application.yml and bootstrap.yml): e.g:</p> <ul> <li><p>config-service/</p> <ul> <li>config-service.jar</li> <li>application.yml</li> </ul> </li> <li><p>discovery-service/</p> <ul> <li>discovery-service.jar</li> <li>bootstrap.yml</li> </ul> </li> <li><p>gateway-service/</p> <ul> <li>gateway-service.jar</li> <li>bootstrap.yml</li> </ul> </li> <li><p>crm-service/</p> <ul> <li>crm-service.jar</li> <li>bootstrap.yml</li> </ul> </li> </ul> <p>This works so far on my server.</p> <p>Now I want to deploy my services in different environments as docker images (created with mvn build image and buildpack) using docker compose, where the configuration files vary depending on the environment. How can I deploy a service as a container using an existing image but with a different configuration file?</p> <p>Thank you in advance!</p> ",
    "OwnerUserId": "8182381",
    "LastActivityDate": "2021-08-08T18:46:30.750",
    "Title": "Run spring boot docker image with a different configuration in docker compose",
    "Tags": "<spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>There are a few possibilities when handling configuration in a containerized environment.</p> <p>One of the options is that Spring boot allows you to use environment variables for each application property. For example, let's say you have a <code>spring.datasource.url</code> property, in that case you could also define that property by setting a <code>SPRING_DATASOURCE_URL</code> environment variable:</p> <pre class='lang-yaml prettyprint-override'><code>version: '3.8'  services:   my-spring-boot-app:     image: my-image:0.0.1     environment:       - SPRING_DATASOURCE_URL=jdbc:my-database-url </code></pre> <p>Alternatively, you could use volumes to put an external file on a specific location within a container:</p> <pre class='lang-yaml prettyprint-override'><code>version: '3.8'  services:   my-spring-boot-app:     image: my-image:0.0.1     volumes:       ./my-app/bootstrap.yml:/etc/my-app/bootstrap.yml </code></pre> <p>In this example I'm copying<code>bootstrap.yml</code> from a relative folder on my host machine, to <code>/etc/my-app</code> within the container. If you put these files within the same folder as your JAR file, you can override the configuration.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "69821844",
    "PostTypeId": "1",
    "CreationDate": "2021-11-03T08:39:10.217",
    "Score": "1",
    "ViewCount": "1021",
    "Body": "<p>So I know that there are a lot of tutorials on the topics, both docker and maven, but I'm having some confusion in combining them alltogether.</p> <p>I created a multi-module Maven project with 2 modules, 2 spring applications, let's call them application 1 and application 2.</p> <p>Starting each other via IntelliJ IDEA green &quot;run&quot; button works fine, now I'd like to automate things and run via docker.</p> <p>I have Dockerfiles that looks the same in both cases: (in both modules it's the same, only JAR name's different)</p> <pre><code>FROM adoptopenjdk:11-jre-hotspot MAINTAINER *my name here lol* ADD https://github.com/ufoscout/docker-compose-wait/releases/download/2.9.0/wait /wait RUN chmod +x /wait ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} application1-0.0.1-SNAPSHOT-jar-with-dependencies.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/application1-0.0.1-SNAPSHOT-jar-with-dependencies.jar&quot;] CMD /wait &amp;&amp; /*.jar </code></pre> <p>I also have docker-compose:</p> <pre><code>version: '2.1' services:   application1:     container_name: app1     build:       context: ../app1     image: docker.io/myname/app1:latest     hostname: app1     ports:       - &quot;8080:8080&quot;     networks:       - spring-cloud-network-app1   application2:     container_name: app2     build:       context: ../app2     depends_on:       application1:         condition: service_started     links:       - application1     image: docker.io/myname/app2:latest     environment:       WAIT_HOSTS: application1:8080     ports:       - &quot;8070:8070&quot;     networks:       - spring-cloud-network-app2 networks:   spring-cloud-network-app1:     driver: bridge   spring-cloud-network-app2:     driver: bridge </code></pre> <p>What I do currently is:</p> <ul> <li>I run maven package for each module and receive files like &quot;application1(-2)-0.0.1-SNAPSHOT-jar-with-dependencies.jar&quot; in both target folders.</li> <li>&quot;docker build -t springio/app1 .&quot;</li> <li>&quot;docker-compose up --build&quot;</li> </ul> <p>And it works, but I feel I do some extra steps. How can I do the project so that I ONLY have to run docker compose? (after each time I change things in the code)</p> <p>Again, I know it's a quite simple thing but I kinda lost the logic.</p> <p>Thanks!</p> <p>P.S Ah, and about the &quot;...docker-compose-wait/releases/download/2.9.0/wait /wait&quot; It's important that app start one after another, tried different solutions, unfortunately, doesn't really work as good as I would like to. But I guess I'll leave it as is.</p> ",
    "OwnerUserId": "11621971",
    "LastActivityDate": "2021-11-07T08:56:49.183",
    "Title": "How do I have my jar re-deployed and put into docker image every time I run compose?",
    "Tags": "<spring-boot><docker><maven><kotlin><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>So, again, if anyone ever wonders how to do the things I asked, here's the answer: you need multi-stage build Dockerfile. It'll look like this:</p> <pre><code># # Build stage # FROM maven:3.6.0-jdk-11-slim AS build COPY src /home/app/src COPY pom.xml /home/app RUN mvn -f /home/app/pom.xml clean package  # # Package stage # FROM openjdk:11-jre-slim COPY --from=build /home/app/target/demo-0.0.1-SNAPSHOT.jar /usr/local/lib/demo.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/lib/demo.jar&quot;] </code></pre> <p>What it does is it basically first creates a jar file, copies it into package stage and eventually runs. That's allow you to run your app in docker by running only docker compose.</p> "
  },
  {
    "Id": "70205555",
    "PostTypeId": "1",
    "AcceptedAnswerId": "70247994",
    "CreationDate": "2021-12-02T19:43:56.237",
    "Score": "1",
    "ViewCount": "2973",
    "Body": "<p>When Spring Boot application first starts, the liquibase should create a user for runtime usage. The password should be configurable, so that it could vary across environments. I am trying to achieve that like this:</p> <pre class='lang-xml prettyprint-override'><code>    &lt;changeSet id=&quot;2021-12-02 12:00:01&quot; author=&quot;author&quot; dbms=&quot;mysql&quot;&gt;         &lt;sql&gt;             CREATE USER consumer_app IDENTIFIED BY '${spring.datasource.password}';         &lt;/sql&gt;         &lt;rollback&gt;             DROP USER IF EXISTS consumer_app;         &lt;/rollback&gt;     &lt;/changeSet&gt; </code></pre> <p>and application.yml:</p> <pre class='lang-yaml prettyprint-override'><code>spring:   liquibase:     enabled: true     user: root     password: root   datasource:     url: &quot;jdbc:mysql://localhost:3306/db&quot;     username: consumer_app     password: password </code></pre> <p>And it does not work. The password is set as <code>${spring.datasource.password}</code>, not as the value of this property in application.yml. Without single quotes I get a syntax error.</p> <p>The project is built with Maven.</p> <p>The password is going to be injected from docker-compose, so having init.sql with docker-managed variables is also an option.</p> ",
    "OwnerUserId": "15555049",
    "LastEditorUserId": "15555049",
    "LastEditDate": "2021-12-02T19:56:46.850",
    "LastActivityDate": "2021-12-06T15:37:31.393",
    "Title": "How to set liquibase variables in application.yml in Spring Boot?",
    "Tags": "<spring-boot><maven><docker-compose><liquibase>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>In spring boot you are passing parameters from yaml with following example:</p> <pre class='lang-yaml prettyprint-override'><code>spring:   liquibase:     parameters:       spring.datasource.password: ${spring.datasource.password} </code></pre> <p>note that only parameters passed to <code>spring.liquibase.parameters</code> are being send to liquibase context.</p> ",
    "highest_rated_answer": "<p>You should use insert  into mysql.user instead, and use insert liquiabse balise instead of plain SQL to pass param on value.</p> "
  },
  {
    "Id": "71373673",
    "PostTypeId": "1",
    "CreationDate": "2022-03-06T19:44:57.860",
    "Score": "1",
    "ViewCount": "135",
    "Body": "<p>Ok so I'm facing an annoying issue with Traefik in Docker: it constantly throws an error <code>502: Bad Gateway</code> when I'm trying to reach my HTTP service.<br /> All I'm trying to do is add it as a simple load balancer to build 3 replicas of my Spring Boot app. The app works well when I remove anything concerning Traefik.</p> <p>My Spring Boot Controller maps <code>/api/v1</code> endpoint, which is working well without load balancing. I'm trying to map this same endpoint to Traefik, which is using port <code>:80</code>.<br /> Dashboard at <code>:8080</code> works just fine, I have no error whatsoever about my configuration mentioned in it; only problems when I'm reaching anything under <code>:80</code>.</p> <p>I have to mention that this exact same configuration (docker-compose, traefik conf, postgres db, and spring boot app) <strong>DOES WORK</strong> fine with the <em>exact</em> same <code>docker-compose.yml</code> AND <code>traefik.yml</code>, which makes my problem even weirder. Maybe the issue comes from the fact that my Spring Boot app is made of Kotlin and not the one where it's working?. Anyway, here are my files:</p> <pre><code># Dockerfile (default one generated) FROM maven:latest  WORKDIR /usr/src/app  COPY . /usr/src/app RUN mvn package  ENV PORT 5000 EXPOSE $PORT CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;mvn -Dserver.port=${PORT} spring-boot:run&quot; ] </code></pre> <pre class='lang-yaml prettyprint-override'><code># docker-compose.yml (works as-is in my other app) version: &quot;3.8&quot; services:     project:         build: .         deploy:             replicas: 3         labels:             - &quot;traefik.http.routers.project.rule=PathPrefix(`/api/v1`)&quot; # same endpoint as in my Spring controller             - &quot;traefik.http.middlewares.project.stripprefix.forceSlash=false&quot;             - &quot;traefik.http.routers.project.middlewares=project@docker&quot;      traefik:         image: traefik:latest         restart: unless-stopped         ports:             - &quot;80:80&quot;             - &quot;8080:8080&quot;         volumes:             - /var/run/docker.sock:/var/run/docker.sock             - ./traefik.yml:/etc/traefik/traefik.yml      postgres:         image: postgres:latest         container_name: postgres         ports:             - &quot;5432:5432&quot;         environment:             POSTGRES_PASSWORD: example  #    rabbitmq: #        image: rabbitmq:management-alpine #        container_name: rabbitmq #        ports: #            - &quot;5672:5672&quot; # AMQP #            - &quot;15672:15672&quot; # HTTP (Management) </code></pre> <pre class='lang-yaml prettyprint-override'><code># traefik.yml global:     checkNewVersion: true     sendAnonymousUsage: false  providers:     docker: {}  log:     level: DEBUG # temporarily  api:     insecure: true  entryPoints:     insecure:         address: &quot;:80&quot;     secure:         address: &quot;:443&quot; </code></pre> <pre class='lang-yaml prettyprint-override'><code># src/main/resources/application.yml spring:     sql.init.mode: always     datasource:         url: jdbc:postgresql://localhost:5432,postgres:5432/postgres         username: postgres         password: example     jpa:         open-in-view: false </code></pre> <pre class='lang-xml prettyprint-override'><code>&lt;!-- pom.xml --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;project&lt;/artifactId&gt;     &lt;version&gt;1.0.0&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.6.4&lt;/version&gt;         &lt;relativePath/&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;17&lt;/java.version&gt;         &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;         &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;         &lt;kotlin.version&gt;1.6.10&lt;/kotlin.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;!-- Kotlin --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;             &lt;artifactId&gt;kotlin-reflect&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;             &lt;artifactId&gt;kotlin-stdlib-jdk8&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- Spring Boot --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- PostgreSQL --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.postgresql&lt;/groupId&gt;             &lt;artifactId&gt;postgresql&lt;/artifactId&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;sourceDirectory&gt;${project.basedir}/src/main/kotlin&lt;/sourceDirectory&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;                 &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;args&gt;                         &lt;arg&gt;-Xjsr305=strict&lt;/arg&gt;                     &lt;/args&gt;                     &lt;compilerPlugins&gt;                         &lt;plugin&gt;spring&lt;/plugin&gt;                     &lt;/compilerPlugins&gt;                 &lt;/configuration&gt;                 &lt;dependencies&gt;                     &lt;dependency&gt;                         &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;                         &lt;artifactId&gt;kotlin-maven-allopen&lt;/artifactId&gt;                         &lt;version&gt;${kotlin.version}&lt;/version&gt;                     &lt;/dependency&gt;                 &lt;/dependencies&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre> <p>I'm using JDK 17, and <code>docker-compose up --build</code> to start everything. Thanks!</p> ",
    "OwnerUserId": "12070367",
    "LastActivityDate": "2022-03-06T19:44:57.860",
    "Title": "Traefik throwing error 502 with Kotlin Spring Boot application",
    "Tags": "<spring-boot><maven><kotlin><docker-compose><traefik>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "74406823",
    "PostTypeId": "1",
    "AcceptedAnswerId": "74406941",
    "CreationDate": "2022-11-11T18:34:45.280",
    "Score": "1",
    "ViewCount": "633",
    "Body": "<p>I'm building images of multiple services from <code>docker-compose.yml</code>. For eg if there are 3 services a,b &amp; c and there are changes in <code>service a</code> folder, the image would be built using the command <code>docker-compose a-service</code>. however the service in the <code>docker-compose.yml</code> file has been written in a way where it is given a build context. for e.g</p> <pre><code>services:    a-service:        container-name: a-service        build:           context: ./services/a </code></pre> <p>and this is the project file structure</p> <pre><code>java-project/ \u251c\u2500 docker-compose.yml \u251c\u2500 services/ \u2502  \u251c\u2500 a/ \u2502  \u2502  \u251c\u2500 Dockerfile \u2502  \u2502  \u251c\u2500 pom.xml \u2502  \u251c\u2500 b/ \u2502  \u2502  \u251c\u2500 pom.xml \u2502  \u2502  \u251c\u2500 Dockerfile \u251c\u2500 pom.xml </code></pre> <p>Dockerfile</p> <pre><code># # Build stage # FROM maven:3.6.3-jdk-11 as build ***fails at this steps**** RUN mvn clean install -DskipTests  # # Package stage # FROM amazoncorretto:11-alpine-jdk RUN addgroup -S spring &amp;&amp; adduser -S spring -G spring USER spring:spring ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} app.jar COPY src/main/resources/META-INF/xxx xxxx ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] </code></pre> <p>Now when the service a is built, the <code>Dockerfile</code> present in <code>service a</code> folder is referenced and also the <code>pom.xml</code> present in the <code>service a</code> folder is referenced. However, I want the <code>pom.xml</code> present in the root directory of the project to be referenced for the maven build as part of the image creation process (maven build requires the pom.xml to create jar files. These jar files would be copied to the image). I tried the following in the <code>service a</code> <code>Dockerfile</code> but still no luck. Any idea how I can achieve this? <code>RUN cd ../../pom.xml</code> or</p> <pre><code>RUN mkdir tmp-context RUN cp -R ../../pom.xml tmp-context </code></pre> <p>or <code>COPY ../../pom.xml .</code> tldr - How do i get the contents of the project in the root directory from a sub directory in a <code>Dockerfile</code></p> ",
    "OwnerUserId": "6466023",
    "LastEditorUserId": "6466023",
    "LastEditDate": "2022-11-11T20:08:32.490",
    "LastActivityDate": "2022-11-11T20:08:32.490",
    "Title": "Dockerfile - get contents of the root directory",
    "Tags": "<java><docker><maven><docker-compose><monorepo>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You can change the <code>context</code> and add the location of your <code>dockerfile</code> like so:</p> <pre class='lang-yaml prettyprint-override'><code>services:   a-service:     container-name: a-service       build:         context: ./         dockerfile: ./services/a/Dockerfile </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "75755371",
    "PostTypeId": "1",
    "CreationDate": "2023-03-16T11:04:49.210",
    "Score": "1",
    "ViewCount": "125",
    "Body": "<p>I created a spring boot (3.0) backend application and used an angular frontend for it. I want to use the frontend-maven-plugin to put the frontend in the static folder of the spring boot application. This works as long as I run the application in a local environment, but when I create a docker image of it, the frontend and backend can no longer communicate with each other due to a cors error.</p> <p>My docker-compose file looks like this:</p> <pre><code>version: '3.8'  services:   db:     image: postgres:latest     restart: always     ...    app:     image: &lt;dockerImage&gt;     restart: always     ports:       - &quot;8080:8080&quot;     depends_on:       - db  volumes:   dbdata: </code></pre> <p>In the angular application, the environment.ts contains this: <code>baseUrl: 'http://localhost:8080/api/'</code></p> <p>How to configure the frontend to be able to communicate with the backend in the docker container? I am not a frontend developer, and this is for learning purposes only :) Thank you for your answers!</p> ",
    "OwnerUserId": "8639032",
    "LastActivityDate": "2023-03-16T11:04:49.210",
    "Title": "Spring Boot - Angular - frontend-maven-plugin - Docker = cors error",
    "Tags": "<angular><spring-boot><docker-compose><frontend-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "35858740",
    "PostTypeId": "1",
    "CreationDate": "2016-03-08T04:04:28.477",
    "Score": "0",
    "ViewCount": "659",
    "Body": "<p>I am building a custom docker image from the jenkins official image. I want to install the maven to the image and exteralize maven's config file. But I failed. After the container startup, there is a empty <code>/etc/maven</code>directory. I think it may be a permission issue but I can't solve it after a half day's research.  This is my docker file:</p>  <pre><code>FROM jenkins USER root RUN apt-get update &amp;&amp; apt-get install -y maven </code></pre>  <p>What I tried then in the docker-compose.yml:</p>  <pre><code>jenkins:     build: /docker/jenkins/     volumes:         - /srv/docker/jenkins:/var/jenkins_home         - /srv/docker/maven/conf:/etc/maven:rw # the rw flag has no effect!         - /srv/docker/maven/repository/:/m2:rw </code></pre>  <p>I tried deleting the <code>/srv/docker/maven</code>directory and let the container create it on the first time it running.</p>  <p>I then tried adding a <code>VOLUME /etc/maven</code>instruction to the dockerfile before or after the <code>RUN apt-get update &amp;&amp; apt-get install -y maven</code> instruction. No use.</p>  <p>I also tried <code>chmod ugo+wx /srv/docker/maven</code> but all no effects.</p> ",
    "OwnerUserId": "5352915",
    "LastEditorUserId": "5352915",
    "LastEditDate": "2016-03-08T05:10:49.933",
    "LastActivityDate": "2016-03-08T05:10:49.933",
    "Title": "How to externalize the docker container file",
    "Tags": "<java><maven><jenkins><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>When you mount a host folder to docker container, it overwrites the container folder. Since the maven configuration files are created during image building, but volume is mounted at run time, volume will overwrite the conf files. </p>  <p>Since maven user settings overwrites global settings (see <a href='https://maven.apache.org/settings.html' rel='nofollow'>https://maven.apache.org/settings.html</a>), you can try mount the user settings folder instead.</p> "
  },
  {
    "Id": "38279998",
    "PostTypeId": "1",
    "CreationDate": "2016-07-09T08:41:23.663",
    "Score": "0",
    "ViewCount": "402",
    "Body": "<p>I've written a spring boot MAVEN application which runs on embedded tomcat server(port: 8080). I've another nodeJS express server running on port 8000. Now, from port 8000, I've proxied the port 8080. So, any address '<a href='http://localhost:8080/' rel='nofollow'>http://localhost:8080/</a>*' will take me to the code in spring boot application. I'm testing this by keeping the breakpoint in the required location in spring boot application. </p>  <p>But, after the code in the spring boot is executed, I'm getting </p>  <pre><code>XMLHttpRequest cannot load http://localhost:8080/users/?_=1468052674994. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8000' is therefore not allowed access. </code></pre>  <p>'/users/' is my request mapping in the spring boot app.</p>  <p>I just got to know that I'm supposed to 'EXPOSE' the port 8080 to the host. <a href='https://www.wouterdanes.net/2014/04/11/continuous-integration-using-docker-maven-and-jenkins.html' rel='nofollow'>https://www.wouterdanes.net/2014/04/11/continuous-integration-using-docker-maven-and-jenkins.html</a> Above article says that docker can do this. I didn't understand much to start with this. Can anybody please help me. </p> ",
    "OwnerUserId": "2155657",
    "LastEditorUserId": "2155657",
    "LastEditDate": "2016-07-09T08:48:34.013",
    "LastActivityDate": "2016-07-10T11:59:13.973",
    "Title": "XMLHttpRequest cannot load",
    "Tags": "<maven><spring-boot><xmlhttprequest><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The XMLHttpRequest is used by browsers to create Ajax requests. To prevent abuse, browsers use a 'Same Origin Policy' to prevent loading resources from different locations as the page, that causes the request. Same IP, but with different ports, as in your case, is also treated as 'different locations'.</p>  <p>You can solve this problem using special headers on the page loading the request. This may sound very complicated, but its is understandable explained at</p>  <p><a href='https://en.wikipedia.org/wiki/Same-origin_policy' rel='nofollow'>Same-origin_policy</a> and <a href='https://en.wikipedia.org/wiki/Cross-origin_resource_sharing' rel='nofollow'>Cross-origin_resource_sharing</a></p>  <p><strong>Solution</strong></p>  <p>The first response, with the page that will make the XMLHttpRequest, must include a header :</p>  <p>Access-Control-Allow-Origin: <a href='http://localhost:8080' rel='nofollow'>http://localhost:8080</a></p> "
  },
  {
    "Id": "45853607",
    "PostTypeId": "1",
    "CreationDate": "2017-08-24T05:30:39.490",
    "Score": "0",
    "ViewCount": "908",
    "Body": "<p>I have a maven project whose project structure is as follows:</p>  <p>parentProject:</p>  <ol> <li><p>parentProject:</p>  <p>APorject.war</p>  <p>BProject.war</p></li> <li><p>parentApiProject:</p>  <p>AProjectApi.jar</p>  <p>BProjectApi.jar</p></li> </ol>  <p>I would like to package the project at the same time the following four items were copied into the four docker, and will run up\u3002</p>  <p>Is there any good ideas and technical solutions?</p> ",
    "OwnerUserId": "5619422",
    "LastEditorUserId": "5619422",
    "LastEditDate": "2017-08-24T05:36:50.680",
    "LastActivityDate": "2017-08-24T06:34:06.867",
    "Title": "How to quickly integrate the maven project into the docker",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I prefer to build images after the jar/war files are ready (another option is to integrate it with maven by <a href='https://dmp.fabric8.io/#docker:buildn' rel='nofollow noreferrer'>plugin</a>). But in both options you will need to create a Dockerfile first. </p>  <p>You have 4 applications so you will need 4 containers (one container - one thing to do or one service to run). Every container will have its own base image and setup depending on how you run the application. </p>  <p>For example, Dockerfile to copy jar file to image and run it using openjdk:</p>  <pre><code>FROM openjdk:8-jdk VOLUME /tmp  COPY ./target/application.jar /application.jar RUN bash -c 'touch /application.jar'  ENTRYPOINT exec java $JAVA_OPTS -jar /application.jar EXPOSE 7000 </code></pre>  <p>To run war files you will probably need <a href='https://hub.docker.com/_/tomcat/' rel='nofollow noreferrer'>tomcat image</a>.</p>  <p>After you added Dockerfiles for your custom applications the next step is to create a <a href='https://docs.docker.com/compose/overview/' rel='nofollow noreferrer'>docker-compose.yml</a> file. It will include all containers you will need to run the whole project (4 your custom applications, databases or any other services). </p>  <pre><code>version: '3' services:   application:     build: ./path_to_dockerfile     ports:       - 7000:7000     environment:       - DATABASE_PASSWORD=ASKWejuFy1aPL3dzNv       - ... any other credentials or application configs should be passed by environment variables       - JAVA_OPTS=-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom -Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n     restart: always     depends_on:       - application-db   application-db:     build: ./path_to_db_dockerfile # you can set image name without dockerfile for db     ports:       - 5432:5432     restart: always     volumes:       - db-data     environment:      - DATABASE_PASSWORD=ASKWejuFy1aPL3dzNv    #    # Configuration for other containers   #  volumes:   db-data: </code></pre>  <p>There you will setup paths to your Dockerfiles, create private network with dependencies and after everything is ready you can run it with <code>docker-compose up</code> command.</p> "
  },
  {
    "Id": "45998700",
    "PostTypeId": "1",
    "CreationDate": "2017-09-01T10:54:58.513",
    "Score": "0",
    "ViewCount": "357",
    "Body": "<p>There are two maven projects - <b>proejct1</b> and <b>project2</b>.</p>  <p><code>com.project1.Object1.class</code> depends on <code>com.project2.Object2.class</code>, I want to add project2 as dependency to project1.</p>  <p>I know under certain IDE (such as Itellij) this is easy to setup, and I'm using IDE set-ups for development. But for production, I need to build project1 independent from any IDE-environment.</p>  <p>Also I'm using <b>Docker</b>. It would be nice if there is a way to simplify this problem in Docker.</p>  <pre><code>- root   - project1     - src       - com.project1.Object1.class     - pom.xml     - Dockerfile   - project2     - src       - com.project2.Object2.class     - pom.xml     - Dockerfile   - docker-compose.yml </code></pre> ",
    "OwnerUserId": "4683849",
    "LastEditorUserId": "4683849",
    "LastEditDate": "2017-09-01T11:53:50.647",
    "LastActivityDate": "2017-09-01T11:53:50.647",
    "Title": "[Docker][Maven] How to add a local maven project as dependency to another maven project?",
    "Tags": "<java><maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You reference different Maven projects in your pom.xml. If you build project2 with  <code>install</code>, you can reference it (locally) from project1. If you use a repository like Nexus or Artifactory, you deploy project2 there and reference it from project1.</p> "
  },
  {
    "Id": "46768804",
    "PostTypeId": "1",
    "CreationDate": "2017-10-16T11:03:28.537",
    "Score": "0",
    "ViewCount": "916",
    "Body": "<p>I have docker installed on RHEL 7.3. When I try &amp; build the images for services using java as base image it builds them successfully.</p>  <p>But when I try &amp; build my UI image using node:boron as base image, it fails saying :</p>  <pre><code>fork/exec docker-containerd-shim: no such file or directory </code></pre>  <p>Please help me with this. I have tried restarting the docker daemon &amp; other such workarounds mentioned on web, but no luck.</p>  <p><strong>DockerFile</strong></p>  <pre><code>FROM node:boron  # Create app directory RUN mkdir -p /usr/src/app/sales WORKDIR /usr/src/app/sales  # Install app dependencies COPY package.json /usr/src/app/sales RUN npm install  # Bundle app source COPY . /usr/src/app/sales  EXPOSE 8182 CMD [ 'npm', 'start' ] </code></pre>  <p>We use fabric.io docker-maven-plugin to build images:</p>  <pre><code>&lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.21.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;dockerHost&gt;${docker-host}&lt;/dockerHost&gt;                     &lt;certPath&gt;${docker-cert-path}&lt;/certPath&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;alias&gt;ui/sl&lt;/alias&gt;                             &lt;name&gt;ui/sl&lt;/name&gt;                             &lt;build&gt;                                 &lt;tags&gt;                                     &lt;tag&gt;latest&lt;/tag&gt;                                 &lt;/tags&gt;                                 &lt;dockerFileDir&gt;${project.basedir}/build/sl/prod/&lt;/dockerFileDir&gt;                             &lt;/build&gt;                         &lt;/image&gt;                      &lt;/images&gt;                     &lt;saveFile&gt;${project.build.directory}/ui-sl.tar&lt;/saveFile&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;sl docker:build&lt;/id&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                             &lt;goal&gt;save&lt;/goal&gt;                         &lt;/goals&gt;                      &lt;/execution&gt;                     &lt;execution&gt;                         &lt;id&gt;op docker:build&lt;/id&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                             &lt;goal&gt;save&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                           &lt;images&gt;                         &lt;image&gt;                             &lt;alias&gt;ui/op&lt;/alias&gt;                             &lt;name&gt;ui/op&lt;/name&gt;                             &lt;build&gt;                                 &lt;tags&gt;                                     &lt;tag&gt;latest&lt;/tag&gt;                                 &lt;/tags&gt;                                 &lt;dockerFileDir&gt;${project.basedir}/build/op/prod/&lt;/dockerFileDir&gt;                             &lt;/build&gt;                         &lt;/image&gt;                      &lt;/images&gt;                     &lt;saveFile&gt;${project.build.directory}/uiOp.tar&lt;/saveFile&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;              &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "2314721",
    "LastEditorUserId": "2314721",
    "LastEditDate": "2017-10-16T13:14:43.310",
    "LastActivityDate": "2017-10-16T13:14:43.310",
    "Title": "Docker - unable to build image - fork/exec docker-containerd-shim: no such file or directory",
    "Tags": "<docker><docker-compose><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "48557986",
    "PostTypeId": "1",
    "CreationDate": "2018-02-01T08:06:41.847",
    "Score": "0",
    "ViewCount": "730",
    "Body": "<p>I am looking for help/Suggestion about automating the docker-compose.yml file.</p>  <p>I have automated test scripts(testing xml suite) which verifies multiple micro API services, they are developed using Rest Assured, java and TestNG. Now these micro API services and DB are available on docker as image.  Currently I am executing this automation while running this automation in following way</p>  <ol> <li>Making the docker-compose up</li> <li>Waiting for the services to get up</li> <li>Updating the end points in my configuration(Automation suite) which we see in docker container</li> <li>And finally running the automation suite</li> </ol>  <p>I want to do all the above 4 points in one go as following. However unable to find any docs or anything open maven lib for it.</p>  <ol> <li>Run the docker-compose in beforeSuite method. Should work on all operating system wherever the docker and docker-compose is installed eg. Windows, centOS , linux, ubuntu</li> <li>Once the services are up in docker container , it should update the end points in configuration file</li> <li>Docker-compose down in aftersuite method</li> </ol>  <p>How we can achieve this or any kind open source lib available?</p> ",
    "OwnerUserId": "8086365",
    "LastEditorUserId": "4420967",
    "LastEditDate": "2018-02-01T11:51:56.620",
    "LastActivityDate": "2018-02-02T07:38:49.927",
    "Title": "Run docker-compose up in testNG beforesuite",
    "Tags": "<java><maven><docker><docker-compose><testng>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I think <a href='https://dmp.fabric8.io/' rel='nofollow noreferrer'>fabric8 docker-maven-plugin</a> suits your needs. You can run your it tests against containers you configure by docker-compose, dockerfile or plugin's configuration. I used the pluging in <a href='https://github.com/fpezzati/Yomoka/' rel='nofollow noreferrer'>this dummy project</a>. Have a look.</p> "
  },
  {
    "Id": "48591002",
    "PostTypeId": "1",
    "CreationDate": "2018-02-02T21:18:35.027",
    "Score": "0",
    "ViewCount": "1318",
    "Body": "<p>pom.xml:</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;dependencies&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;       &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;       &lt;version&gt;1.0.0&lt;/version&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;   &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;io.fabric8&lt;/groupId&gt;         &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;0.23.0&lt;/version&gt;         &lt;configuration&gt;           &lt;keepContainer&gt;false&lt;/keepContainer&gt;           &lt;removeVolumes&gt;true&lt;/removeVolumes&gt;           &lt;images&gt;             &lt;image&gt;               &lt;alias&gt;zookeeper&lt;/alias&gt;               &lt;name&gt;jplock/zookeeper:3.4.6&lt;/name&gt;               &lt;run&gt;                 &lt;ports&gt;                   &lt;port&gt;2181:2181&lt;/port&gt;                 &lt;/ports&gt;                 &lt;log&gt;                   &lt;prefix&gt;ZOOKEEPER&lt;/prefix&gt;                   &lt;color&gt;yellow&lt;/color&gt;                 &lt;/log&gt;               &lt;/run&gt;             &lt;/image&gt;             &lt;image&gt;               &lt;alias&gt;kafka&lt;/alias&gt;               &lt;name&gt;wurstmeister/kafka:1.0.0&lt;/name&gt;               &lt;run&gt;                 &lt;links&gt;                   &lt;link&gt;zookeeper:zookeeper&lt;/link&gt;                 &lt;/links&gt;                 &lt;ports&gt;                   &lt;port&gt;9092:9092&lt;/port&gt;                 &lt;/ports&gt;                 &lt;env&gt;                   &lt;KAFKA_ADVERTISED_HOST_NAME&gt;127.0.0.1&lt;/KAFKA_ADVERTISED_HOST_NAME&gt;                   &lt;KAFKA_ADVERTISED_PORT&gt;9092&lt;/KAFKA_ADVERTISED_PORT&gt;                   &lt;KAFKA_CREATE_TOPICS&gt;test:3:1&lt;/KAFKA_CREATE_TOPICS&gt;                   &lt;KAFKA_ZOOKEEPER_CONNECT&gt;zookeeper:2181&lt;/KAFKA_ZOOKEEPER_CONNECT&gt;                   &lt;KAFKA_BROKER_ID&gt;999&lt;/KAFKA_BROKER_ID&gt;                 &lt;/env&gt;                 &lt;log&gt;                   &lt;prefix&gt;KAFKA&lt;/prefix&gt;                   &lt;color&gt;yellow&lt;/color&gt;                 &lt;/log&gt;               &lt;/run&gt;             &lt;/image&gt;           &lt;/images&gt;         &lt;/configuration&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;start&lt;/id&gt;             &lt;phase&gt;pre-integration-test&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;build&lt;/goal&gt;               &lt;goal&gt;start&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;           &lt;execution&gt;             &lt;id&gt;stop&lt;/id&gt;             &lt;phase&gt;post-integration-test&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;stop&lt;/goal&gt;               &lt;goal&gt;remove&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;         &lt;/executions&gt;       &lt;/plugin&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;         &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;         &lt;version&gt;2.20.1&lt;/version&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;goals&gt;               &lt;goal&gt;integration-test&lt;/goal&gt;               &lt;goal&gt;verify&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;         &lt;/executions&gt;         &lt;configuration&gt;           &lt;environmentVariables&gt;             &lt;KAFKA_ADVERTISED_HOST_NAME&gt;127.0.0.1&lt;/KAFKA_ADVERTISED_HOST_NAME&gt;             &lt;KAFKA_ADVERTISED_PORT&gt;9092&lt;/KAFKA_ADVERTISED_PORT&gt;             &lt;KAFKA_TOPICS&gt;test&lt;/KAFKA_TOPICS&gt;             &lt;KAFKA_CREATE_TOPICS&gt;test:3:1&lt;/KAFKA_CREATE_TOPICS&gt;             &lt;KAFKA_ZOOKEEPER_CONNECT&gt;zookeeper:2181&lt;/KAFKA_ZOOKEEPER_CONNECT&gt;             &lt;KAFKA_BROKER_ID&gt;999&lt;/KAFKA_BROKER_ID&gt;           &lt;/environmentVariables&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>After running <code>mvn integration-test</code>, I found the docker containers still running by <code>docker ps</code>. I have to run <code>mvn docker:stop</code> to stop and remove them manually. But <code>mvn verify</code> can stop and remove docker containers automatically. Why? Anyone can help? Thanks</p> ",
    "OwnerUserId": "3837778",
    "LastActivityDate": "2018-02-02T21:18:35.027",
    "Title": "mvn docker:stop not called after integration test",
    "Tags": "<maven><docker-compose><maven-failsafe-plugin><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "51628341",
    "PostTypeId": "1",
    "AcceptedAnswerId": "51629631",
    "CreationDate": "2018-08-01T08:08:33.110",
    "Score": "0",
    "ViewCount": "546",
    "Body": "<p>I am using docker-compose for selenium grid automation for firefox and chrome browsers, on an ubuntu 16.04 server and am accessing using PuTTY terminal. </p>  <p>It is a maven project on a git repository. For Jenkins, I have another server instance (accessible via PuTTY).</p>  <p>Questions:</p>  <p>1) How can I build a Jenkins job which will run automatically at a particular time everyday? </p>  <p>2) Is it possible to provide the suite file (testng.xml) path and any maven command to instigate it via anyway?</p>  <p>3) Do I have to manually start grid or can I configure it manually in docker-compose.yml file?</p>  <p>PS: This is my first time so, any help will really be appreciated.</p> ",
    "OwnerUserId": "9874060",
    "LastActivityDate": "2018-08-01T09:19:47.317",
    "Title": "Selenium Grid Docker-Compose automation through Jenkins",
    "Tags": "<maven><jenkins><docker-compose><selenium-grid>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<ol> <li><p>See <a href='https://stackoverflow.com/questions/12472645/how-do-i-schedule-jobs-in-jenkins'>How do I schedule jobs in Jenkins?</a></p></li> <li><p>Yes, via String parameter supplied to your jenkins job.  you will need to pass it as an argument, for example to invoke maven build the String param value would be:</p>  <p><code>mvn -Dsurefire.suiteXmlFiles=testng.xml test</code> </p></li> </ol>  <p>and the shell command:</p>  <pre><code> sh ''' '${params.MVN_STRING}' ''' </code></pre>  <p><a href='https://wiki.jenkins.io/display/JENKINS/Parameterized+Build' rel='nofollow noreferrer'>https://wiki.jenkins.io/display/JENKINS/Parameterized+Build</a></p>  <ol start='3'> <li>See this answer: <a href='https://stackoverflow.com/questions/37214628/does-jenkins-pipeline-plug-in-support-docker-compose'>Does Jenkins Pipeline Plug-in support Docker Compose?</a></li> </ol> ",
    "highest_rated_answer": null
  },
  {
    "Id": "52033059",
    "PostTypeId": "1",
    "CreationDate": "2018-08-27T05:32:53.020",
    "Score": "0",
    "ViewCount": "2619",
    "Body": "<p>I am trying to integrate maven dockerfile plugin with my project. I have multiple modules under my maven project. I have modified the <strong>pom.xml</strong> for the module I want to build and tag images as below. Running <code>mvn dockerfile:build</code> command builds a creates a <code>docker-info.jar</code> under the target folder. I am not sure where the images are being built and when I try to run the <code>mvn dockerfile:tag</code> command I see the below error.</p>  <blockquote>   <p>Failed to execute goal com.spotify:dockerfile-maven-plugin:1.4.4:tag   (default-cli) on project drs-web: The parameters 'repository' for goal   com.spotify:dockerfile-maven-plugin:1.4.4:tag are missing or invalid</p> </blockquote>  <p>Pom.xml:</p>  <pre class='lang-xml prettyprint-override'><code>    &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;${docker.maven.plugin.version}&lt;/version&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;id&gt;build&lt;/id&gt;                             &lt;goals&gt;                                 &lt;goal&gt;build&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;buildArgs&gt;                                     &lt;WAR_FILE&gt;${project.build.finalName}.war&lt;/WAR_FILE&gt;                                 &lt;/buildArgs&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                         &lt;execution&gt;                             &lt;id&gt;tag&lt;/id&gt;                             &lt;goals&gt;                                 &lt;goal&gt;tag&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;repository&gt;XXX/XXX-api&lt;/repository&gt;                                 &lt;tag&gt;${project.version}&lt;/tag&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;             &lt;/plugin&gt; </code></pre>  <p>Dockerfile:</p>  <pre><code>FROM tomcat:9.0.10-jre8-slim ENV CATALINA_HOME /usr/local/tomcat MAINTAINER XXX EXPOSE 8080 ADD target/${WAR_FILE} ${CATALINA_HOME}/webapps/XXX-api.war </code></pre> ",
    "OwnerUserId": "3746601",
    "LastEditorUserId": "5247631",
    "LastEditDate": "2019-04-01T20:10:23.077",
    "LastActivityDate": "2019-04-01T20:10:23.077",
    "Title": "Maven dockerfile plugin not able to tag the image",
    "Tags": "<docker><docker-compose><dockerfile><docker-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>To fix the error you should use the same parameters in two sections of your pom.xml. You didn't define the repository's name for the build goal:</p>  <pre class='lang-xml prettyprint-override'><code>&lt;configuration&gt;     &lt;repository&gt;XXX/XXX-api&lt;/repository&gt; &lt;/configuration&gt; </code></pre>  <p>The fact that <strong>docker-info.jar</strong> was created in your Target directory most likely means that the creation of the docker image completed successfully. </p>  <p>The image should be put to your Docker registry with the name 'XXX/XXX-api', and you can check it from a console with the command:</p>  <pre class='lang-sh prettyprint-override'><code>docker image ls </code></pre>  <p>P.S. You can avoid generation of <strong>docker-info.jar</strong> by adding the following parameter to the configuration section of dockerfile-maven-plugin:</p>  <pre class='lang-xml prettyprint-override'><code>&lt;configuration&gt;     &lt;skipDockerInfo&gt;true&lt;/skipDockerInfo&gt; &lt;/configuration&gt; </code></pre> "
  },
  {
    "Id": "52518437",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52518693",
    "CreationDate": "2018-09-26T13:04:00.397",
    "Score": "0",
    "ViewCount": "515",
    "Body": "<p>I want to deploy a maven application with docker container and if possible also test with docker, but a have some problems.   </p>  <p>I because of using java I need to compile my application before using is.</p>  <p>In the process of compiling there also running unit test, which need a database connection. </p>  <p>For testing I used a database container started from hand who run on localhost:5432. </p>  <p>If I start docker-compose now this causes an error because the container can't reach localhost:5432 any more. If I write postgres:5432 in my application.properties it does not compile because of the unknown host postgres.</p>  <p>How to handle this. Is there a way to start a with maven and an with postgres to building time.</p>  <p>As you see I am new to docker-compose, and don't have a workflow yet.</p>  <p>Thanks for your help</p> ",
    "OwnerUserId": "7503033",
    "LastActivityDate": "2018-09-26T13:16:00.197",
    "Title": "Use docker compose with compiling",
    "Tags": "<maven><docker><compilation><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You should use your existing desktop-oriented build process to build and test the application and only use Docker to build the final deployment artifact.  If you are hard-coding the database location in your source code, there is lurking trouble there of exactly the sort you describe (what will you do if you have separate staging and production databases hosted by your cloud provider?) and you should make that configurable.</p>  <p>During the <code>docker build</code> phase there\u2019s no way to guarantee that any particular network environment, external services, or DNS names will be present, so you can\u2019t do things like run integration tests that depend on an external database.  Fortunately that\u2019s a problem the software engineering community has spent a long time addressing in the decades before Docker existed.  While many Docker setup are very enthusiastic about mounting application source code directly into containers, that\u2019s much less useful for compiled languages and not really appropriate for controlled production deployments.</p>  <p>In short: run Maven the same way you did before you had Docker, and then just have your Dockerfile COPY the resulting (fully-tested) <code>.jar</code> file into the image.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "54700920",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54714210",
    "CreationDate": "2019-02-15T00:01:38.130",
    "Score": "0",
    "ViewCount": "5065",
    "Body": "<p>In my docker-compose.yaml file I use the image 'my-service' (among other remote images that work fine)</p>  <pre><code>version: '2' services:   myservice:     image: my-service </code></pre>  <p>Normally I build the 'my-service' image with maven using the io.fabric8 docker-maven-plugin.</p>  <p>My Dockerfile:</p>  <pre><code>FROM vertx/vertx3-alpine ENV VERTICLE_HOME /opt/lib ENV NAME my-service ENV EXEC_JAR_NAME my-service.jar COPY target/my-service-1.0-SNAPSHOT.jar $VERTICLE_HOME/$EXEC_JAR_NAME COPY target/lib $VERTICLE_HOME COPY src/main/resources/settings.json /etc/company/myservice/settings.json ENTRYPOINT ['sh', '-c'] CMD ['java -cp $VERTICLE_HOME/$EXEC_JAR_NAME com.company.myservice.MyVerticle'] </code></pre>  <p>Is there a way using the DockerComposeContainer from Testcontainers for docker-compose to use my local image of my-service?</p>  <p>This is my test set up</p>  <pre><code>public class MyServiceIT {     @ClassRule     public static DockerComposeContainer compose =             new DockerComposeContainer(new File('src/test/resources/docker-compose.yml')); </code></pre>  <p>Currently I get the following error message as it is using local images.</p>  <pre><code>7:15:34.282 [tc-okhttp-stream-454305524] INFO  [docker/compose:1.8.0] - STDERR: pull access denied for my-service, repository does not exist or may require 'docker login' 17:15:34.283 [main] WARN org.testcontainers.containers.DockerComposeContainer - Exception while pulling images, using local images if available </code></pre>  <p>It sounds like I need to build the image for use in my test, but I am not sure how to do that.</p> ",
    "OwnerUserId": "11064742",
    "LastActivityDate": "2019-02-15T17:23:02.147",
    "Title": "Is it possible to use a local Docker image in a docker-compose file for DockerComposeContainer?",
    "Tags": "<java><maven><docker><docker-compose><testcontainers>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>That's not an error message, but just a warning if <code>docker-compose pull</code> fails, see <a href='https://github.com/testcontainers/testcontainers-java/blob/47de158be349b1c8cd81d3660cc7112e393d1128/core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java#L148' rel='nofollow noreferrer'>here</a>.</p>  <p>You can also make Docker Compose build the images for you (although it is highly recommended to use <code>withLocalCompose(true)</code> in that case)</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "54983164",
    "PostTypeId": "1",
    "CreationDate": "2019-03-04T12:20:33.820",
    "Score": "0",
    "ViewCount": "109",
    "Body": "<p>I am using <a href='https://github.com/spotify/dockerfile-maven' rel='nofollow noreferrer'>spotify docker maven plugin</a> and <a href='https://github.com/dkanejs/docker-compose-maven-plugin' rel='nofollow noreferrer'>docker-compose mvn plugin</a> to write integration tests. The docker-compose.yml looks like </p>  <pre><code>version: '2.1'    services:       Service1:           container_name: service1-host           image: service1:latest           ports:           - '8081:8081'       Service2:           container_name: service2-host           image: service2:latest                    ports:           - '8082:8082' </code></pre>  <p>When running Integration tests with maven-failsafe-plugin my JUnit tests access these service1 and service2 through the ports. How can we avoid port conflicts if multiple builds are running on jenkins?</p>  <p>Is it possible to run integration tests within same docker network as service1 and service2?</p> ",
    "OwnerUserId": "3073947",
    "LastActivityDate": "2019-03-04T12:20:33.820",
    "Title": "docker compose integration tests without opening ports to host",
    "Tags": "<maven><docker><jenkins><docker-compose><integration-testing>",
    "AnswerCount": "0",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "56634292",
    "PostTypeId": "1",
    "CreationDate": "2019-06-17T15:19:27.483",
    "Score": "0",
    "ViewCount": "1224",
    "Body": "<p>While playing around with the code example at <a href='https://github.com/hellokoding/hellokoding-courses/tree/master/docker-examples/dockercompose-springboot-mysql-nginx' rel='nofollow noreferrer'>https://github.com/hellokoding/hellokoding-courses/tree/master/docker-examples/dockercompose-springboot-mysql-nginx</a>, I am stuck while trying to run the docker compose (using the command <code>docker-compose up</code>). Looks like the images are created fine, but inside the app image the Maven command fails as the pom.xml is not found. </p>  <pre><code>C:\\Dev\\sandbox\\hellokoding-courses\\docker-examples\\dockercompose-springboot-mysql-nginx&gt;docker-compose up --build Building app Step 1/1 : FROM adoptopenjdk/maven-openjdk8  ---&gt; f167b3a06c25 Successfully built f167b3a06c25 Successfully tagged dockercompose-springboot-mysql-nginx_app:latest Starting my-mysql ... done Recreating my-app ... done Recreating my-nginx ... done Attaching to my-mysql, my-app, my-nginx my-mysql | [Entrypoint] MySQL Docker Image 5.7.26-1.1.11 my-app   | [INFO] Scanning for projects... my-app   | [INFO] ------------------------------------------------------------------------ my-app   | [INFO] BUILD FAILURE my-app   | [INFO] ------------------------------------------------------------------------ my-app   | [INFO] Total time:  0.564 s my-app   | [INFO] Finished at: 2019-06-17T08:23:53Z my-app   | [INFO] ------------------------------------------------------------------------ my-app   | [ERROR] The goal you specified requires a project to execute but there is no POM in this directory (/app). Please verify you invoked Maven from the correct directory. -&gt; [Help 1] my-app   | [ERROR] my-app   | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. my-app   | [ERROR] Re-run Maven using the -X switch to enable full debug logging. my-app   | [ERROR] my-app   | [ERROR] For more information about the errors and possible solutions, please read the following articles: my-app   | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException </code></pre>  <p>I am not getting the problem as the app folder is mapped via Volume and should be available to the compose. I also tried to copy the 'app' folder inside the app DockerFile so that it reflects in the image (and I verified that it does using the command <code>docker run -it dockercompose-springboot-mysql-nginx_app sh</code>) but that didn't help either.</p>  <p>Following are the content of the DockerFile inside the simple SpringBoot app:</p>  <pre><code>FROM adoptopenjdk/maven-openjdk8 #Following was added by me, wasn't part of the Github code COPY . /app </code></pre>  <p>And following is the compose file:</p>  <pre><code>version: '3' services:   nginx:    container_name: my-nginx    image: nginx:1.13    restart: always    ports:    - 80:80    - 443:443    volumes:    - ./nginx/conf.d:/etc/nginx/conf.d    depends_on:    - app    mysql:    container_name: my-mysql    image: mysql/mysql-server:5.7    environment:     MYSQL_DATABASE: test     MYSQL_ROOT_PASSWORD: hellokoding     MYSQL_ROOT_HOST: '%'    ports:    - '3306:3306'    restart: always    app:     container_name: my-app     restart: always     build: ./app     working_dir: /app     volumes:       - ./app:/app       - ~/.m2:/root/.m2     expose:       - '8080'     command: mvn clean spring-boot:run     depends_on:       - mysql </code></pre>  <p>Thanks for the help.</p> ",
    "OwnerUserId": "15395",
    "LastEditorUserId": "15395",
    "LastEditDate": "2019-06-17T15:44:10.240",
    "LastActivityDate": "2019-06-17T15:47:26.647",
    "Title": "Docker Compose unable to find Maven pom",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Does your <code>pom.xml</code> resides in /app directory. As per your config it should.</p>  <p>You can also specify exact location of <code>pom.xml</code> using <code>-f</code> option.</p>  <pre><code>mvn -f /path/to/pom.xml clean spring-boot:run </code></pre> "
  },
  {
    "Id": "57171618",
    "PostTypeId": "1",
    "CreationDate": "2019-07-23T20:18:15.550",
    "Score": "0",
    "ViewCount": "926",
    "Body": "<p>I need to provide a POC as argument for the migration of workflows in my current job. Currently we do this:</p>  <ol> <li>People code on Netbeans</li> <li>People click on build on netbeans</li> <li>Deploy locally</li> <li>Apply code changes</li> <li>Netbeans rebuilds and redeploy the code.</li> </ol>  <p>Things to know:</p>  <ul> <li>It seems tomcat detects when a new WAR is put in the directory and hot-deploys it;</li> <li>What I aim to automate is not the hot-deploy(since this is already a tomcat feature), but the build process;</li> <li>We are using Maven to build the project.</li> <li>I'm using docker-compose to get everything up in one single specification.</li> </ul>  <p>So far I was able to containerize the Postgres database, the PGAdmin we use and the initial build of the application using a multi-stage Dockerfile.</p>  <p>Tomcat app Dockerfile</p>  <pre><code>FROM maven AS buildserver  ADD . /usr/src/mymaven/ WORKDIR /usr/src/mymaven # build the project RUN mvn -f pom.xml clean package -DskipTests  FROM tomcat:latest COPY conf-tomcat/tomcat-users.xml /usr/local/tomcat/conf/ COPY conf-tomcat/server.xml /usr/local/tomcat/conf/ COPY conf-tomcat/context.xml /usr/local/tomcat/webapps/manager/META-INF/ # Copy the built war file into webapps folder of tomcat container COPY --from=buildserver /usr/src/mymaven/target/*.war /usr/local/tomcat/webapps </code></pre>  <p>What I am having trouble with is triggering the rebuild when there's code changes (imitating what netbeans does). I can't find in either maven's or netbeans documentation how that detection and triggering works.</p>  <p>I am using volumes to map the app source directory to the container in hopes that it would just work, but I was wrong.</p>  <p>My docker-compose.yml is as follows:</p>  <pre><code>version: '3' services:   pgadmin:     container_name: pgadmin     image: dpage/pgadmin4     env_file:       - ../db-postgres/pgadmin/pgadmin.env     depends_on:       - pg-dev     networks:       - dev-network     volumes:       - pgadmin-data:/var/lib/pgadmin     ports:       - '88:80'   pg-dev:     container_name: pg-dev     image: pg-dev:latest     env_file:       - ../db-postgres/db-dev/pg-dev.env     volumes:       - pg-data:/var/lib/postgresql/data     networks:       - dev-network     ports:       - '5433:5432'   app:     container_name: app     build: .     volumes:       - app-src:/usr/src/mymaven       - artifacts:/usr/src/mymaven/target       - maven-repo:/root/.m2     networks:       - dev-network     ports:       - '8888:8080'     depends_on:       - pg-dev volumes:   maven-repo:     driver: local     driver_opts:       type: bind       device: $HOME/.m2       o: bind   app-src:     driver: local     driver_opts:       type: bind       device: .       o: bind   artifacts:     driver: local     driver_opts:       type: bind       device: target/       o: bind   pg-data:   pgadmin-data: networks:   dev-network: </code></pre>  <p>Any help in coming up with a solution for this is appreciated, as well as any general advice in how to make this workflow/build improve.</p>  <p><strong>UPDATE</strong></p>  <p>I came up with somewhat of a work around, but now I am having problem testing it.</p>  <p>I defined a maven container to work as a build server:</p>  <pre><code>FROM maven  ADD . /usr/src/mymaven/ WORKDIR /usr/src/mymaven RUN apt update &amp;&amp; apt install entr -y # build the project RUN mvn -f pom.xml clean package -DskipTests </code></pre>  <p>and now I am defining the entrypoint on the docker-compose.yml:</p>  <pre><code>...  buildserver:     container_name: buildserver     build:       context: .       dockerfile: maven-builder.Dockerfile     volumes:       - app-src:/usr/src/mymaven       - maven-repo:/root/.m2       - artifacts:/usr/src/mymaven/target     networks:       - dev-network     entrypoint: sh -c 'find src/ | entr mvn -f pom.xml clean package -DskipTests --batch-mode' ... </code></pre>  <p>But now I am getting an error message when this container gets up:</p>  <pre><code>find: \u2018src/\u2019: No such file or directory entr: No regular files to watch </code></pre>  <p>Which is weird to me as I successfully build the project in the first run, but the entry-point seems to be failing.</p>  <p><em>Clarification: What I am being asked is come up with a workflow that removes the need to use the deploy from Netbeans (they want everything automatic). I looked around for a Jenkins workflow, but could not really find a way to achieve the desired results.</em></p> ",
    "OwnerUserId": "3896838",
    "LastEditorUserId": "3896838",
    "LastEditDate": "2019-07-24T13:43:14.920",
    "LastActivityDate": "2019-07-24T13:43:14.920",
    "Title": "How to automatically rebuild a Java Webapp inside Docker containers",
    "Tags": "<maven><docker><tomcat><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>According to the Netbeans docs, you can bind Maven goals to IDE actions (<a href='http://wiki.netbeans.org/MavenBestPractices' rel='nofollow noreferrer'>http://wiki.netbeans.org/MavenBestPractices</a> section  <strong>Binding Maven goals to IDE actions</strong>):</p>  <blockquote>   <p><em>It's possible to customize the default Maven goal to IDE Action binding from the project's customizer. Right click on the project node and select 'Properties' or use the File/Project Properties main menu item to invoke the Project properties dialog. On the left hand side, select the panel named 'Actions'. The panel lists all available default project actions that can be mapped. When selecting one from the list the textfields in the bottom allow to change the values.</em> </p> </blockquote>  <p>It looks to me that you should bind the <strong>Build Project</strong> Netbeans action to a specific Maven goal. From this point, it is up to you to come up with a creative solution. You could explore the Maven Exec plugin capabilities and run custom commands during the build proccess (check <a href='https://stackoverflow.com/questions/3491937/i-want-to-execute-shell-commands-from-mavens-pom-xml'>I want to execute shell commands from Maven&#39;s pom.xml</a>). For instance, it should be possible to copy the .war file from target folder to wherever you want on the filesystem, or even execute scripts inside the running container.</p>  <p>PS: <em>It looks like you are trying to do something quite odd, but I'll assume here it makes sense to you solving this somehow.</em></p> "
  },
  {
    "Id": "57797106",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57809909",
    "CreationDate": "2019-09-05T00:42:39.997",
    "Score": "0",
    "ViewCount": "453",
    "Body": "<p>I'm using a maven plugin for generate a Dockerfile with the build, when i run <code>docker-compose up</code> my spring container starts but can't access my jar</p>  <p>Error:</p>  <pre><code>$ docker-compose up postgres_container is up-to-date Starting spring_container ... done Attaching to postgres_container, spring_container spring_container | Error: Unable to access jarfile /demo-0.0.1-SNAPSHOT.jar </code></pre>  <p>My pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.1.7.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.lucasmarinzeck&lt;/groupId&gt;     &lt;artifactId&gt;demo&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;name&gt;demo&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;             &lt;version&gt;2.1.7.RELEASE&lt;/version&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.4.13&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;aps-04s&lt;/imageName&gt;                     &lt;baseImage&gt;openjdk:8-jdk-alpine&lt;/baseImage&gt;                     &lt;entryPoint&gt;['java ', '-jar ', '/${project.build.finalName}.jar']&lt;/entryPoint&gt;                     &lt;exposes&gt;8080&lt;/exposes&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre>  <p>Dockerfile from spotify plugin:</p>  <pre><code>FROM openjdk:8-jdk-alpine ADD /demo-0.0.1-SNAPSHOT.jar / EXPOSE 8080 ENTRYPOINT ['java ', '-jar ', '/demo-0.0.1-SNAPSHOT.jar'] </code></pre>  <p>I have made some search and i really did'nt find nothing to solve this</p> ",
    "OwnerUserId": "9622231",
    "LastActivityDate": "2019-09-05T16:50:22.390",
    "Title": "My command docker-compose up gives me an error when tries to run my spring-boot application",
    "Tags": "<maven><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The reason why you get the error <code>Error: Unable to access jarfile /demo-0.0.1-SNAPSHOT.jar</code> is because the file does not exist.</p>  <p><code>ADD</code> in a <code>Dockerfile</code> will automatically try to extract archives (and a .jar file is one).</p>  <p>My suggestion is to always use <code>COPY</code> when copying files even though it can be achieved by <code>ADD</code>.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "59790228",
    "PostTypeId": "1",
    "CreationDate": "2020-01-17T15:22:13.107",
    "Score": "0",
    "ViewCount": "1248",
    "Body": "<p>I use the following plugin:</p>  <pre><code>         &lt;plugin&gt;               &lt;groupId&gt;com.dkanejs.maven.plugins&lt;/groupId&gt;               &lt;artifactId&gt;docker-compose-maven-plugin&lt;/artifactId&gt;               &lt;version&gt;2.4.0&lt;/version&gt;               &lt;executions&gt;                 &lt;execution&gt;                   &lt;id&gt;up&lt;/id&gt;                   &lt;phase&gt;pre-integration-test&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;up&lt;/goal&gt;                   &lt;/goals&gt;                   &lt;configuration&gt;                     &lt;composeFile&gt;${project.basedir}/docker-compose.yml&lt;/composeFile&gt;                     &lt;detachedMode&gt;true&lt;/detachedMode&gt;                   &lt;/configuration&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                 &lt;configuration&gt;                   &lt;build&gt;true&lt;/build&gt;                 &lt;/configuration&gt;                 &lt;/execution&gt;               &lt;/executions&gt;          &lt;/plugin&gt; </code></pre>  <p>docker-compose</p>  <pre><code>version: '3'  services:    webapp:      container_name: test_db      build: src/      depends_on:         - psql    psql:       container_name: docker_db       build: database/       expose:        - 5432       ports:        - 5432:5432 </code></pre>  <p>Dockerfile_tk:</p>  <pre><code>FROM tomcat:9-jre8-alpine  ENV PATH_TOMCAT_USERS /usr/local/tomcat/conf/ ENV PATH_MANAGER /usr/local/tomcat/webapps/manager/ ADD config/tomcat-users.xml  /usr/local/tomcat/conf/tomcat-users.xml ADD config/context.xml /usr/local/tomcat/webapps/manager/META-INF/context.xml ADD test.war /usr/local/tomcat/webapps/ROOT.war EXPOSE 8080 CMD ['catalina.sh','run']  </code></pre>  <p>Dockerfile_db:</p>  <pre><code>FROM postgres:latest  ENV POSTGRES_USER andrej ENV POSTGRES_PASSWORD password ENV POSTGRES_DB test_db   </code></pre>  <p>But I receive: <code>Failed to execute goal up</code></p>  <p>When I run only  Dockerfile_tk  or Dockerfile_db separetly, docker works successfuly. Problem in docker-compose.</p>  <p>When I run it from terminal, using 'docker-compose up' it returns:  Building psql ERROR: Cannot locate specified Dockerfile: Dockerfile</p>  <p>What am I doing wrong?</p> ",
    "OwnerUserId": "9128863",
    "LastEditorUserId": "9401096",
    "LastEditDate": "2020-01-17T15:52:50.880",
    "LastActivityDate": "2020-01-17T15:52:50.880",
    "Title": "docker-compose-maven-plugin Failed to execute goal up",
    "Tags": "<docker><docker-compose><maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "61028974",
    "PostTypeId": "1",
    "CreationDate": "2020-04-04T13:41:00.127",
    "Score": "0",
    "ViewCount": "210",
    "Body": "<p>I am using a docker-compose file to run my docker containers and I have this image for my oracle database.</p>  <pre><code>oracle-12c:     image: overclockedpixel/oracle12c     ports:         - '1521:1521'     container_name: db_local </code></pre>  <p>I am making a Java Maven project and I need to to set my dependency in my pom.xml file as such </p>  <pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.oracle.jdbc&lt;/groupId&gt;    &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;    &lt;version&gt;12.2.0.1&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>But since I didn't install any ojdbc because I'm using the docker image, I get this error </p>  <blockquote>   <p>Cannot resolve com.oracle:ojdbc14:10.2.0.4.0</p> </blockquote>  <p>How should I configure this in order to get my dependency resolved?</p> ",
    "OwnerUserId": "5614514",
    "LastActivityDate": "2020-04-04T13:41:00.127",
    "Title": "How do we configure a maven oracle dependency when we are using a docker-compose file?",
    "Tags": "<java><oracle><maven><docker-compose><pom.xml>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "61400808",
    "PostTypeId": "1",
    "CreationDate": "2020-04-24T03:49:27.013",
    "Score": "0",
    "ViewCount": "407",
    "Body": "<p>I have an application that uses docker-compose and maven to run integration tests.  This application works locally, when I can control when to execute the commands.  I first run <code>docker-compose up</code> and I wait until everything is done.  Then I open another window, and then I run integration tests against the docker-compose container we had just spun up: <code>mvn verify -P integration-test -DBASE_URL=http://localhost:8080</code></p>  <p>However, when I run in gitlab, I don't know how to wait to run the mvn command until after the container spins up.  Does anyone have an idea on how I can do this (keep in mind that I think I must run docker-compose up -d in gitlab, otherwise it blocks the runner).  The error logs I am seeing are: <code>org.springframework.web.client.ResourceAccessException: I/O error on GET request for 'http://localhost:8080/health': Connection refused (Connection refused); nested exception is java.net.ConnectException: Connection refused (Connection refused)</code></p>  <p>The full gitlab output can be found here: <a href='https://gitlab.com/connorbutch/trading-app/-/jobs/524923294' rel='nofollow noreferrer'>https://gitlab.com/connorbutch/trading-app/-/jobs/524923294</a></p>  <p>Thanks, Connor</p> ",
    "OwnerUserId": "4645723",
    "LastActivityDate": "2020-04-24T04:15:44.167",
    "Title": "Wait for docker-compose to start before running another process",
    "Tags": "<docker><maven><docker-compose><continuous-integration><gitlab>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>if <code>http://localhost:8080/health</code> is an indication that tests are ready to run, you might consider waiting for it to succeed before proceeding.  It would be natural to execute docker-compose and mvn from a shell, so I'll provide bash here.</p>  <pre class='lang-sh prettyprint-override'><code>wait_for_health() {   for i in $(seq 1 5); do      if curl -s 'http://localhost:8080/health'; then return 0; fi     sleep 2   done   echo 'localhost was never ready'   exit 1 }  wait_for_health  </code></pre>  <p>if you're thinking about cleanup, bash can run a command at exit, maybe something like:</p>  <pre><code>trap 'docker-compose down' EXIT </code></pre>  <p>Finally, remember to run your scripts with <code>-e</code> set.  You can put it at the shebang <code>#!/bin/bash -e</code> or <code>set -e</code>, but if you do not set <code>-e</code>, failed commands will, counterintuitively, not cause the script to fail.  This is typically not what you want. </p>  <p>As an alternative, you can run <code>mvn</code> from within docker-compose.  You'll have to describe your maven environment and ancillaries in docker, but then you can add a container that depends on the web container.  From what I can tell, it's up to you to figure out how to <em>not</em> execute <code>mvn</code> locally in that case (<a href='https://stackoverflow.com/questions/45680958/can-you-define-optional-docker-compose-services/61107015#61107015'>Can you define optional docker-compose services?</a> seems like a good start), but it might help handle the container dependencies for you.</p> "
  },
  {
    "Id": "62036762",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62037126",
    "CreationDate": "2020-05-27T06:30:44.680",
    "Score": "0",
    "ViewCount": "5754",
    "Body": "<p>I have a project at <a href='https://github.com/picklu13/dockerbuildtest' rel='nofollow noreferrer'>https://github.com/picklu13/dockerbuildtest</a>.  When I run <code>docker-compose up --build</code> from the <code>builders</code> directory, the build errors with '[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (/app). Please verify you invoked Maven from the correct directory. -> [Help 1]'</p>  <p>Now if I comment out the last line of the Dockerfile  <code># RUN mvn clean package</code> and run <code>docker-compose up --build</code>, the container starts up. Then I go into the container with <code>docker exec -it &lt;id&gt; bash</code> and run <code>mvn clean install</code> which succeeds. </p>  <p>My question is, why did the first build fail with no pom.xml error although it was already present. </p> ",
    "OwnerUserId": "3490163",
    "LastActivityDate": "2020-05-27T06:56:00.073",
    "Title": "Running mvn install from Dockerfile gives error but, running it from inside the container is successful",
    "Tags": "<docker><maven><build><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>In your first case, you're running <code>build</code> from <code>builders</code> directory but the <a href='https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#understand-build-context' rel='nofollow noreferrer'>context</a> passed to Docker does not contains <code>pom.xml</code> (it contains what is in your current directory as per <code>docker-compose</code> instruction <code>context: .</code>)</p>  <p>In your second case, <code>up</code> will mount your project's directory in <code>app</code> with:</p>  <pre><code> volumes:       - ~/dockerbuildtest/:/app/ </code></pre>  <p>Meaning that <code>~/dockerbuildtest/pom.xml</code> will appear in container as <code>/app/pom.xml</code>. Running <code>mvn</code> from <code>app</code> now works.</p>  <blockquote>   <p>why did the first build fail with no pom.xml error although it was already present</p> </blockquote>  <p>It was <em>not</em> present: in first build, there is no <code>pom.xml</code> copied into your image (see <a href='https://docs.docker.com/engine/reference/builder/#copy' rel='nofollow noreferrer'><code>COPY</code></a> instruction). </p>  <p>You could ensure your context contains <code>pom.xml</code> by running your build command from your project's root directory and specifying Dockerfile such as:</p>  <pre><code>    build:       # will use current directory as build context       # by running from your project's root dir, context will contain pom.xml       context: .       # path to Dockerfile is relative to where build command is run       dockerfile: builders/Dockerfile </code></pre>  <p>And copy your <code>pom.xml</code> in your Dockerfile such as:</p>  <pre><code># [...] WORKDIR /app  # copy pom.xml from context into image COPY pom.xml /app/pom.xml  # run from /app directory which now contains a pom.xml, should work RUN mvn clean package </code></pre> ",
    "highest_rated_answer": "<p>You mount a volume and I think by the time the container boots up, the specified resource is not at said location, due to the volume not yet being loaded.</p>  <p>You could try to not use a volume and instead use a COPY command in your dockerfile to make sure the resource is actually in /app before the container starts.</p>  <p>[EDIT] Even if you scenario does not allow you to do so, I recommend still testing with the COPY to see if this indeed is a volume problem.</p> "
  },
  {
    "Id": "62176462",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62176574",
    "CreationDate": "2020-06-03T15:17:49.460",
    "Score": "0",
    "ViewCount": "381",
    "Body": "<p>I am trying to setup a simple Spring JPA connection with Docker-Compose. </p>  <p>This is my docker-compose.yml:</p>  <pre><code> services:   postgres-database:     image: postgres     volumes:     - ./data:/var/lib/postgresql/data     environment:       POSTGRES_USER: ${POSTGRES_USER}       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}       POSTGRES_DB: ${POSTGRES_DB}     networks:       - spring-app   spring-app:     image: spring-app     build:       context: ./       dockerfile: Dockerfile     environment:       SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-database:5432/${POSTGRES_DB}       SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver       SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}       SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}     depends_on:       - postgres-database      ports:       - 8080:8080     networks:       - spring-app </code></pre>  <p>My pom.xml looks like this:</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;   &lt;/parent&gt;   &lt;groupId&gt;NaN&lt;/groupId&gt;   &lt;artifactId&gt;NaN&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;name&gt;spring-app&lt;/name&gt;   &lt;properties&gt;     &lt;java.version&gt;11&lt;/java.version&gt;   &lt;/properties&gt;    &lt;dependencies&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;!-- https://mvnrepository.com/artifact/org.postgresql/postgresql --&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.postgresql&lt;/groupId&gt;       &lt;artifactId&gt;postgresql&lt;/artifactId&gt;       &lt;version&gt;42.2.12&lt;/version&gt;       &lt;scope&gt;runtime&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;com.h2database&lt;/groupId&gt;       &lt;artifactId&gt;h2&lt;/artifactId&gt;       &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;      &lt;dependency&gt;       &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;       &lt;artifactId&gt;lombok&lt;/artifactId&gt;       &lt;optional&gt;true&lt;/optional&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;       &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;       &lt;scope&gt;test&lt;/scope&gt;       &lt;exclusions&gt;         &lt;exclusion&gt;           &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;           &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;         &lt;/exclusion&gt;       &lt;/exclusions&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;       &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;       &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;    &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt;  &lt;/project&gt; </code></pre>  <p>I'm used to see Spring trying to connect to a database before starting anything. I set up some temporary Repositories to make sure it had some Entities to work with. </p>  <p>The logging looks like this: </p>  <pre><code>    .   ____          _            __ _ _   /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\  ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )    '  |____| .__|_| |_|_| |_\\__, | / / / /   =========|_|==============|___/=/_/_/_/   :: Spring Boot ::        (v2.3.0.RELEASE)   2020-06-03 14:43:36.810  INFO 1 --- [           main] n.p.p.o.SpringApplication   : Starting SpringApplication v0.0.1-SNAPSHOT on c41863fe7cb8 with PID 1 (/spring-app.jar started by root in /)  2020-06-03 14:43:36.814  INFO 1 --- [           main] n.p.p.o.SpringApplication   : No active profile set, falling back to default profiles: default  2020-06-03 14:43:38.750  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)  2020-06-03 14:43:38.781  INFO 1 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]  2020-06-03 14:43:38.782  INFO 1 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.35]  2020-06-03 14:43:38.875  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext  2020-06-03 14:43:38.875  INFO 1 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1991 ms  2020-06-03 14:43:39.338  INFO 1 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'  2020-06-03 14:43:39.663  INFO 1 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 3 endpoint(s) beneath base path '/actuator'  2020-06-03 14:43:39.734  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''  2020-06-03 14:43:39.757  INFO 1 --- [           main] n.p.p.o.SpringApplication   : Started SpringApplication in 3.975 seconds (JVM running for 4.953)  2020-06-03 14:44:15.560  INFO 1 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'  2020-06-03 14:44:15.561  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'  2020-06-03 14:44:15.587  INFO 1 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms </code></pre>  <p>What do I need to add to make sure Spring makes a connection to the database? I want to test this docker environment setup before continuing. </p> ",
    "OwnerUserId": "5762756",
    "LastActivityDate": "2020-06-03T15:23:20.173",
    "Title": "What are the minimum requirements for Spring JPA",
    "Tags": "<java><spring-boot><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Take a look at Spring <a href='https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-sql.html' rel='nofollow noreferrer'>References</a>. </p>  <p>To have a connection you just need to define the right properties in <code>application.properties</code>. To do a bit more you need to create at least one entity and call it.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "63045613",
    "PostTypeId": "1",
    "CreationDate": "2020-07-23T01:45:18.607",
    "Score": "0",
    "ViewCount": "136",
    "Body": "<p>I am new in docker and spring boot.So,I created 1 docker-compose.yml for my app</p> <pre><code>version: '3'  services:    zookeeper:    image: wurstmeister/zookeeper   container_name: zookeeper     ports:      - &quot;2181:2181&quot;     kafka:     image: wurstmeister/kafka    container_name: kafka    ports:     - &quot;9092:9092&quot;    environment:    KAFKA_ADVERTISED_HOST_NAME: localhost    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181    volumes:     - /var/run/docker.sock:/var/run/docker.sock    web:     build:      context: ./php      dockerfile: Dockerfile     container_name: loginform     restart: always     volumes:      - ./login2:/var/www/html       ports:      - &quot;8081:80&quot; </code></pre> <p>,in which the <strong>web</strong> has a dockerfile for php. Also in spring boot I created an application.yml.</p> <pre><code>server:   port: 8888  spring:  kafka:   producer:    bootstrap-servers: localhost:9092    key-serializer: org.apache.kafka.common.serialization.StringSerializer </code></pre> <p>After that I execute my app and it is run in local machine. Now the problem is that I want to send some data via curl with php in spring-boot but the problem is that i don't know the exact url. I mean that I try to POST data via curl in</p> <ul> <li><em>http://localhost(or 127.0.0.1):8888/publish</em></li> </ul> <p>which is the port for spring-boot. With Postman it works but I want to make it work with php. Here is also my Controller Spring for Spring Boot.</p> <pre><code>package com.examplekafka.springkafkaproducer;    import org.springframework.beans.factory.annotation.Autowired;   import org.springframework.kafka.core.KafkaTemplate;   import org.springframework.web.bind.annotation.RestController;   import org.springframework.web.bind.annotation.PostMapping;   import org.springframework.web.bind.annotation.RequestBody;      @RestController    public class DemoController {    @Autowired   KafkaTemplate&lt;String,Book&gt; kafkaTemplate;    private static final String Topic = &quot;testTopic&quot;;    @PostMapping(&quot;/publish&quot;)   public String publishMessage(@RequestBody Book book)   {     kafkaTemplate.send(Topic, book);     return &quot;Published Success&quot;;   } </code></pre> <p>}</p> <p>Can someone help me to find the right URL for making the communication? I don't know where I have to search or how I declare it. I tried without docker via Xampp and it worked right.</p> ",
    "OwnerUserId": "9706146",
    "LastActivityDate": "2020-07-30T21:04:01.867",
    "Title": "Communication Containers in a local machine via Rest in php and Spring boot",
    "Tags": "<spring><spring-boot><docker><docker-compose><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>To refer to other Docker services, you use the service names located under <code>services:</code> in your YAML - <a href='https://docs.docker.com/compose/networking/' rel='nofollow noreferrer'>Networking in Compose</a></p> <hr /> <p>Also</p> <p><code>KAFKA_ADVERTISED_HOST_NAME: localhost</code> is incorrect, as that property is deprecated in favor of <code>KAFKA_LISTENERS</code>, <a href='https://github.com/wurstmeister/kafka-docker/wiki/Connectivity' rel='nofollow noreferrer'>as per the wiki</a>, but you should be advertising the external hostname of the container (<code>kafka</code>), not <code>localhost</code></p> <blockquote> <p>I tried without docker via Xampp and it worked right</p> </blockquote> <p>This is the same as saying &quot;Works on my machine&quot;. If you were to deploy that code in any other environment and split your services onto several other machines, it would not, regardless of using Docker.</p> "
  },
  {
    "Id": "63102497",
    "PostTypeId": "1",
    "AcceptedAnswerId": "63102797",
    "CreationDate": "2020-07-26T15:59:03.047",
    "Score": "0",
    "ViewCount": "462",
    "Body": "<p>I'm building a application with JAVA 11, maven, spring. It has a root pom to organize all child modules as seen on: <a href='https://github.com/erickmob/spring-petclinic-microservices' rel='nofollow noreferrer'>https://github.com/erickmob/spring-petclinic-microservices</a></p> <p>Here's the project structure:</p> <p><a href='https://i.stack.imgur.com/s0c3K.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/s0c3K.png' alt='project structure' /></a></p> <p>I've tried to create on the root project this docker-compose.yml:</p> <pre><code>  version: '2'     services:       config-server:         build:           context: ./config-server           dockerfile: Dockerfile         image: config-server         container_name: config-server         mem_limit: 512M         ports:           - 8888:8888 </code></pre> <p>And in the config-server this dockerfile:</p> <pre><code>FROM maven:3.6.3-adoptopenjdk-11 as build  WORKDIR /usr/src/config-server/ COPY . /usr/src/config-server/  RUN mvn clean package  FROM adoptopenjdk/openjdk11:alpine-jre  RUN addgroup -S spring &amp;&amp; adduser -S spring -G spring  RUN mkdir -p /files &amp;&amp;  \\     chown -R spring:spring /files  USER spring:spring   VOLUME /files  WORKDIR /app  COPY --from=build /usr/src/config-server/target/config-server-0.0.1-SNAPSHOT.jar /app/app.jar  EXPOSE 8888  ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;] </code></pre> <p>But it keeps given me this output error:</p> <pre><code>Building config-server Step 1/13 : FROM maven:3.6.3-adoptopenjdk-11 as build  ---&gt; 739e519745cd Step 2/13 : WORKDIR /usr/src/config-server/  ---&gt; Using cache  ---&gt; da21e56bb1f0 Step 3/13 : COPY . /usr/src/config-server/  ---&gt; Using cache  ---&gt; 08a5585f625f Step 4/13 : RUN mvn clean package  ---&gt; Running in ed76a0ae6b41 [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.erickmob.petclinic:config-server:1.0.0-SNAPSHOT: Could not find artifact com.erickmob.pet-clinic:pet-clinic:pom:1.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 13  @  [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR]    [ERROR]   The project com.erickmob.petclinic:config-server:1.0.0-SNAPSHOT (/usr/src/config-server/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.erickmob.petclinic:config-server:1.0.0-SNAPSHOT: Could not find artifact com.erickmob.pet-clinic:pet-clinic:pom:1.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 13 -&gt; [Help 2] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException ERROR: Service 'config-server' failed to build: The command '/bin/sh -c mvn clean package' returned a non-zero code: 1 </code></pre> <p>If I make a <code>mvn clean</code> install on root folder or config-server folder, everything is ok, but when  I try to run docker-compose build it gives me error saying that cannot found the parent pom.</p> ",
    "OwnerUserId": "2589325",
    "LastEditorUserId": "530160",
    "LastEditDate": "2020-07-26T16:59:19.523",
    "LastActivityDate": "2020-07-26T17:18:28.193",
    "Title": "Can't dockerize spring micro-services multi module app",
    "Tags": "<spring-boot><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>This is <strong>not really</strong> Docker, but Maven.</p> <p>You are building your <code>config-server/</code> project only (and here is when Docker is <em>in the middle</em>) but the &quot;context&quot; sent to Docker is <strong>just</strong> what's inside <code>config-server/</code> and not the entire project. To build <code>config-server/</code> you need the entire project because you are referring/using a <em>parent</em> POM.</p> ",
    "highest_rated_answer": "<p>IIUC,</p> <p><strong>docker-compose.yml</strong></p> <pre><code>version: &quot;2&quot; services:   config-server:     build:       context: ./       dockerfile: Dockerfile     image: config-server     container_name: config-server     mem_limit: 512M     ports:       - 8888:8888 </code></pre> <p><strong>Dockerfile</strong></p> <pre><code>FROM maven:3.6.3-adoptopenjdk-11 as build  COPY . /usr/src/  WORKDIR /usr/src/   RUN mvn clean package  FROM adoptopenjdk/openjdk11:alpine-jre  RUN addgroup -S spring &amp;&amp; adduser -S spring -G spring  RUN mkdir -p /files &amp;&amp;  \\         chown -R spring:spring /files  USER spring:spring   VOLUME /files  WORKDIR /app  COPY --from=build /usr/src/config-server/target/config-server-0.0.1-SNAPSHOT.jar /app/app.jar  EXPOSE 8888  ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]  </code></pre> <p>run the following command <code>docker-compose up -d</code> logs:</p> <pre><code>root@ubuntu:/home/sathya/Desktop/stackoverflo/docker/spring-boot/spring-petclinic-microservices# docker-compose up -d Building config-server Step 1/13 : FROM maven:3.6.3-adoptopenjdk-11 as build  ---&gt; a4579cf3debf Step 2/13 : COPY . /usr/src/  ---&gt; 9841e6033a86 Step 3/13 : WORKDIR /usr/src/  ---&gt; Running in aa2526d60d42 Removing intermediate container aa2526d60d42  ---&gt; 6e3b35f66218 Step 4/13 : RUN mvn clean package  ---&gt; Running in 5b2bac4dcef4 [INFO] Scanning for projects... Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.3.2.RELEASE/spring-boot-starter-parent-2.3.2.RELEASE.pom Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.3.2.RELEASE/spring-boot-starter-parent-2.3.2.RELEASE.pom (8.6 kB at 2.2 kB/s) Downloading from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.2.RELEASE/spring-boot-dependencies-2.3.2.RELEASE.pom Downloaded from central: https://repo.maven.apache.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.2.RELEASE/spring-boot-dependencies-2.3.2.RELEASE.pom (122 kB at 25 kB/s) Downloading from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.6.1/java-driver-bom-4.6.1.pom Downloaded from central: https://repo.maven.apache.org/maven2/com/datastax/oss/java-driver-bom/4.6.1/java-driver-bom-4.6.1.pom (3.8 kB at 3.1 kB/s) Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/metrics/metrics-bom/4.1.11/metrics-bom-4.1.11.pom </code></pre> "
  },
  {
    "Id": "63307957",
    "PostTypeId": "1",
    "CreationDate": "2020-08-07T19:16:56.017",
    "Score": "0",
    "ViewCount": "956",
    "Body": "<p>I am trying to build a maven project using docker and submit a generated jar in flink. But in the end, some exception is occurring. Anyone can please help me to resolve the exception.</p> <h2>Dockerfile</h2> <pre><code>FROM maven:3.6-jdk-8-slim AS builder  COPY src /home/app/src COPY pom.xml /home/app  RUN mvn -f /home/app/pom.xml clean package  FROM flink:1.10.0-scala_2.12 COPY --from=builder /home/app/target/demo-1.0-SNAPSHOT-jar-with-dependencies.jar /usr/local/lib/demo.jar  ENV FLINK_HOME=/opt/flink ENV PATH=$FLINK_HOME/bin:$PATH  WORKDIR $FLINK_HOME  EXPOSE 8081  ENTRYPOINT [&quot;./bin/flink&quot;, &quot;run&quot;, &quot;-c&quot;, &quot;com.demo.app.App&quot;, &quot;/usr/local/lib/demo.jar&quot;] </code></pre> <h2>docker-compose.yml</h2> <pre><code>version: &quot;3&quot; services:   demo:     build:       context: .       dockerfile: Dockerfile     container_name: demoapp     expose:       - &quot;6121&quot;       - &quot;6122&quot;       - &quot;6123&quot;     ports:       - &quot;8081:8081&quot; </code></pre> <h2>Exception</h2> <pre><code>------------------------------------------------------------ Building demo Step 1/10 : FROM maven:3.6-jdk-8-slim AS builder  ---&gt; addee4586ff4 Step 2/10 : COPY src /home/app/src  ---&gt; Using cache  ---&gt; 24e9837c9bc5 Step 3/10 : COPY pom.xml /home/app  ---&gt; Using cache  ---&gt; 13965367c201 Step 4/10 : RUN mvn -f /home/app/pom.xml clean package  ---&gt; Using cache  ---&gt; 0a6dec38b357 Step 5/10 : FROM flink:1.10.0-scala_2.12  ---&gt; d373f7bf2f75 Step 6/10 : COPY --from=builder /home/app/target/demo-1.0-SNAPSHOT-jar-with-dependencies.jar /usr/local/lib/demo.jar  ---&gt; 431c3080d639 Step 7/10 : ENV FLINK_HOME=/opt/flink  ---&gt; Running in bbae40bc5d84 Removing intermediate container bbae40bc5d84  ---&gt; 59171a4fd11e Step 8/10 : ENV PATH=$FLINK_HOME/bin:$PATH  ---&gt; Running in 45e30a54e742 Removing intermediate container 45e30a54e742  ---&gt; 4e986527391a Step 9/10 : WORKDIR $FLINK_HOME  ---&gt; Running in 1f0ca2067595 Removing intermediate container 1f0ca2067595  ---&gt; aa817f1dee2d Step 10/10 : ENTRYPOINT [&quot;./bin/flink&quot;, &quot;run&quot;, &quot;-c&quot;, &quot;com.demo.app.App&quot;, &quot;/usr/local/lib/demo.jar&quot;]  ---&gt; Running in f984981dfbc8 Removing intermediate container f984981dfbc8  ---&gt; 1cdc22379a90 Successfully built 1cdc22379a90 Successfully tagged demo:latest Creating demo ...  Creating demo ... done Attaching to demo demo |  demo | ------------------------------------------------------------ demo |  The program finished with the following exception: demo |  demo | org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: java.util.concurrent.ExecutionException: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph. demo |  at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:335) demo |  at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:205) demo |  at org.apache.flink.client.ClientUtils.executeProgram(ClientUtils.java:138) demo |  at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:664) demo |  at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:213) demo |  at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:895) demo |  at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:968) demo |  at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30) demo |  at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:968) demo | Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph. demo |  at org.apache.flink.util.ExceptionUtils.rethrow(ExceptionUtils.java:199) demo |  at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.executeAsync(StreamExecutionEnvironment.java:1741) demo |  at org.apache.flink.streaming.api.environment.StreamContextEnvironment.executeAsync(StreamContextEnvironment.java:94) demo |  at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:63) demo |  at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1620) demo |  at com.demo.app.App.main(App.java:105) demo |  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) demo |  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) demo |  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) demo |  at java.lang.reflect.Method.invoke(Method.java:498) demo |  at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:321) demo |  ... 8 more demo | Caused by: java.util.concurrent.ExecutionException: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph. demo |  at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357) demo |  at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908) demo |  at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.executeAsync(StreamExecutionEnvironment.java:1736) demo |  ... 17 more demo | Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph. demo |  at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$7(RestClusterClient.java:359) demo |  at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884) demo |  at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866) demo |  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488) demo |  at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990) demo |  at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:287) demo |  at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774) demo |  at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750) demo |  at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488) demo |  at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990) demo |  at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:342) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:500) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:493) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:472) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:413) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:538) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:531) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:111) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:323) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:685) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:632) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:549) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) demo |  at org.apache.flink.shaded.netty4.io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) demo |  at java.lang.Thread.run(Thread.java:748) demo | Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted. demo |  at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:284) demo |  ... 21 more demo | Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081 demo |  at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292) demo |  at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308) demo |  at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957) demo |  at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940) demo |  ... 19 more demo | Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081 demo | Caused by: java.net.ConnectException: Connection refused demo |  at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method) demo |  at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:336) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:685) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:632) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:549) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) demo |  at org.apache.flink.shaded.netty4.io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) demo |  at java.lang.Thread.run(Thread.java:748) </code></pre> <p>Also, checked the running containers, but not running any container.</p> <h2>Build Command that I used</h2> <pre><code>sudo docker-compose up --build </code></pre> <h2>Also tried to build using this command</h2> <pre><code>docker run --rm -it demo:latest sudo docker build -t demo . </code></pre> <p>But the result same exception</p> ",
    "OwnerUserId": "13090273",
    "LastActivityDate": "2020-08-09T18:58:29.323",
    "Title": "Build a Maven project and submit as the Flink job using Docker",
    "Tags": "<java><docker><maven><docker-compose><apache-flink>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>This isn't how to go about running Flink with docker. You need to arrange for a Job Manager and at least one Task Manager to be started -- you can't use <code>./bin/flink run</code> without first creating a cluster for the job to run on.</p> <p>A good way to learn your way around this topic is to work through the <a href='https://ci.apache.org/projects/flink/flink-docs-stable/try-flink/flink-operations-playground.html' rel='nofollow noreferrer'>Flink Operations Playground</a>, which includes a complete docker-based infrastructure you can use as a starting point for your own projects.</p> <p>There's also <a href='https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/docker.html' rel='nofollow noreferrer'>documentation on how to run Flink on Docker</a>.</p> "
  },
  {
    "Id": "65256962",
    "PostTypeId": "1",
    "CreationDate": "2020-12-11T18:47:04.380",
    "Score": "0",
    "ViewCount": "453",
    "Body": "<p>I have this scenery in my Linux local machine.</p> <ol> <li><p>mysql database run in my localhost (not in a container)</p> </li> <li><p>A Java application, run in a container, needs to connect to Mysql.</p> </li> <li><p>I'm using IntelliJ and Maven to develop code.</p> </li> </ol> <p>If I run the code from IntelliJ the application runs well, but if I generate the docker image and deploy it, the error is</p> <blockquote> <p>Error de conexion: java.sql.SQLException: No suitable driver found for jdbc:mysql://localhost:3306/database_name?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</p> </blockquote> <p>I can't understand if the error depends on the library jar mysql file that isn't correctly in the path or that there is something wrong in my docker-compose or in my.cnf.</p> <p>These are all the configuration and the java code.</p> <p>Thank's in advance for any suggestion!</p> <p><strong>Java code</strong>, where config.getMySqlConnection() is</p> <p><em>&quot;jdbc:mysql://localhost:3306/database_name?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</em></p> <pre><code>try {     // DriverManager: The basic service for managing a set of JDBC drivers.     dbConnection = DriverManager.getConnection(config.getMySqlConnection(), config.getMySqlLogin(), config.getMySqlPassword());      if (dbConnection != null)     {         System.out.println(&quot;Connection Successful! Enjoy. Now it's time to push data&quot;);     }     else     {         System.out.println(&quot;Failed to make connection!&quot;);     } } catch (SQLException e) {     System.out.println(&quot;Error de conexion: &quot;+e);     e.printStackTrace(); } catch (Exception e) {     System.out.println(&quot;Error desconocido: &quot;+e);     e.printStackTrace(); } </code></pre> <p><strong>my.cnf</strong></p> <pre><code>[mysqld]  !includedir /etc/mysql/conf.d/ !includedir /etc/mysql/mysql.conf.d/  port = 3306 bind-address = 0.0.0.0 </code></pre> <p><strong>Docker-Compose</strong></p> <pre><code>version: '2.3' services:   stationfeeder:     image: repository/service_name:2.0     container_name: containername     mem_limit: 2048m     entrypoint:         - java         - -cp         - /app/resources:/app/classes:/app/libs/         - -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector         - com.prject-entrypoint.Host         - /properties     network_mode: &quot;host&quot;     environment:         - JAVA_OPTS=&quot;-Xms2g -Xmx2g&quot;     volumes:       - ./properties:/properties     restart: always     logging:         driver: &quot;json-file&quot;         options:             max-size: &quot;100m&quot;             max-file: &quot;10&quot; </code></pre> <p><strong>pom.xml</strong></p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.project.name&lt;/groupId&gt;     &lt;artifactId&gt;http-opendata&lt;/artifactId&gt;     &lt;version&gt;2.0&lt;/version&gt;      &lt;properties&gt;         &lt;avro.version&gt;1.8.2&lt;/avro.version&gt;         &lt;kafka.version&gt;0.11.0.1&lt;/kafka.version&gt;         &lt;confluent.version&gt;3.3.1&lt;/confluent.version&gt;         &lt;jib-maven-plugin.version&gt;2.5.0&lt;/jib-maven-plugin.version&gt;     &lt;/properties&gt;      &lt;!--necessary to resolve confluent dependencies--&gt;     &lt;repositories&gt;         &lt;repository&gt;             &lt;id&gt;confluent&lt;/id&gt;             &lt;url&gt;http://packages.confluent.io/maven/&lt;/url&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;             &lt;artifactId&gt;okhttp&lt;/artifactId&gt;             &lt;version&gt;3.4.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.json&lt;/groupId&gt;             &lt;artifactId&gt;json&lt;/artifactId&gt;             &lt;version&gt;20140107&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.jayway.jsonpath&lt;/groupId&gt;             &lt;artifactId&gt;json-path&lt;/artifactId&gt;             &lt;version&gt;2.4.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.20&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;             &lt;artifactId&gt;avro&lt;/artifactId&gt;             &lt;version&gt;${avro.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;             &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;             &lt;version&gt;${kafka.version}&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;io.confluent&lt;/groupId&gt;             &lt;artifactId&gt;kafka-avro-serializer&lt;/artifactId&gt;             &lt;version&gt;${confluent.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;             &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.6.1&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.7.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;source&gt;1.8&lt;/source&gt;                     &lt;target&gt;1.8&lt;/target&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.2.4&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;shade&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;transformers&gt;                                 &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;                                     &lt;resource&gt;META-INF/services/java.sql.Driver&lt;/resource&gt;                                 &lt;/transformer&gt;                             &lt;/transformers&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.8&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;copy-dependencies&lt;/id&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;copy-dependencies&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;              &lt;!--for specific record--&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;                 &lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;${avro.version}&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;generate-sources&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;schema&lt;/goal&gt;                             &lt;goal&gt;protocol&lt;/goal&gt;                             &lt;goal&gt;idl-protocol&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;sourceDirectory&gt;${project.basedir}/src/main/resources/avro&lt;/sourceDirectory&gt;                             &lt;stringType&gt;String&lt;/stringType&gt;                             &lt;createSetters&gt;false&lt;/createSetters&gt;                             &lt;enableDecimalLogicalType&gt;true&lt;/enableDecimalLogicalType&gt;                             &lt;fieldVisibility&gt;private&lt;/fieldVisibility&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;             &lt;!--force discovery of generated classes--&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;                 &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.0.0&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;add-source&lt;/id&gt;                         &lt;phase&gt;generate-sources&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;add-source&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;sources&gt;                                 &lt;source&gt;target/generated-sources/avro&lt;/source&gt;                             &lt;/sources&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;                 &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;${jib-maven-plugin.version}&lt;/version&gt;                 &lt;configuration&gt;                     &lt;container&gt;                         &lt;mainClass&gt;com.nameserviceHost&lt;/mainClass&gt;                         &lt;args&gt;                             &lt;arg&gt;/opt/asd/properties&lt;/arg&gt;                         &lt;/args&gt;                     &lt;/container&gt;                     &lt;from&gt;                         &lt;image&gt;openjdk:8u212-jre&lt;/image&gt;                     &lt;/from&gt;                     &lt;to&gt;                         &lt;image&gt;qwerty/name-service:${project.version}&lt;/image&gt;                     &lt;/to&gt;                     &lt;extraDirectories&gt;                         &lt;paths&gt;/opt/asd&lt;/paths&gt;                          &lt;permissions&gt;                             &lt;permission&gt;                                 &lt;file&gt;/opt/asd/properties&lt;/file&gt;                                 &lt;mode&gt;755&lt;/mode&gt;                              &lt;/permission&gt;                         &lt;/permissions&gt;                     &lt;/extraDirectories&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "1045906",
    "LastEditorUserId": "1045906",
    "LastEditDate": "2020-12-11T19:40:10.650",
    "LastActivityDate": "2020-12-13T16:56:54.507",
    "Title": "Error de conexion: java.sql.SQLException: No suitable driver found for jdbc:mysql://localhost:3306",
    "Tags": "<java><mysql><maven><docker-compose><driver>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I've just found the solution. There is an error in my docker-file...a stupid error...</p> <pre><code>version: '2.3' services: stationfeeder: image: projectName/imageName:2.5 container_name: name mem_limit: 2048m entrypoint: - java - -cp -/app/resources:/app/classes:/app/libs/*   &lt;------ without /* **doesn't run!** </code></pre> <p>etc...</p> "
  },
  {
    "Id": "65602884",
    "PostTypeId": "1",
    "CreationDate": "2021-01-06T20:21:56.590",
    "Score": "0",
    "ViewCount": "957",
    "Body": "<p>I have the following setup for my DevOps environment, orchestrated with Docker Compose:</p> <p>(simplified) <code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   nexus:     build: ./nexus/.     expose:       - 8081     networks:       - devops-network   jenkins:     build: ./jenkins/.     expose:       - 8080     depends_on:       - nexus     networks:       - devops-network   nginx:     image: nginx:1.19.5     ports:       - 80:80     depends_on:       - nexus       - jenkins     networks:       - devops-network networks:   devops-network: </code></pre> <p>(simplified) <code>nginx.conf</code>:</p> <pre><code>http {     upstream docker-jenkins {         server jenkins:8080;     }     upstream docker-nexus {         server nexus:8081;     }      server {         server_name  jenkins.homenetwork.dns;          location / {             proxy_pass http://docker-jenkins;         }     }      server {         server_name  nexus.homenetwork.dns;          location / {             proxy_pass http://docker-nexus;         }     } } </code></pre> <p>Jenkins can communicate with Nexus through a Docker network.  If I enter the Jenkins container, then <code>ping nexus</code> and <code>curl http://nexus:8081</code> give me positive responses (I get feedback from Nexus).</p> <p>But when I run a Jenkins pipeline with a nested Docker agent for Maven:</p> <pre><code>pipeline {     agent {         docker {  // successfully pulls image             image 'maven:3.6.3-openjdk-11'             args '-v /root/.m2:/root/.m2'         }     }     stages {         stage('Maven build') {             steps {                 mavenBuildStep()             }         }         stage('Upload'){             steps {                 withMaven(mavenSettingsConfig: 'cdb64ca9-d8e1-4d19-b486-e86c0ee75f50')                     {                         echo 'uploading Maven artifacts'                         sh 'mvn deploy -DskipTests'   // fails because it can't find nexus                     }              }         }     } } </code></pre> <p>and maven <code>settings.xml</code> with the above id:</p> <pre><code>&lt;servers&gt;     &lt;server&gt;         &lt;id&gt;nexus-snapshots&lt;/id&gt;         &lt;username&gt;jenkins&lt;/username&gt;         &lt;password&gt;${JENKINS_NEXUS_PASSWORD}&lt;/password&gt;     &lt;/server&gt; &lt;/servers&gt; </code></pre> <p>and this in my <code>pom.xml</code>:</p> <pre><code>&lt;distributionManagement&gt;     &lt;snapshotRepository&gt;         &lt;id&gt;nexus-snapshots&lt;/id&gt;         &lt;url&gt;http://nexus:8081/repository/maven-snapshots/&lt;/url&gt;     &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; </code></pre> <p>then it says:</p> <blockquote> <p>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project parent: Failed to retrieve remote metadata ... from/to nexus-snapshots (http://nexus:8081/repository/maven-snapshots/): Transfer failed for http://nexus:8081/repository/maven-snapshots/.../1.0.0-SNAPSHOT/maven-metadata.xml: <strong>Unknown host nexus: No address associated with hostname</strong></p> </blockquote> <p>When I change the repository url in the <code>pom.xml</code> to the network IP of the Nexus container:</p> <pre><code>&lt;distributionManagement&gt;     &lt;snapshotRepository&gt;         &lt;id&gt;nexus-snapshots&lt;/id&gt;         &lt;url&gt;http://172.26.0.2:8081/repository/maven-snapshots/&lt;/url&gt;     &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; </code></pre> <p>it then times out:</p> <blockquote> <p>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project parent: ... Connect to 172.26.0.2:8081 [/172.26.0.2] failed: Connection timed out</p> </blockquote> <p>What is going on? I mapped the host Docker daemon to the Jenkins container with <code>setfacl -m user:jenkins:rw /var/run/docker.sock</code>, so it should be able to reach the Nexus container?  When I pull the Docker image in the pipeline, the image gets added to my host system and doesn't need to be downloaded again the next time so this seems to be in working order.  Is it because the 'Docker inside Docker' doesn't have access to <code>devop-network</code>?</p> <p>Ideally I would be able to set <code>http://nexus.homenetwork.dns/repository/maven-snapshots/</code> as url in my pom instead, but this doesn't seem possible.  Does anyone have experience with this kind of setup?</p> <h2>Update</h2> <p>To validate my suspicions, I used <code>agent any</code> instead of a Docker agent in the Jenkins pipeline and I installed maven in the Jenkins container.  With that setup, running the Jenkins pipeline correctly uploads the snapshots with url <code>http://nexus:8081/repository/maven-snapshots/</code>.</p> <p>This is not a bad solution, but I'm left wondering how to make it work with the Docker agent out of pure curiosity.</p> ",
    "OwnerUserId": "2959880",
    "LastEditorUserId": "2959880",
    "LastEditDate": "2021-01-06T20:59:07.340",
    "LastActivityDate": "2021-02-05T09:00:27.363",
    "Title": "Jenkins Docker container can't upload artifact to Nexus Docker container",
    "Tags": "<maven><jenkins><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Hey I had the very same problem and I was looking for a solution for quite some time now. I also didn't get it at first. However, I figured it out at the end to be a quite basic docker thing. The docker agent basically runs a new docker container. If you want it to access another already existing one with just 'nexus' you have to add it to the same bridge network. In your case you need to add</p> <pre><code>pipeline { agent { docker { ... args  '--net=&quot;devops-network&quot;' } } </code></pre> <p>This at least solved it for me.</p> "
  },
  {
    "Id": "65721618",
    "PostTypeId": "1",
    "CreationDate": "2021-01-14T15:12:28.277",
    "Score": "0",
    "ViewCount": "87",
    "Body": "<p>I have some experience creating microservices architectured projects using docker and PHP APIs,</p> <p>Now I migrated to the spring boot framework to build a microservices project.</p> <p>The question that I have is how do I manage to create volumes and mount them in the  corresponding containers knowing that java is a compiled programming language so even if a mount the <code>.jar</code> file build from maven it will be deprecated as soon as commit a change in the host repository.</p> <p>Is there any way to create a workflow like building the <code>.jar</code> file, mount it to the container and within the container build the new release as transparent as possible?</p> ",
    "OwnerUserId": "8651786",
    "LastEditorUserId": "13464279",
    "LastEditDate": "2021-01-14T15:16:44.570",
    "LastActivityDate": "2021-01-14T15:16:44.570",
    "Title": "Spring Boot microservices Volumes",
    "Tags": "<spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "66388921",
    "PostTypeId": "1",
    "CreationDate": "2021-02-26T15:54:17.530",
    "Score": "0",
    "ViewCount": "363",
    "Body": "<p>I am getting following error: <em>Failed to execute goal [32morg.apache.maven.plugins:maven-failsafe-plugin:2.22.2:integration-test[m [1m(default-cli)[m on project [36madcallservice[m: [1;31m/apps/slave/workspace/ServiceDevIT/target/failsafe-reports/failsafe-summary.xml (No such file or directory)</em></p> <p>Following is the set-up:</p> <ol> <li>I am running trying to run this on Jenkins node.</li> <li>Following is my docker-compose file:</li> </ol> <pre><code>version: '2' services:   redis:     image: &quot;redis:alpine&quot;     ports:       - &quot;6379:6379&quot;   web:     depends_on:       - redis     build: .     ports:      - &quot;8080:8080&quot;     environment:      - SPRING_PROFILES_ACTIVE=test      - ENVIRONMENT_NAME=test </code></pre> <ol start='3'> <li>This is my shell script on jenkins :</li> </ol> <pre><code>    make build     docker-compose build     docker-compose up -d     mvn failsafe:integration-test </code></pre> <p>I have included the following entry in my pom.xml:</p> <pre><code>    &lt;plugin&gt;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;         &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;includes&gt;             &lt;include&gt;**/IT*.java&lt;/include&gt;             &lt;include&gt;**/*IT.java&lt;/include&gt;             &lt;include&gt;**/*ITCase.java&lt;/include&gt;           &lt;/includes&gt;         &lt;/configuration&gt;         &lt;executions&gt;           &lt;execution&gt;             &lt;id&gt;failsafe-integration-tests&lt;/id&gt;             &lt;phase&gt;integration-test&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;integration-test&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;           &lt;execution&gt;             &lt;id&gt;failsafe-verify&lt;/id&gt;             &lt;phase&gt;verify&lt;/phase&gt;             &lt;goals&gt;               &lt;goal&gt;verify&lt;/goal&gt;             &lt;/goals&gt;           &lt;/execution&gt;         &lt;/executions&gt;       &lt;/plugin&gt; </code></pre> <p>Also, the integration tests are in file named ControllerIT.java</p> ",
    "OwnerUserId": "7658639",
    "LastActivityDate": "2021-02-26T15:54:17.530",
    "Title": "'Permission denied error' when running integration test using mvn failsafe:integration-test on jenkins node",
    "Tags": "<maven><jenkins><docker-compose><integration-testing><maven-failsafe-plugin>",
    "AnswerCount": "0",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "66683927",
    "PostTypeId": "1",
    "CreationDate": "2021-03-18T02:27:59.677",
    "Score": "0",
    "ViewCount": "290",
    "Body": "<p>Which would be the correct value for this if I have an springboot app running on jdk 15? or where can I find the correct value for it?</p> <pre><code>FROM maven:3.6.3-jdk-11 AS builder </code></pre> <p>I tried 3.6.3-jdk-15 but of course that was a guess and it did not work, is there a source from where I can get this?. (trying to use maven for building the image)</p> ",
    "OwnerUserId": "10344440",
    "LastActivityDate": "2021-03-18T04:16:41.747",
    "Title": "Dockerfile maven value",
    "Tags": "<docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You can find the exact version of maven you want at DockerHub and tab Tag</p> <p><a href='https://hub.docker.com/_/maven?tab=tags&amp;page=1&amp;ordering=last_updated' rel='nofollow noreferrer'>https://hub.docker.com/_/maven?tab=tags&amp;page=1&amp;ordering=last_updated</a>.</p> "
  },
  {
    "Id": "66858280",
    "PostTypeId": "1",
    "CreationDate": "2021-03-29T16:50:19.303",
    "Score": "0",
    "ViewCount": "1382",
    "Body": "<p>I have three pom.xml files, where one is the parent and the two others are the children. The parent is located in a folder named calculatorws and the two children are located separately in two folders(inside the folder calculatorws): calculatorws-calculator and calculatorws-rest and each one of them contains a pom.xml file.</p> <p>The parent pom.xml file is:</p> <pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.company&lt;/groupId&gt; &lt;artifactId&gt;calculatorws&lt;/artifactId&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt;  &lt;modules&gt;     &lt;module&gt;calculatorws-calculator&lt;/module&gt;     &lt;module&gt;calculatorws-rest&lt;/module&gt; &lt;/modules&gt; </code></pre> <p>The pom.xml file of calculatorws-rest is:</p> <pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;parent&gt;     &lt;groupId&gt;com.company&lt;/groupId&gt;     &lt;artifactId&gt;calculatorws&lt;/artifactId&gt;     &lt;version&gt;0.0.1&lt;/version&gt;     &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt; &lt;/parent&gt;  &lt;artifactId&gt;calculatorws-rest&lt;/artifactId&gt;  &lt;dependencyManagement&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;!-- Import dependency management from Spring Boot --&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;             &lt;version&gt;2.4.0.RELEASE&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; </code></pre> <p>The pom.xml file of calculatorws-calculator is:</p> <pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;parent&gt;     &lt;groupId&gt;com.company&lt;/groupId&gt;     &lt;artifactId&gt;calculatorws&lt;/artifactId&gt;     &lt;version&gt;0.0.1&lt;/version&gt;     &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt; &lt;/parent&gt;  &lt;artifactId&gt;calculatorws-calculator&lt;/artifactId&gt;  &lt;dependencyManagement&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;!-- Import dependency management from Spring Boot --&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;             &lt;version&gt;2.4.0.RELEASE&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; </code></pre> <p>I have three Dockerfiles respectively for the parent and the children.</p> <p>The Dockerfile of the parent is:</p> <pre><code>FROM maven:3-jdk-8-alpine  COPY pom.xml /application/ WORKDIR /application/ COPY . /application/ RUN mvn clean package </code></pre> <p>The Dockerfile for calculatorws-rest is:</p> <pre><code>FROM maven:3-jdk-8-alpine as builder  COPY pom.xml /calculatorws-rest/ WORKDIR /calculatorws-rest/ COPY . /calculatorws-rest/  FROM openjdk:8-jre-alpine COPY --from=builder /calculatorws-rest/target/calculatorws-rest-0.0.1.jar /rest.jar EXPOSE 8080 CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/rest.jar&quot;] </code></pre> <p>The Dockerfile for calculatorws-calculator is:</p> <pre><code>FROM maven:3-jdk-8-alpine as builder  COPY pom.xml /calculatorws-calculator/ WORKDIR /calculatorws-calculator/ COPY . /calculatorws-calculator/  FROM openjdk:8-jre-alpine COPY --from=builder /calculatorws-calculator/target/calculatorws-calculator-0.0.1.jar /calculator.jar EXPOSE 8080 CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/calculator.jar&quot;] </code></pre> <p>I run the project using the docker-compose file as shown below:</p> <pre><code>version: '3.9'  services:  rabbitmq:   image: rabbitmq:3.7.3-alpine   container_name: rabbit   ports:    - 5672:5672  application:   build: .  calculatorws-rest:   build: ./calculatorws-rest  calculatorws-calculator:   build: ./calculatorws-calculator </code></pre> <p>I fixed the error with the non resolvable parent POM by deleting the RUN mvn clean package from the Dockerfile of calculatorws-rest, but now I get this error:</p> <pre><code>No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt; or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -&gt; [Help 1] </code></pre> <p>I think I have a problem with my structure and I am not getting it.</p> ",
    "OwnerUserId": "11177543",
    "LastEditorUserId": "11177543",
    "LastEditDate": "2021-03-29T19:14:51.113",
    "LastActivityDate": "2021-03-29T19:14:51.113",
    "Title": "Docker-compose - Non-resolvable parent POM: Could not find artifact",
    "Tags": "<spring-boot><docker><maven><docker-compose><pom.xml>",
    "AnswerCount": "0",
    "CommentCount": "14",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "66989886",
    "PostTypeId": "1",
    "AcceptedAnswerId": "66992959",
    "CreationDate": "2021-04-07T16:06:33.403",
    "Score": "0",
    "ViewCount": "945",
    "Body": "<p>I have an artifact repository (set up on GitLab) for which downloading artifacts is protected by a secret token. When I try and build my project, which relies on downloading artifacts, in a Docker image it cannot download them because it does not have a settings file with the secret token to access the repository server.</p> <p><strong>My Setup</strong></p> <p>The server in my personal, local maven <code>settings.xml</code></p> <pre class='lang-xml prettyprint-override'><code>    &lt;server&gt;       &lt;id&gt;my-gitlab-maven-registry&lt;/id&gt;       &lt;configuration&gt;         &lt;httpHeaders&gt;           &lt;property&gt;             &lt;name&gt;Deploy-Token&lt;/name&gt;             &lt;value&gt;fake-deploy-token-value&lt;/value&gt;           &lt;/property&gt;         &lt;/httpHeaders&gt;       &lt;/configuration&gt;     &lt;/server&gt; </code></pre> <p>The repository in my project's <code>pom.xml</code></p> <pre class='lang-xml prettyprint-override'><code>    &lt;repository&gt;       &lt;snapshots&gt;         &lt;enabled&gt;true&lt;/enabled&gt;       &lt;/snapshots&gt;       &lt;id&gt;my-gitlab-maven-registry&lt;/id&gt;       &lt;name&gt;Main Maven Repository&lt;/name&gt;       &lt;url&gt;https://gitlab.com/api/v4/projects/1234567/packages/maven&lt;/url&gt;     &lt;/repository&gt; </code></pre> <p>My project's (simplified) <code>Dockerfile</code> (fails when it runs <code>mvn package</code>)</p> <pre class='lang-docker prettyprint-override'><code>FROM maven:3.6.3-openjdk-15-slim AS build  COPY src /home/app/src COPY pom.xml /home/app  RUN mvn -f /home/app/pom.xml clean package -DskipTests </code></pre> <p>My project's (simplified) <code>docker-compose.yml</code></p> <pre class='lang-yaml prettyprint-override'><code>version: &quot;3&quot; services:   my-app:     container_name: my-app     build: .     ports:       - 8080:8080 </code></pre> <p>I know a possible solution is to copy my local settings (with an absolute path) into the Docker image, but considering I want this project to be used by multiple people on multiple computers, I want a way to generalize passing the settings or the secret token to the docker image; so I basically want anyone who has the secret token to be able to do some sort of simple configuration to be able to build the Docker image -- I want to avoid the simplest solution of actually uploading the secret token to version control.</p> <p><strong>My Question</strong></p> <p>So what are some possible ways I might accomplish a general solution to passing a user's maven settings or the secret token to a docker image?</p> <p><strong>My Thoughts on Solutions</strong></p> <p>One potential option would be to use an environment variable to hold the secret token, similar to what's used for GitLab CI:</p> <pre class='lang-xml prettyprint-override'><code>&lt;!-- This environment variable is used in GitLab CI, but I could use a different name for the variable. --&gt; &lt;value&gt;${env.CI_JOB_TOKEN}&lt;/value&gt; </code></pre> <p>But then using an environment variable, I'm not really sure how to pass an environment variable to a service when running <code>docker-compose up</code> without actually hardcoding the environment variable within the <code>docker-compose.yml</code>.</p> ",
    "OwnerUserId": "5476186",
    "LastActivityDate": "2021-04-07T19:29:07.633",
    "Title": "Passing Secrets to Docker",
    "Tags": "<docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I would go with the env variable, as you already said</p> <pre class='lang-xml prettyprint-override'><code>&lt;value&gt;${env.YOUR_TOKEN}&lt;/value&gt; </code></pre> <p>In your Dockerfile</p> <pre><code>ARG YOUR_TOKEN RUN mvn package </code></pre> <p>Then in your docker-compose.yml</p> <pre class='lang-yaml prettyprint-override'><code>version: &quot;3&quot; services:   my-app:     container_name: my-app     build:       context: .       args:         YOUR_TOKEN: $YOUR_TOKEN     ports:       - 8080:8080 </code></pre> <p>Now this should work</p> <pre class='lang-sh prettyprint-override'><code>export YOUR_TOKEN=abc123 docker-compose build </code></pre> <p><strong>BUT</strong> You should not upload this build image, as it contains the token in its history.<br /> If you have a multistage build and the maven step is your build step, which will be thrown away, it's ok.</p> <hr /> <p>A more elegant solution would be buildkit secrets. But I don't know if they already work with docker compose. See <a href='https://docs.docker.com/develop/develop-images/build_enhancements/' rel='nofollow noreferrer'>https://docs.docker.com/develop/develop-images/build_enhancements/</a> and <a href='https://stackoverflow.com/questions/58597645/how-do-you-use-docker-build-secrets-with-docker-compose'>How do you use Docker build secrets with Docker Compose?</a></p> <hr /> <p>If you need the variable at runtime (docker-compose up) and not buildtime (docker-compose build) you can do it like this:</p> <pre class='lang-yaml prettyprint-override'><code>version: &quot;3&quot; services:   my-app:     environment:       YOUR_TOKEN: $YOUR_TOKEN     ports:       - 8080:8080 </code></pre> <p>Then</p> <pre class='lang-sh prettyprint-override'><code>export YOUR_TOKEN=abc123 docker-compose up </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "67911415",
    "PostTypeId": "1",
    "CreationDate": "2021-06-09T20:38:41.630",
    "Score": "0",
    "ViewCount": "282",
    "Body": "<p>I have simple Spring Boot application which has few other dependencies/services which it uses. It is student-demo project so nothing big, I'm just testing things out and thus I'm new to Docker.</p> <p>First off, my application uses three different services: <code>MySQL</code>, <code>RabbitMq</code> (to send some dummy messages to other Spring app), <code>Liquibase</code> to initialize tables and insert data.</p> <p>Application builds fine after <code>mvn clean</code> and <code>mvn install</code>. But the goal is to start it from cmd using Docker compose. This is my 2nd day with Docker.</p> <p>Here is how <code>Dockerfile</code> looks like:</p> <pre><code>FROM openjdk:8 ADD target/Consumer-0.0.1-SNAPSHOT.jar Consumer-0.0.1-SNAPSHOT.jar EXPOSE 8085 ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;Consumer-0.0.1-SNAPSHOT.jar&quot;] </code></pre> <p>And here is <code>docker-compose.yml</code>:</p> <pre><code>version: '3'  services:     #service 1: definition of mysql database     db:       image: mysql:latest       container_name: mysql-db2          environment:         - MYSQL_ROOT_PASSWORD=root         - MYSQL_USER=root       ports:         - 3306:3306       restart: always            rabbitmq:       image: rabbitmq:management       ports:         - 5672:5672         - 15672:15672              liquibase:       build: .       image: ubuntu-jdk8-liquibase:latest       depends_on:         - db       network_mode: &quot;host&quot;           #service 3: definition of your spring-boot app      consumerservice:                        #it is just a name, which will be used only in this file.       image: consumer-image              #name of the image after dockerfile executes       container_name: consumer-container  #name of the container created from docker image       build:         context: .                          #docker file path (. means root directory)         dockerfile: Dockerfile              #docker file name       ports:         - 8085:8085                     #docker containter port with your os port       restart: always                depends_on:                           #define dependencies of this app         - db         - rabbitmq                                #dependency name (which is defined with this name 'db' in this file earlier)       environment:         SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/consumer?createDatabaseIfNotExist=true         SPRING_DATASOURCE_USERNAME: root         SPRING_DATASOURCE_PASSWORD: root </code></pre> <p>After cd into project directory and running <code>docker-compose ps</code>:</p> <p><a href='https://i.stack.imgur.com/hudtk.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/hudtk.png' alt='enter image description here' /></a></p> <p>My question is, what am I missing, do I need to add some more things to <code>Dockerfile</code>? Is the syntax correct in <code>.yml</code>? I'm running windows and have Docker Desktop installed.</p> <p><strong>UPDATE 1</strong> After executing command <code>docker-compose up</code>, I noticed it started downloading image for liquibase and mysql (it took couple of minutes). After that I got an error.</p> <pre><code>Removing mysql-db2 Recreating f7bf19092bb4_mysql-db2 ... Recreating f7bf19092bb4_mysql-db2 ... error      ERROR: for f7bf19092bb4_mysql-db2  Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.          ERROR: for db  Cannot start service db: Ports are not available: listen tcp 0.0.0.0:3306: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.     ERROR: Encountered errors while bringing up the project. </code></pre> <p>I continued to get same error, even after I set <code>ports</code> section to <code>3306:3307</code>, and <code>3307:3307</code> and setting <code> SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3307/consumer?createDatabaseIfNotExist=true</code></p> ",
    "OwnerUserId": "20390023",
    "LastEditorUserId": "20390023",
    "LastEditDate": "2021-06-09T21:05:30.963",
    "LastActivityDate": "2021-06-09T21:13:45.727",
    "Title": "Building and running Spring Boot application in Docker with couple of services using docker-compose?",
    "Tags": "<spring-boot><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Try to kill all the processes using port <code>3306</code>:</p> <pre><code>sudo kill `sudo lsof -t -i:3306` </code></pre> <p>Then, run your docker containers:</p> <pre><code>`sudo docker-compose up` </code></pre> <p>or else</p> <p>change <code>ports: -3306:3306</code> to <code>ports: -3307:3306</code> in your <code>docker-compose</code> file and then run the below command again:</p> <pre><code>docker-compose up </code></pre> "
  },
  {
    "Id": "69839572",
    "PostTypeId": "1",
    "AcceptedAnswerId": "69839749",
    "CreationDate": "2021-11-04T12:53:56.553",
    "Score": "0",
    "ViewCount": "662",
    "Body": "<p>I have a maven project that I am trying to deploy to Amazon Web Services' <code>Elastic Beanstalk</code>. I want to deploy using a <code>Docker</code> file.</p> <p>The <code>Docker</code> file works locally on my Windows PC, but not when deployed to <code>Elastic Beanstalk</code>. The structure of my project looks like this:</p> <pre><code>~/my-project/ |-- Dockerfile |-- src |-- pom.xml </code></pre> <p>This is my <code>Docker</code> file:</p> <pre><code># Build stage  #  FROM maven:3.8.1-jdk-8 AS build ADD src /tmp/src ADD pom.xml /tmp/pom.xml RUN mvn -f /tmp/pom.xml clean package   # # Package stage # FROM openjdk:8 COPY --from=build /tmp/target/my-project-host-0.0.1-SNAPSHOT.jar /usr/local/lib/my-project.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/lib/my-project.jar&quot;]  </code></pre> <p>To use and execute this <code>Docker</code> file locally, all I do is run these commands from project root and then my Springboot server is up and running:</p> <pre><code>docker build -t image-my-project . docker run -d -p 8080:8080 image-my-project </code></pre> <p>Now comes the problem. Why does this fail when deployed to <code>AWS Elastic Beanstalk</code>.</p> <p>I will give a walkthrough of exactly how I am deploying it to <code>Elastic Beanstalk</code>.</p> <pre><code>1) navigate to project root (my-project) and run the command:     a) eb create     b) this will prompt me with configuring the environment. 2) Set up environment with the following configs:     a) name of environment: my-project     a) load balancer type = 'application' (Should this be 'network' instead?) 3) After setting up the configs, the project begins to deploy but it always fails. </code></pre> <p>If I download the <code>eb-engine.log</code> file, then I get errors stating that the docker failed to pull Maven. Here is that part of the log file:</p> <pre><code>start build docker app 2021/11/04 12:31:25.779536 [INFO] fetch image name 2021/11/04 12:31:25.779584 [INFO] pull docker image if update is not false in Dockerrun.aws.json 2021/11/04 12:31:25.779604 [INFO] Running command /bin/sh -c docker pull maven:3.8.1-jdk-8 AS build 2021/11/04 12:31:25.817783 [WARN] failed to execute command: docker pull maven:3.8.1-jdk-8 AS build, retrying... 2021/11/04 12:31:25.817814 [INFO] Running command /bin/sh -c docker pull maven:3.8.1-jdk-8 AS build 2021/11/04 12:31:25.859856 [ERROR] An error occurred during execution of command [app-deploy] - [Docker Specific Build Application]. Stop running the command. Error: failed to pull docker image: Command /bin/sh -c docker pull maven:3.8.1-jdk-8 AS build failed with error exit status 1. Stderr:&quot;docker pull&quot; requires exactly 1 argument. See 'docker pull --help'.  Usage:  docker pull [OPTIONS] NAME[:TAG|@DIGEST]  Pull an image or a repository from a registry    2021/11/04 12:31:25.859878 [INFO] Executing cleanup logic 2021/11/04 12:31:25.859986 [INFO] CommandService Response: {&quot;status&quot;:&quot;FAILURE&quot;,&quot;api_version&quot;:&quot;1.0&quot;,&quot;results&quot;:[{&quot;status&quot;:&quot;FAILURE&quot;,&quot;msg&quot;:&quot;Engine execution has encountered an error.&quot;,&quot;returncode&quot;:1,&quot;events&quot;:[{&quot;msg&quot;:&quot;Instance deployment failed to download the Docker image. The deployment failed.&quot;,&quot;timestamp&quot;:1636029085,&quot;severity&quot;:&quot;ERROR&quot;},{&quot;msg&quot;:&quot;Instance deployment failed. For details, see 'eb-engine.log'.&quot;,&quot;timestamp&quot;:1636029085,&quot;severity&quot;:&quot;ERROR&quot;}]}]}  2021/11/04 12:31:25.860367 [INFO] Platform Engine finished execution on command: app-deploy </code></pre> <p>Anyone have any idea what is going on? Why does my Docker file work locally, but won't deploy to AWS Elastic Beanstalk?</p> ",
    "OwnerUserId": "16958679",
    "LastActivityDate": "2021-11-04T13:07:30.280",
    "Title": "Deploying Docker to AWS Elastic Beanstalk: failed to execute command 'docker pull maven'",
    "Tags": "<docker><maven><docker-compose><amazon-elastic-beanstalk>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I figured it out so I will leave an answer for future readers. Turns out AWS doesn't allow you to use the <code>AS</code> keyword in Docker. So I changed the file from:</p> <pre><code># Build stage  #  FROM maven:3.8.1-jdk-8 AS build ADD src /tmp/src ADD pom.xml /tmp/pom.xml RUN mvn -f /tmp/pom.xml clean package   # # Package stage # FROM openjdk:8 COPY --from=build /tmp/target/my-project-host-0.0.1-SNAPSHOT.jar /usr/local/lib/my-project.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/lib/my-project.jar&quot;] </code></pre> <p>To this:</p> <pre><code># Build stage  #  FROM maven:3.8.1-jdk-8  ADD src /tmp/src ADD pom.xml /tmp/pom.xml RUN mvn -f /tmp/pom.xml clean package   # # Package stage # FROM openjdk:8 COPY --from=0 /tmp/target/my-project-host-0.0.1-SNAPSHOT.jar /usr/local/lib/my-project.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/local/lib/my-project.jar&quot;] </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "70066239",
    "PostTypeId": "1",
    "CreationDate": "2021-11-22T13:06:05.720",
    "Score": "0",
    "ViewCount": "335",
    "Body": "<p>Can someone please help me I'm trying to make a container from my java app. I'm using maven and it runs perfectly locally. But when I'm trying to run it as a container, i get this error. I already have the JSON dependency in my pom.xml but it's still not working.</p> <p>This is the Error log:</p> <pre><code>Attaching to vs-lager vs-lager    | Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/json/JSONException vs-lager    |   at Main_lager.main(Main_lager.java:7) vs-lager    | Caused by: java.lang.ClassNotFoundException: org.json.JSONException vs-lager    |   at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) vs-lager    |   at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) vs-lager    |   at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522) vs-lager    |   ... 1 more vs-lager exited with code 1  </code></pre> <p>dockerfile:</p> <pre><code>FROM maven:3.6.3-jdk-8 AS BUILD #Kopiere alle Dateien COPY pom.xml /tmp/ COPY src /tmp/src/ WORKDIR /tmp/  #Build .jar file RUN mvn clean package  #Finaler Container FROM openjdk:11  COPY --from=BUILD /tmp/target/vs-lager-1.0-SNAPSHOT.jar /tmp  CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;/tmp/vs-lager-1.0-SNAPSHOT.jar&quot;]  </code></pre> <p>I already have this dependency instead of my pom.xml file pom.xml:</p> <pre><code> &lt;dependency&gt;             &lt;groupId&gt;org.json&lt;/groupId&gt;             &lt;artifactId&gt;json&lt;/artifactId&gt;             &lt;version&gt;20210307&lt;/version&gt;   &lt;/dependency&gt; </code></pre> ",
    "OwnerUserId": "17479251",
    "LastActivityDate": "2021-11-22T13:06:05.720",
    "Title": "Docker Compose NoClassDefFoundError while trying to run container. Not recoginizing JSON Dependency",
    "Tags": "<java><json><maven><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "70224668",
    "PostTypeId": "1",
    "AcceptedAnswerId": "70224800",
    "CreationDate": "2021-12-04T10:04:01.957",
    "Score": "0",
    "ViewCount": "4219",
    "Body": "<blockquote> <p>Client Error: Bad Request (&quot;b'OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;/usr/lib/jvm/java-8-openjdk-amd64/bin/java&quot;: stat /usr/lib/jvm/java-8-openjdk-amd64/bin/java: no such file or directory: unknown'&quot;)</p> </blockquote> <p>this my error ,I cann't fix this ,when I use docker-compose and docker my version</p> <pre><code>Client: Docker Engine - Community  Version:           19.03.12  API version:       1.40  Go version:        go1.13.10  Git commit:        48a66213fe  Built:             Mon Jun 22 15:45:44 2020  OS/Arch:           linux/amd64  Experimental:      false Server: Docker Engine - Community  Engine:   Version:          19.03.12   API version:      1.40 (minimum version 1.12)   Go version:       go1.13.10   Git commit:       48a66213fe   Built:            Mon Jun 22 15:44:15 2020   OS/Arch:          linux/amd64   Experimental:     false  containerd:   Version:          1.4.12   GitCommit:        7b11cfaabd73bb80907dd23182b9347b4245eb5d  runc:   Version:          1.0.2   GitCommit:        v1.0.2-0-g52b36a2  docker-init:   Version:          0.18.0   GitCommit:        fec3683  docker compose version docker-compose version 1.25.0, build unknown docker-py version: 4.1.0 CPython version: 3.8.10 OpenSSL version: OpenSSL 1.1.1f  31 Mar 2020  </code></pre> <p>Dockerfile</p> <pre><code>FROM openjdk:8-jdk  # Install maven RUN apt-get update RUN apt-get install -y maven  WORKDIR /code  # Prepare by downloading dependencies ADD pom.xml /code/pom.xml RUN [&quot;mvn&quot;, &quot;dependency:resolve&quot;, &quot;-U&quot;] RUN [&quot;mvn&quot;, &quot;verify&quot;]  # Adding source, compile and package into a fat jar ADD src /code/src RUN [&quot;mvn&quot;, &quot;package&quot;, &quot;-DskipTest=True&quot;, &quot;-Dmaven.javadoc.skip=true&quot;, &quot;-Dmaven.test.skip=true&quot;, &quot;--offline&quot;]  EXPOSE 4458 # CMD [&quot;ls&quot;, &quot;-la&quot;, &quot;target/&quot;] ENTRYPOINT [&quot;/usr/lib/jvm/java-8-openjdk-amd64/bin/java&quot;, &quot;-jar&quot;, &quot;target/pbft-jar-with-dependencies.jar&quot;]  </code></pre> <p>docker-compose.yml</p> <pre class='lang-yaml prettyprint-override'><code> version: '2' services:   node_java:     extends:       file: docker-compose.node-java.yml       service: node     volumes:       - /var/run/docker.sock:/var/run/docker.sock     environment:       NODE_DEBUG: &quot;False&quot;  </code></pre> <p>docker-compose.node-java.yml</p> <pre class='lang-yaml prettyprint-override'><code>version: '2' services:   node:     build: .     environment:       NODE_PORT: 4458     command: [&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&quot;]     # restart: &quot;unless-stopped&quot;     # stdin_open: true   node-pi:     build:       context: .       dockerfile: ARM.Dockerfile     environment:       NODE_PORT: 4458 </code></pre> <p>Any suggestion will help !!!</p> <p>thank you very much</p> ",
    "OwnerUserId": "9474488",
    "LastActivityDate": "2021-12-09T09:27:23.300",
    "Title": "'b'OCI runtime create failed: container_linux.go:380?",
    "Tags": "<java><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I think the path to the java executable in the image is different than the one you used. Can you try and replace the path in your DOCKERFILE like so?</p> <pre><code>ENTRYPOINT [&quot;/usr/local/openjdk-8/bin/java&quot;, &quot;-jar&quot;, &quot;target/pbft-jar-with-dependencies.jar&quot;] </code></pre> <p>I used the following procedure to find that out:</p> <pre class='lang-bash prettyprint-override'><code>docker pull openjdk:8-jdk docker run openjdk:8-jdk docker container ls -a  mkdir -p /tmp/snapshot cd /tmp/snapshot docker export 7778d9fa6ce9&gt; snapshot.tar tar -xvf snapshot.tar find . -type f -name java </code></pre> ",
    "highest_rated_answer": "<p>modify  Old java site</p> <p>to this</p> <pre><code>/usr/local/openjdk-8/bin/java </code></pre> <p>it is error</p> <p>second I fix this using old version docker and docker-compose</p> <p>modify version :</p> <p>Since my project is 2017, I choose the old version of docker and the docker compose version close to 2017</p> <hr /> <p>detail version</p> <pre><code> docker-ce | 5:18.09.0~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages </code></pre> <hr /> <p>docker compose</p> <p><a href='https://github.com/docker/compose/releases/tag/1.16.1' rel='nofollow noreferrer'>https://github.com/docker/compose/releases/tag/1.16.1</a></p> <p>1.16.1</p> "
  },
  {
    "Id": "70619950",
    "PostTypeId": "1",
    "CreationDate": "2022-01-07T10:37:09.283",
    "Score": "0",
    "ViewCount": "1066",
    "Body": "<p>I want to create a DOCKER container to be used by my gitlab-runner in order to compile/deploy my Quarkus microservices. Here is what I've done :</p> <pre><code>FROM openjdk:11-jdk as JDK  FROM maven:3.8.4-jdk-11 as MAVEN  FROM docker/compose  ENV LANG='fr_FR.UTF-8' LANGUAGE='fr_FR:fr'  LABEL description=&quot;Runner for compiling/deploying my QUARKUS services &quot; \\       version=&quot;${VERSION}&quot;  COPY --from=JDK /usr/local/openjdk-11 /usr/local/openjdk-11 ENV JAVA_HOME=/usr/local/openjdk-11 RUN { echo '#/bin/sh'; echo 'echo &quot;$JAVA_HOME&quot;'; } &gt; /usr/local/bin/docker-java-home &amp;&amp; chmod +x /usr/local/bin/docker-java-home &amp;&amp; [ &quot;$JAVA_HOME&quot; = &quot;$(docker-java-home)&quot; ] # backwards compatibility ENV PATH=$JAVA_HOME/bin:$PATH  ARG USER_HOME_DIR=&quot;/root&quot;  COPY --from=MAVEN /usr/local/bin/mvn-entrypoint.sh /usr/local/bin/mvn-entrypoint.sh COPY --from=MAVEN /usr/share/maven /usr/share/maven RUN ln -s /usr/share/maven/bin/mvn /usr/bin/mvn ENV MAVEN_HOME=/usr/share/maven ENV MAVEN_CONFIG=&quot;$USER_HOME_DIR/.m2&quot;  RUN echo 'JAVA_HOME=/usr/local/openjdk-11'&gt;/root/env \\     &amp;&amp; echo 'MAVEN_HOME=/usr/share/maven'&gt;&gt;/root/env \\     &amp;&amp; echo 'MAVEN_CONFIG=&quot;$USER_HOME_DIR/.m2&quot;'&gt;&gt; /root/env \\     &amp;&amp; chmod +x /root/env\\     &amp;&amp; source /root/env  ENTRYPOINT [&quot;/usr/local/bin/mvn-entrypoint.sh&quot;] CMD [&quot;mvn&quot;] </code></pre> <p>It's inspired by Dockerfiles in docker hub ... It doesn't work : in gitlab pipeline it says :<a href='https://i.stack.imgur.com/gUiVX.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/gUiVX.png' alt='enter image description here' /></a> So I tried some commands : <code>docker run --rm runner4geo3d:1.0 echo $JAVA_HOME</code> it says nothing =&gt; it explains why runner fails ... But I did set these variables ! and more, when I inspect :</p> <pre><code>docker inspect runnerxxx:1.0 [     { (...)             &quot;Env&quot;: [                 &quot;PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,                 &quot;LANG=fr_FR.UTF-8&quot;,                 &quot;LANGUAGE=fr_FR:fr&quot;,                 &quot;JAVA_HOME=/usr/local/openjdk-11&quot;,                 &quot;MAVEN_HOME=/usr/share/maven&quot;,                 &quot;MAVEN_CONFIG=/root/.m2&quot;             ],             &quot;Cmd&quot;: [                 &quot;/bin/sh&quot;,                 &quot;-c&quot;,                 &quot;#(nop) &quot;,                 &quot;CMD [\\&quot;mvn\\&quot;]&quot;             ],             &quot;Image&quot;: &quot;sha256:7ab7026055a9a6af295a884f9eee926bbb4cdb6a5102f0c07756e69e4bf95126&quot;,             &quot;Volumes&quot;: null,             &quot;WorkingDir&quot;: &quot;&quot;,             &quot;Entrypoint&quot;: [                 &quot;/usr/local/bin/mvn-entrypoint.sh&quot;             ],             &quot;OnBuild&quot;: null,             &quot;Labels&quot;: {                 &quot;description&quot;: &quot;Runner for compiling/deploying QUARKUS services &quot;,                 &quot;version&quot;: &quot;&quot;             }         },         &quot;DockerVersion&quot;: &quot;20.10.12&quot;,         &quot;Author&quot;: &quot;&quot;,         &quot;Config&quot;: {             &quot;Hostname&quot;: &quot;&quot;,             &quot;Domainname&quot;: &quot;&quot;,             &quot;User&quot;: &quot;&quot;,             &quot;AttachStdin&quot;: false,             &quot;AttachStdout&quot;: false,             &quot;AttachStderr&quot;: false,             &quot;Tty&quot;: false,             &quot;OpenStdin&quot;: false,             &quot;StdinOnce&quot;: false,             &quot;Env&quot;: [                 &quot;PATH=/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,                 &quot;LANG=fr_FR.UTF-8&quot;,                 &quot;LANGUAGE=fr_FR:fr&quot;,                 &quot;JAVA_HOME=/usr/local/openjdk-11&quot;,                 &quot;MAVEN_HOME=/usr/share/maven&quot;,                 &quot;MAVEN_CONFIG=/root/.m2&quot;             ],             &quot;Cmd&quot;: [                 &quot;mvn&quot;             ],             &quot;Image&quot;: &quot;sha256:7ab7026055a9a6af295a884f9eee926bbb4cdb6a5102f0c07756e69e4bf95126&quot;,             &quot;Volumes&quot;: null,             &quot;WorkingDir&quot;: &quot;&quot;,             &quot;Entrypoint&quot;: [                 &quot;/usr/local/bin/mvn-entrypoint.sh&quot;             ],             &quot;OnBuild&quot;: null,             &quot;Labels&quot;: {                 &quot;description&quot;: &quot;Runner for compiling/deploying QUARKUS services &quot;,                 &quot;version&quot;: &quot;&quot;             }         },         &quot;Architecture&quot;: &quot;amd64&quot;,         &quot;Os&quot;: &quot;linux&quot;,         &quot;Size&quot;: 434176309,         &quot;VirtualSize&quot;: 434176309,         (..) </code></pre> <p>Any idea why these variables aren't set ? What did I do wrong ?</p> ",
    "OwnerUserId": "6928778",
    "LastActivityDate": "2022-01-07T12:42:42.427",
    "Title": "Dockerfile combining MAVEN, JAVA and COMPOSE",
    "Tags": "<java><docker><maven><docker-compose><gitlab-ci-runner>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Thanks to <a href='https://stackoverflow.com/questions/45147371/docker-alpine-oracle-java-cannot-find-java/45147882'>Docker alpine + oracle java: cannot find java</a> I found why java was not found ... The <code>FROM docker/compose</code> instruction in the Dockerfile is about an image built on musl lib (alpine) =&gt; no java is possible with it (easily). I changed it with <code>docker/compose:debian-1.29.2</code> and then it finds java :)</p> "
  },
  {
    "Id": "71122977",
    "PostTypeId": "1",
    "CreationDate": "2022-02-15T08:09:44.657",
    "Score": "0",
    "ViewCount": "942",
    "Body": "<p>I am creating a CI/CD pipeline in GitLab. Using spring boot and Postgres. This is the docker-compose file.</p> <pre><code>version: '2'  services:   backend-api:     container_name: backend-api     depends_on:       - postgres     environment:       DATABASE_URL: postgres       DB_HOST: postgres       DB_PASSWORD: mysecretpassword       DB_USERNAME: postgres     image: myimagepath     ports:       - 8080:8080/tcp     restart: always    postgres:     container_name: postgres     environment:       POSTGRES_PASSWORD: mysecretpassword       POSTGRES_USERNAME: postgres     image: postgres:14.1-alpine     ports:       - 5432:5432/tcp     restart: always     volumes:       - myvolumepath        </code></pre> <p>I want to run tests after docker-compose up.</p> <pre><code>docker-compose up -d backend-api postgres &amp;&amp; sleep 30 </code></pre> <p>After this command <code>docker-compose ps</code> shows that these two services are running.</p> <pre><code>docker-compose run backend-api mvn test </code></pre> <p>This command starts the application on port 8080 and does not run the tests. How do you run tests after docker-compose in the backgorund without starting the application?</p> ",
    "OwnerUserId": "11293523",
    "LastActivityDate": "2022-02-15T08:09:44.657",
    "Title": "How to run maven test in docker-compose run after docker-compose -d?",
    "Tags": "<java><docker><maven><docker-compose><gitlab-ci>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "72753701",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72827431",
    "CreationDate": "2022-06-25T12:04:48.280",
    "Score": "0",
    "ViewCount": "827",
    "Body": "<p>I am trying to setup a Springboot monorepo GitLab Pipeline, but the artifacts couldn#t be found.</p> <p>mvn job</p> <pre><code>maven-package:   stage: package   inherit:     default: true     variables: true   script:     - cd springboot     - mvn clean package -P dev     - cd target     - ls -al   artifacts:     when: always     paths:       - springboot.jar   tags:     - docker </code></pre> <p>Job Log</p> <pre><code>$ cd target $ ls -al total 41124 drwxr-xr-x 9 root root     4096 Jun 25 11:53 . drwxrwxrwx 5 root root     4096 Jun 25 11:53 .. drwxr-xr-x 4 root root     4096 Jun 25 11:53 classes drwxr-xr-x 3 root root     4096 Jun 25 11:53 generated-sources drwxr-xr-x 3 root root     4096 Jun 25 11:53 generated-test-sources drwxr-xr-x 2 root root     4096 Jun 25 11:53 maven-archiver drwxr-xr-x 3 root root     4096 Jun 25 11:53 maven-status -rw-r--r-- 1 root root 42053990 Jun 25 11:53 springboot.jar -rw-r--r-- 1 root root    13258 Jun 25 11:53 springboot.jar.original drwxr-xr-x 2 root root     4096 Jun 25 11:53 surefire-reports drwxr-xr-x 3 root root     4096 Jun 25 11:53 test-classes Uploading artifacts for successful job 00:01 Uploading artifacts... WARNING: springboot.jar: no matching files. Ensure that the artifact path is relative to the working directory  ERROR: No files to upload                           Cleaning up project directory and file based variables 00:00 Job succeeded </code></pre> <p>Dockerfile</p> <pre><code>FROM openjdk:latest MAINTAINER vdoma.de VOLUME /tmp ADD target/springboot.jar  app.jar ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] </code></pre> <p>Docker build fail because the artifacts could not have been found</p> <p>Docker log error</p> <pre><code>ADD failed: file not found in build context or excluded by .dockerignore: stat target/springboot.jar: file does not exist Cleaning up project directory and file based variables 00:01 ERROR: Job failed: exit code 1 </code></pre> <p>did anyone have the same issue?</p> ",
    "OwnerUserId": "15531390",
    "LastActivityDate": "2022-07-01T09:47:30.253",
    "Title": "GitLab CI/CD Maven SpringBoot upload *jar error: No such file or directory",
    "Tags": "<spring-boot><maven><docker-compose><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<pre class='lang-yaml prettyprint-override'><code>maven-package:   stage: package   inherit:     default: true     variables: true   script:     - cd springboot     - mvn clean package -P dev     - cd target     - ls -al   artifacts:     when: always     paths:       - springboot/target/springboot.jar   tags:     - docker </code></pre> <pre><code>FROM openjdk:latest MAINTAINER vdoma.de VOLUME /tmp COPY springboot/target/springboot.jar  app.jar ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;] </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "72785215",
    "PostTypeId": "1",
    "CreationDate": "2022-06-28T10:58:09.310",
    "Score": "0",
    "ViewCount": "816",
    "Body": "<p>Hi I'm trying to run the following dockerfile which should:</p> <ol> <li>create a fat jar springboot</li> <li>and run it</li> </ol> <pre><code>FROM openjdk:17-alpine as build WORKDIR /workspace/app COPY mvnw . COPY .mvn .mvn COPY pom.xml . COPY src src RUN ./mvnw install -DskipTests RUN mkdir -p target/dependency &amp;&amp; (cd target/dependency; jar -xf ../*.jar)  FROM openjdk:8-jdk-alpine VOLUME /tmp ARG DEPENDENCY=/workspace/app/target/dependency COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app EXPOSE 8080 ENTRYPOINT [&quot;java&quot;, &quot;-Dspring.profiles.active=${ENV}&quot;, &quot;-Djasypt.encryptor.password=${MASTER_PASSWORD}&quot;, &quot;-jar&quot;, &quot;app.jar&quot;] </code></pre> <p>when I launch the docker build.</p> <pre><code>Sending build context to Docker daemon  72.35MB Step 1/16 : FROM openjdk:17-alpine as build  ---&gt; 264c9bdce361 Step 2/16 : WORKDIR /workspace/app  ---&gt; Using cache  ---&gt; e9b5dd3bdd5d Step 3/16 : COPY mvnw .  ---&gt; Using cache  ---&gt; eb136deee21e Step 4/16 : COPY .mvn .mvn  ---&gt; Using cache  ---&gt; bbda18e60e07 Step 5/16 : COPY pom.xml .  ---&gt; b7ae10a2559c Step 6/16 : COPY src src  ---&gt; 8f73e87e80ca Step 7/16 : RUN ./mvnw install -DskipTests  ---&gt; Running in 1b0bd104bad8 [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.florence:blockforgery.backend:1.0-SNAPSHOT: Could not find artifact com.florence:blockforgery.masterpom:pom:1.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 11, column 13  @  [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR]    [ERROR]   The project com.florence:blockforgery.backend:1.0-SNAPSHOT (/workspace/app/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.florence:blockforgery.backend:1.0-SNAPSHOT: Could not find artifact com.florence:blockforgery.masterpom:pom:1.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 11, column 13 -&gt; [Help 2] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException The command '/bin/sh -c ./mvnw install -DskipTests' returned a non-zero code: 1  </code></pre> <p>This is the POM of my project:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.florence&lt;/groupId&gt;     &lt;artifactId&gt;blockforgery.backend&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;      &lt;parent&gt;         &lt;groupId&gt;com.florence&lt;/groupId&gt;         &lt;artifactId&gt;blockforgery.masterpom&lt;/artifactId&gt;         &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;start-class&gt;com.florence.blockforgery.Application&lt;/start-class&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.florence&lt;/groupId&gt;             &lt;artifactId&gt;blockforgery.common&lt;/artifactId&gt;             &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;fork&gt;true&lt;/fork&gt;                     &lt;mainClass&gt;${start-class}&lt;/mainClass&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre> <p>While this is the parent POM:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.florence&lt;/groupId&gt;     &lt;artifactId&gt;blockforgery.masterpom&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.4.0&lt;/version&gt;         &lt;relativePath /&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;         &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;         &lt;aws.version&gt;1.12.163&lt;/aws.version&gt;         &lt;maven.compiler.target&gt;${maven.compiler.source}&lt;/maven.compiler.target&gt;         &lt;junit.jupiter.version&gt;5.7.0&lt;/junit.jupiter.version&gt;         &lt;junit.platform.version&gt;1.8.1&lt;/junit.platform.version&gt;         &lt;java-ipfs-http-client.version&gt;v1.3.3&lt;/java-ipfs-http-client.version&gt;         &lt;log4j.version&gt;2.17.2&lt;/log4j.version&gt;         &lt;mockito.version&gt;4.3.1&lt;/mockito.version&gt;         &lt;spring.version&gt;2.6.4&lt;/spring.version&gt;         &lt;aws.java.sdk.version&gt;2.17.152&lt;/aws.java.sdk.version&gt;         &lt;apache.http&gt;4.5.13&lt;/apache.http&gt;     &lt;/properties&gt;      &lt;dependencyManagement&gt;         &lt;dependencies&gt;             &lt;dependency&gt;                 &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;                 &lt;artifactId&gt;bom&lt;/artifactId&gt;                 &lt;version&gt;${aws.java.sdk.version}&lt;/version&gt;                 &lt;type&gt;pom&lt;/type&gt;                 &lt;scope&gt;import&lt;/scope&gt;             &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;/dependencyManagement&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springdoc&lt;/groupId&gt;             &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;             &lt;version&gt;1.6.9&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.web3j&lt;/groupId&gt;             &lt;artifactId&gt;web3j-spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;1.6.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;             &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;3.0.4&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;             &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;             &lt;version&gt;${log4j.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;             &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;             &lt;version&gt;${log4j.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.github.ipfs&lt;/groupId&gt;             &lt;artifactId&gt;java-ipfs-http-client&lt;/artifactId&gt;             &lt;version&gt;${java-ipfs-http-client.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;             &lt;artifactId&gt;auth&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;             &lt;artifactId&gt;dynamodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;             &lt;artifactId&gt;dynamodb-enhanced&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;             &lt;artifactId&gt;sqs&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;             &lt;artifactId&gt;s3&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.22&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;commons-io&lt;/groupId&gt;             &lt;artifactId&gt;commons-io&lt;/artifactId&gt;             &lt;version&gt;2.11.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;             &lt;artifactId&gt;caffeine&lt;/artifactId&gt;             &lt;version&gt;2.5.5&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;             &lt;artifactId&gt;okhttp&lt;/artifactId&gt;             &lt;version&gt;4.9.1&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;net.lingala.zip4j&lt;/groupId&gt;             &lt;artifactId&gt;zip4j&lt;/artifactId&gt;             &lt;version&gt;2.9.1&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.web3j&lt;/groupId&gt;             &lt;artifactId&gt;core&lt;/artifactId&gt;             &lt;version&gt;4.8.7&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;             &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;             &lt;version&gt;${junit.jupiter.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;             &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;             &lt;version&gt;${junit.jupiter.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.junit.platform&lt;/groupId&gt;             &lt;artifactId&gt;junit-platform-suite-api&lt;/artifactId&gt;             &lt;version&gt;${junit.platform.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;             &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;             &lt;version&gt;${junit.jupiter.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.junit.platform&lt;/groupId&gt;             &lt;artifactId&gt;junit-platform-suite&lt;/artifactId&gt;             &lt;version&gt;${junit.platform.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.mockito&lt;/groupId&gt;             &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;             &lt;version&gt;${mockito.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;version&gt;${spring.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.5&lt;/version&gt;                 &lt;configuration&gt;                     &lt;encoding&gt;UTF-8&lt;/encoding&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.8.1&lt;/version&gt;                 &lt;configuration&gt;                     &lt;source&gt;11&lt;/source&gt;                     &lt;target&gt;11&lt;/target&gt;                     &lt;annotationProcessorPaths&gt;                         &lt;path&gt;                             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                             &lt;artifactId&gt;lombok&lt;/artifactId&gt;                             &lt;version&gt;1.18.22&lt;/version&gt;                         &lt;/path&gt;                     &lt;/annotationProcessorPaths&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;       &lt;repositories&gt;         &lt;repository&gt;             &lt;id&gt;jitpack.io&lt;/id&gt;             &lt;url&gt;https://jitpack.io&lt;/url&gt;         &lt;/repository&gt;         &lt;repository&gt;             &lt;id&gt;rhazdev&lt;/id&gt;             &lt;url&gt;https://mymavenrepo.com/repo/NIp3fBk55f5oF6VI1Wso/&lt;/url&gt;         &lt;/repository&gt;         &lt;repository&gt;             &lt;id&gt;florence-nexus-blockforgery&lt;/id&gt;             &lt;url&gt;https://nexus.florence-consulting.it/nexus/repository/maven-blockforgery/&lt;/url&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;distributionManagement&gt;         &lt;repository&gt;             &lt;id&gt;florence-nexus-blockforgery-releases&lt;/id&gt;             &lt;name&gt;Internal Releases&lt;/name&gt;             &lt;url&gt;https://nexus.florence-consulting.it/nexus/repository/maven-blockforgery-release/&lt;/url&gt;         &lt;/repository&gt;         &lt;snapshotRepository&gt;             &lt;id&gt;florence-nexus-blockforgery-snapshots&lt;/id&gt;             &lt;name&gt;Internal Snapshots&lt;/name&gt;             &lt;url&gt;https://nexus.florence-consulting.it/nexus/repository/maven-blockforgery-snapshot/&lt;/url&gt;         &lt;/snapshotRepository&gt;     &lt;/distributionManagement&gt; &lt;/project&gt;  </code></pre> <p>I state that by running the:</p> <pre><code> mvn clean install -DskkipTests  </code></pre> <p>command from the console on Ubuntu everything works correctly.</p> <p>These are my configurations:</p> <ol> <li><strong>Maven</strong> Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</li> <li><strong>JAVA</strong> openjdk 17.0.3 2022-04-19</li> <li><strong>DOCKER</strong> Docker version 20.10.17, build 100c701</li> <li><strong>S.O.</strong> Ubuntu 20.04</li> </ol> <p>Thank you very much for helping</p> ",
    "OwnerUserId": "13052076",
    "LastActivityDate": "2022-06-28T12:32:53.057",
    "Title": "Non-resolvable parent POM for From Docker",
    "Tags": "<spring-boot><docker><docker-compose><dockerfile><maven-2>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Your parent <code>blockforgery.masterpom</code> is not installed in your container, nor deployed in a repository manager (nexus, artifactory, ...)</p> <p>Either you publish the parent pom somewhere, or you'll have to push to your container and build the parent also.</p> "
  },
  {
    "Id": "73563538",
    "PostTypeId": "1",
    "CreationDate": "2022-09-01T01:49:57.923",
    "Score": "0",
    "ViewCount": "149",
    "Body": "<p>New to the java community, and would appreciate all of the help that I can get with my Dockerfile and Docker Compose setup.</p> <p>These are the requirements of my project.</p> <ul> <li>Use Maven 3.6.3 and Java 8 SDK,</li> <li>create a workdir named /app</li> <li>create a non root user with root permissions (max -777)</li> <li>install basic linux tools and utilities</li> <li>change to the root folder as a root user and cd into .m2/settings.xml and edit it with the code below.</li> </ul> <p>Additionally, I need to copy over the pom.xml, the /target, the /src, and settings.xml and the app dir itself as illustrated in my attempt below.</p> <p>And then run and execute this entire application as a non-root user with root permissions to create, delete, and update files and dirs in the root dir and throughout /app for the build with mvn.</p> <pre><code># Custom image from Maven on DockerHub # Language: dockerfile FROM maven:3.6.3-amazoncorretto-8  # Set the working dir WORKDIR /app  # Create a non root user ARG USERNAME=jefferson ARG USER_UID=1000 ARG USER_GID=$USER_UID  # Add linux dependenciesq RUN yum install wget -y RUN yum install shadow-utils -y  # Create the user RUN groupadd --gid $USER_GID $USERNAME \\     &amp;&amp; useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\     &amp;&amp; yum install sudo -y \\     &amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME \\     &amp;&amp; chmod 777 /etc/sudoers.d/$USERNAME \\     &amp;&amp; sudo groupadd docker \\     &amp;&amp; sudo usermod -aG docker $USERNAME \\     &amp;&amp; newgrp docker   # Change to the root folder and edit the settings.xml for Maven WORKDIR /root/.m2 RUN rm -rf settings.xml RUN echo '&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; \\ xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; \\ xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 \\ http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; \\ &lt;/settings&gt;' &gt;&gt; settings.xml  WORKDIR /app  COPY . ./  USER $USERNAME  # Run the application CMD [&quot;mvn&quot;, &quot;clean&quot;, &quot;verify&quot;, &quot;-Pcargo.run&quot;, &quot;-X&quot;]  </code></pre> <pre><code>version: '1.0' services:   app:     build: .     command: sh -c &quot;mvn clean verify &amp;&amp; mvn -Pcargo.run -X&quot;     ports:       - 3100:3100     working_dir: /app     volumes:      # give absolute path of the workdir app working_dir       - .:/app     # give the absolute bath of src starting at app       - ./src:/app/src     # give the absolute path of target       - ./target:/app/target     # give the absolute path of the maven repo       - ~/.m2:/root/.m2     # give thepom.xml       - ./pom.xml:/app/pom.xml  </code></pre> <p>That being said the <code>docker compose up</code> command should both build and run the container on port 3100. Can somebody give me a push in the right direction?</p> ",
    "OwnerUserId": "19228325",
    "LastActivityDate": "2022-09-01T01:49:57.923",
    "Title": "Tweak Any Errors with Docker Build for Maven-3.6.3 and Java SDK 8 Application",
    "Tags": "<java><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "73676993",
    "PostTypeId": "1",
    "CreationDate": "2022-09-11T05:15:13.000",
    "Score": "0",
    "ViewCount": "514",
    "Body": "<p>I'm trying to build and run docker-compose with spring-boot and MySQL. At the same time I want application.properties to be defined not in project but in docker-compose. When I build and run docker-compose file, the container works but when I try to go to the server with <code>http://localhost:8080/investor/</code>, this site can't be reached. I will be grateful for any help to find where the problem is. My structure of files: <a href='https://i.stack.imgur.com/s2Vrd.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/s2Vrd.png' alt='enter image description here' /></a></p> <p>My docker-compose.yml:</p> <pre><code>version: &quot;3&quot; services:   mysqldb:     image: mysql     restart: unless-stopped     env_file: ./.env     environment:       - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD       - MYSQL_DATABASE=$MYSQLDB_DATABASE     ports:       - &quot;${MYSQLDB_LOCAL_PORT}:${MYSQLDB_DOCKER_PORT}&quot;     volumes:       - db:/var/lib/mysql   app:     depends_on:       - mysqldb     build: .     restart: on-failure     env_file: ./.env     ports:       - &quot;${SPRING_LOCAL_PORT}:${SPRING_DOCKER_PORT}&quot;     environment:       SPRING_APPLICATION_JSON: '{         &quot;spring.datasource.url&quot;  : &quot;jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?useSSL=false&quot;,         &quot;spring.datasource.username&quot; : &quot;$MYSQLDB_USER&quot;,         &quot;spring.datasource.password&quot; : &quot;$MYSQLDB_ROOT_PASSWORD&quot;,         &quot;spring.jpa.properties.hibernate.dialect&quot; : &quot;org.hibernate.dialect.MySQL5InnoDBDialect&quot;,         &quot;spring.jpa.hibernate.ddl-auto&quot; : &quot;update&quot;       }'     volumes:       - .m2:/root/.m2     stdin_open: true     tty: true volumes:   db: </code></pre> <p>My .env:</p> <pre><code>MYSQLDB_USER=root MYSQLDB_ROOT_PASSWORD=123456 MYSQLDB_DATABASE=investor MYSQLDB_LOCAL_PORT=3307 MYSQLDB_DOCKER_PORT=3306 SPRING_LOCAL_PORT=6868 SPRING_DOCKER_PORT=8080 </code></pre> <p>My Dockerfile:</p> <pre><code>FROM maven:3.8.6-openjdk-18 WORKDIR /investor-app COPY . . RUN mvn clean install CMD mvn spring-boot:run </code></pre> <p>My pom.xml:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.7.3&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.ensei&lt;/groupId&gt;     &lt;artifactId&gt;InvestmentCalculator&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;InvestmentCalculator&lt;/name&gt;     &lt;description&gt;Tool for calculation of benefits from investment projects&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;17&lt;/java.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.jsoup/jsoup --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jsoup&lt;/groupId&gt;             &lt;artifactId&gt;jsoup&lt;/artifactId&gt;             &lt;version&gt;1.15.3&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre> <p>My Controller.class:</p> <pre><code>package com.ensei.InvestmentCalculator.controller;  import com.ensei.InvestmentCalculator.model.InvestmentManager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*;  import java.io.IOException;  @Controller @RequestMapping(&quot;investor&quot;) public class MyController {      @Autowired     private InvestmentManager manager;      @GetMapping     public String menu(){         return &quot;menu&quot;;     }      @GetMapping(&quot;/add&quot;)     public String add(Model model){         return &quot;add&quot;;     }      @PostMapping (&quot;/add/{name}&quot;)     public String addDone(Model model, @RequestParam String name, String initialInvestment,                           String annuity, String differentCashFlow, String period,                           String customDiscountRate) throws IOException {         try {             manager.addInvestmentProject(name, initialInvestment, annuity, differentCashFlow, period, customDiscountRate);         } catch (Exception e) {             return &quot;exceptions/incorrectData&quot;;         }         model.addAttribute(&quot;name&quot;,name);         return &quot;addDone&quot;;     }      @GetMapping(&quot;/read&quot;)     public String read(Model model){         model.addAttribute(&quot;projects&quot;,manager.readInvestmentProjects());         return &quot;read&quot;;     }      @GetMapping(&quot;/update&quot;)     public String update(Model model){         return &quot;update&quot;;     }      @PostMapping (&quot;/update/{name}&quot;)     public String updateDone(Model model, @RequestParam String name, String initialInvestment,                           String annuity, String differentCashFlow, String period,                           String customDiscountRate) throws IOException {         try {              manager.updateInvestmentProject(name,initialInvestment,annuity,differentCashFlow,period,customDiscountRate);         } catch (Exception e){             return &quot;exceptions/incorrectData&quot;;         }        model.addAttribute(&quot;name&quot;,name);         return &quot;updateDone&quot;;     }      @GetMapping(&quot;/delete&quot;)     public String delete(){         return &quot;delete&quot;;     }      @PostMapping (&quot;/delete/{name}&quot;)     public String deleteDone(Model model, @RequestParam String name){         try {             manager.deleteInvestmentProject(name);         } catch (Exception e){             return &quot;exceptions/incorrectProject&quot;;         }         model.addAttribute(&quot;name&quot;,name);         return &quot;deleteDone&quot;;     }      @PostMapping(value = {&quot;/add&quot;,&quot;/update&quot;})     public String absentName(){         return &quot;exceptions/absentName&quot;;     } } </code></pre> <p>My application.properties file is empty.</p> ",
    "OwnerUserId": "19119664",
    "LastEditorUserId": "19289375",
    "LastEditDate": "2022-09-11T19:20:31.493",
    "LastActivityDate": "2022-09-11T19:20:31.493",
    "Title": "Docker-compose with spring-boot and MySQL works incorrect",
    "Tags": "<mysql><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "74223279",
    "PostTypeId": "1",
    "CreationDate": "2022-10-27T13:55:28.263",
    "Score": "0",
    "ViewCount": "137",
    "Body": "<p>I try to pull image from my nexus repository when i try to pull from nexus working fine, but i want remove path not working</p> <p>What is solution to use 10.100.23.30:7777/ by default ?</p> <p><code>docker pull 10.100.23.30:7777/test/jdk-17:snapshot-4</code> - work</p> <p><code>docker pull jdk-17:snapshot-4</code> - not work</p> ",
    "OwnerUserId": "20328746",
    "LastActivityDate": "2022-10-27T13:55:28.263",
    "Title": "Docker image pull from nexus repo",
    "Tags": "<java><docker><maven><docker-compose><nexus>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "75418473",
    "PostTypeId": "1",
    "CreationDate": "2023-02-11T06:26:55.440",
    "Score": "0",
    "ViewCount": "213",
    "Body": "<p>docker-compose.yml</p> <pre><code>... args:   project.version: 1.0.0 </code></pre> <p>Dockerfile</p> <pre><code>ARG project.version ... LABEL version=${project.version} </code></pre> <p>This throws the following error when I try to build the image through docker-compose. failed to build : failed to process &quot;${project.version}&quot;: missing ':' in substitution</p> <p>If I replace project.version with project_version in both files then it fixes the issue. However, I can't do that because I build this image through io.fabric8 docker-maven-plugin too and maven understands project.version and not project_version. Quite a dilemma! Any help is appreciated!</p> ",
    "OwnerUserId": "1659114",
    "LastActivityDate": "2023-02-19T14:19:19.557",
    "Title": "How can I pass ARG with dots during docker build time?",
    "Tags": "<docker-compose><dockerfile><docker-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Variables in bash only allow alphanumeric characters and under\u2010scores.</p> <p>Please check <a href='https://stackoverflow.com/questions/29753126/create-environment-variable-with-dot-in-the-current-environment'>this answer</a> and <a href='https://unix.stackexchange.com/questions/93532/exporting-a-variable-with-dot-in-it'>this answer</a>.</p> "
  },
  {
    "Id": "75588768",
    "PostTypeId": "1",
    "CreationDate": "2023-02-28T06:58:18.487",
    "Score": "0",
    "ViewCount": "43",
    "Body": "<p>I am developing a spring boot application with postgres using docker file.</p> <p>Dockerfile</p> <pre><code>FROM adoptopenjdk/openjdk11-openj9:alpine-slim ADD target/app-0.0.1-SNAPSHOT.jar /app.jar EXPOSE 8080 ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;-Dspring.profiles.active=${ENV}&quot;, &quot;/app.jar&quot;] </code></pre> <p>docker-compose.yml</p> <pre><code>version: '2'  services:   app:     image: 'app:latest'     build:       context: .     container_name: app     depends_on:       - db     environment:       - ENV=local     ports:       - &quot;8080:8080&quot;    db:     image: 'postgres:13.1-alpine'     container_name: db     environment:       - POSTGRES_USER=labuser       - POSTGRES_PASSWORD=labpwd </code></pre> <p>to trigger the <code>docker-compose up</code> I must have jar in my target directory but jar build will fail as there's no database exist at that time.</p> <p>I know it can be done by skipping the test like <code>./mvnw clean package -DskipTests</code> but then how these test will work when Prod Pipeline will run.</p> <p>I might be missing something. Please suggest.</p> <p>Regards</p> ",
    "OwnerUserId": "1189254",
    "LastActivityDate": "2023-02-28T06:58:18.487",
    "Title": "What is the right way to build when you are using db as container using compose file",
    "Tags": "<postgresql><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "75693409",
    "PostTypeId": "1",
    "CreationDate": "2023-03-10T07:45:20.143",
    "Score": "0",
    "ViewCount": "48",
    "Body": "<p>I\u1e3f trying to build a Dspace 7.5 image from my current branch and i got this error:</p> <p>[ERROR] Failed to execute goal on project dspace-api: Could not resolve dependencies for project org.dspace:dspace-api:jar:7.5: Failed to collect dependencies at commons-fileupload:commons-fileupload:jar:1.3.3: Failed to read artifact descriptor for commons-fileupload:commons-fileupload:jar:1.3.3: Could not transfer artifact commons-fileupload:commons-fileupload:pom:1.3.3 from/to maven-central (<a href='https://repo.maven.apache.org/maven2' rel='nofollow noreferrer'>https://repo.maven.apache.org/maven2</a>): transfer failed for <strong><a href='https://repo.maven.apache.org/maven2/commons-fileupload/commons-fileupload/1.3.3/commons-fileupload-1.3.3.pom:' rel='nofollow noreferrer'>https://repo.maven.apache.org/maven2/commons-fileupload/commons-fileupload/1.3.3/commons-fileupload-1.3.3.pom:</a></strong> Unknown host repo.maven.apache.org:</p> <p>I made an  install of the project with: mvn package command and everything was fine. Build Complete</p> <p>But with this proceeding:</p> <p>docker-compose -f docker-compose.yml -f docker-compose-cli.yml build --build-arg JDK_VERSION=17</p> <p>I'\u1e3f having troubles.I suspect that mvn can't find the repo because of the final <strong>:</strong> in the URL,  but i don't know how to remove it. What can i do?</p> <p>I check the URL and got this<a href='https://i.stack.imgur.com/CzWq5.png' rel='nofollow noreferrer'>enter image description here</a></p> <p>Then i remove the <strong>:</strong>  and got this<a href='https://i.stack.imgur.com/9D6ZP.png' rel='nofollow noreferrer'>enter image description here</a>. I'ts working fine.</p> <p>The dependency is well declared too: <a href='https://i.stack.imgur.com/MHR9F.png' rel='nofollow noreferrer'>enter image description here</a></p> <p>So, what can i do in order to remove the two dots?. Greetings</p> ",
    "OwnerUserId": "19026040",
    "LastActivityDate": "2023-03-10T07:45:20.143",
    "Title": "Failed to read artifact descriptor for commons-fileupload:commons-fileupload:jar:1.3.3",
    "Tags": "<image><maven><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "76168165",
    "PostTypeId": "1",
    "CreationDate": "2023-05-03T21:40:21.070",
    "Score": "0",
    "ViewCount": "53",
    "Body": "<h1>The json file I use in my project cannot be found, what could be the reason?</h1> <p><a href='https://i.stack.imgur.com/psoLi.png' rel='nofollow noreferrer'>enter image description here</a></p> <pre><code>countriesspringbootproject-countries-springboot-1  | java.io.FileNotFoundException: src/main/resources/countries.json (No such file or directory) countriesspringbootproject-countries-springboot-1  |    at java.base/java.io.FileInputStream.open0(Native Method) countriesspringbootproject-countries-springboot-1  |    at java.base/java.io.FileInputStream.open(FileInputStream.java:216) countriesspringbootproject-countries-springboot-1  |    at java.base/java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:157) countriesspringbootproject-countries-springboot-1  |    at com.fasterxml.jackson.core.TokenStreamFactory._fileInputStream(TokenStreamFactory.java:262) countriesspringbootproject-countries-springboot-1  |    at com.fasterxml.jackson.core.JsonFactory.createParser(JsonFactory.java:1030) </code></pre> <h1>this is my dockerfile</h1> <pre><code>FROM mysql  FROM openjdk:latest  WORKDIR /app  ADD src/main/resources/countries.json /app/countries.json  COPY target/*.jar app.jar  CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]  </code></pre> <h1>this is my docker-compose.yml</h1> <pre><code>version: '3' services:   mysql_db:     image: mysql     environment:        MYSQL_DATABASE: 'countries'       MYSQL_USER: 'hum'       MYSQL_PASSWORD: '414141'       MYSQL_ROOT_PASSWORD: 'root'     volumes:         - ./mysql/db-data:/var/lib/mysql     ports:         - '5555:3306'     networks:       - country-mysql   countries-springboot:     image: countries-springboot     build: .     environment:       SPRING_DATASOURCE_URL: jdbc:mysql://mysql_db:3306/countries       SPRING_DATASOURCE_USERNAME: root       SPRING_DATASOURCE_PASSWORD: root     ports:       - '4141:8080'     depends_on:       - mysql_db     networks:       - country-mysql networks:   country-mysql: </code></pre> <p>My LoadJson.java class</p> <pre><code>    package com.hum.countriesrestapi.Utils;  import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.springframework.stereotype.Component;  import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.ObjectMapper; import com.hum.countriesrestapi.model.Country;  @Component public class LoadJson {     private final static String COUNTRY_JSON = &quot;src/main/resources/countries.json&quot;;     public Map&lt;String, Country&gt; countries;     public List&lt;Country&gt; countriesList = new ArrayList&lt;&gt;();      public  List&lt;Country&gt; loadJson() { // JSON dosyas\u0131n\u0131 okur ve verileri nesnelere d\u00f6n\u00fc\u015ft\u00fcr\u00fcr                  ObjectMapper objectMapper = new ObjectMapper();         try{             Map&lt;String, Map&lt;String, Object&gt;&gt; countryMaps = objectMapper.readValue(new File(COUNTRY_JSON), new TypeReference&lt;Map&lt;String, Map&lt;String, Object&gt;&gt;&gt;() {});             countries = new HashMap&lt;&gt;();         for (Map.Entry&lt;String, Map&lt;String, Object&gt;&gt; entry : countryMaps.entrySet()) {             String countryCode = entry.getKey();// anahtar String k\u0131sm\u0131 countrycode'a atand\u0131             Map&lt;String, Object&gt; countryMap = entry.getValue(); // her bir \u00fclke i\u00e7in bir Country nesnesi olu\u015fturulur ve bu nesneler bir Map&lt;String, Country&gt; nesnesinde saklan\u0131r             Country country = objectMapper.convertValue(countryMap, Country.class);//Map nesnesindeki \u00f6zellikleri, Country s\u0131n\u0131f\u0131ndaki alanlarla e\u015fle\u015ftirerek yeni bir Country nesnesi olu\u015fturur             country.setId(countryCode); //country nesnesinin id alan\u0131 countryCode'a ayarlan\u0131r             country.setName((String) countryMap.get(&quot;name&quot;));             country.setNativeName((String) countryMap.get(&quot;native&quot;)); //country nesnesinin nativeName  alan\u0131 native'e ayarlan\u0131r             String phoneStr = (String) countryMap.get(&quot;phone&quot;);             int phone = Integer.parseInt(phoneStr);             country.setPhone(phone);             country.setContinent((String) countryMap.get(&quot;continent&quot;));             country.setCapital((String) countryMap.get(&quot;capital&quot;));             country.setCurrency((String) countryMap.get(&quot;currency&quot;));             //country.setLanguages(Arrays.asList(countryMap.get(&quot;languages&quot;)));             List&lt;Object&gt; languages = objectMapper.convertValue(countryMap.get(&quot;languages&quot;), new TypeReference&lt;List&lt;Object&gt;&gt;() {});             country.setLanguages(languages);             country.setFlag(&quot;http://aedemirsen.bilgimeclisi.com/country_flags/&quot; + countryCode + &quot;.svg&quot;); // flag \u00f6zelli\u011fini ayarla             //countries.put(countryCode, country);// her bir \u00fclke i\u00e7in olu\u015fturulan country nesnesini countries mapine countryCode key'i ile ekler             countriesList.add(country);         }         } catch (IOException e) {             e.printStackTrace();         }         return countriesList;     }  } </code></pre> <p>I'm making a request. I want to load the data in json into my mysql database and use them in my spring boot project. It was working fine in local but after dockerizing my mysql and java spring boot project I started to have this problem. How can I fix?</p> <p>Both Docker and my database work in my project, but my JSON format file cannot be found. How can I fix?</p> ",
    "OwnerUserId": "21092821",
    "LastEditorUserId": "21092821",
    "LastEditDate": "2023-05-05T10:29:00.890",
    "LastActivityDate": "2023-05-05T10:29:00.890",
    "Title": "FileNotFoundException while dockerized java spring boot application start",
    "Tags": "<spring-boot><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "76418894",
    "PostTypeId": "1",
    "AcceptedAnswerId": "76440206",
    "CreationDate": "2023-06-06T22:42:59.047",
    "Score": "0",
    "ViewCount": "274",
    "Body": "<p>I have a problem to run Spring Boot with Docker. When I run docker-compose.yml through this command docker-compose up -d, I get this issue shown below.</p> <pre><code> =&gt; ERROR [build 4/6] RUN ./mvnw dependency:resolve                                                                                                                                0.9s  ------  &gt; [build 4/6] RUN ./mvnw dependency:resolve: #0 0.230 /bin/sh: 1: ./mvnw: not found ------ failed to solve: executor failed running [/bin/sh -c ./mvnw dependency:resolve]: exit code: 127 </code></pre> <p>How can I fix the issue?</p> <p>Here is the <strong>Dockerfile</strong> shown below</p> <pre><code># Stage 1: Build stage FROM openjdk:17-jdk-slim AS build  # Copy Maven files for dependency resolution COPY pom.xml mvnw ./ COPY .mvn .mvn  # Resolve project dependencies RUN ./mvnw dependency:resolve  # Copy application source code COPY src src  # Package the application RUN ./mvnw package  # Stage 2: Run stage FROM openjdk:17-jdk-slim  # Set working directory WORKDIR ays-be  # Copy the JAR file from the build stage COPY --from=build target/*.jar /app/ays-be.jar  # Expose port 9790 EXPOSE 9790  # Set the entrypoint command for running the application ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/ays-be.jar&quot;] </code></pre> <p>Here is the <strong>docker-compose.yml</strong> file shown below</p> <pre><code>version: &quot;3.9&quot; services:   mysql:     image: mysql:8.0     container_name: ays-db     environment:       MYSQL_DATABASE: ays       MYSQL_USER: ays       MYSQL_PASSWORD: ayspass       MYSQL_ROOT_PASSWORD: ayspass       MYSQL_ROOT_HOST: '%'       MYSQL_PORT: 3306     volumes:       - db-data:/var/lib/mysql     ports:       - &quot;3306:3306&quot;     networks:       - ays    ays-be:     build:       context: .       dockerfile: Dockerfile     container_name: ays-be     ports:       - &quot;9790:9790&quot;     depends_on:       - mysql     environment:       - SPRING_PROFILES_ACTIVE=development       - AYS_DB_USERNAME=ays       - AYS_DB_PASSWORD=ayspass       - AYS_DB_URL=jdbc:mysql://mysql:3306/ays     networks:       - ays   # Volumes volumes:   db-data:  networks:   ays: </code></pre> ",
    "OwnerUserId": "5719229",
    "LastActivityDate": "2023-06-09T12:22:52.713",
    "Title": "Spring Boot Docker -> Cannot run docker-compose up -d (RUN ./mvnw dependency:resolve issue)",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "13",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Here is the <strong>answer</strong> shown below</p> <p>1 ) Use <code>maven:3.8.4-openjdk-17-slim</code> to detect Maven instead of openjdk:17-jdk-slim for building stage.</p> <p>2 ) Revise the part of <code>Copy Maven files for dependency resolution</code></p> <p>2 ) Change <code>Resolve project dependencies</code> and <code>Package the application</code> to <code>Build the project and create the executable JAR</code></p> <p>Here is the updated Dockerfile shown below</p> <pre><code># Stage 1: Build stage FROM maven:3.8.4-openjdk-17-slim AS build  # Copy Maven files for dependency resolution COPY pom.xml ./ COPY .mvn .mvn  # Copy application source code COPY src src  # Build the project and create the executable JAR RUN mvn clean install  # Stage 2: Run stage FROM openjdk:17-jdk-slim  # Set working directory WORKDIR ays-be  # Copy the JAR file from the build stage COPY --from=build target/*.jar /app/ays-be.jar  # Expose port 9790 EXPOSE 9790  # Set the entrypoint command for running the application ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/ays-be.jar&quot;] </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "76446404",
    "PostTypeId": "1",
    "CreationDate": "2023-06-10T13:21:10.090",
    "Score": "0",
    "ViewCount": "599",
    "Body": "<p>When trying to run configuration <code>docker-compose.yml: Compose Deployment</code>, I get this error</p> <pre><code>#0 62.23 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) o n project stack-overflow: Fatal error compiling: invalid target release: 17 -&gt; [Help 1] #0 62.23 [ERROR] #0 62.23 [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. #0 62.23 [ERROR] Re-run Maven using the -X switch to enable full debug logging. #0 62.23 [ERROR] #0 62.23 [ERROR] For more information about the errors and possible solutions, please read the following articles:       #0 62.23 [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>I indeed use Java 17. What's wrong about it? I've been using it for a long time, no issues</p> <pre><code>&lt;!-- pom.xml --&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.7.8&lt;/version&gt;         &lt;relativePath/&gt;     &lt;/parent&gt;     &lt;properties&gt;         &lt;java.version&gt;17&lt;/java.version&gt; &lt;!-- other props --&gt;     &lt;/properties&gt; &lt;!-- ... --&gt; &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.8.1&lt;/version&gt;                 &lt;configuration&gt;                     &lt;source&gt;${java.version}&lt;/source&gt;                     &lt;target&gt;${java.version}&lt;/target&gt; </code></pre> <pre><code>Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-24T22:49:05+03:00) Maven home: C:\\Users\\\u0421\u0435\u043c\u044c\u044f\\.m2\\wrapper\\dists\\apache-maven-3.5.3-bin\\2c22a6s60afpuloj4v181qvild\\apache-maven-3.5.3 // Maven home is different from project directory and also uses cyrillic letters, as you see. However, it didn't cause any troubles before Java version: 17.0.5, vendor: Amazon.com Inc. Java home: C:\\Users\\NadChel\\.jdks\\corretto-17.0.5 Default locale: ru_RU, platform encoding: UTF-8 OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot; </code></pre> <p><strong>What should I try to fix it?</strong> My googling (<a href='https://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException' rel='nofollow noreferrer'>1</a>, <a href='https://mkyong.com/maven/maven-error-invalid-target-release-17/' rel='nofollow noreferrer'>2</a>) wasn't fruitful. <a href='https://stackoverflow.com/questions/76410179/fatal-error-compiling-error-invalid-target-release'>This SO answer</a> mentions potential Spring/Tomcat conflicts, but I rely on starters so it should all be figured out by Spring nicely. Besides, I ran <a href='https://codereview.stackexchange.com/questions/285451/a-test-class-for-a-rest-application'>tests</a> with Docker before, no issues</p> <p>In case it's relevant, here's my <code>docker-compose.yml</code></p> <pre class='lang-yaml prettyprint-override'><code>version: '3.8' services:   stack_overflow_postgres:     image: postgres:15     container_name: stack_overflow_postgres     restart: always     environment:       - POSTGRES_USER=postgres       - POSTGRES_PASSWORD=postgres123       - POSTGRES_DB=stack_overflow_postgres     ports:       - '5411:5432'   stack_overflow_elasticsearch:     image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0     container_name: stack_overflow_elasticsearch     restart: always     environment:       - discovery.type=single-node       - ELASTIC_PASSWORD=your_password       - xpack.security.enabled=true     ports:       - '9200:9200'       - '9300:9300'    stack_overflow_app:       build: .       depends_on:         - stack_overflow_postgres         - stack_overflow_elasticsearch       environment:         - SPRING_DATASOURCE_URL=jdbc:postgresql://stack_overflow_postgres:5432/stack_overflow_postgres         - SPRING_DATASOURCE_USERNAME=postgres         - SPRING_DATASOURCE_PASSWORD=postgres123         - SPRING_ELASTICSEARCH_REST_URIS=http://stack_overflow_elasticsearch:9200         - SPRING_ELASTICSEARCH_REST_USERNAME=elastic         - SPRING_ELASTICSEARCH_REST_PASSWORD=your_password       ports:         - '8080:8080' </code></pre> <p><strong>UPD:</strong> khmarbaise said in the comments that I should not define Maven compiler and let Spring do the work. I defined the plugin so that I could define <code>&lt;annotationProcessorPaths&gt;</code> for Mapstruct which is used in my project. Mapstruct's <a href='https://mapstruct.org/documentation/stable/reference/pdf/mapstruct-reference-guide.pdf' rel='nofollow noreferrer'>reference guide</a> said it's what I should do (see p. 4). It's also <a href='https://www.baeldung.com/mapstruct' rel='nofollow noreferrer'>apparently needed</a> for Lombok support</p> <pre class='lang-xml prettyprint-override'><code>&lt;!-- an updated version --&gt; &lt;version&gt;3.11.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;source&gt;${java.version}&lt;/source&gt;                     &lt;target&gt;${java.version}&lt;/target&gt;                     &lt;annotationProcessorPaths&gt;                         &lt;path&gt;                             &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;                             &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;                             &lt;version&gt;${mapstruct.version}&lt;/version&gt;                         &lt;/path&gt;                         &lt;path&gt;                             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                             &lt;artifactId&gt;lombok&lt;/artifactId&gt;                             &lt;version&gt;${lombok.version}&lt;/version&gt;                         &lt;/path&gt;                         &lt;path&gt;                             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                             &lt;artifactId&gt;lombok-mapstruct-binding&lt;/artifactId&gt;                             &lt;version&gt;0.2.0&lt;/version&gt;                         &lt;/path&gt;                     &lt;/annotationProcessorPaths&gt;                     &lt;compilerArgs&gt;                         &lt;arg&gt;                             -Amapstruct.unmappedTargetPolicy=IGNORE                         &lt;/arg&gt;                     &lt;/compilerArgs&gt;                 &lt;/configuration&gt; </code></pre> ",
    "OwnerUserId": "20692967",
    "LastEditorUserId": "20692967",
    "LastEditDate": "2023-06-10T15:32:47.857",
    "LastActivityDate": "2023-06-10T15:32:47.857",
    "Title": "Running docker-compose: 'Fatal error compiling: invalid target release: 17'",
    "Tags": "<java><docker><maven><docker-compose>",
    "AnswerCount": "0",
    "CommentCount": "8",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  }
]