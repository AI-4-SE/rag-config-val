[
  {
    "Id": "46999940",
    "PostTypeId": "1",
    "AcceptedAnswerId": "47150363",
    "CreationDate": "2017-10-29T12:02:53.300",
    "Score": "99",
    "ViewCount": "123976",
    "Body": "<p>Currently I got the main class:</p> <pre class='lang-java prettyprint-override'><code>package com.recweb.springboot;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;   @SpringBootApplication /*@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})*/ public class SpringbootApplication {      public static void main(String[] args) {         SpringApplication.run(SpringbootApplication.class, args);     } } </code></pre> <p>a members class (id, firstname..), a MemberController class:</p> <pre class='lang-java prettyprint-override'><code>package com.recweb.springboot;  import java.util.Arrays; import java.util.List;  import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController;  @RestController public class MemberController {     @GetMapping(&quot;/members&quot;)     public List&lt;Member&gt; getAllUsers() {         return Arrays.asList(new Member(1, &quot;amit&quot;));     } } </code></pre> <p>and a WebSecurityConfig class:</p> <pre class='lang-java prettyprint-override'><code>package com.recweb.springboot;  import org.springframework.context.annotation.Bean; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.provisioning.InMemoryUserDetailsManager;  @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter {      @Bean     public UserDetailsService userDetailsService() {         InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();         manager.createUser(User.withUsername(&quot;user&quot;).password(&quot;user&quot;).roles(&quot;USER&quot;).build());         return manager;     } } </code></pre> <p>When i run &quot;http://localhost:8080/members&quot; i get a login page, i enter &quot;user&quot; as user &amp; &quot;user&quot; as password and then i get the hardcoded Member. It worked fine, but then i right clicked on my project-Run as-Maven install (because i added a dependency, i don't know if that was necessary, first time with Maven too). Since then, when i enter &quot;user&quot; &amp; &quot;user&quot; on the login page i get this error:</p> <pre><code>java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id &quot;null&quot;     at org.springframework.security.crypto.password.DelegatingPasswordEncoder$UnmappedIdPasswordEncoder.matches(DelegatingPasswordEncoder.java:233) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.crypto.password.DelegatingPasswordEncoder.matches(DelegatingPasswordEncoder.java:196) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(DaoAuthenticationProvider.java:86) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:166) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:174) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:199) ~[spring-security-core-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:124) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-5.0.0.BUILD-SNAPSHOT.jar:5.0.0.BUILD-SNAPSHOT]     at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.23.jar:8.5.23]     at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.23.jar:8.5.23]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_131]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_131]     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.23.jar:8.5.23]     at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131] </code></pre> <p>and it stays on the login page. I tried to remove the dependency &amp; Maven install again, but no luck. This is my POM:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.recweb&lt;/groupId&gt;     &lt;artifactId&gt;springboot&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;springboot&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;                 &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.hibernate&lt;/groupId&gt;     &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;     &lt;version&gt;5.3.0.Final&lt;/version&gt; &lt;/dependency&gt;         &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;!--         &lt;scope&gt;provided&lt;/scope&gt; --&gt; &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;      &lt;repositories&gt;         &lt;repository&gt;             &lt;id&gt;spring-snapshots&lt;/id&gt;             &lt;name&gt;Spring Snapshots&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;             &lt;/snapshots&gt;         &lt;/repository&gt;         &lt;repository&gt;             &lt;id&gt;spring-milestones&lt;/id&gt;             &lt;name&gt;Spring Milestones&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;false&lt;/enabled&gt;             &lt;/snapshots&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;pluginRepositories&gt;         &lt;pluginRepository&gt;             &lt;id&gt;spring-snapshots&lt;/id&gt;             &lt;name&gt;Spring Snapshots&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;             &lt;/snapshots&gt;         &lt;/pluginRepository&gt;         &lt;pluginRepository&gt;             &lt;id&gt;spring-milestones&lt;/id&gt;             &lt;name&gt;Spring Milestones&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;false&lt;/enabled&gt;             &lt;/snapshots&gt;         &lt;/pluginRepository&gt;     &lt;/pluginRepositories&gt;   &lt;/project&gt; </code></pre> <p>What went wrong? Thanks</p> ",
    "OwnerUserId": "7937441",
    "LastEditorUserId": "3454339",
    "LastEditDate": "2020-08-17T23:59:57.633",
    "LastActivityDate": "2022-12-22T11:27:10.223",
    "Title": "Spring Boot: How to specify the PasswordEncoder?",
    "Tags": "<spring><maven><spring-boot><spring-security>",
    "AnswerCount": "18",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>In <code>spring-security-core:5.0.0.RC1</code>, the default <code>PasswordEncoder</code> is built as a <code>DelegatingPasswordEncoder</code>. When you store the users in memory, you are providing the passwords in plain text and when trying to retrieve the encoder from the <code>DelegatingPasswordEncoder</code> to validate the password it can't find one that matches the way in which these passwords were stored. </p>  <p>Use this way to create users instead.</p>  <pre><code>User.withDefaultPasswordEncoder().username('user').password('user').roles('USER').build();  </code></pre>  <p>You can also simply prefix <code>{noop}</code> to your passwords in order for the <code>DelegatingPasswordEncoder</code> use the <code>NoOpPasswordEncoder</code> to validate these passwords. Notice that <code>NoOpPasswordEncoder</code> is deprecated though, as it is not a good practice to store passwords in plain text.</p>  <pre><code>User.withUsername('user').password('{noop}user').roles('USER').build(); </code></pre>  <p>For more information, check this post.</p>  <p><a href='https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-encoding' rel='noreferrer'>https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-encoding</a></p> ",
    "highest_rated_answer": "<p>Use <code>NoOpPasswordEncoder</code> for <code>inMemoryAuthentication</code></p>  <pre><code>auth.inMemoryAuthentication()     .withUser('user')     .password('{noop}password')     .roles('USER') </code></pre> "
  },
  {
    "Id": "63154787",
    "PostTypeId": "1",
    "AcceptedAnswerId": "63155672",
    "CreationDate": "2020-07-29T13:31:46.803",
    "Score": "98",
    "ViewCount": "246623",
    "Body": "<p>I am trying to compile my project with Java 11.</p> <p>When I try to run the application with Java 8 as the Java version in <em>pom.xml</em>, it works fine. But when I try to run it with Java 11, it throws an error.</p> <blockquote> <p>Fatal error compiling: invalid target release: 11</p> </blockquote> <p>I've tried to fix it in various ways, like changing the environment variable, updating the path, and pointing %JAVA_HOME% to Java 11.</p> <p>The commands and their results as on my computer are as follows:</p> <pre class='lang-none prettyprint-override'><code>java -version echo %JAVA_HOME% </code></pre> <p>Output:</p> <pre class='lang-none prettyprint-override'><code>java version &quot;11.0.8&quot; 2020-07-14 LTS C:\\Program Files\\Java\\jdk-11.0.8 </code></pre> <p>I am using <a href='https://en.wikipedia.org/wiki/IntelliJ_IDEA' rel='noreferrer'>IntelliJ IDEA</a> and have made the necessary changes as suggested in <a href='https://www.baeldung.com/java-lang-unsupportedclassversion' rel='noreferrer'>this tutorial</a>.</p> <p>My <em>pom.xml</em> file looks something like this:</p> <pre class='lang-xml prettyprint-override'><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;demo&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;      &lt;name&gt;demo&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;11&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;                 &lt;artifactId&gt;appengine-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.2.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;version&gt;1&lt;/version&gt;                     &lt;projectId&gt;businessapplication-6963d&lt;/projectId&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;version&gt;3.8.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;source&gt;11&lt;/source&gt;                     &lt;target&gt;11&lt;/target&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre> <p>When I check the Maven version, it shows JDK 1.8 as the Java version:</p> <pre class='lang-none prettyprint-override'><code>mvn --version </code></pre> <p>Output:</p> <pre class='lang-none prettyprint-override'><code>Java version: 1.8.0_241, vendor: Oracle Corporation, runtime: C:\\Program Files\\Java\\jdk1.8.0_241\\jre </code></pre> <p>How can I point Maven to Java 11? Or, if that is not the problem, how to solve this issue? I don't think that this question is a duplicate of <a href='https://stackoverflow.com/questions/28291691/fatal-error-compiling-invalid-target-release-1-8-help-1'>invalid target release: 1.7</a>, as I have already implemented the solutions provided in that thread.</p> <p>Error after building the project:</p> <pre class='lang-none prettyprint-override'><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project demo: Fatal error compiling: invalid target release: 11 -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>The path environment variable is:</p> <pre class='lang-none prettyprint-override'><code>C:\\Program Files (x86)\\Common Files\\Intel\\Shared Files\\cpp\\bin\\Intel64; C:\\Program Files (x86)\\Intel\\iCLS Client\\; C:\\Program Files\\Intel\\iCLS Client\\; C:\\WINDOWS\\system32;C:\\WINDOWS; C:\\WINDOWS\\System32\\Wbem; C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\; C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL; C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL; C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT; C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\WINDOWS\\System32\\OpenSSH\\; C:\\Delhi 2.0\\apache-maven-3.6.1\\bin; C:\\Program Files\\Java\\jdk-11.0.8\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\; C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\; C:\\Program Files\\Git\\cmd;D:\\Flutter\\flutter\\flutter\\bin; C:\\Users\\Infinity97\\AppData\\Local\\Google\\Cloud SDK\\google-cloud-sdk\\bin; C:\\Users\\Infinity97\\AppData\\Local\\Microsoft\\WindowsApps; C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2019.2\\bin; H:\\apache-maven-3.6.3\\bin; C:\\Program Files\\PostgreSQL\\12\\bin; C:\\Program Files\\PostgreSQL\\12\\lib; C:\\Program Files\\Docker Toolbox </code></pre> ",
    "OwnerUserId": "6182083",
    "LastEditorUserId": "63550",
    "LastEditDate": "2022-08-20T21:14:40.033",
    "LastActivityDate": "2023-03-25T21:54:39.883",
    "Title": "Maven is not using Java 11: error message 'Fatal error compiling: invalid target release: 11'",
    "Tags": "<java><spring><spring-boot><maven>",
    "AnswerCount": "12",
    "CommentCount": "19",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>It seems like you're having the <code>JAVA_HOME</code> set in your <code>mvn.bat</code>. It could be pointing to the older version of Java (i.e., 8 in your case).</p> <p><code>set JAVA_HOME=C:\\path\\to\\jdk11</code>. Try using it on the first line, before calling Maven.</p> ",
    "highest_rated_answer": "<p>I was experiencing this issue while trying to deploy a <a href='https://en.wikipedia.org/wiki/Spring_Framework#Spring_Boot' rel='nofollow noreferrer'>Spring Boot</a> application to <a href='https://en.wikipedia.org/wiki/Heroku' rel='nofollow noreferrer'>Heroku</a>.</p> <p>My JAVA_HOME was set correctly, but I was still receiving same error.</p> <p>But then this worked for me:</p> <p>In your <em>pom.xml</em> file, add or adapt to your own context:</p> <pre class='lang-xml prettyprint-override'><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;source&gt;1.8&lt;/source&gt;         &lt;target&gt;1.8&lt;/target&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> "
  },
  {
    "Id": "52980064",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52980523",
    "CreationDate": "2018-10-25T01:28:25.140",
    "Score": "96",
    "ViewCount": "59543",
    "Body": "<p>When I run <code>mvn test</code> I get this warning. How can I fix it? </p>  <pre><code>Found multiple occurrences of org.json.JSONObject on the class path:          jar:file:/C:/Users/Chloe/.m2/repository/org/json/json/20140107/json-20140107.jar!/org/json/JSONObject.class         jar:file:/C:/Users/Chloe/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class  You may wish to exclude one of them to ensure predictable runtime behavior </code></pre>  <p>Here is my <a href='https://gist.github.com/starrychloe/a3f3c85c09c0f70e1c698b8b00c6a42c' rel='noreferrer'>pom.xml</a>. The only reference to JSON is </p>  <pre><code>    &lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.json&lt;/groupId&gt;         &lt;artifactId&gt;json&lt;/artifactId&gt;     &lt;/dependency&gt; </code></pre>  <p>Apache Maven 3.5.3</p> ",
    "OwnerUserId": "148844",
    "LastEditorUserId": "7294900",
    "LastEditDate": "2018-11-25T08:28:58.727",
    "LastActivityDate": "2020-11-20T11:06:20.627",
    "Title": "Maven + Spring Boot: Found multiple occurrences of org.json.JSONObject on the class path:",
    "Tags": "<java><spring><maven><spring-boot><build-dependencies>",
    "AnswerCount": "6",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Add under</p>  <pre><code> &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;     &lt;scope&gt;test&lt;/scope&gt; </code></pre>  <p>The following exclusion:</p>  <pre><code> &lt;scope&gt;test&lt;/scope&gt;     &lt;exclusions&gt;         &lt;exclusion&gt;             &lt;groupId&gt;com.vaadin.external.google&lt;/groupId&gt;             &lt;artifactId&gt;android-json&lt;/artifactId&gt;         &lt;/exclusion&gt;     &lt;/exclusions&gt; </code></pre>  <p>Similarly, for Gradle projects:</p>  <pre><code>testCompile('org.springframework.boot:spring-boot-starter-test') {     exclude group: 'com.vaadin.external.google', module:'android-json' } </code></pre> ",
    "highest_rated_answer": "<p><strong>Background</strong>: <code>org.json</code> works great, but has a license clause that some people don't like ('The Software shall be used for Good, not Evil.'). So Vaadin wanted to use the library, but couldn't be sure they wouldn't use it for evil someday. Instead, they re-implemented the interface, published <code>android-json</code> and used it as a drop in replacement for <code>org.json</code>. Others began to use <code>android-json</code> as well so that they too would not be bound by the requirement of not using their software for evil.</p>  <p>This is a fine solution, except that when the two libraries are on the classpath, they collide.</p>  <p><strong>Solution:</strong> If you get this error from conflicting transitive dependencies, then your best bet is to exclude either Vaadin's <code>android-json</code> library (brought in by Spring), or exclude the <code>org.json</code> library (brought in by another dependency). Vaadin's version is meant to be an identical implementation, but there are subtle differences.</p>  <p>If you're using <code>org.json</code> in your code and it is conflicting with Spring's Vaadin dependency, then I would recommend trying <code>open-json</code>. It's a port of Vaadin's re-implementation of <code>org.json</code>, but they changed the packages so you won't have any conflicts with <code>org.json:json</code> or <code>com.vaadin.external.google:android-json</code></p>  <p><a href='https://github.com/openjson/openjson' rel='noreferrer'>https://github.com/openjson/openjson</a></p>  <p>Add gradle dependency:</p>  <pre><code>    implementation('com.github.openjson:openjson:1.0.12') </code></pre>  <p>Or in Maven:</p>  <pre class='lang-xml prettyprint-override'><code>    &lt;dependency&gt;         &lt;groupId&gt;com.github.openjson&lt;/groupId&gt;         &lt;artifactId&gt;openjson&lt;/artifactId&gt;         &lt;version&gt;1.0.12&lt;/version&gt;     &lt;/dependency&gt; </code></pre>  <p>Then update any imports that were being used by <code>org.json</code> classes.</p> "
  },
  {
    "Id": "49028810",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49028811",
    "CreationDate": "2018-02-28T11:45:31.347",
    "Score": "91",
    "ViewCount": "153821",
    "Body": "<h3>It all happens when I was trying to build a springboot application by <code>./mvnw clean install</code></h3>  <p>When I first run the install command, it runs into following problem.</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin&gt;org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException </code></pre>  <p>I searched the problem on Stackoverflow and was able to solve this problem by the post</p>  <p><a href='https://stackoverflow.com/questions/17223536/failed-to-execute-goal-org-apache-maven-pluginsmaven-compiler-plugin2-3-2comp'>Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile)</a></p>  <p>Then, I got into another problem</p>  <pre><code>[ERROR] Source option 1.5 is no longer supported. Use 1.6 or later. [ERROR] Target option 1.5 is no longer supported. Use 1.6 or later. </code></pre>  <p>I'm on OS X. <code>mvn -v</code> shows:</p>  <pre><code>Maven home: /Users/matthuntington/Desktop/apache-maven-3.5.0 Java version: 9, vendor: Oracle Corporation Java home: /Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home Default locale: en_US, platform encoding: UTF-8 OS name: 'mac os x', version: '10.12.6', arch: 'x86_64', family: 'mac' </code></pre>  <p>Here is my pom file</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.packtpub.restapp&lt;/groupId&gt;     &lt;artifactId&gt;ticket-management&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;ticket-management&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;     &lt;/properties&gt;       &lt;dependencies&gt;             &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;             &lt;version&gt;5.0.1.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;             &lt;version&gt;2.9.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;             &lt;version&gt;5.0.0.RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;             &lt;version&gt;5.0.1.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;                         &lt;/dependency&gt;        &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre> ",
    "OwnerDisplayName": "user8389458",
    "LastEditorUserId": "601844",
    "LastEditorDisplayName": "user8389458",
    "LastEditDate": "2020-07-06T13:33:24.160",
    "LastActivityDate": "2020-10-08T17:10:45.080",
    "Title": "ERROR Source option 1.5 is no longer supported. Use 1.6 or later",
    "Tags": "<spring-boot><maven><intellij-idea><jetbrains-ide><unsupported-class-version>",
    "AnswerCount": "10",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>You can specify maven source/target version by adding these properties to your pom.xml file</p>  <pre><code>&lt;properties&gt;     &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;     &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt; &lt;/properties&gt; </code></pre> ",
    "highest_rated_answer": "<p>I think this means that</p>  <ul> <li>You are using JDK9 or later</li> <li>Your project uses <strong>maven-compiler-plugin</strong> with an old version which defaults to Java 5.</li> </ul>  <p>You have three options to solve this</p>  <ol> <li>Downgrade to <strong>JDK7</strong> or <strong>JDK8</strong> (meh)</li> <li><p>Use <strong>maven-compiler-plugin</strong> version or later, because</p>  <blockquote>   <p><strong>NOTE:</strong> Since 3.8.0 the default value has changed from 1.5 to 1.6   See <a href='https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#target' rel='noreferrer'>https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#target</a></p> </blockquote>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;version&gt;3.8.0&lt;/version&gt; &lt;/plugin&gt; </code></pre></li> <li><p>Indicate to the <strong>maven-compiler-plugin</strong> to use source level 6 and target 6 (or later).</p>  <p><strong>Best practice</strong> recommended by <a href='https://maven.apache.org/plugins/maven-compiler-plugin/' rel='noreferrer'>https://maven.apache.org/plugins/maven-compiler-plugin/</a></p>  <blockquote>   <p>Also note that at present the default source setting is 1.6 and the default target setting is 1.6, independently of the JDK you run Maven with.   You are highly encouraged to change these defaults by setting source and target as described in <a href='https://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html' rel='noreferrer'>Setting the -source and -target of the Java Compiler.</a></p> </blockquote>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;source&gt;1.6&lt;/source&gt;         &lt;target&gt;1.6&lt;/target&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>or use</p>  <pre><code>&lt;properties&gt;   &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;   &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt; &lt;/properties&gt; </code></pre></li> </ol> "
  },
  {
    "Id": "26212237",
    "PostTypeId": "1",
    "AcceptedAnswerId": "26216049",
    "CreationDate": "2014-10-06T08:15:05.320",
    "Score": "9",
    "ViewCount": "6135",
    "Body": "<p>When I build a spring-boot application (to a standalone jar) using <code>gradle build</code>, the proper artifacts are generated. The resulting jar contains all dependent jars and is executable.</p>  <p>I have also configured the maven-publish plugin as follows:</p>  <pre><code>publishing {    publications {       mavenJava(MavenPublication) {          from components.java       }    } } </code></pre>  <p>Now when I execute <code>gradle publish</code>, a much smaller jar without dependencies gets build and published. </p>  <p>Following steps are not executed in the latter case.</p>  <pre><code>:myProject:bootRepackage                                                                         :myProject:assemble </code></pre>  <p>How can I make sure the correct build steps are executed when publishing?</p> ",
    "OwnerUserId": "430498",
    "LastActivityDate": "2014-10-06T12:15:58.680",
    "Title": "Gradle maven-publish does not build standalone spring-boot application",
    "Tags": "<maven><gradle><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>I'm a little surprised that publishing from <code>components.java</code> doesn't trigger the Java plugin's <code>assemble</code> task. Spring Boot's <code>bootRepackage</code> task is setup as a dependency of the <code>assemble</code> task so you'll need to cause <code>publish</code> to run <code>assemble</code>. Try adding the following to your <code>build.gradle</code>:</p>  <pre><code>publish {     dependsOn assemble }  </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "27100141",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27100366",
    "CreationDate": "2014-11-24T07:54:12.333",
    "Score": "9",
    "ViewCount": "3835",
    "Body": "<p>What is the significant use of Bill-Of-Materials features available in the new Spring release, basically the name sounds good but searched for significant but I fail to find it?</p> ",
    "OwnerUserId": "2528433",
    "LastEditorUserId": "466862",
    "LastEditDate": "2021-10-05T12:14:42.123",
    "LastActivityDate": "2021-10-05T12:14:42.123",
    "Title": "What is Bill-Of-Materials in Maven dependency management?",
    "Tags": "<spring-boot><maven><maven-3>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ClosedDate": "2014-11-24T08:36:47.090",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The <strong>Bill Of Materials</strong> (aka <em>BOM</em>) is more a <em>Maven</em> concept than a <em>Spring</em> one. It has emerged with the <em>2.0.x</em> release of Maven when the <code>import</code> scope has been introduced.</p>  <p>This scope let you declare a <em>pom</em> dependency inside your <code>&lt;dependencyManagement&gt;</code> section which will result in a sort of merge of the dependency and its dependant project <em>dependencyManagement</em> section.</p>  <p>The <em>BOM</em> concept came to put that scope in practice, which is no more than a project with a <em>pom.xml</em> having as packaging nature <strong>pom</strong> and that has only the <code>&lt;dependencyManagement&gt;</code> sectin inside in which we declare all the project dependencies (in your case it should be <em>Spring</em> ones) that are aligned together and should work out of the box.</p>  <p>You can think of a <em>BOM</em> project as a dependency directory that declares all the related projects <strong>versions</strong> thus save your version resolution efforts.</p>  <p>One your <em>BOM</em> imported into your project descriptor, you no more need to declare the version when declaring a dependecy because it will be inherited from that imported pom and it should the be something like the following:</p>  <pre class='lang-xml prettyprint-override'><code>&lt;dependency&gt;   &lt;groupId&gt;org.springframework&lt;/groupId&gt;   &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;!-- or any other spring related artifact --&gt; &lt;/dependency&gt; </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "27302450",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27305033",
    "CreationDate": "2014-12-04T19:32:54.303",
    "Score": "9",
    "ViewCount": "4714",
    "Body": "<p>The short question:</p>  <p>How can you configure environment profiles, or even just an alternative configuration file name for  spring-boot:run?</p>  <p>The long version: </p>  <p>Yes, I read the doc. <a href='http://docs.spring.io/spring-boot/docs/current/reference/html/index.html'>http://docs.spring.io/spring-boot/docs/current/reference/html/index.html</a></p>  <p>I have my application configuration settings in src/main/resources/application-mysql.properties:</p>  <pre><code># Specify the DBMS spring.jpa.database = MYSQL  # Other Mysql config properties  spring.jpa.hibernate.ddl-auto=create </code></pre>  <p>There is a corresponding application-hsql.properties, which contains the same set of configuration options for Hsql. There is no application.poperties</p>  <p>There is a corresponding import.sql:</p>  <pre><code>insert into users(name, email) values ('User One',  'one@email.com') insert into users(name, email) values ('Two User', 'two@email.com') </code></pre>  <p>The unit tests exist only to check for the presence of these users in the repo.</p>  <p>I believe it to be true that whenever the test is run using the MySql configuration, those rows are added to the users table.  When the test is run with hsql, the mysql db should be unaffected. I am manually dropping the users table between runs, because I want to manually see when it exists.</p>  <p>1) If I run mvn test, the tests use the configured db:</p>  <pre><code>mvn -Dspring.profiles.active=mysql clean test  </code></pre>  <p>Produces mysql database rows and </p>  <pre><code>mvn -Dspring.profiles.active=hsql clean test  </code></pre>  <p>Does not.</p>  <p>2) If I make a package, and then run the resulting jar file, I am able to specify a config file name:</p>  <pre><code>java -jar -Dspring.profiles.active=mysql  ./target/app.jar </code></pre>  <p>3) If I run with spring-boot:run, only properties in application.properties (which doesn't exist in this test scenario) are discovered.</p>  <pre><code>mvn -Dspring.profiles.active=mysql clean spring-boot:run </code></pre>  <p>What does spring-boot:run do differently in launching than running unit tests and kicking off the jar?  The db config is one example, but in theory I'd like to be able to specify a set of dev configs when the application is being run locally vs. a production configuration.</p> ",
    "OwnerUserId": "3533126",
    "LastActivityDate": "2017-09-18T22:06:33.367",
    "Title": "Are spring-boot command line properties available when using spring-boot:run?",
    "Tags": "<spring><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>The Maven <code>spring-boot</code> plugin forks a new process so you'll need to send any extra parameters to it via <a href='http://docs.spring.io/autorepo/docs/spring-boot/1.1.9.RELEASE/maven-plugin/run-mojo.html#jvmArguments'>jvmArguments</a>, e.g.:</p>  <blockquote>   <p>mvn spring-boot:run -Drun.jvmArguments='-Dspring.profiles.active=mysql'</p> </blockquote> ",
    "highest_rated_answer": "<p>The plugin allows you to specify the active profile(s) directly (perhaps it wasn't the case 3 year ago?) :</p>  <pre><code>mvn spring-boot:run -Drun.profiles=mysql </code></pre> "
  },
  {
    "Id": "28049044",
    "PostTypeId": "1",
    "AcceptedAnswerId": "28049613",
    "CreationDate": "2015-01-20T15:23:57.647",
    "Score": "9",
    "ViewCount": "10601",
    "Body": "<p>I tried:</p>  <p><code>mvn -Dspring.profiles.active=dev spring-boot:run</code></p>  <p>but it does not affect my default configuration. I've googled a little and found:</p>  <p><code>mvn -DargLine='-Dspring.profiles.active=dev' spring-boot:run</code></p>  <p>but if fails as well.</p>  <p>When I run:</p>  <p><code>mvn package</code></p>  <p>and then:</p>  <p><code>java -Dspring.profiles.active=test -jar target/app-1.0.0.jar</code></p>  <p>it works as expected (the profile is changed) but fails to find file from resource dir (FileNotFound exception) which is loaded this way:</p>  <p><code>new File(getClass().getClassLoader().getResource('data.yml').getFile())</code></p>  <p>There is no problem with this file when maven is used to run the app. </p>  <p>Any suggestions?</p> ",
    "OwnerUserId": "1073320",
    "LastEditorUserId": "1073320",
    "LastEditDate": "2015-01-20T23:36:41.317",
    "LastActivityDate": "2021-07-12T09:42:27.080",
    "Title": "Spring Boot: passing system properties to maven",
    "Tags": "<spring><maven><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Try running your application with:</p>  <p><code>mvn spring-boot:run -Drun.jvmArguments='-Dspring.profiles.active=dev'</code></p>  <p>I don't know which version your are using but check this <a href='https://github.com/spring-projects/spring-boot/issues/1095' rel='noreferrer'>issue</a> too</p> ",
    "highest_rated_answer": "<p>With the current version (&gt;= 2.0.0.RELEASE), the parameter is <em>-D<strong>spring-boot</strong>.run.jvmArguments</em></p> <p><code>mvn spring-boot:run -Dspring-boot.run.jvmArguments=&quot;-Dspring.profiles.active=dev&quot;</code></p> <p>Source: <a href='https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#run' rel='noreferrer'>Running your Application with Maven</a></p> <p>To activate a speciffic profile, there is a shortcut available:</p> <p><code>mvn spring-boot:run -Dspring-boot.run.profiles=dev</code></p> <p>Source: <a href='https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#run.examples.specify-active-profiles' rel='noreferrer'>Specify Active Profiles</a></p> "
  },
  {
    "Id": "33870389",
    "PostTypeId": "1",
    "CreationDate": "2015-11-23T11:49:09.117",
    "Score": "9",
    "ViewCount": "13962",
    "Body": "<p>I've created a new Spring Boot project. I'm trying to setup a DataSource to use MSSQL. However I seem to be getting the error 'Unable to load class: com.microsoft.sqlserver.jdbc.SQLServerDriver'</p>  <p>I've placed the file jdbcsql4.jar in a folder in my project /lib/jdbcsq4.jar</p>  <p>In my pom.xml file I've added the following:</p>  <pre><code>&lt;dependency&gt;         &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;         &lt;artifactId&gt;sqljdbc4&lt;/artifactId&gt;         &lt;version&gt;4.0&lt;/version&gt;         &lt;scope&gt;system&lt;/scope&gt;         &lt;optional&gt;true&lt;/optional&gt;         &lt;systemPath&gt;${basedir}/lib/sqljdbc4.jar&lt;/systemPath&gt;     &lt;/dependency&gt; </code></pre>  <p>I have an application.properties file, and I'm defining the database credentials like this:</p>  <pre><code>secondary.datasource.url = jdbc:sqlserver://1.1.1.1:50109 secondary.datasource.username = sa secondary.datasource.password = mypassword secondary.datasource.driver-class-name =     com.microsoft.sqlserver.jdbc.SQLServerDriver </code></pre>  <p>Can anyone possibly indicate where I may be going wrong?</p> ",
    "OwnerUserId": "1554035",
    "LastActivityDate": "2019-09-18T14:13:42.230",
    "Title": "Spring Boot Unable to load class: com.microsoft.sqlserver.jdbc.SQLServerDriver",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I managed to solve this issue by following the instructions in this link <a href='http://claude.betancourt.us/add-microsoft-sql-jdbc-driver-to-maven/' rel='nofollow noreferrer'>http://claude.betancourt.us/add-microsoft-sql-jdbc-driver-to-maven/</a></p>  <p>EDIT: The original link above no longer exists, but here's a similar link. <a href='http://biercoff.com/add-microsoft-sql-jdbc-driver-to-maven/' rel='nofollow noreferrer'>http://biercoff.com/add-microsoft-sql-jdbc-driver-to-maven/</a></p> "
  },
  {
    "Id": "34975589",
    "PostTypeId": "1",
    "AcceptedAnswerId": "34975956",
    "CreationDate": "2016-01-24T12:09:46.943",
    "Score": "9",
    "ViewCount": "12113",
    "Body": "<p>I want to add some integration tests to a spring boot application. The resulting structure would be this</p>  <pre><code>MyProject \u251c\u2500\u2500 myapp.iml \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src     \u251c\u2500\u2500 integration-test (integration test sources root)  \u00a0\u00a0 \u2502   \u251c\u2500\u2500 java  \u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 com  \u00a0\u00a0 \u2502   \u2502\u00a0\u00a0     \u2514\u2500\u2500 mysite  \u00a0\u00a0 \u2502   \u2502\u00a0\u00a0         \u2514\u2500\u2500 myapp  \u00a0\u00a0 \u2502   \u2502\u00a0\u00a0             \u2514\u2500\u2500 AppTestIT.java  \u00a0\u00a0 \u2502   \u2514\u2500\u2500 integration-test.iml     \u2502  \u00a0\u00a0 \u251c\u2500\u2500 main (sources root)  \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 mysite  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 myapp  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 App.java  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.iml     \u2502  \u00a0\u00a0 \u2514\u2500\u2500 test (test sources root)  \u00a0\u00a0     \u251c\u2500\u2500 java  \u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 com  \u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 mysite  \u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 myapp  \u00a0\u00a0     \u2502\u00a0\u00a0             \u2514\u2500\u2500 AppTest.java  \u00a0\u00a0     \u2514\u2500\u2500 test.iml </code></pre>  <p>Is this possible? I'm doing this in <code>Intellij 15 Ultimate</code> and it doesn't recognise the package as <code>com.mysite.myapp</code> in my integration tests. Instead it recognises this <code>java.com.mysite.myapp</code>. It doesn't follow the convention as it does with <code>main</code> and <code>test</code>, which is expected. Is there a way to add more folders alongside <code>main</code> and <code>test</code> and follow the same conventions (java folder not taken into consideration for the package declaration)?  If not, what is the best practice regarding the project structure when including integration tests? Should they be in the test folder? I would like to avoid that if possible.</p> ",
    "OwnerUserId": "1138559",
    "LastEditorUserId": "383838",
    "LastEditDate": "2016-01-24T12:53:54.263",
    "LastActivityDate": "2016-01-24T13:09:55.273",
    "Title": "IntelliJ integration test folder alongside main and test",
    "Tags": "<java><intellij-idea><spring-boot><maven-3><integration-testing>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>This should be as easy as right clicking the <code>integration-test</code> folder, scrolling down to 'Mark Directory As...' and selecting 'Test Sources Root'.</p>  <p>Note that if you have other developers working on this project they will have to do the same thing (unless you share IDEA files).</p> ",
    "highest_rated_answer": "<p>The correct way in this case would be to change the Maven configuration appropriately, so that it also works when executing the build on command line (e.g. on a build server etc.). You can do this by configuring the build-helper-maven-plugin:</p>  <pre><code>&lt;build&gt; &lt;plugins&gt;   &lt;plugin&gt;     &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;     &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.10&lt;/version&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;id&gt;add-test-source&lt;/id&gt;         &lt;phase&gt;generate-test-sources&lt;/phase&gt;         &lt;goals&gt;           &lt;goal&gt;add-test-source&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;sources&gt;             &lt;source&gt;src/integration-test/java&lt;/source&gt;           &lt;/sources&gt;         &lt;/configuration&gt;       &lt;/execution&gt;     &lt;/executions&gt;   &lt;/plugin&gt; &lt;/plugins&gt; </code></pre>  <p></p>  <p>IntelliJ picks up this configuration and marks the folder automatically as test source folder.</p> "
  },
  {
    "Id": "37961730",
    "PostTypeId": "1",
    "AcceptedAnswerId": "37966575",
    "CreationDate": "2016-06-22T07:48:45.610",
    "Score": "9",
    "ViewCount": "21973",
    "Body": "<p>I am working on a spring boot project ( Project A ) that would be included in other projects ( Project B, Project C ... ) . I have several dependencies in Project A, but in the project importing Project A, some or only one may be required.  I am trying to find a way to exclude the jar dependencies while packaging Project A so that the required ones will be provided by Project B during run time. I would like to have the dependencies available when the Project A is run independently for testing purposes. </p>  <p><strong>Already tried the following</strong></p>  <p>I have tried using:</p>  <pre><code>&lt;scope&gt;provided&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; </code></pre>  <p>Still the jars end up in the final artifact.</p>  <p>Also  tried adding the following to the spring-boot-maven-plugin</p>  <pre><code>           &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;excludeArtifactIds&gt;spring-boot-starter-redis&lt;/excludeArtifactIds&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt; </code></pre>  <p>This would just remove the spring-boot dependency , but the jars for the children of this dependency would still end up in the final artifact.</p> ",
    "OwnerUserId": "812853",
    "LastActivityDate": "2023-04-11T09:25:40.113",
    "Title": "spring-boot : Exclude dependencies on packaging",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>In our current project we have the requirement to create a war file for the application, which has to be deployed in a JEE server. The war file must include only the needed jar files, not including any API or implementation already provided by the JEE server.</p>  <p>But, we want to retain the possibility to generate an executable war or jar file as provided by default by Boot, for testing purposes. </p>  <p>To achieve it, we've set all optional dependencies as <em>provided</em>. For example, we have some direct dependencies used in development, like the JDBC driver, we don't want to include in the deployed war file. Also there are some boot main starters which provide dependencies with other starters and libraries we don't need in a JEE server. This is the case of the <em>spring-boot-starter-tomcat</em> and <em>spring-boot-starter-jdbc</em> starters. In our project, we have the followind dependencies in our <em>pom.xml</em> file:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;     &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;     &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;com.oracle&lt;/groupId&gt;   &lt;artifactId&gt;ojdbc7&lt;/artifactId&gt;   &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; </code></pre>  <p>This way those dependencies won't be included in the original jar/war file, but the spring boot maven plugin will include them in the <em>lib-provided</em> folder of the repackaged jar/war.</p>  <p>Those dependencies won't be seen by the JEE server, but make the packaged application bigger than needed. The solution is to tell the spring boot maven plugin to create the repackaged file with another name, as well as excluding the development tools:</p>  <pre><code>&lt;plugin&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;   &lt;configuration&gt;       &lt;mainClass&gt;${start-class}&lt;/mainClass&gt;       &lt;classifier&gt;exec&lt;/classifier&gt;   &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>This way maven will generate two packages for your application:</p>  <ul> <li>The default jar/war package, without all the provided dependencies.</li> <li>A repackaged file whose name ends with _exec.jar/.war, with all provided dependencies in the <em>lib-provided</em> folder and the support to run the application with <em>java -jar file</em></li> </ul>  <p>In your case you could use the same technique to be able to generate the package for the Project A to be included in Project B, and the package for Project A to be run as standalone.</p>  <p>If you don't need to create the package for Project A to be run by itself, and only test it in your IDE, you might even remove the spring boot maven plugin from your <em>pom.xml</em>.</p> ",
    "highest_rated_answer": "<p>You can <b>add <code>exclude</code> block into spring-boot-maven-plugin</b></p> <pre><code>  &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;       &lt;excludes&gt;         &lt;exclude&gt;           &lt;groupId&gt;com.foo&lt;/groupId&gt;           &lt;artifactId&gt;bar&lt;/artifactId&gt;         &lt;/exclude&gt;       &lt;/excludes&gt;     &lt;/configuration&gt; </code></pre> <p>Official documentation : <a href='https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/maven-plugin/examples/exclude-dependency.html' rel='nofollow noreferrer'>https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/maven-plugin/examples/exclude-dependency.html</a></p> "
  },
  {
    "Id": "39497806",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39518697",
    "CreationDate": "2016-09-14T19:01:03.450",
    "Score": "9",
    "ViewCount": "3163",
    "Body": "<p>I'm using Eclipse STS 3.8.1 </p>  <p><strong>Is there anyway to remove apps from the Boot Dashboard?</strong></p>  <p><strong>Reason for asking</strong> (Similar to my real world application/s):<br> I have multiple Spring Boot applications, some of which use a shared library.  In this library I have some common configuration:  Eg:  Setup RestTemplate/s with Ribbon (@LoadBalancer)...</p>  <p>On order to have access to the @Configuration and @Bean annotations I include the below dependancy into my libraries pom:  </p>  <pre><code>&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>The problem is now my library is displayed in the Boot Dashboard with my applications even though it is not a Boot Application.</p>  <p>This is rather annoying as it clutters the dashboard, how can I remove this?</p>  <hr>  <p>Just to expand on my above example:<br> I'm using a multi-module maven project with multiple applications and libs under the same parent.</p> ",
    "OwnerUserId": "1652429",
    "LastEditorUserId": "1531064",
    "LastEditDate": "2017-08-29T11:53:37.507",
    "LastActivityDate": "2017-08-29T11:53:37.507",
    "Title": "How to remove unwanted projects from STS Boot Dashboard",
    "Tags": "<spring><spring-boot><maven-2><spring-tool-suite>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Go to the Preferences -> Spring -> Boot and configure the projects to be excluded from the boot dashboard by default. Just put the name of the project in that text field.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "42164938",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42169218",
    "CreationDate": "2017-02-10T17:08:32.043",
    "Score": "9",
    "ViewCount": "7980",
    "Body": "<p>Hello I've been looking for a step by step guide on how to create a webjar of an existing project. My Front-End project is currently using Angular 2 + webpack, I understand the files need to go in a specific directory <code>META-INF/resources/webjars</code> and that there should be a starter Maven pom file somewhere in the project. The thing is I'm not sure where or how to start implementing this inside my project and so I'm asking here if anyone could help me out or knows where I can find a step by step guide for this. </p>  <p>I plan to use the webjar as a dependency for another project built using Spring Boot. Any help is greatly appreciated. </p> ",
    "OwnerUserId": "6221850",
    "LastActivityDate": "2017-02-10T21:48:12.430",
    "Title": "Step by step guide on how to create a webjar for Front-End Application?",
    "Tags": "<maven><angular><spring-boot><webjars>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ClosedDate": "2017-03-09T06:45:42.093",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>WebJars is really just a packaging of JS / CSS libs that can easily be used as dependencies in Java builds.  By putting the contents of these libraries in the <code>META-INF/resources</code> they are automatically available as static resources in most Java web servers.  So to create your own JAR that has static resources in the <code>META-INF/resources</code> you can create a JAR however you like.  This is usually done with a build tool like Maven or Gradle.  If you want to publish that JAR somewhere that anyone can consume as a dependency then most people use <a href='https://maven.apache.org/guides/mini/guide-central-repository-upload.html' rel='noreferrer'>Maven Central</a>.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "42490517",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42578151",
    "CreationDate": "2017-02-27T16:13:54.477",
    "Score": "9",
    "ViewCount": "2734",
    "Body": "<p>I am having big trouble while marshaling few elements to XML with CDATA using jaxb2marshaller. I have gone through the solutions like:</p>  <p><a href='https://stackoverflow.com/questions/14193944/jaxb-marshalling-unmarshalling-with-cdata'>JAXB Marshalling Unmarshalling with CDATA</a></p>  <p><a href='https://stackoverflow.com/questions/3136375/how-to-generate-cdata-block-using-jaxb'>How to generate CDATA block using JAXB?</a></p>  <p>and much more, but could not find a proper solution. They either tell to switch to old JAXB implementation or use MOXY. But, this is not my requirement. I have implemented below two classes using OXM library and want to generate an XML where few elements need to have CDATA appended.</p>  <pre><code>import java.util.HashMap; import java.util.Map;  import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.oxm.jaxb.Jaxb2Marshaller;  @Configuration public class AppConfig {     @Bean     public Processor getHandler(){       Processor handler= new Processor();       handler.setMarshaller(getCastorMarshaller());       handler.setUnmarshaller(getCastorMarshaller());       return handler;     }     @Bean     public Jaxb2Marshaller getCastorMarshaller() {       Jaxb2Marshaller jaxb2Marshaller = new Jaxb2Marshaller();       jaxb2Marshaller.setPackagesToScan('com.pom.dom.whatever.model');       Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();       map.put('jaxb.formatted.output', true);       jaxb2Marshaller.setMarshallerProperties(map);           return jaxb2Marshaller;     } }  </code></pre>  <p>and</p>  <pre><code>import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException;  import javax.xml.transform.stream.StreamResult; import javax.xml.transform.stream.StreamSource;  import org.springframework.oxm.Marshaller; import org.springframework.oxm.Unmarshaller;  public class Processor {     private Marshaller marshaller;     private Unmarshaller unmarshalling;      public void setMarshaller(Marshaller marshaller) {         this.marshaller = marshaller;     }      public void setUnmarshaller(Unmarshaller unmarshalling) {         this.unmarshaller = unmarshaller;     }     //Converts Object to XML file     public void objectToXML(String fileName, Object graph) throws IOException {         FileOutputStream fos = null;         try {             fos = new FileOutputStream(fileName);             marshaller.marshal(graph, new StreamResult(fos));         } finally {             fos.close();         }     }     //Converts XML to Java Object     public Object xmlToObject(String fileName) throws IOException {         FileInputStream fis = null;         try {             fis = new FileInputStream(fileName);             return unmarshaller.unmarshal(new StreamSource(fis));         } finally {             fis.close();         }     } }  </code></pre>  <p>In Main class:</p>  <pre><code>generateXML(){ public void generateCheckXML(ReportDTO repDTO, String fileName){          AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();         ctx.register(AppConfig.class);         ctx.refresh();         Processor processor = ctx.getBean(Processor.class);         ObjectFactory objectFactory = new ObjectFactory();          TRIMSInterface trimsInterface = objectFactory.createTRIMSInterface();          // setters          processor.objectToXML(fileName,trimsInterface);   } } </code></pre>  <p>and a simple POJO class with setters and getters to produce the XML.</p>  <p>Can I do some changes anywhere above to produce the XML with required CDATA attribute?</p>  <p><strong>NOTE</strong>: I already tried EclipseLink Moxy(@XmlData) and it does not integrate with OXM. I am looking to implement this without using a third party jar in my code.</p> ",
    "OwnerUserId": "3884944",
    "LastEditorUserId": "-1",
    "LastEditDate": "2017-05-23T12:00:24.427",
    "LastActivityDate": "2017-03-09T14:21:12.143",
    "Title": "Append CDATA using org.springframework.oxm jaxb2marshaller",
    "Tags": "<java><spring><spring-boot><marshalling><jaxb2-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Found the solution with moxy integration (could not find any other way around), posting here if it helps someone in need.</p>  <p>imported moxy dependency and added jaxb.properties file in the same package where bean is created with the following line:</p>  <pre><code>javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory </code></pre>  <p>and put  <code>@XmlCDATA</code> annotation on the required field. This generated the xml file with CDATA sections.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "44091620",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44092928",
    "CreationDate": "2017-05-20T23:08:43.340",
    "Score": "9",
    "ViewCount": "83934",
    "Body": "<p>I encountered this exception when I try to do a rest call to a spring boot services. what causes this exception?</p>  <p>Message</p>  <pre><code> Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.getResponseStatus()Lorg/springframework/http/HttpStatus; </code></pre>  <p>Description</p>  <pre><code> The server encountered an unexpected condition that prevented it from fulfilling the request. </code></pre>  <p>Exception</p>  <pre><code>org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.getResponseStatus()Lorg/springframework/http/HttpStatus;     org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:978)     org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)     org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)     org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)     javax.servlet.http.HttpServlet.service(HttpServlet.java:635)     org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)     javax.servlet.http.HttpServlet.service(HttpServlet.java:742)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) </code></pre>  <p>Root Cause</p>  <pre><code>java.lang.NoSuchMethodError: org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.getResponseStatus()Lorg/springframework/http/HttpStatus;     org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.setResponseStatus(ServletInvocableHandlerMethod.java:128)     org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:98)     org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)     org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)     org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)     org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)     org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)     org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)     javax.servlet.http.HttpServlet.service(HttpServlet.java:635)     org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)     javax.servlet.http.HttpServlet.service(HttpServlet.java:742)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)     org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) </code></pre>  <p>pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.zongyang&lt;/groupId&gt;     &lt;artifactId&gt;hibernate&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;hibernate&lt;/name&gt;     &lt;description&gt;Use MySQL in Spring Boot web application with Hibernate&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;            &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;             &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre>  <p>Code</p>  <pre><code>@RestController public class MainController {      @RequestMapping(value = '/index', method = RequestMethod.GET)     public String index() {         return '###';     }  } </code></pre> ",
    "OwnerUserId": "5924113",
    "LastEditorUserId": "3728901",
    "LastEditDate": "2017-05-21T03:40:30.610",
    "LastActivityDate": "2018-02-24T09:54:54.157",
    "Title": "Spring Boot : Handler dispatch failed; nested exception is java.lang.NoSuchMethodError",
    "Tags": "<java><spring><maven><spring-mvc><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>(1) In controller, you don't do that</p>  <pre><code>return '###'; </code></pre>  <p>(2) Remove</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework&lt;/groupId&gt;     &lt;artifactId&gt;spring-web&lt;/artifactId&gt;     &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Because inside </p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; </code></pre>  <p>already included <code>spring-web</code> dependency.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "44220795",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44287952",
    "CreationDate": "2017-05-27T19:24:14.433",
    "Score": "9",
    "ViewCount": "7503",
    "Body": "<p>I have a basic POJO that contains a java.time.LocalDateTime:</p>  <pre><code>package foo.bar.asire.api.model;  import java.time.LocalDateTime;  public class Address {     private Long id;     private Integer houseNumber;     private String address;     private LocalDateTime created;      public Address()     {         super();     }      public Address(Long id, Integer houseNumber, String address, LocalDateTime created)     {         super();         this.id = id;         this.houseNumber = houseNumber;         this.address = address;         this.created = created;     }      public Long getId()     {         return id;     }      public void setId(Long id)     {         this.id = id;     }      public Integer getHouseNumber()     {         return houseNumber;     }      public void setHouseNumber(Integer houseNumber)     {         this.houseNumber = houseNumber;     }      public String getAddress()     {         return address;     }      public void setAddress(String address)     {         this.address = address;     }      public LocalDateTime getCreated()     {         return created;     }      public void setCreated(LocalDateTime created)     {         this.created = created;     }      @Override     public String toString()     {         return 'Address [id=' + id + ', houseNumber=' + houseNumber                 + ', address=' + address + ', created=' + created + ']';     }  //    @Override //    public String toString() //    { //        return 'Address [id=' + id + ', houseNumber=' + houseNumber //                + ', address=' + address + ']'; //    }   } </code></pre>  <p>If I remove the LocalDateTime object, I am able to send/receive and create Address objects using the following code from my Consumer:</p>  <pre><code>package foo.bar.consumer.config;  import java.util.HashMap; import java.util.Map;  import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.common.serialization.StringDeserializer; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.kafka.annotation.EnableKafka; import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory; import org.springframework.kafka.core.ConsumerFactory; import org.springframework.kafka.core.DefaultKafkaConsumerFactory; import org.springframework.kafka.support.serializer.JsonDeserializer;  import foo.bar.asire.api.model.Address;  @Configuration @EnableKafka public class KafkaConsumerConfig {     @Value('${kafka.consumer.bootstrap}')     private String bootstrapServers;      @Value('${kafka.consumer.group}')     private String group;      @Bean     public Map&lt;String, Object&gt; consumerConfigs()     {         Map&lt;String, Object&gt; props = new HashMap&lt;&gt;();         props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);         props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);         props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);         props.put(ConsumerConfig.GROUP_ID_CONFIG, group);          return props;     }      @Bean     public ConsumerFactory&lt;String, Address&gt; consumerFactory()     {         return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs(),                  new StringDeserializer(),                 new JsonDeserializer&lt;&gt;(Address.class));     }      @Bean     public ConcurrentKafkaListenerContainerFactory&lt;String, Address&gt; kafkaListenerContainerFactory()     {         ConcurrentKafkaListenerContainerFactory&lt;String, Address&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();         factory.setConsumerFactory(consumerFactory());          return factory;     } } </code></pre>  <p>Here is my AddressConsumer @Service:</p>  <pre><code>package foo.bar.consumer.service;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.stereotype.Service;  import foo.bar.asire.api.model.Address;  @Service public class AddressConsumer {     private final Logger log = LoggerFactory.getLogger(this.getClass());      @KafkaListener(topics = '${kafka.consumer.topic}')     private void consumeAddress(Address address)     {         log.info('received address='{}'', address.toString());     } } </code></pre>  <p>However, when I use the original Address POJO with the LocalDateTime object, I get the following exception:</p>  <pre><code>org.apache.kafka.common.errors.SerializationException: Error deserializing key/value for partition asire-0 at offset 29 Caused by: org.apache.kafka.common.errors.SerializationException: Can't deserialize data [[123, 34, 105, 100, 34, 58, 49, 44, 34, 104, 111, 117, 115, 101, 78, 117, 109, 98, 101, 114, 34, 58, 49, 50, 51, 52, 44, 34, 97, 100, 100, 114, 101, 115, 115, 34, 58, 34, 70, 111, 111, 98, 97, 114, 32, 76, 97, 110, 101, 34, 44, 34, 99, 114, 101, 97, 116, 101, 100, 34, 58, 123, 34, 100, 97, 121, 79, 102, 77, 111, 110, 116, 104, 34, 58, 50, 55, 44, 34, 100, 97, 121, 79, 102, 87, 101, 101, 107, 34, 58, 34, 83, 65, 84, 85, 82, 68, 65, 89, 34, 44, 34, 100, 97, 121, 79, 102, 89, 101, 97, 114, 34, 58, 49, 52, 55, 44, 34, 109, 111, 110, 116, 104, 34, 58, 34, 77, 65, 89, 34, 44, 34, 109, 111, 110, 116, 104, 86, 97, 108, 117, 101, 34, 58, 53, 44, 34, 121, 101, 97, 114, 34, 58, 50, 48, 49, 55, 44, 34, 104, 111, 117, 114, 34, 58, 49, 52, 44, 34, 109, 105, 110, 117, 116, 101, 34, 58, 53, 52, 44, 34, 110, 97, 110, 111, 34, 58, 49, 54, 53, 48, 48, 48, 48, 48, 48, 44, 34, 115, 101, 99, 111, 110, 100, 34, 58, 57, 44, 34, 99, 104, 114, 111, 110, 111, 108, 111, 103, 121, 34, 58, 123, 34, 105, 100, 34, 58, 34, 73, 83, 79, 34, 44, 34, 99, 97, 108, 101, 110, 100, 97, 114, 84, 121, 112, 101, 34, 58, 34, 105, 115, 111, 56, 54, 48, 49, 34, 125, 125, 125]] from topic [asire] Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of java.time.LocalDateTime: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)  at [Source: [B@3ad71c11; line: 1, column: 63] (through reference chain: foo.bar.asire.api.model.Address['created'])     at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:270) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1456) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1012) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1206) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:314) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:504) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:104) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:357) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1626) ~[jackson-databind-2.8.8.jar:2.8.8]     at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1237) ~[jackson-databind-2.8.8.jar:2.8.8]     at org.springframework.kafka.support.serializer.JsonDeserializer.deserialize(JsonDeserializer.java:86) ~[spring-kafka-1.2.1.RELEASE.jar:na]     at org.apache.kafka.clients.consumer.internals.Fetcher.parseRecord(Fetcher.java:869) ~[kafka-clients-0.10.2.0.jar:na]     at org.apache.kafka.clients.consumer.internals.Fetcher.parseCompletedFetch(Fetcher.java:775) ~[kafka-clients-0.10.2.0.jar:na]     at org.apache.kafka.clients.consumer.internals.Fetcher.fetchedRecords(Fetcher.java:473) ~[kafka-clients-0.10.2.0.jar:na]     at org.apache.kafka.clients.consumer.KafkaConsumer.pollOnce(KafkaConsumer.java:1062) ~[kafka-clients-0.10.2.0.jar:na]     at org.apache.kafka.clients.consumer.KafkaConsumer.poll(KafkaConsumer.java:995) ~[kafka-clients-0.10.2.0.jar:na]     at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:556) ~[spring-kafka-1.2.1.RELEASE.jar:na]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_131]     at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_131]     at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131] </code></pre>  <p>Here is my Maven pom.xml file, basically the same for both Consumer/Producer App:</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;foo.bar&lt;/groupId&gt;     &lt;artifactId&gt;consumer&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;consumer&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;             &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;             &lt;version&gt;1.2.1.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;foo.bar&lt;/groupId&gt;             &lt;artifactId&gt;asire-api&lt;/artifactId&gt;             &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.guava&lt;/groupId&gt;             &lt;artifactId&gt;guava&lt;/artifactId&gt;             &lt;version&gt;22.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- Jackson Dependencies --&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;             &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;         &lt;/dependency&gt;           &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;             &lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;             &lt;version&gt;1.2.1.RELEASE&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;             &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.mockito&lt;/groupId&gt;             &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;             &lt;version&gt;2.7.22&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre>  <p>Here is my application.properties file for my Consumer, but my Producer is about the same:</p>  <pre><code>server.port=8081  spring.jackson.serialization.write_dates_as_timestamps=false  kafka.consumer.bootstrap=localhost:9092 kafka.consumer.topic=asire kafka.consumer.group=AsireGroup </code></pre> ",
    "OwnerUserId": "3175414",
    "LastEditorUserId": "1240763",
    "LastEditDate": "2017-05-28T20:17:34.477",
    "LastActivityDate": "2022-09-09T16:16:37.033",
    "Title": "spring boot kafka LocalDateTime",
    "Tags": "<java><maven><spring-boot><spring-kafka>",
    "AnswerCount": "4",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Right or wrong, I was able to get this to properly do the JsonSerialization/JsonDeserialization by modifying the original Address POJO with the following changes.  Added the following imports:</p>  <pre><code>import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer; import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer; </code></pre>  <p>Added the following annotations:</p>  <pre><code>@JsonSerialize(using = LocalDateTimeSerializer.class) @JsonDeserialize(using = LocalDateTimeDeserializer.class) private LocalDateTime created; </code></pre> ",
    "highest_rated_answer": "<p>You should use Datatype module for those Java 8 date time types: <a href='https://stackoverflow.com/questions/27952472/serialize-deserialize-java-8-java-time-with-jackson-json-mapper'>serialize/deserialize java 8 java.time with Jackson JSON mapper</a>:</p>  <pre><code>objectMapper.registerModule(new JSR310Module()) </code></pre> "
  },
  {
    "Id": "45348065",
    "PostTypeId": "1",
    "CreationDate": "2017-07-27T10:25:18.710",
    "Score": "9",
    "ViewCount": "5920",
    "Body": "<p>I want to integrate <strong>ReactJS</strong> with <strong>Spring-boot</strong> and <strong>maven</strong> but I don't know how.</p> <p>I can use npm to install it but I don't know in which path I will do that.</p> <pre><code>npm init npm install --save react react-dom </code></pre> ",
    "OwnerUserId": "4846413",
    "LastEditorUserId": "214143",
    "LastEditDate": "2020-08-12T04:39:08.633",
    "LastActivityDate": "2020-08-12T04:39:08.633",
    "Title": "How to integrate ReactJS with spring Boot",
    "Tags": "<java><spring><maven><reactjs><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>See <a href='https://github.com/eirslett/frontend-maven-plugin' rel='nofollow noreferrer'>frontend-maven-plugin</a></p> <p>You should add something like this to your pom.xml file</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;     &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.2&lt;/version&gt;     &lt;configuration&gt;         &lt;installDirectory&gt;target&lt;/installDirectory&gt;     &lt;/configuration&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;id&gt;install node and npm&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;install-node-and-npm&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;                 &lt;nodeVersion&gt;v4.4.5&lt;/nodeVersion&gt;                 &lt;npmVersion&gt;3.9.2&lt;/npmVersion&gt;             &lt;/configuration&gt;         &lt;/execution&gt;         &lt;execution&gt;             &lt;id&gt;npm install&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;npm&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;                 &lt;arguments&gt;install&lt;/arguments&gt;             &lt;/configuration&gt;         &lt;/execution&gt;         &lt;execution&gt;             &lt;id&gt;webpack build&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;webpack&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> <p>There should be webpack.config.js and package.json together with pom.xml and the webpack is like this</p> <pre><code>var path = require('path'); var webpack = require('webpack'); var packageJSON = require('./package.json');  module.exports = {     entry: [               'webpack/hot/only-dev-server',               './src/main/resources/static/App.js'],     devtool: 'sourcemaps',     cache: true, //    debug: true,     output: {         path: __dirname,         filename: './src/main/resources/static/built/bundle.js',         publicPath: 'http://localhost:8080/yourServletContextHere'     },     resolve: {extensions: ['.js', '.jsx']},     plugins: [                new webpack.HotModuleReplacementPlugin()                ,new webpack.LoaderOptionsPlugin({                      debug: true                    })         ],     module: {         loaders: [             {                 test: path.join(__dirname, '.'),                 exclude: /(node_modules)/,                 loader: 'babel-loader',                 query: {                     cacheDirectory: true,                     presets: ['es2015', 'react']                 }             },          ]     },     devServer: {             noInfo: false,             quiet: false,             lazy: false,             watchOptions: {                 poll: true            }         } }; </code></pre> "
  },
  {
    "Id": "46132019",
    "PostTypeId": "1",
    "AcceptedAnswerId": "46133927",
    "CreationDate": "2017-09-09T15:06:53.833",
    "Score": "9",
    "ViewCount": "9541",
    "Body": "<p>I have a <a href='https://github.com/lapots/java-cloud-sample' rel='noreferrer'>project</a>. It uses <code>spring boot 2</code>, <code>java 9</code> and maven. It can be build sucessfully using <code>mvn clean package</code>. </p>  <p>To run <code>spring boot</code> application I used the command</p>  <pre><code>java -jar java-cloud-rest-api/target/java-cloud-rest-api-0.0.1-SNAPSHOT.jar </code></pre>  <p>But it failed with error</p>  <pre><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.class]: Invocation of init method failed; n ested exception is java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1716) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:499) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:858) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:122) ~[spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at com.lapots.breed.platform.cloud.boot.app.JavaCloudSampleApplication.main(JavaCloudSampleApplication.java:10) [classes!/:0.0.1-SNAPSHOT]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/java.lang.reflect.Method.invoke(Unknown Source) ~[na:na]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT] Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException         at org.hibernate.boot.spi.XmlMappingBinderAccess.&lt;init&gt;(XmlMappingBinderAccess.java:43) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.MetadataSources.&lt;init&gt;(MetadataSources.java:87) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:208) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:163) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:51) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:358) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:384) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:373) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1712) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         ... 24 common frames omitted Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBException         at java.base/java.net.URLClassLoader.findClass(Unknown Source) ~[na:na]         at java.base/java.lang.ClassLoader.loadClass(Unknown Source) ~[na:na]         at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:93) ~[java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at java.base/java.lang.ClassLoader.loadClass(Unknown Source) ~[na:na]         ... 34 common frames omitted </code></pre>  <p>I added additional argument to start command</p>  <pre><code>java --add-modules java.xml.bind -jar java-cloud-rest-api/target/java-cloud-rest-api-0.0.1-SNAPSHOT.jar </code></pre>  <p>But when I run it, I get this error</p>  <pre><code>java.lang.ClassCastException: org.springframework.boot.context.event.ApplicationFailedEvent cannot be cast to org.springframework.boot.web.context.WebServerInitializedEvent         at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:159) [spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127) [spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.boot.context.event.EventPublishingRunListener.finished(EventPublishingRunListener.java:114) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplicationRunListeners.callFinishedListener(SpringApplicationRunListeners.java:79) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplicationRunListeners.finished(SpringApplicationRunListeners.java:72) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:803) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:338) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at com.lapots.breed.platform.cloud.boot.app.JavaCloudSampleApplication.main(JavaCloudSampleApplication.java:10) [classes!/:0.0.1-SNAPSHOT]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/java.lang.reflect.Method.invoke(Unknown Source) ~[na:na]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]  2017-09-09 18:03:42.242  INFO 9200 --- [           main] utoConfigurationReportLoggingInitializer :  Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled. 2017-09-09 18:03:42.242 ERROR 9200 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/H ibernateJpaAutoConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.boot.archive.spi.ArchiveException: Could not build ClassFile         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1716) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]          at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:499) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:858) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:122) ~[spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) [spring-boot-2.0.0.M3.jar!/:2.0.0.M3]         at com.lapots.breed.platform.cloud.boot.app.JavaCloudSampleApplication.main(JavaCloudSampleApplication.java:10) [classes!/:0.0.1-SNAPSHOT]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:na]         at java.base/java.lang.reflect.Method.invoke(Unknown Source) ~[na:na]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [java-cloud-rest-api-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT] Caused by: org.hibernate.boot.archive.spi.ArchiveException: Could not build ClassFile         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.toClassFile(ClassFileArchiveEntryHandler.java:64) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.handleEntry(ClassFileArchiveEntryHandler.java:47) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.archive.internal.JarFileBasedArchiveDescriptor.visitArchive(JarFileBasedArchiveDescriptor.java:146) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.archive.scan.spi.AbstractScannerImpl.scan(AbstractScannerImpl.java:47) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.model.process.internal.ScanningCoordinator.coordinateScan(ScanningCoordinator.java:75) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.prepare(MetadataBuildingProcess.java:98) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:228) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:163) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:51) ~[spring-orm-5.0.0.RC3. jar!/:5.0.0.RC3]         at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:358) ~[spring-orm-5.0.0.RC3.jar!/:5 .0.0.RC3]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:384) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:373) ~[spring-orm-5.0.0.RC3.jar!/:5.0.0.RC3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1776) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.R C3]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1712) ~[spring-beans-5.0.0.RC3.jar!/:5.0.0.RC3]          ... 24 common frames omitted Caused by: java.io.IOException: invalid constant type: 19 at 5         at javassist.bytecode.ConstPool.readOne(ConstPool.java:1244) ~[javassist-3.21.0-GA.jar!/:na]         at javassist.bytecode.ConstPool.read(ConstPool.java:1175) ~[javassist-3.21.0-GA.jar!/:na]         at javassist.bytecode.ConstPool.&lt;init&gt;(ConstPool.java:185) ~[javassist-3.21.0-GA.jar!/:na]         at javassist.bytecode.ClassFile.read(ClassFile.java:829) ~[javassist-3.21.0-GA.jar!/:na]         at javassist.bytecode.ClassFile.&lt;init&gt;(ClassFile.java:154) ~[javassist-3.21.0-GA.jar!/:na]         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.toClassFile(ClassFileArchiveEntryHandler.java:61) ~[hibernate-core-5.2.10.Final.jar!/:5.2.10.Final]         ... 37 common frames omitted </code></pre>  <p>What is the problem?</p> ",
    "OwnerUserId": "1432980",
    "LastEditorUserId": "1432980",
    "LastEditDate": "2017-09-10T09:51:47.020",
    "LastActivityDate": "2023-05-11T08:24:51.250",
    "Title": "java.io.IOException: invalid constant type: 19 at 5",
    "Tags": "<java><maven><spring-boot><javassist><java-9>",
    "AnswerCount": "2",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Though this doesn't answer on how to fix this but as stated in <a href='https://bugs.openjdk.java.net/browse/JDK-8161256' rel='noreferrer'>JDK-8161256</a> about the Constant pool tags:</p>  <blockquote>   <p>Java 9 uses codes <code>19</code> and <code>20</code> for the module system.</p> </blockquote>  <p>and the way currently <code>javassist</code> creates <code>ClassFile</code> is by looking up in the <a href='https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4-140' rel='noreferrer'><code>ConstantPool</code></a> (table until Java8) using the <a href='https://github.com/jboss-javassist/javassist/blob/master/src/main/javassist/bytecode/ConstPool.java#L1197' rel='noreferrer'><code>readOne</code></a> method which certainly lacks something like a <code>Module</code> for the latest java version. Your dependency hierarchy for <code>javassist</code>:</p>  <blockquote>   <ul>   <li><p>org.springframework.boot:spring-boot-starter-actuator:jar:2.0.0.M3:compile</p>      <ul>   <li><p>org.springframework.boot:spring-boot-starter-data-jpa:jar:2.0.0.M3:compile</p>      <ul>   <li><p>org.hibernate:hibernate-core:jar:5.2.10.Final:compile</p>      <ul>   <li>org.javassist:javassist:jar:3.21.0-GA:compile</li>   </ul></li>   </ul></li>   </ul></li>   </ul> </blockquote>  <p>Looking at the <a href='/questions/tagged/javassist' class='post-tag' title='show questions tagged &#39;javassist&#39;' rel='tag'>javassist</a> side of things:</p>  <ul> <li><p>There seems to be a similar bug registered on <a href='https://github.com/jboss-javassist/javassist/issues/147' rel='noreferrer'>javassist/issues#147</a>.</p></li> <li><p>The <a href='https://github.com/jboss-javassist/javassist/releases/tag/rel_3_22_0_cr2' rel='noreferrer'>rel_3_22_0_cr2</a> (last release) from them  reads <em>Compatible with Java 9-ea+164.</em> Same issue occurs with this version of javassist as well.</p></li> <li><p>So you can probably wait for javassist to come back over this with a solution.</p></li> </ul> ",
    "highest_rated_answer": "<p>I was hit by this problem when using Java version 11. I switched <strong>back to Java 8</strong> and everything was fixed.</p> "
  },
  {
    "Id": "49954161",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49963734",
    "CreationDate": "2018-04-21T09:11:02.680",
    "Score": "9",
    "ViewCount": "15798",
    "Body": "<p>In my <code>pom.xml</code> I have <code>frontend-maven-plugin</code>.</p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;     &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.4&lt;/version&gt;      &lt;configuration&gt;         &lt;nodeVersion&gt;v6.11.0&lt;/nodeVersion&gt;         &lt;npmVersion&gt;3.10.10&lt;/npmVersion&gt;         &lt;workingDirectory&gt;src/main/frontend&lt;/workingDirectory&gt;     &lt;/configuration&gt;      &lt;executions&gt;         &lt;execution&gt;             &lt;id&gt;install node and npm&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;install-node-and-npm&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;         &lt;execution&gt;             &lt;id&gt;npm install&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;npm&lt;/goal&gt;             &lt;/goals&gt;         &lt;execution&gt;         &lt;execution&gt;             &lt;id&gt;npm run build&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;npm&lt;/goal&gt;             &lt;/goals&gt;              &lt;configuration&gt;                 &lt;arguments&gt;run build&lt;/arguments&gt;             &lt;/configuration&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre>  <p>It takes some time to run it and don't need this plugin when I run tests.</p>  <p>Is it possible to not execute the plugin when I run <code>mvn test</code>?</p> ",
    "OwnerUserId": "6012939",
    "LastEditorUserId": "6012939",
    "LastEditDate": "2021-03-08T17:17:35.163",
    "LastActivityDate": "2021-03-08T17:17:35.163",
    "Title": "Maven. Skip plugin execution when running tests",
    "Tags": "<java><spring-boot><maven><pom.xml><frontend-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>did you heard about maven profile? <a href='http://maven.apache.org/guides/introduction/introduction-to-profiles.html' rel='nofollow noreferrer'>http://maven.apache.org/guides/introduction/introduction-to-profiles.html</a></p>  <p>I understand that when you want to test a package, you don't want to build a bigger one.</p>  <p>You could define a profile that choose exactly what module you want to build and test.</p>  <p>You have a related question there:</p>  <p><a href='https://stackoverflow.com/questions/14476757/disable-maven-plugins-when-using-a-specific-profile'>Disable maven plugins when using a specific profile</a></p>  <p>Let us know if it helped you!</p> ",
    "highest_rated_answer": "<p>The frontend-maven-plugin now <a href='https://github.com/eirslett/frontend-maven-plugin#skipping-execution' rel='noreferrer'>has specific keys</a> to disable execution of particular goals. For example, adding system property <code>skip.npm</code> will skip npm execution. You can add it when running maven this way: </p>  <pre><code>mvn test -Dskip.npm </code></pre> "
  },
  {
    "Id": "50061662",
    "PostTypeId": "1",
    "AcceptedAnswerId": "50062043",
    "CreationDate": "2018-04-27T11:41:45.493",
    "Score": "9",
    "ViewCount": "5853",
    "Body": "<p>Is it possible to use OAuth2 for certain endpoints in my rest application and use basic authentication too for some other endpoints. It should all work on spring security version 2.0.1.RELEASE. I hope someone can help me further.</p> ",
    "OwnerUserId": "9686476",
    "LastEditorUserId": "9686476",
    "LastEditDate": "2018-04-27T12:15:52.293",
    "LastActivityDate": "2018-04-27T12:20:23.480",
    "Title": "Spring boot Basic Authentication and OAuth2 in same project?",
    "Tags": "<java><maven><spring-boot><intellij-idea><spring-security>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Yes, it's possible to use a basic authentication as well as an OAuth2 authentication intertwined, but I doubt you'll be able to set it up easily as HttpSecurity's <code>authenticated()</code> method doesn't allow you to pick which of your authentication method (oauth2Login/formLogin) will work.</p>  <p>However, there's a way to easily bypass that:</p>  <p>You could add a custom authority, let's call it <code>ROLE_BASICAUTH</code>, when an user connects using basic auth, and <code>ROLE_OAUTH2</code> when an user connects using OAuth2. That way, you can use </p>  <pre><code>.antMatchers('/endpoint-that-requires-basic-auth').hasRole('BASICAUTH') .antMatchers('/endpoint-that-requires-oauth2').hasRole('OAUTH2')     .anyRequest().authenticated() </code></pre>  <p>When they reach an endpoint that you want basic authentication (and not OAuth2), you check their current authorities, and if it's not <code>BASICAUTH</code>, then you invalidate their session you display a login form <em>without OAuth2</em> (to force them to use the basic authentication).</p>  <p>The downside to doing that is that you'd need to implement both a custom <code>UserDetailsService</code> as well as a custom <code>OAuth2UserService</code>...</p>  <p>But that's actually not that hard:</p>  <pre><code>@Service public class UserService extends DefaultOAuth2UserService implements UserDetailsService {      // ...      @Override     public OAuth2User loadUser(OAuth2UserRequest oAuth2UserRequest) throws OAuth2AuthenticationException {         OAuth2User user = super.loadUser(oAuth2UserRequest);          Map&lt;String, Object&gt; attributes = user.getAttributes();         Set&lt;GrantedAuthority&gt; authoritySet = new HashSet&lt;&gt;(user.getAuthorities());         String userNameAttributeName = oAuth2UserRequest.getClientRegistration().getProviderDetails()                 .getUserInfoEndpoint().getUserNameAttributeName();          authoritySet.add(new SimpleGrantedAuthority('ROLE_OAUTH2'));          return new DefaultOAuth2User(authoritySet, attributes, userNameAttributeName);     }       @Override     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {         UserDetails user = getUserFromDatabase(username); // you'll need to provide that method (where are the username/password stored?)         if (user == null) { // UserDetailsService doesn't allow loadUserByUsername to return null, so throw exception             throw new UsernameNotFoundException('Couldn't find user with username ''+username+''');         }         // add ROLE_BASICAUTH (you might need a custom UserDetails implementation here, because by defaut, UserDetails.getAuthorities() is immutable (I think, I might be a liar)         return user;     }  } </code></pre>  <p>Note that this is a rough implementation, so you'll have to work it out a bit on your end as well. </p>  <p>You can also use this repository I made <a href='https://github.com/TwinProduction/spring-security-oauth2-client-example/tree/master/custom-userservice-sample' rel='noreferrer'>https://github.com/TwinProduction/spring-security-oauth2-client-example/tree/master/custom-userservice-sample</a> as a guideline for the custom OAuth2UserService</p>  <p>Good luck.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "51570644",
    "PostTypeId": "1",
    "AcceptedAnswerId": "51570687",
    "CreationDate": "2018-07-28T10:51:56.400",
    "Score": "9",
    "ViewCount": "18282",
    "Body": "<p>I try to add dependency of spring security. This is my pom.xml</p>  <pre><code>&lt;properties&gt;             &lt;spring-boot.version&gt;2.0.3.RELEASE&lt;/spring-boot.version&gt; &lt;/properties&gt;  &lt;dependencyManagement&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;             &lt;version&gt;${spring-boot.version}&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;dependencies&gt;     ...     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;     &lt;/dependency&gt;     ... &lt;dependencies&gt; </code></pre>  <p>I try with artifactId spring-security-oauth2, it said:  'dependencies.dependency.version' for org.springframework.security.oauth:spring-security-oauth2:jar is missing</p>  <p>but with spring 1.4.2.RELEASE, It work. What is the new spring security oauth2 maven repo for springboot 2.0.3.RELEASE? (without  element) Thanks</p> ",
    "OwnerUserId": "9833606",
    "LastEditorUserId": "9833606",
    "LastEditDate": "2018-07-28T11:08:33.057",
    "LastActivityDate": "2018-07-28T11:08:33.057",
    "Title": "Spring security oauth2 'dependencies.dependency.version' is missing for spring boot 2.0.3",
    "Tags": "<spring><spring-boot><maven-3>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Error saying that you haven't defined version for <code>spring-security-oauth2</code></p>  <p>You can use 2.3.3 version</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;         &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;     &lt;/dependency&gt; </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "51952083",
    "PostTypeId": "1",
    "AcceptedAnswerId": "58783654",
    "CreationDate": "2018-08-21T15:30:08.560",
    "Score": "9",
    "ViewCount": "3030",
    "Body": "<p>I am benchmarking some methods using jmh through a spring boot application. When i run it through IDE it gives me benchmarks but when i package it with maven and run it through CMD it gives the below stack trace.</p>  <pre><code># Run progress: 0.00% complete, ETA 00:11:00 # Fork: 1 of 1 Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain &lt;forked VM failed with exit code 1&gt; &lt;stdout last='20 lines'&gt; &lt;/stdout&gt; &lt;stderr last='20 lines'&gt; Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain &lt;/stderr&gt;  Benchmark had encountered error, and fail on error was requested Exception in thread 'main' java.lang.reflect.InvocationTargetException         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) Caused by: org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception         at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:578)         at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:320)         at org.openjdk.jmh.runner.Runner.run(Runner.java:209)         at com.test.statistics.metrics.DruidBenchmarkApplication.main(DruidBenchmarkApplication.java:56)         ... 8 more Caused by: org.openjdk.jmh.runner.BenchmarkException: Benchmark error         at org.openjdk.jmh.runner.Runner.doFork(Runner.java:771)         at org.openjdk.jmh.runner.Runner.runSeparate(Runner.java:663)         at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:561)         ... 11 more         Suppressed: java.lang.IllegalStateException: Forked VM failed with exit code 1                 ... 14 more     **POM.XML:**  &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.test.stats&lt;/groupId&gt;     &lt;artifactId&gt;druid-metrics&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;druid-metrics&lt;/name&gt;     &lt;description&gt;Demo project for benchmarking druid&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;docker.image.prefix&gt;druid-metrics&lt;/docker.image.prefix&gt;         &lt;jmh.version&gt;1.21&lt;/jmh.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.directory.studio&lt;/groupId&gt;             &lt;artifactId&gt;org.apache.commons.io&lt;/artifactId&gt;             &lt;version&gt;2.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.json&lt;/groupId&gt;             &lt;artifactId&gt;json&lt;/artifactId&gt;             &lt;version&gt;20080701&lt;/version&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/commons-lang/commons-lang --&gt;         &lt;dependency&gt;             &lt;groupId&gt;commons-lang&lt;/groupId&gt;             &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;             &lt;version&gt;2.6&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;             &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;             &lt;version&gt;${jmh.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;             &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;             &lt;version&gt;${jmh.version}&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;1.3.4&lt;/version&gt;                 &lt;configuration&gt;                     &lt;repository&gt;${docker.image.prefix}/${project.artifactId}&lt;/repository&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre>  <p>I have tried setting classpath explicitly through info from bunch of forums but that didn't help running the application through cmd. Any help would be appreciated.</p>  <p>Thanks!</p> ",
    "OwnerUserId": "8285291",
    "LastActivityDate": "2019-11-09T21:28:27.633",
    "Title": "Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain",
    "Tags": "<java><maven><spring-boot><benchmarking><jmh>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Had same <code>ClassNotFoundException</code> with <em>Gradle</em> + JMH which was an <a href='https://github.com/gradle/gradle/issues/9618' rel='nofollow noreferrer'>incompatibility bug</a> fixed in recent versions (<a href='https://github.com/melix/jmh-gradle-plugin' rel='nofollow noreferrer'>jmh-gradle-plugin >= 0.5.0</a>). As blase as this advice is: try upgrading (or downgrading) and seeing if it still occurs.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "52670491",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52670604",
    "CreationDate": "2018-10-05T17:15:44.267",
    "Score": "9",
    "ViewCount": "11688",
    "Body": "<p>I have a webapp using Spring-MVC built with Maven. When I generate the JAR file the app start just fine. The controller is execute but when I reach this part:</p>  <pre><code>@RequestMapping(value = '/test-block', method = RequestMethod.GET) public ModelAndView block(Model model) {     return new ModelAndView('templates/test-block'); } </code></pre>  <p>I get this error:</p>  <pre><code>There was an unexpected error (type=Not Found, status=404). /WEB-INF/templates/test-block.jsp </code></pre>  <p>Note that debugging or running in the IDE works fine.</p>  <p>My folder:</p>  <pre><code>src |--main    |--java       |--com.xxx // sources       webapp       |--WEB-INF          |--templates             |--*.jsp // jsp files       resources       |--application.properties </code></pre>  <p>My application properties:</p>  <pre><code>spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp </code></pre>  <p>I checked the generated JAR file and I can't see WEB-INF anywhere.</p>  <p><strong>edit:</strong></p>  <p>pom file:</p>  <pre><code>    &lt;packaging&gt;war&lt;/packaging&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;source&gt;8&lt;/source&gt;                     &lt;target&gt;8&lt;/target&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre> ",
    "OwnerUserId": "1901823",
    "LastEditorUserId": "5211043",
    "LastEditDate": "2018-10-05T20:42:19.580",
    "LastActivityDate": "2020-02-11T05:40:55.437",
    "Title": "WEB-INF not included in WebApp using SpringBoot, Spring-MVC and Maven",
    "Tags": "<java><maven><spring-mvc><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "7",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You should create a <code>.war</code> rather than a <code>.jar</code> for a web application and you will see the <code>WEB-INF</code> folder.</p>  <p>Also change </p>  <p><code>spring.mvc.view.prefix=/WEB-INF/</code> to <code>spring.mvc.view.prefix=/WEB-INF/templates</code> and</p>  <p><code>ModelAndView('templates/test-block')</code> to <code>ModelAndView('test-block')</code> to address the 404 error.</p> ",
    "highest_rated_answer": "<p>Reference the Spring Boot documentation on <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content' rel='nofollow noreferrer'>serving static content</a>.</p>  <p>Of note:</p>  <blockquote>   <p>By default, Spring Boot serves static content from a directory called   /static (or /public or /resources or /META-INF/resources) in the   classpath or from the root of the ServletContext. It uses the   ResourceHttpRequestHandler from Spring MVC so that you can modify that   behavior by adding your own WebMvcConfigurer and overriding the   addResourceHandlers method.</p> </blockquote>  <p>...</p>  <blockquote>   <p>You can also customize the static resource locations by using the   spring.resources.static-locations property (replacing the default   values with a list of directory locations).</p> </blockquote>  <p>...</p>  <blockquote>   <p>Do not use the src/main/webapp directory if your application is   packaged as a jar. Although this directory is a common standard, it   works only with war packaging, and it is silently ignored by most   build tools if you generate a jar.</p> </blockquote>  <p>So, what you're seeing is the expected behavior.  You can either move your templates to one of the expected locations, customize the default locations, or use war packaging.</p> "
  },
  {
    "Id": "53729748",
    "PostTypeId": "1",
    "AcceptedAnswerId": "53730479",
    "CreationDate": "2018-12-11T17:53:43.593",
    "Score": "9",
    "ViewCount": "33565",
    "Body": "<p>maven:</p>  <pre><code>&lt;profiles&gt;     &lt;profile&gt;         &lt;id&gt;local&lt;/id&gt;         &lt;activation&gt;            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;         &lt;/activation&gt;         &lt;properties&gt;             &lt;active.spring.profile&gt;local&lt;/active.spring.profile&gt;         &lt;/properties&gt;     &lt;/profile&gt; &lt;/profiles&gt; </code></pre>  <p>application.properties:</p>  <pre><code>spring.profiles.active=@active.spring.profile@ spring.config.additional-location=classpath:/profile/application-${spring.profiles.active}.properties </code></pre>  <p>and after this I can't get value from src/main/resources/application-local.properties which contains <code>test.prop=123</code></p>  <pre><code>@Service public class TestProps {      @Value('${test.prop}')     String testProp;      @PostConstruct     void run() {         System.out.println(testProp);     } } </code></pre>  <p>Where is the mistake? or it's a bug?</p> ",
    "OwnerUserId": "2910338",
    "LastEditorUserId": "2910338",
    "LastEditDate": "2019-05-14T04:36:23.423",
    "LastActivityDate": "2020-11-17T16:21:51.310",
    "Title": "Don't work spring.config.additional-location",
    "Tags": "<java><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The property: <code>spring.config.additional-location</code> has to be provided as argument for JVM like this: <code>java -Dspring.config.additional-location=classpath:/profile/application-local.properties -jar whatever.jar</code>.</p> <p>Doesn't make sense to have it in <code>application.properties</code>. From the <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html' rel='noreferrer'>documentation</a>:</p> <blockquote> <p>Alternatively, when custom config locations are configured by using spring.config.additional-location, they are used in addition to the default locations. <strong>Additional locations are searched before the default locations</strong>.</p> </blockquote> <p>Because the additional locations are searched <strong>before</strong> the default locations, they have to be provided earlier, so you can't have them in <code>application.properties</code></p> ",
    "highest_rated_answer": "<p>additional-location really does not belong to application.properties, because Spring will not interpret it from there. It needs to load the additional config files before the default ones. On the other hand, it is handy to set the default additional location in maven spring boot plugin. This way one would be able to set security-sensitive information outside of the project sources and it will not appear in the source repository. For example, the client security config could read:</p> <pre><code>app:   client:     ssl:        keystore: path/to/keystore       keystore-password: the-keystore-password       key-password: the-key-password   </code></pre> <p>Default application.yml in src/main/resources can be skipped, while the additional config could provide the values per active profile and keep them safe on the local machine.</p> "
  },
  {
    "Id": "54081163",
    "PostTypeId": "1",
    "CreationDate": "2019-01-07T20:16:22.183",
    "Score": "9",
    "ViewCount": "5598",
    "Body": "<p>I have a Spring Boot application and that application has integration tests. </p>  <p>Here is the relevant snippet from my pom.xml for running the integration tests.</p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;       &lt;mainClass&gt;com.xyz.Application&lt;/mainClass&gt;       &lt;executable&gt;true&lt;/executable&gt;       &lt;fork&gt;true&lt;/fork&gt;       &lt;jmxPort&gt;7654&lt;/jmxPort&gt;     &lt;/configuration&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;id&gt;pre-integration-test&lt;/id&gt;         &lt;goals&gt;           &lt;goal&gt;start&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;fork&gt;true&lt;/fork&gt;           &lt;jmxPort&gt;7654&lt;/jmxPort&gt;         &lt;/configuration&gt;       &lt;/execution&gt;       &lt;execution&gt;         &lt;id&gt;post-integration-test&lt;/id&gt;         &lt;goals&gt;           &lt;goal&gt;stop&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;fork&gt;true&lt;/fork&gt;           &lt;jmxPort&gt;7654&lt;/jmxPort&gt;         &lt;/configuration&gt;       &lt;/execution&gt;     &lt;/executions&gt;   &lt;/plugin&gt; </code></pre>  <p>When I run <code>mvn verify</code>, I see the unit tests running first. Then the application server starts and the integration tests run successfully. The mvn process exits with a success. </p>  <p>I also see the following in the console log which leads me to believe that the application server is being shutdown correctly - </p>  <pre><code>[INFO] --- spring-boot-maven-plugin:2.1.1.RELEASE:stop (post-integration-test) @ application --- [DEBUG] Configuring mojo org.springframework.boot:spring-boot-maven-plugin:2.1.1.RELEASE:stop from plugin realm ClassRealm[plugin&gt;org.springframework.boot:spring-boot-maven-plugin:2.1.1.RELEASE, parent: sun.misc.Launcher$AppClassLoader@42a57993] [DEBUG] Configuring mojo 'org.springframework.boot:spring-boot-maven-plugin:2.1.1.RELEASE:stop' with basic configurator --&gt; [DEBUG]   (f) fork = true [DEBUG]   (f) jmxPort = 7654 [DEBUG]   (f) project = MavenProject: com.xyz:application:1.0-SNAPSHOT @ /Users/me/code/my-project/pom.xml [DEBUG]   (f) skip = false [DEBUG] -- end configuration -- [INFO] Stopping application... 2019-01-07 14:18:18.375  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] inMXBeanRegistrar$SpringApplicationAdmin : Application shutdown requested. 2019-01-07 14:18:18.375  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@449465bf: startup date [Mon Jan 07 14:17:22 EST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@475a6eb6 2019-01-07 14:18:18.376  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4cf0901e: startup date [Mon Jan 07 14:17:30 EST 2019]; parent: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@449465bf 2019-01-07 14:18:18.385  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.jetty.server.AbstractConnector       : Stopped ServerConnector@e45db77{HTTP/1.1,[http/1.1]}{0.0.0.0:8081} 2019-01-07 14:18:18.385  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] org.eclipse.jetty.server.session         : node0 Stopped scavenging 2019-01-07 14:18:18.387  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.j.s.h.ContextHandler.application     : Destroying Spring FrameworkServlet 'dispatcherServlet' 2019-01-07 14:18:18.388  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.jetty.server.handler.ContextHandler  : Stopped o.s.b.w.e.j.JettyEmbeddedWebAppContext@16b7a081{application,/,[file:///private/var/folders/sc/d2x30b2j6jj5hpvfkqx9p31n5jmbmc/T/jetty-docbase.6078950105283659171.8081/, jar:file:/Users/me/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar!/META-INF/resources],UNAVAILABLE} 2019-01-07 14:18:18.390  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147483647 2019-01-07 14:18:18.393  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown 2019-01-07 14:18:18.393  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans 2019-01-07 14:18:18.403  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] s.c.a.AnnotationConfigApplicationContext : Closing FeignContext-cse-service: startup date [Mon Jan 07 14:17:27 EST 2019]; parent: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@449465bf ... 2019-01-07 14:18:18.472  WARN [-,,,] 38653 --- [pool-1-thread-5] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources. 2019-01-07 14:18:18.472  INFO [-,,,] 38653 --- [pool-1-thread-5] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 2019-01-07 14:18:18.473  INFO [-,,,] 38653 --- [pool-1-thread-5] c.netflix.config.DynamicPropertyFactory  : DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@139bf1b8 ... 2019-01-07 14:18:18.628  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.jetty.server.AbstractConnector       : Stopped ServerConnector@678b05be{HTTP/1.1,[http/1.1]}{0.0.0.0:8080} 2019-01-07 14:18:18.628  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] org.eclipse.jetty.server.session         : node0 Stopped scavenging 2019-01-07 14:18:18.629  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.j.s.h.ContextHandler.application     : Destroying Spring FrameworkServlet 'dispatcherServlet' 2019-01-07 14:18:18.629  INFO [-,,,] 38653 --- [on(4)-127.0.0.1] o.e.jetty.server.handler.ContextHandler  : Stopped o.s.b.w.e.j.JettyEmbeddedWebAppContext@4808c18e{application,/api/v1,[file:///private/var/folders/sc/d2x30b2j6jj5hpvfkqx9p31n5jmbmc/T/jetty-docbase.6019952027552218513.8080/, jar:file:/Users/me/.m2/repository/io/springfox/springfox-swagger-ui/2.9.2/springfox-swagger-ui-2.9.2.jar!/META-INF/resources],UNAVAILABLE} </code></pre>  <p>Subsequently, when I run <code>mvn verify</code> again, I get the following bind exception.</p>  <pre><code>[DEBUG] Application argument(s):  [DEBUG] Connecting to local MBeanServer at port 7654 [DEBUG] Waiting for spring application to start... [DEBUG] Connected to local MBeanServer at port 7654 [DEBUG] Waiting for spring application to start... [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 1) Error: Exception thrown by the agent : java.rmi.server.ExportException: Port already in use: 7654; nested exception is:          java.net.BindException: Address already in use (Bind failed) </code></pre>  <p>Using <code>netstat</code> and <code>ps</code> I am able to ascertain that there is some process that is still holding on to port 7654, and <code>jps</code> tells me that it is this process - </p>  <pre><code>47148 Application -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=7654 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1  </code></pre>  <p>I don't know how to get the JMX process to shutdown. I assumed that the <code>spring-boot-maven</code> plug-in would do that. And that does not seem to be the case.</p>  <p>What am I doing wrong and can someone please help? Really appreciate you taking time to look at this (potential) problem.</p> ",
    "OwnerUserId": "1359367",
    "LastActivityDate": "2021-01-29T10:45:39.273",
    "Title": "Spring Boot with spring-boot-maven plug-in - unable to RESTART the application server after running integration tests",
    "Tags": "<java><maven><spring-boot><jmx><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I was facing the same issue, not being able to rerun tests before killing the JMX process. Next to that, my Azure DevOps pipeline was hanging because of the JMX process not being stopped.</p> <pre><code>The STDIO streams did not close within 10 seconds of the exit event from process '/usr/share/apache-maven-3.6.3/bin/mvn'. This may indicate a child process inherited the STDIO streams and has not yet exited. </code></pre> <p>When I browsed through the source code: <a href='https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java#L128' rel='noreferrer'>https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java#L128</a>, I discovered that the JMX agent would not be booted if I did not fork the maven process.</p> <p>I'm not sure this is applicable for you, but I did not require forking per se, and also did not need JMX metrics, so this fixed it for me:</p> <pre><code>&lt;configuration&gt;   &lt;fork&gt;false&lt;/fork&gt; &lt;/configuration&gt; </code></pre> <p>I also tried to override the jmx arguments (-Dcom.sun.management.jmxremote), by specifying them in the plugin configuration, but since the arguments are added (hardcoded) as the final arguments, that was not working for me.</p> "
  },
  {
    "Id": "54524555",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54551974",
    "CreationDate": "2019-02-04T21:28:15.763",
    "Score": "9",
    "ViewCount": "2944",
    "Body": "<p>I am trying to use maven BOM with gradle 5.1.1 as mentioned below</p>  <pre><code>ext {   set('spring-boot-dependencies.version', '2.1.2.RELEASE') }  apply plugin: 'java'  group 'com.acme' version '1.0.0-SNAPSHOT'  sourceCompatibility = 1.8  repositories {   mavenCentral()   jcenter() }  dependencies {   // maven bom   implementation platform('org.springframework.boot:spring-boot-dependencies:${project.'spring-boot-dependencies.version'}')    compileOnly('org.projectlombok:lombok')   annotationProcessor('org.projectlombok:lombok') } </code></pre>  <p>When I run <code>./gradlew dependencies --configuration=annotationProcessor</code> &amp; <code>./gradlew dependencies --configuration=compileOnly</code>, I get the following respectively</p>  <pre><code>annotationProcessor - Annotation processors and their dependencies for source set 'main'. \\--- org.projectlombok:lombok FAILED </code></pre>  <pre><code>compileOnly - Compile only dependencies for source set 'main'. +--- org.projectlombok:lombok FAILED </code></pre>  <p>Strangely, IntelliJ resolves <code>compileOnly</code> dependencies properly, but not <code>annotationProcessor</code></p>  <p>I am quite confused as to what is going on. Any help is appreciated</p>  <p><a href='https://i.stack.imgur.com/jHj3N.png' rel='noreferrer'><img src='https://i.stack.imgur.com/jHj3N.png' alt='intellij gradle view'></a></p> ",
    "OwnerUserId": "211794",
    "LastEditorUserId": "211794",
    "LastEditDate": "2019-02-04T21:33:55.203",
    "LastActivityDate": "2019-02-07T08:56:44.713",
    "Title": "Unable to use Maven BOM in gradle 5 with annotationProcessor configuration",
    "Tags": "<spring-boot><gradle><annotation-processing><maven-bom>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>In Gradle, a platform, like regular dependencies, is scoped to a given configuration (and the configurations extending it).</p>  <p>In your example, the BOM is only used in <code>implementation</code> and thus will only provide recommendations for that configuration and the ones extending it, like <code>compileClasspath</code> or <code>runtimeClasspath</code>.</p>  <p>In order to solve your issue, you will need to declare the BOM to all the configurations where you want to benefit from its recommended versions.</p>  <p>You can achieve this by repeating the declaration:</p>  <pre><code>compileOnly platform('org.springframework.boot:spring-boot-dependencies:${project.'spring-boot-dependencies.version'}') annotationProcessor platform('org.springframework.boot:spring-boot-dependencies:${project.'spring-boot-dependencies.version'}') </code></pre>  <p>or you could create a dedicated configuration and make all the configurations requiring constraints extend it:</p>  <pre><code>configurations {     springBom     compileOnly.extendsFrom(springBom)     annotationProcessor.extendsFrom(springBom)     implementation.extendsFrom(springBom) }  dependencies {     springBom platform('org.springframework.boot:spring-boot-dependencies:${project.'spring-boot-dependencies.version'}') } </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "54765912",
    "PostTypeId": "1",
    "CreationDate": "2019-02-19T12:03:31.857",
    "Score": "9",
    "ViewCount": "10687",
    "Body": "<p>I have two projects. One as follow ( say project 1 ):</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;     &lt;relativePath/&gt;  &lt;/parent&gt; </code></pre>  <p>And second ( say project 2 ) as follow:</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.2.0.BUILD-SNAPSHOT&lt;/version&gt;     &lt;relativePath/&gt;  &lt;/parent&gt; </code></pre>  <p>Both have this:</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>Well, project 1 is running fine. I can see the Spring Plugin v. 2.0.0.BUILD-SNAPSHOT in my .M2 repo folder.</p>  <p>Project 2 is throwing the follow error:</p>  <pre><code>*************************** APPLICATION FAILED TO START ***************************  Description:  An attempt was made to call the method org.springframework.plugin.core.PluginRegistry.getPluginFor(Ljava/lang/Object;Lorg/springframework/plugin/core/Plugin;)Lorg/springframework/plugin/core/Plugin; but it does not exist. Its class, org.springframework.plugin.core.PluginRegistry, is available from the following locations:      jar:file:/.../.m2/repository/org/springframework/plugin/spring-plugin-core/2.0.0.BUILD-SNAPSHOT/spring-plugin-core-2.0.0.BUILD-SNAPSHOT.jar!/org/springframework/plugin/core/PluginRegistry.class  It was loaded from the following location:      file:/.../.m2/repository/org/springframework/plugin/spring-plugin-core/2.0.0.BUILD-SNAPSHOT/spring-plugin-core-2.0.0.BUILD-SNAPSHOT.jar   Action:  Correct the classpath of your application so that it contains a single, compatible version of org.springframework.plugin.core.PluginRegistry </code></pre>  <p>When I try to force a version to Maven plugin in project 2 POM, I see the classic yellow warning saying I'm overriding the managed version 2.2.0.BUILD-SNAPSHOT but there's no 2.2.0 version to Maven Plugin.</p>  <p>The strange is that I'm was able to run this project until yesterday....</p>  <p>Can someone tell me what are going wrong?</p>  <p>NOTE: When I downgrade project 2 to 2.0.3.RELEASE all start to work.</p> ",
    "OwnerUserId": "1820715",
    "LastEditorUserId": "1820715",
    "LastEditDate": "2019-02-19T12:25:20.053",
    "LastActivityDate": "2020-03-19T21:12:04.053",
    "Title": "Spring Boot 2.2.0 and Maven Plugin trouble",
    "Tags": "<maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "7",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>When we use any dependencies(other than Spring boot provided) in our project, we need to provided spring transaction core plug-in to resolve this issue.</p>  <p>Kindly try the below dependency and version is compatible to your Spring Boot version.</p>  <p>Spring Transaction Core Dependency:</p>  <pre><code>&lt;dependency&gt;         &lt;groupId&gt;org.springframework.plugin&lt;/groupId&gt;         &lt;artifactId&gt;spring-plugin-core&lt;/artifactId&gt;         &lt;version&gt;1.2.0.RELEASE&lt;/version&gt;     &lt;/dependency&gt; </code></pre> "
  },
  {
    "Id": "55596807",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55637806",
    "CreationDate": "2019-04-09T15:55:44.793",
    "Score": "9",
    "ViewCount": "21764",
    "Body": "<p>I am learning Liquibase and Spring Boot so I've created a simple project with <a href='https://start.spring.io/' rel='noreferrer'>Spring Initializr</a>.</p>  <p>In the POM.xml file I've added:</p>  <pre><code>    &lt;plugin&gt;         &lt;groupId&gt;org.liquibase&lt;/groupId&gt;         &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;3.4.1&lt;/version&gt;         &lt;configuration&gt;             &lt;propertyFile&gt;src/main/resources/application.properties&lt;/propertyFile&gt;         &lt;/configuration&gt;     &lt;/plugin&gt; </code></pre>  <p>I've specified as property file the application.properties so all the configuration of my application can happen in a single file.</p>  <p>When I run any liquibase-maven-plugin task from IntelliJ I get different errors, here's an example running the changeLogSync task:</p>  <pre><code>[ERROR] Failed to execute goal org.liquibase:liquibase-maven-plugin:3.4.1:changelogSync (default-cli) on project simpleTest: The changeLogFile must be specified </code></pre>  <p>If I add the right keys in the application.properties I am able to make it work.</p>  <p>For example I've found that liquibase-maven-plugin will not read the <strong>spring.datasource.url</strong> property but it will only read the <strong>url</strong> property.</p>  <p>For this reason my application.properties will have to be something similar:</p>  <pre><code>environment                         = JUnit spring.datasource.url               = jdbc:h2:file:./target/test spring.datasource.driver-class-name = org.h2.Driver spring.datasource.username          = sa spring.datasource.password          = sa spring.liquibase.change-log         = classpath:/db/changelog/db.changelog-master.yaml spring.h2.console.enabled           = true spring.h2.console.path              = /h2-console   # Keys needed for liquibase maven plugin url                                 = jdbc:h2:file:./target/test username                            = sa password                            = sa </code></pre>  <p>If I follow this pattern I'll end up having several keys with slightly different names but with the same values in my application.properties and this solution is clearly very ugly and inefficient.</p>  <p>What is an efficient and maintainable way to configure and use Liquibase Maven Plugin in Spring Boot?</p>  <p><strong>Edit after the answer received from Amith Kumar:</strong></p>  <pre><code>environment=JUnit spring.datasource.url=jdbc:h2:file:./target/glossary-test spring.datasource.driver-class-name=org.h2.Driver spring.datasource.username=sa spring.datasource.password=sa spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml spring.h2.console.enabled=true spring.h2.console.path=/h2-console url=${spring.datasource.url} changeLogFile=${spring.liquibase.change-log} username=${spring.datasource.username} password=${spring.datasource.password} </code></pre>  <p>Error after the edit:</p>  <pre><code>[ERROR] Failed to execute goal org.liquibase:liquibase-maven-plugin:3.4.1:dropAll (default-cli) on project test: Error setting up or running Liquibase: liquibase.exception.DatabaseException: java.lang.RuntimeException: Cannot find database driver: Driver class was not specified and could not be determined from the url (${spring.datasource.url}) -&gt; [Help 1] </code></pre> ",
    "OwnerUserId": "509977",
    "LastEditorUserId": "509977",
    "LastEditDate": "2019-04-12T10:32:17.040",
    "LastActivityDate": "2019-12-01T06:07:01.197",
    "Title": "How can I configure Maven Liquibase plugin in Spring Boot?",
    "Tags": "<java><maven><spring-boot><liquibase>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p><code>application.properties</code> settings are very fast to have an up and running application but not the best solution in terms of flexibility</p>  <p>My advice is to configure a datasource using <code>@Configuration</code>, example <a href='https://github.com/ValerioMC/vforge-cauldron/blob/master/src/main/java/io/vforge/cauldron/config/CauldronPrimaryDatasource.java' rel='nofollow noreferrer'>here</a></p>  <p>And then configure liquibase passing datasource defined above as follows</p>  <pre><code>@Configuration public class LiquibaseConfigurer {      @Autowired     @Qualifier('primaryDataSource')     private DataSource oltpDataSource;      @Bean     @DependsOn     public SpringLiquibase liquibase() {         SpringLiquibase liquibase = new SpringLiquibase();         liquibase.setChangeLog('classpath:liquibase/liquibase-changelog.xml');         liquibase.setDataSource(oltpDataSource);         return liquibase;     } } </code></pre>  <p>In this case you just need <code>liquibase-core</code> dependency as follows</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.liquibase&lt;/groupId&gt;         &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;     &lt;/dependency&gt; </code></pre>  <p>A simpler alternative is to configure liquibase outside the application with no maven plugin.</p>  <p>Download library, or install it with some package manager, and launch a command line with all settings </p>  <pre><code>liquibase --driver=org.h2.Driver \\      --classpath=/path/to/h2/driver.jar \\      --changeLogFile=/db/changelog/db.changelog-master.yaml \\      --url='jdbc:h2:file:./target/glossary-test' \\      --username=sa \\      --password=sa \\      --logLevel=debug \\      migrate </code></pre>  <p>Anyway the problem you have now is because you've written this:</p>  <pre><code>url=${spring.datasource.url} </code></pre>  <p>I don't know where did you find this syntax but try to replicate connections url and replace with the following</p>  <pre><code>url=jdbc:h2:file:./target/test </code></pre>  <p>do the same for other settings</p> ",
    "highest_rated_answer": "<p>Liquibase maven plugin supports configuration injection through pom.xml. </p>  <p>So you can use <a href='https://github.com/mojohaus/properties-maven-plugin' rel='noreferrer'>properties-maven-plugin</a> to include your properties from application.properties (or use <a href='https://github.com/ozimov/yaml-properties-maven-plugin' rel='noreferrer'>yaml-properties-maven-plugin</a> if you are using application.yml), and then inject them into the liquibase configuration:</p>  <p><strong>Example:</strong></p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;it.ozimov&lt;/groupId&gt;     &lt;artifactId&gt;yaml-properties-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.1.3&lt;/version&gt;     &lt;executions&gt;                     &lt;execution&gt;                             &lt;phase&gt;initialize&lt;/phase&gt;                             &lt;goals&gt;                                     &lt;goal&gt;read-project-properties&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                     &lt;files&gt;                                             &lt;file&gt;src/main/resources/application.yml&lt;/file&gt;                                     &lt;/files&gt;                             &lt;/configuration&gt;                     &lt;/execution&gt;      &lt;/executions&gt; &lt;/plugin&gt; </code></pre>  <p>Now you can inject these properties in liquibase configuration: </p>  <pre><code>&lt;plugin&gt;             &lt;groupId&gt;org.liquibase&lt;/groupId&gt;             &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;3.8.1&lt;/version&gt;             &lt;configuration&gt;                 &lt;changeLogFile&gt;src/main/resources/db/changelog/db.changelog-master.yaml&lt;/changeLogFile&gt;                 &lt;driver&gt;${spring.datasource.driverClassName}&lt;/driver&gt;                 &lt;url&gt;${spring.datasource.url}&lt;/url&gt;                 &lt;username&gt;${spring.datasource.username}&lt;/username&gt;                 &lt;password&gt;${spring.datasource.password}&lt;/password&gt;                 &lt;promptOnNonLocalDatabase&gt;false&lt;/promptOnNonLocalDatabase&gt;                 &lt;databaseChangeLogTableName&gt;DATABASECHANGELOG&lt;/databaseChangeLogTableName&gt;                 &lt;databaseChangeLogLockTableName&gt;DATABASECHANGELOGLOCK&lt;/databaseChangeLogLockTableName&gt;             &lt;/configuration&gt;             &lt;dependencies&gt;                 &lt;dependency&gt;                     &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;                     &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;                     &lt;version&gt;2.3.0&lt;/version&gt;                 &lt;/dependency&gt;             &lt;/dependencies&gt; &lt;/plugin&gt; </code></pre>  <p>I also needed to set the <a href='https://www.liquibase.org/documentation/databasechangelog.html' rel='noreferrer'>logicalFilePath</a> to ensure that the changelog path inferred by spring boot integration and the maven plugin where the same.</p> "
  },
  {
    "Id": "55948358",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55950023",
    "CreationDate": "2019-05-02T08:23:53.450",
    "Score": "9",
    "ViewCount": "7321",
    "Body": "<p>At the moment, all my properties are defined in the file <code>src/main/resources/application.properties</code>. However, I would like to have properties files relating to different profiles in the <code>src/main/resources/config</code> folder, and I want to be able to choose any of them. such as: </p>  <ul> <li><code>application-DEV.properties</code></li> <li><code>application-TEST.properties</code></li> <li><code>application-SERVER1.properties</code> </li> </ul>  <p>So, the question is how to select these properties. If I was compiling to a <code>jar</code> file, I could do that easily by specifiying the profile when running the <code>jar</code> file, but here I just copy the generated <code>war</code> file to a Tomcat webapps directory.</p> ",
    "OwnerUserId": "760807",
    "LastEditorUserId": "760807",
    "LastEditDate": "2019-05-02T10:08:50.910",
    "LastActivityDate": "2019-05-02T11:25:31.333",
    "Title": "How to specify a profile when deploying a Spring boot war file to Tomcat?",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Well, I've found a way to do that. In the <code>conf</code> directory of Tomcat, add this line to the file <code>catalina.properties</code> there. </p>  <pre><code>spring.profiles.active=&lt;YOUR_PROFILE&gt; </code></pre>  <p>Replace <code>&lt;YOUR_PROFILE&gt;</code> here of course with your profile's name. For example if you are using <code>application-TEST.properties</code>, it would be the following.</p>  <pre><code>spring.profiles.active=TEST </code></pre> ",
    "highest_rated_answer": "<p>You can define Jvm Argument <code>-Dspring.profiles.active=&lt;PROFILE&gt;</code> on server start up file (.bat/.sh) depending on your environment.</p> "
  },
  {
    "Id": "56589896",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56590175",
    "CreationDate": "2019-06-14T00:00:34.210",
    "Score": "9",
    "ViewCount": "34515",
    "Body": "<p>I have a Spring Boot project and I can't get components from an <strong>external jar</strong> to be autowired. When I try to, I got a <code>org.springframework.beans.factory.NoSuchBeanDefinitionException</code> saying that can't find a bean with that name available.</p>  <p>I tried some solutions found in similar questions, like these ones:</p>  <p><a href='https://stackoverflow.com/questions/26451192/how-to-autowire-service-from-external-jar-in-spring'>How to autowire @service from external Jar in Spring</a></p>  <p><a href='https://stackoverflow.com/questions/34367316/spring-boot-autowired-does-not-work-classes-in-different-package'>Spring Boot @autowired does not work, classes in different package</a></p>  <p><a href='https://stackoverflow.com/questions/29571304/how-can-i-autowire-a-spring-bean-that-was-created-from-an-external-jar'>How can I @Autowire a spring bean that was created from an external jar?</a></p>  <p>..but still can't managed it to work.</p>  <p>Here is an example of what I'm trying to accomplish:</p>  <p><a href='https://i.stack.imgur.com/LKvO0.png' rel='noreferrer'><img src='https://i.stack.imgur.com/LKvO0.png' alt='enter image description here'></a></p>  <p>Here is <strong>boot class</strong> in the Spring Boot project <strong>spring-project-example</strong></p>  <pre><code>package com.springdi.example;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ConfigurableApplicationContext; import org.springframework.context.annotation.ComponentScan;  import com.dependency.example.DependencyBasePackageClass; import com.dependency.example.somepackage.SomeBean;  @SpringBootApplication @ComponentScan(basePackages = {'com.springdi.example'}, basePackageClasses = DependencyBasePackageClass.class) public class SpringProjectExampleApplication {      public static void main(String[] args) {         ConfigurableApplicationContext context = SpringApplication.run(SpringProjectExampleApplication.class, args);          String beanName = SomeBean.class.getName();         System.out.printf('%s can be autowired: %s\\n', beanName, String.valueOf(context.containsBean(beanName)).toUpperCase());     } } </code></pre>  <p>It's just a simple Spring Boot project checking if it is possible to autowire a component present in the dependency jar.</p>  <p>Here is the <strong>component</strong> in the <strong>jar</strong> (dependency-example-1.0.0.jar)</p>  <pre><code>package com.dependency.example.somepackage;  import org.springframework.stereotype.Component;  @Component public class SomeBean {      public void someMethod() {         System.out.println('Some process...');     } } </code></pre>  <p>And here is the <strong>base package class</strong> of this same <strong>jar</strong></p>  <pre><code>package com.dependency.example;  import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration;  /**  * Just a class to serve as the root for component  * scanning in 'com.dependency.example' and its sub-packages  */ @Configuration @ComponentScan public class DependencyBasePackageClass {  } </code></pre>  <p>I've already tried <code>@Import(DependencyBasePackageClass.class)</code> in SpringProjectExampleApplication and <code>@ComponentScan</code> with <code>basePackages</code> and <code>basePackageClasses</code>, but no success.</p>  <p>I also tried using <code>@SpringBootApplication(scanBasePackageClasses = {SpringProjectExampleApplication.class, DependencyBasePackageClass.class})</code></p>  <p>and the not type safe <code>@SpringBootApplication(scanBasePackages = {'com.springdi.example', 'com.dependency.example'})</code>.</p>  <p><code>@Configuration @ComponentScan({'com.dependency.example'})</code> also fails, <code>context.containsBean('com.dependency.example.somepackage.SomeBean')</code> still returns <strong>false</strong>.</p>  <p>This jar is included in classpath and in the pom.xml as a dependency</p>  <pre><code>&lt;dependencies&gt;     &lt;!-- other dependencies --&gt;      &lt;dependency&gt;         &lt;groupId&gt;com.rbaggio&lt;/groupId&gt;         &lt;artifactId&gt;dependency-example&lt;/artifactId&gt;         &lt;version&gt;1.0.0&lt;/version&gt;         &lt;scope&gt;system&lt;/scope&gt;         &lt;systemPath&gt;${basedir}/lib/dependency-example-1.0.0.jar&lt;/systemPath&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; </code></pre>  <p>Could it be the location of the jar, the way it is included or some extra configuration needed?</p>  <p>I'd appreciate any help! Thanks in advance.</p> ",
    "OwnerUserId": "5423727",
    "LastEditorUserId": "5423727",
    "LastEditDate": "2019-06-14T02:08:01.937",
    "LastActivityDate": "2019-06-14T02:08:01.937",
    "Title": "How to autowire a component in a dependency/external jar in Spring?",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ClosedDate": "2019-06-15T09:03:32.713",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Okey some basic things, you have mixed up your packages a bit.</p>  <p><code>@SpringBootApplication</code> will scan all classes in packages below the class this is annotated on. This annotation is an alias for <code>@EnableAutoConfiguration</code>, <code>@Configuration</code> and <code>@ComponentScan</code> means that <code>@ComponentScan(basePackages = {'com.springdi.example'}, basePackageClasses = DependencyBasePackageClass.class)</code> is <strong>not needed</strong>.</p>  <pre><code>com.springdi.example     // class with @SpringBootApplication annotation          |          |          | com.springdi.example.*    // Will find all @Service, @Component, @Configuration                           // in subpackages below the @SpringBootApplication                            // annotation </code></pre>  <p>You can read more about the annotation here <a href='https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-using-springbootapplication-annotation' rel='noreferrer'>SpringBootApplication</a></p>  <p>Since your other annotated classes are <strong>NOT</strong> in the same package structure as the <code>@SpringBootApplication</code> you need to define all the places you want to scan for annotations.</p>  <pre><code>@SpringBootApplication(scanBasePackages = {'com.springdi.example', 'com.dependency.example'}) </code></pre>  <p>will probably include all the packages that you want to scan through.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "57018729",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57018844",
    "CreationDate": "2019-07-13T11:28:49.393",
    "Score": "9",
    "ViewCount": "80197",
    "Body": "<p>I created a Maven project for Spring Boot. I have a lot of Spring dependencies and one main class:</p>  <pre><code>package com.vastserver;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class MyArtifactApplication {      public static void main(String[] args) {  //      SpringApplication.run(MyArtifactApplication.class, args);         System.out.println('hello!');     }  } </code></pre>  <p>The folder structure of <code>src</code> directory is:</p>  <pre><code>. \u2514\u2500\u2500 main     \u251c\u2500\u2500 java     \u2502\u00a0\u00a0 \u2514\u2500\u2500 com     \u2502\u00a0\u00a0     \u2514\u2500\u2500 vastserver     \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyArtifactApplication.java     \u2514\u2500\u2500 resources         \u2514\u2500\u2500 application.properties </code></pre>  <p>In my pom.xml I use <code>maven-assembly-plugin</code> in order to build my project in a standalone .jar file. Even though I triple checked that the directory structure and main class file appear correctly in the pom.xml I keep getting the error: <code>Error: Could not find or load main class com.vastserver.MyArtifactApplication</code> when I run <code>mvn package</code> and then <code>java -cp target/vast-ad-server-artifactId-1.0-SNAPSHOT-jar-with-dependencies.jar com.vastserver.MyArtifactApplication</code> or <code>mvn exec:exec</code>. The main class does work if I run it from Intellij so I know the code is not the problem but rather Maven build settings. I lost at where my problem could be.</p>  <p>My pom.xml looks as follows:</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'          xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;maven.compiler.release&gt;11&lt;/maven.compiler.release&gt;         &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;         &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;         &lt;mainClass&gt;com.vastserver.MyArtifactApplication&lt;/mainClass&gt;         &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;         &lt;targetSnapshot&gt;target/vast-ad-server-artifactId-1.0-SNAPSHOT&lt;/targetSnapshot&gt;         &lt;targetWithDependencies&gt;${targetSnapshot}-${descriptorRef}.jar&lt;/targetWithDependencies&gt;     &lt;/properties&gt;      &lt;groupId&gt;com.vastserver&lt;/groupId&gt;     &lt;artifactId&gt;vast-ad-server-artifactId&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.postgresql&lt;/groupId&gt;             &lt;artifactId&gt;postgresql&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;single&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;archive&gt;                                 &lt;manifest&gt;                                     &lt;mainClass&gt;${mainClass}&lt;/mainClass&gt;                                 &lt;/manifest&gt;                             &lt;/archive&gt;                             &lt;descriptorRefs&gt;                                 &lt;descriptorRef&gt;${descriptorRef}&lt;/descriptorRef&gt;                             &lt;/descriptorRefs&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;                 &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;1.3.2&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;exec&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;                 &lt;configuration&gt;                     &lt;executable&gt;java&lt;/executable&gt;                     &lt;arguments&gt;                         &lt;argument&gt;-cp&lt;/argument&gt;                         &lt;argument&gt;${targetWithDependencies}&lt;/argument&gt;                         &lt;argument&gt;${mainClass}&lt;/argument&gt;                     &lt;/arguments&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "9914653",
    "LastEditorUserId": "9914653",
    "LastEditDate": "2019-07-13T11:36:16.143",
    "LastActivityDate": "2022-09-08T06:11:33.633",
    "Title": "How to solve could not find or load main class error with spring boot?",
    "Tags": "<java><maven><spring-boot>",
    "AnswerCount": "9",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I think you should check the directory structure of the artifact that was built by maven. Usually, spring boot artifacts are prepared by a special spring boot plugin and not by a maven assembly plugin.</p>  <p>Although it shares the 'jar' suffix, it's not really a jar, it has special classloader to load classes from <code>BOOT-INF/lib</code> folder. </p>  <p>I've already provided a detailed answer on what happens exactly when the spring boot application starts <a href='https://stackoverflow.com/questions/56782871/how-does-java-runtime-find-my-main-class/56783693#56783693'>here</a> but bottom line if you use assembly plugin you'll have to prepare both manifest file and a fairly complicated structure of folders. Frankly, I think you should use spring boot plugin as a first resort to build spring boot applications.</p> ",
    "highest_rated_answer": "<p>For me: Maven - Update Project worked.</p> "
  },
  {
    "Id": "57668890",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57737786",
    "CreationDate": "2019-08-27T06:37:12.933",
    "Score": "9",
    "ViewCount": "488",
    "Body": "<p>Currently I am trying to implement CI/CD pipeline using the DevOps automation tools like Jenkins and kubernetes. And I am using these for deploying my micro services creates using spring boot and maven projects.</p>  <p>Now I am successfully deployed my spring boot micro services using Jenkins and Kubernetes. I am deployed to different namespaces using kubernetes. When I am committing , one post commit hook will work from my SVN repository. And that post commit hook will trigger the Jenkins Job.</p>  <p><strong>My Confusion</strong></p>  <p>When I am implementing the CI/CD pipeline , I read about the implementation of feed back loops in pipeline. Here I had felt the confusion that , If I need to use the implementation of Feedback Loops then which are the different ways that I can follow here ?</p>  <p><strong>Can anyone suggest me to find out any useful documentations/tutorials  for implementing the feed back loops in CI/CD pipeline please?</strong></p> ",
    "OwnerUserId": "8655052",
    "LastActivityDate": "2019-09-01T07:15:14.570",
    "Title": "Feedback Loop implementation in CI/CD pipeline using Jenkins and kubernetes",
    "Tags": "<maven><spring-boot><jenkins><kubernetes><feedback-loop>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The method of getting deployment feedback depends on your service and your choice. For example, you can check if the container is up or check one of the rest URL.   </p>  <p>I use this stage as a final stage to check the service:  </p>  <pre><code> stage('feedback'){         sleep(time:10,unit:'SECONDS')         def get = new URL('192.168.1.1:8080/version').openConnection();         def getRC = get.getResponseCode();         println(getRC);         if(getRC.equals(200)) {             println(get.getInputStream().getText());         }         else{             error('Service is not started yet.')           }     } </code></pre>  <p>Jenkins can notify users about failed tests(jobs) with sending email or json notify. read more: <a href='https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin' rel='noreferrer'>https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin</a><br> <a href='https://wiki.jenkins.io/display/JENKINS/Notification+Plugin' rel='noreferrer'>https://wiki.jenkins.io/display/JENKINS/Notification+Plugin</a><br> <a href='https://wiki.jenkins.io/display/JENKINS/Slack+Plugin' rel='noreferrer'>https://wiki.jenkins.io/display/JENKINS/Slack+Plugin</a>  </p>  <p>If you want continuous monitoring for the deployed product, you need <strong>monitoring tools</strong> which are different from Jenkins.</p>  <p>This is a sample picture for some popular tools of each part of DevOps: <a href='https://i.stack.imgur.com/gTHxn.png' rel='noreferrer'><img src='https://i.stack.imgur.com/gTHxn.png' alt='enter image description here'></a></p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "59305748",
    "PostTypeId": "1",
    "CreationDate": "2019-12-12T13:30:56.900",
    "Score": "9",
    "ViewCount": "9528",
    "Body": "<p>I am trying to do a <code>mvn clean</code> package to my Maven Springboot Project but I see the following message. What can be the reason? I already searched everything on the internet; it is a common situation but nobody has a definitive solution which can be useful for me.</p> <p>My maven version is 3.6.3; I tried to do this from command line; my o.s. is Linux Mint Cinnamnon latest; my java is OpendJDK 11.0.5; maven compiler plugin 3.8.0.</p> <pre><code>[INFO] ------------------------------------------------------------------------ --------------------------------------------------- constituent[0]: file:/home/user/.sdkman/candidates/maven/current/conf/logging/ constituent[1]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-model-builder-3.6.3.jar constituent[2]: file:/home/user/.sdkman/candidates/maven/current/lib/commons-io-2.5.jar constituent[3]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-model-3.6.3.jar constituent[4]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-settings-3.6.3.jar constituent[5]: file:/home/user/.sdkman/candidates/maven/current/lib/jcl-over-slf4j-1.7.29.jar constituent[6]: file:/home/user/.sdkman/candidates/maven/current/lib/cdi-api-1.0.jar constituent[7]: file:/home/user/.sdkman/candidates/maven/current/lib/wagon-http-3.3.4-shaded.jar constituent[8]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-embedder-3.6.3.jar constituent[9]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-api-1.4.1.jar constituent[10]: file:/home/user/.sdkman/candidates/maven/current/lib/wagon-provider-api-3.3.4.jar constituent[11]: file:/home/user/.sdkman/candidates/maven/current/lib/plexus-interpolation-1.25.jar constituent[12]: file:/home/user/.sdkman/candidates/maven/current/lib/guice-4.2.1-no_aop.jar constituent[13]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-slf4j-provider-3.6.3.jar constituent[14]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-connector-basic-1.4.1.jar constituent[15]: file:/home/user/.sdkman/candidates/maven/current/lib/org.eclipse.sisu.plexus-0.3.4.jar constituent[16]: file:/home/user/.sdkman/candidates/maven/current/lib/plexus-cipher-1.7.jar constituent[17]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-shared-utils-3.2.1.jar constituent[18]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-artifact-3.6.3.jar constituent[19]: file:/home/user/.sdkman/candidates/maven/current/lib/plexus-sec-dispatcher-1.4.jar constituent[20]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-impl-1.4.1.jar constituent[21]: file:/home/user/.sdkman/candidates/maven/current/lib/org.eclipse.sisu.inject-0.3.4.jar constituent[22]: file:/home/user/.sdkman/candidates/maven/current/lib/slf4j-api-1.7.29.jar constituent[23]: file:/home/user/.sdkman/candidates/maven/current/lib/guava-25.1-android.jar constituent[24]: file:/home/user/.sdkman/candidates/maven/current/lib/plexus-component-annotations-2.1.0.jar constituent[25]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-core-3.6.3.jar constituent[26]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-plugin-api-3.6.3.jar constituent[27]: file:/home/user/.sdkman/candidates/maven/current/lib/jsr250-api-1.0.jar constituent[28]: file:/home/user/.sdkman/candidates/maven/current/lib/plexus-utils-3.2.1.jar constituent[29]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-repository-metadata-3.6.3.jar constituent[30]: file:/home/user/.sdkman/candidates/maven/current/lib/jsoup-1.12.1.jar constituent[31]: file:/home/user/.sdkman/candidates/maven/current/lib/commons-lang3-3.8.1.jar constituent[32]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-compat-3.6.3.jar constituent[33]: file:/home/user/.sdkman/candidates/maven/current/lib/commons-cli-1.4.jar constituent[34]: file:/home/user/.sdkman/candidates/maven/current/lib/wagon-file-3.3.4.jar constituent[35]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-transport-wagon-1.4.1.jar constituent[36]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-settings-builder-3.6.3.jar constituent[37]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-util-1.4.1.jar constituent[38]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-spi-1.4.1.jar constituent[39]: file:/home/user/.sdkman/candidates/maven/current/lib/javax.inject-1.jar constituent[40]: file:/home/user/.sdkman/candidates/maven/current/lib/jansi-1.17.1.jar constituent[41]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-builder-support-3.6.3.jar constituent[42]: file:/home/user/.sdkman/candidates/maven/current/lib/maven-resolver-provider-3.6.3.jar --------------------------------------------------- Exception in thread &quot;main&quot; java.lang.AssertionError     at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)     at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)     at jdk.compiler/com.sun.tools.javac.comp.Modules.enter(Modules.java:247)     at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:837)     at jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment$ImplicitCompleter.complete(JavacProcessingEnvironment.java:1529)     at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:642)     at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1326)     at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.complete(Type.java:1140)     at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.getTypeArguments(Type.java:1066)     at jdk.compiler/com.sun.tools.javac.code.Printer.visitClassType(Printer.java:237)     at jdk.compiler/com.sun.tools.javac.code.Printer.visitClassType(Printer.java:52)     at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.accept(Type.java:993)     at jdk.compiler/com.sun.tools.javac.code.Printer.visit(Printer.java:136)     at jdk.compiler/com.sun.tools.javac.util.AbstractDiagnosticFormatter.formatArgument(AbstractDiagnosticFormatter.java:199)     at jdk.compiler/com.sun.tools.javac.util.AbstractDiagnosticFormatter.formatArguments(AbstractDiagnosticFormatter.java:167)     at jdk.compiler/com.sun.tools.javac.util.BasicDiagnosticFormatter.formatMessage(BasicDiagnosticFormatter.java:111)     at jdk.compiler/com.sun.tools.javac.util.BasicDiagnosticFormatter.formatMessage(BasicDiagnosticFormatter.java:67)     at jdk.compiler/com.sun.tools.javac.util.AbstractDiagnosticFormatter.formatArgument(AbstractDiagnosticFormatter.java:185)     at jdk.compiler/com.sun.tools.javac.util.AbstractDiagnosticFormatter.formatArguments(AbstractDiagnosticFormatter.java:167)     at jdk.compiler/com.sun.tools.javac.util.BasicDiagnosticFormatter.formatMessage(BasicDiagnosticFormatter.java:111)     at jdk.compiler/com.sun.tools.javac.util.BasicDiagnosticFormatter.formatMessage(BasicDiagnosticFormatter.java:67)     at jdk.compiler/com.sun.tools.javac.util.JCDiagnostic.getMessage(JCDiagnostic.java:788)     at jdk.compiler/com.sun.tools.javac.api.ClientCodeWrapper$DiagnosticSourceUnwrapper.getMessage(ClientCodeWrapper.java:799)     at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:131)     at org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile(JavacCompiler.java:174)     at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:1129)     at org.apache.maven.plugin.compiler.CompilerMojo.execute(CompilerMojo.java:188)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:193)     at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.base/java.lang.reflect.Method.invoke(Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:347) </code></pre> <p>And this is the previous part of the output</p> <pre><code>user@User-VirtualBox-Mint:~/Desktop/mycompany/myapp$ mvn clean package -U -Dwithout-frontend [INFO] Scanning for projects... [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO]  [INFO] myapp                                                             [pom] [INFO] myapp-server                                                      [jar] [INFO]  [INFO] -----------------------&lt; com.mycompany:myapp &gt;------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------&lt; com.mycompany:myapp-server &gt;-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp ............................................. SUCCESS [  0.252 s] [INFO] myapp-server ...................................... FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.494 s [INFO] Finished at: 2019-12-12T14:48:34+01:00 [INFO] ------------------------------------------------------------------------ --------------------------------------------------- </code></pre> <p>If I try to add javaccompilerforce use in my main pom.xml such that this part is as following</p> <pre><code>   &lt;version&gt;3.8.0&lt;/version&gt;       &lt;configuration&gt;         &lt;forceJavacCompilerUse&gt;true&lt;/forceJavacCompilerUse&gt;         &lt;compilerArgs&gt;           &lt;arg&gt;-parameters&lt;/arg&gt;         &lt;/compilerArgs&gt;       &lt;/configuration&gt;     &lt;/plugin&gt; </code></pre> <p>I see this time this new error</p> <pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project myapp-server: Compilation failure: Compilation failure:  [ERROR] /home/user/Desktop/mycompany/myapp/server/src/main/java/com/mycompany/myapp/representation/rest/RestControllerAdvice.java:[8,38] error: package com.mycompany.myapp.exception does not exist [ERROR] /home/user/Desktop/mycompany/myapp/server/src/main/java/com/mycompany/myapp/representation/rest/RestControllerAdvice.java:[25,84] error: cannot find symbol [ERROR]   symbol:   class InvalidPropertyValueException [ERROR]   location: class RestControllerAdvice [ERROR] /home/user/Desktop/mycompany/myapp/server/src/main/java/com/mycompany/myapp/representation/rest/RestControllerAdvice.java:[25,24] error: cannot find symbol [ERROR]   symbol:   class InvalidPropertyValueException [ERROR]   location: class RestControllerAdvice [ERROR] /home/user/Desktop/mycompany/myapp/server/src/main/java/com/mycompany/myapp/representation/rest/RestControllerAdvice.java:[24,20] error: cannot find symbol [ERROR]   symbol:   class InvalidPropertyValueException [ERROR]   location: class RestControllerAdvice [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException [ERROR]  [ERROR] After correcting the problems, you can resume the build with the command [ERROR]   mvn &lt;args&gt; -rf :myapp-server </code></pre> <p>Really, is the reason of the problem the absence of one folder or package? Or this second row is simply related to the javaccompilerforce option itself and not with the core of the app? It seems me too strange or banal. And, in add, the exactly same app works perfectly in another computer.</p> <h2>Edit</h2> <p>Thanks to all for your time, I think, the problem is the absence of some components. I tried to add those and now the error message is changed. At this point, I am a little bit in trouble because I see this maven output:</p> <pre><code>[ERROR] /home/user/Desktop/mycompany/myapp/server/src/main/java/com/mycompany/myapp/representation/rest/RestControllerAdvice.java:[8,38] error: cannot find symbol [ERROR]   symbol:   class InvalidPropertyValueException [ERROR]   location: package com.mycompany.myapp.exception </code></pre> <p>So, I searched the 8 row in that file and I found this one</p> <pre><code>import org.springframework.web.bind.annotation.ExceptionHandler; </code></pre> <p>But, the line which is referred to InvalidPropertyValueException is 2 rows before:</p> <pre><code>import com.mycompany.myapp.exception.InvalidPropertyValueException; </code></pre> <p>And, the strange thing, in the package com.mycompanny.myapp.exception I didn't found any class or file named InvalidPropertyValueException. But Eclipse accept it and present me in the option list. And this class don't generate any error or red line.</p> ",
    "OwnerUserId": "4746931",
    "LastEditorUserId": "8819761",
    "LastEditDate": "2020-11-27T08:45:25.713",
    "LastActivityDate": "2020-11-27T08:45:25.713",
    "Title": "Mvn clean package gives an unexpected java.lang.AssertionError",
    "Tags": "<java><spring-boot><maven>",
    "AnswerCount": "1",
    "CommentCount": "19",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>you can try this command with skip your unit test cases</p>  <p>'<strong>mvn clean install -DskipTests=true</strong>'</p> "
  },
  {
    "Id": "62871584",
    "PostTypeId": "1",
    "CreationDate": "2020-07-13T08:02:32.310",
    "Score": "9",
    "ViewCount": "7162",
    "Body": "<p>I'm trying to add some unit tests (using <strong>JUnit5</strong>) to my application. But trying to <strong>autowire</strong> a <strong>controller</strong> raises an <strong>assertion error</strong> because the controller is null.</p> <p>Test class:</p> <pre><code>package com.mydomain.preview.web; import static org.assertj.core.api.Assertions.assertThat;  import com.mydomain.preview.web.rest.TestController;  import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest;  @SpringBootTest public class Test1 {      @Autowired     private TestController controller;      @Test     public void testContext() throws Exception {     assertThat(controller).isNotNull();     }  } </code></pre> <p>Controller class:</p> <pre><code>package com.mydomain.preview.web.rest;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody;  @Controller public class TestController {      @RequestMapping     public @ResponseBody String greeting() {         return &quot;Hello World&quot;;     } } </code></pre> <p>pom.xml (irrelevant sections omitted for brevity):</p> <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;groupId&gt;junit&lt;/groupId&gt;                 &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;     &lt;/dependency&gt;     &lt;!-- junit 5 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;         &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt; </code></pre> <p>I followed this guide: <a href='https://spring.io/guides/gs/testing-web/' rel='noreferrer'>https://spring.io/guides/gs/testing-web/</a></p> <p>The error I'm getting is: <code>java.lang.AssertionError: Expecting actual not to be null</code>. Same error is raised for <code>mvn test</code>, <code>./mvnw test</code> and running the test from IntelliJ IDEA IDE.</p> <pre><code>SpringBootApplication Class:  @SpringBootApplication @EnableConfigurationProperties({LiquibaseProperties.class, ApplicationProperties.class}) public class MyApp {      private static final Logger log = LoggerFactory.getLogger(MyApp.class);      private final Environment env;      public MyApp(Environment env) {         this.env = env;     }      @PostConstruct     public void initApplication() {         Collection&lt;String&gt; activeProfiles = Arrays.asList(env.getActiveProfiles());         if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) &amp;&amp; activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION)) {             log.error(&quot;You have misconfigured your application! It should not run &quot; +                 &quot;with both the 'dev' and 'prod' profiles at the same time.&quot;);         }         if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) &amp;&amp; activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_CLOUD)) {             log.error(&quot;You have misconfigured your application! It should not &quot; +                 &quot;run with both the 'dev' and 'cloud' profiles at the same time.&quot;);         }     }      /**      * Main method, used to run the application.      *      * @param args the command line arguments      */     public static void main(String[] args) {         SpringApplication app = new SpringApplication(MyApp.class);         DefaultProfileUtil.addDefaultProfile(app);         Environment env = app.run(args).getEnvironment();         logApplicationStartup(env);     }      private static void logApplicationStartup(Environment env) {         String protocol = &quot;http&quot;;         if (env.getProperty(&quot;server.ssl.key-store&quot;) != null) {             protocol = &quot;https&quot;;         }         String serverPort = env.getProperty(&quot;server.port&quot;);         String contextPath = env.getProperty(&quot;server.servlet.context-path&quot;);         if (StringUtils.isBlank(contextPath)) {             contextPath = &quot;/&quot;;         }         String hostAddress = &quot;localhost&quot;;         try {             hostAddress = InetAddress.getLocalHost().getHostAddress();         } catch (UnknownHostException e) {             log.warn(&quot;The host name could not be determined, using `localhost` as fallback&quot;);         }         log.info(&quot;\\n----------------------------------------------------------\\n\\t&quot; +                 &quot;Application '{}' is running! Access URLs:\\n\\t&quot; +                 &quot;Local: \\t\\t{}://localhost:{}{}\\n\\t&quot; +                 &quot;External: \\t{}://{}:{}{}\\n\\t&quot; +                 &quot;Profile(s): \\t{}\\n----------------------------------------------------------&quot;,             env.getProperty(&quot;spring.application.name&quot;),             protocol,             serverPort,             contextPath,             protocol,             hostAddress,             serverPort,             contextPath,             env.getActiveProfiles());     } } </code></pre> ",
    "OwnerUserId": "6650143",
    "LastEditorUserId": "8371844",
    "LastEditDate": "2020-12-19T14:06:57.950",
    "LastActivityDate": "2020-12-19T14:06:57.950",
    "Title": "Why is an autowired controller always null in junit5 tests?",
    "Tags": "<java><spring><spring-boot><maven><junit5>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I assume that @SpringBootTest doesn't find the classes that need to be tested. Try adding <code>@SpringBootTest(classes = {TestController.class})</code></p> "
  },
  {
    "Id": "63011695",
    "PostTypeId": "1",
    "AcceptedAnswerId": "74755704",
    "CreationDate": "2020-07-21T09:42:58.370",
    "Score": "9",
    "ViewCount": "11538",
    "Body": "<p>I have multi-module maven project Spring boot 2.3.1.RELEASE, there I use spring security over OAuth 2.0. One of my modules contains configuration for security:</p> <p>Authorization server config</p> <pre class='lang-java prettyprint-override'><code>@Configuration @EnableAuthorizationServer //deprecated public class AuthorizationServerOAuth2Config extends AuthorizationServerConfigurerAdapter { //deprecated      private static final String SINGING_KEY = &quot;&quot;;     private static final String CLIENT_ID = &quot;&quot;;     private static final String CLIENT_SECRET = &quot;&quot;;     private static final String[] AUTHORIZED_GRANT_TYPES = {&quot;password&quot;, &quot;refresh_token&quot;};     private static final String[] SCOPES = {&quot;read&quot;, &quot;write&quot;};      @Autowired     @Qualifier(&quot;authenticationManagerBean&quot;)     private AuthenticationManager authenticationManager;      @Autowired     private PasswordEncoder passwordEncoder;      @Override     public void configure(AuthorizationServerSecurityConfigurer security) { //deprecated         security                 .tokenKeyAccess(&quot;permitAll()&quot;)                 .checkTokenAccess(&quot;isAuthenticated()&quot;);     }      @Override     public void configure(ClientDetailsServiceConfigurer clients) throws Exception { //deprecated          clients.inMemory()                 .withClient(CLIENT_ID)                 .secret(passwordEncoder.encode(CLIENT_SECRET))                 .authorizedGrantTypes(AUTHORIZED_GRANT_TYPES)                 .scopes(SCOPES)                 .accessTokenValiditySeconds(1800)                 .refreshTokenValiditySeconds(9600);     }      @Override     public void configure(AuthorizationServerEndpointsConfigurer endpoints) { //deprecated          endpoints                 .tokenStore(tokenStore())                 .authenticationManager(authenticationManager)                 .accessTokenConverter(accessTokenConverter());     }      @Bean     public JwtAccessTokenConverter accessTokenConverter() { //deprecated         JwtAccessTokenConverter converter = new JwtAccessTokenConverter();         converter.setSigningKey(SINGING_KEY);         return converter;     }      @Bean     public TokenStore tokenStore() { //deprecated         return new JwtTokenStore(accessTokenConverter());     }      @Bean     @Primary     public DefaultTokenServices tokenServices() { //deprecated         DefaultTokenServices defaultTokenServices = new DefaultTokenServices();         defaultTokenServices.setTokenStore(tokenStore());         defaultTokenServices.setSupportRefreshToken(true);         return defaultTokenServices;     } }  </code></pre> <p>Resource server config</p> <pre class='lang-java prettyprint-override'><code>@Configuration @EnableResourceServer //deprecated public class ResourceServerOAuth2Config extends ResourceServerConfigurerAdapter { //deprecated } </code></pre> <p>pom.xml</p> <pre class='lang-xml prettyprint-override'><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;parent&gt;         &lt;groupId&gt;com.skill.improvement&lt;/groupId&gt;         &lt;artifactId&gt;app&lt;/artifactId&gt;         &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;security&lt;/artifactId&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;             &lt;!-- 2.3.1.RELEASE --&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;!-- 2.3.1.RELEASE --&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;             &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/project&gt; </code></pre> <p>Main security config</p> <pre class='lang-java prettyprint-override'><code> @Order(1) @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class SecurityConfig extends WebSecurityConfigurerAdapter {      private static final String ADMIN_PASSWORD = &quot;&quot;;     private static final String USER_PASSWORD = &quot;&quot;;      @Override     public void configure(HttpSecurity http) throws Exception {         http                 .httpBasic().disable()                 .csrf().disable()                 .anonymous().disable()                 .authorizeRequests()                 .antMatchers(&quot;/v1/**&quot;).authenticated()                 .and().exceptionHandling().authenticationEntryPoint(new JwtAuthenticationEntryPoint())                 .and().exceptionHandling().accessDeniedHandler(new OAuth2AccessDeniedHandler()) //deprecated                 .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);          http.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);     }      @Override     public void configure(WebSecurity web) {         web.ignoring()                 .antMatchers(                 &quot;/v2/api-docs&quot;,                 &quot;/configuration/ui&quot;,                 &quot;/swagger-resources/**&quot;,                 &quot;/configuration/security&quot;,                 &quot;/swagger-ui.html&quot;,                 &quot;/webjars/**&quot;)         .antMatchers(HttpMethod.GET, &quot;/v1/**&quot;)         .antMatchers(HttpMethod.PATCH, &quot;/v1/**&quot;);     }      @Autowired     public void globalUserDetails(AuthenticationManagerBuilder auth) throws Exception {         auth.userDetailsService(inMemoryUserDetailsManager());     }      @Override     @Bean     public AuthenticationManager authenticationManagerBean() throws Exception {         return super.authenticationManagerBean();     }      @Bean     public InMemoryUserDetailsManager inMemoryUserDetailsManager() {          return new InMemoryUserDetailsManager(getDefaultUsers());     }      @Bean     public PasswordEncoder passwordEncoder(){         return new BCryptPasswordEncoder();     }      @Bean     public OncePerRequestFilter jwtAuthenticationFilter() {         return new JwtAuthenticationFilter();     }      private List&lt;UserDetails&gt; getDefaultUsers() {          List&lt;UserDetails&gt; userDetailsList = new ArrayList&lt;&gt;();         userDetailsList.add(User.withUsername(&quot;admin&quot;).password(passwordEncoder().encode(ADMIN_PASSWORD))                 .roles(&quot;ADMIN&quot;).build());         userDetailsList.add(User.withUsername(&quot;user&quot;).password(passwordEncoder().encode(USER_PASSWORD))                 .roles(&quot;USER&quot;).build());         return userDetailsList;     } }  </code></pre> <p>Everything works fine, but almost everything is deprecated since Spring Security 5.2.x. I read <a href='https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide' rel='noreferrer'>this guide</a></p> <p>but I am not sure how to successfully finish the migration. Is there any understandable guide on how to do it?</p> ",
    "OwnerUserId": "3708472",
    "LastActivityDate": "2022-12-10T18:46:55.117",
    "Title": "Migration guide for Spring security 5",
    "Tags": "<java><spring-boot><maven><spring-security>",
    "AnswerCount": "2",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>For everyone, who wants to use the newest solution the Spring already released <a href='https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html' rel='nofollow noreferrer'>the authorization server</a>.</p> <p>Maven dependency:</p> <pre class='lang-xml prettyprint-override'><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;     &lt;artifactId&gt;spring-security-oauth2-authorization-server&lt;/artifactId&gt;     &lt;version&gt;1.0.0&lt;/version&gt; &lt;/dependency&gt; </code></pre> ",
    "highest_rated_answer": "<p>In spring security's current release they have not given support of authorization server. They are working on authorization server support but the project is under experimental mode. Besides spring security team already integrated resource server as well as Oauth2 client support in spring security 5 as single spring security project. Until, they don't release the support of latest spring's authorization server you can use your old authorization server but you won't be able to keep your resource server auth server because latest resource server and client configuration comes in different dependency and the configurations will conflict with old oauth2 support .</p> <p>I would recommend you to use any other authorization server meanwhile they release spring's latest auth server. I would suggest you to use keyclock auth server that I am personally using.</p> <p>See <a href='https://github.com/spring-projects-experimental/spring-authorization-server' rel='noreferrer'>this</a></p> "
  },
  {
    "Id": "65903358",
    "PostTypeId": "1",
    "AcceptedAnswerId": "65903905",
    "CreationDate": "2021-01-26T14:36:59.037",
    "Score": "9",
    "ViewCount": "42660",
    "Body": "<p>I have a project that runs correctly in the IDE, but when I tried bundle it into a &quot;jar&quot; file using the &quot;mvn&quot; command it fails due to &quot;Test Failure&quot;: <strong>java.lang.IllegalStateException: Failed to load ApplicationContext.</strong></p> <p>Here is the test class (the default one):</p> <pre><code>package com.example.businesslogicserver;  import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest;  @SpringBootTest class BusinessLogicServerApplicationTests {      @Test     void contextLoads() {     }  } </code></pre> <p>the application class</p> <pre><code>package com.example.businesslogicserver;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  @SpringBootApplication public class BusinessLogicServerApplication {     private static final Logger logger = LoggerFactory.getLogger(BusinessLogicServerApplication.class);      public static void main(String[] args) {          SpringApplication.run(BusinessLogicServerApplication.class, args);         logger.info(&quot;Your Spring Boot Application has started successfully...&quot;);     } } </code></pre> <p><strong>pom.xml</strong></p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.4.1&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;business-logic-server&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;business-logic-server&lt;/name&gt;     &lt;description&gt;Project for Handling a list of items&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;             &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;             &lt;version&gt;0.11.2&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;             &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;             &lt;version&gt;0.11.2&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;             &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;             &lt;version&gt;0.11.2&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;          &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;  </code></pre> <p><strong>application.properties</strong></p> <pre><code>server.port=9090 auth.server.base.url=http://localhost:8080 jwt.signing.key=very1secure2secret3key_10264564684846d4fdfhdfsasa1235saa23154asas  spring.jpa.show-sql=true spring.datasource.url=jdbc:mysql://localhost:3306/itemlist?serverTimezone=UTC spring.datasource.username=root spring.datasource.password=password spring.jpa.generate-ddl=true spring.jpa.hibernate.ddl-auto=update spring.data.rest.basePath=/api </code></pre> <p>Can anyone help please ? thanks in advance.</p> ",
    "OwnerUserId": "14480571",
    "LastEditorUserId": "14480571",
    "LastEditDate": "2021-01-26T14:43:57.427",
    "LastActivityDate": "2023-07-30T15:39:50.500",
    "Title": "Test Failure : java.lang.IllegalStateException: Failed to load ApplicationContext",
    "Tags": "<java><spring><spring-boot><maven><testing>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>you are having this error because it's now recommended to specify the class (classes) you would like to test : <a href='https://i.stack.imgur.com/DTWh1.png' rel='noreferrer'><img src='https://i.stack.imgur.com/DTWh1.png' alt='enter image description here' /></a></p> <p>To fix , you just have to specify the classes like this :</p> <p><a href='https://i.stack.imgur.com/Uxapp.png' rel='noreferrer'><img src='https://i.stack.imgur.com/Uxapp.png' alt='enter image description here' /></a></p> <p>Or if you want to ignore the tests , you can simply run :</p> <p><strong>mvn clean install -Dmaven.test.skip=true</strong></p> ",
    "highest_rated_answer": "<p>Got the same error for the same reason although in a different context, with Gradle, while building a plain Spring Boot 3.1.2 generated by <a href='https://start.spring.io' rel='nofollow noreferrer'>Spring Initializr</a>:</p> <pre><code>&gt; Task :server:test FAILED  ServerTests &gt; contextLoads() FAILED     java.lang.IllegalStateException at DefaultCacheAwareContextLoaderDelegate.java:143         Caused by: java.lang.IllegalArgumentException at Assert.java:713 </code></pre> <p>Tried the approaches above without success.<br /> Solved it by separating the classes containing tests from the one loading the Spring Boot context for running those tests, like so:</p> <p><strong>src/main/java/Server.java</strong></p> <pre><code>import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class Server {     public static void main(String[] args) {         SpringApplication.run(Server.class, args);     } } </code></pre> <p><strong>src/test/java/ServerTests.java</strong></p> <pre><code>import org.junit.jupiter.api.Test;  class ServerTests {     @Test     void contextLoads() {     } } </code></pre> <p><strong>src/test/java/TestSuite.java</strong></p> <pre><code>import org.springframework.boot.test.context.SpringBootTest;  @SpringBootTest(classes = {ServerTests.class}) class TestSuite { } </code></pre> <p><strong>Output</strong></p> <pre><code>./gradlew clean build  &gt; Task :server:test ServerTests &gt; contextLoads() PASSED BUILD SUCCESSFUL in 3s </code></pre> <p><strong>Environment</strong></p> <ul> <li>JDK 17</li> <li>Gradle 8.2.1</li> <li>Spring Boot 3.1.2</li> </ul> "
  },
  {
    "Id": "67689141",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67690318",
    "CreationDate": "2021-05-25T13:36:16.593",
    "Score": "9",
    "ViewCount": "26419",
    "Body": "<p><em>I am trying to add &quot;spring-cloud-starter-openfeign&quot; dependency to pom.xml</em></p> <pre><code>&lt;dependency&gt;         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;         &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; </code></pre> <p><em>But i am getting below error.</em></p> <pre><code>[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------&lt; [0;36mcom.cts:stock[0;1m &gt;----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -&gt; [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException </code></pre> <p><em>After some findings from google i have added version like below</em></p> <pre><code>&lt;dependency&gt;         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;         &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;         &lt;version&gt;3.0.3&lt;/version&gt; &lt;/dependency&gt; </code></pre> <p><em>But still the error is not resolved. Can some one help me with this ?</em></p> <p><em>Below is my <strong>pom.xml</strong></em></p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.5.0&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.cts&lt;/groupId&gt;     &lt;artifactId&gt;stock&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;stock&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;11&lt;/java.version&gt;         &lt;spring-cloud.version&gt;2020.0.3-SNAPSHOT&lt;/spring-cloud.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;             &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;version&gt;2.5.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;dependencyManagement&gt;         &lt;dependencies&gt;             &lt;dependency&gt;                 &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                 &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                 &lt;version&gt;${spring-cloud.version}&lt;/version&gt;                 &lt;type&gt;pom&lt;/type&gt;                 &lt;scope&gt;import&lt;/scope&gt;             &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;/dependencyManagement&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;excludes&gt;                         &lt;exclude&gt;                             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                             &lt;artifactId&gt;lombok&lt;/artifactId&gt;                         &lt;/exclude&gt;                     &lt;/excludes&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;  </code></pre> <p>I have added the pom file. I am trying to create a feign client on one of my services in micro services project. I can't able to resolve this pom because of <strong>spring-cloud-starter-openfeign</strong> dependency. I am recently learning microservices, so can some one help me to resolve this pom file</p> ",
    "OwnerUserId": "11973540",
    "LastEditorUserId": "11973540",
    "LastEditDate": "2021-05-25T14:03:03.833",
    "LastActivityDate": "2021-05-25T14:43:40.127",
    "Title": "Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT",
    "Tags": "<java><spring><spring-boot><maven>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p><em>Hi I finally fixed this issue by adding <strong>spring-cloud-openfeign-core</strong>  which is below</em></p> <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-openfeign-core&lt;/artifactId&gt;     &lt;version&gt;3.0.2&lt;/version&gt; &lt;/dependency&gt; </code></pre> <p><strong>Resolution:</strong></p> <ol> <li><p>I found this solution as error came on 4th line of pom file saying <em><strong>&quot;Missing artifact org.springframework.cloud:spring-cloud-openfeign-core:jar:3.0.3-SNAPSHOT&quot;</strong></em> after adding version for <strong>spring-cloud-starter-openfeign</strong> dependency.</p> </li> <li><p>Means Sping is searching for <strong>openfeign-core</strong> dependency after adding <strong>spring-cloud-starter-openfeign</strong></p> </li> </ol> <p>So below is updated <strong>pom.xml</strong></p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.5.0&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.cts&lt;/groupId&gt;     &lt;artifactId&gt;stock&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;stock&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;11&lt;/java.version&gt;         &lt;spring-cloud.version&gt;2020.0.3-SNAPSHOT&lt;/spring-cloud.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;             &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;version&gt;2.5.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;             &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-openfeign-core --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-openfeign-core&lt;/artifactId&gt;             &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/dependency&gt;          &lt;/dependencies&gt;     &lt;dependencyManagement&gt;         &lt;dependencies&gt;             &lt;dependency&gt;                 &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                 &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                 &lt;version&gt;${spring-cloud.version}&lt;/version&gt;                 &lt;type&gt;pom&lt;/type&gt;                 &lt;scope&gt;import&lt;/scope&gt;             &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;/dependencyManagement&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;excludes&gt;                         &lt;exclude&gt;                             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;                             &lt;artifactId&gt;lombok&lt;/artifactId&gt;                         &lt;/exclude&gt;                     &lt;/excludes&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;   </code></pre> ",
    "highest_rated_answer": "<p>The last release version is 3.0.2 not 3.0.3 See here <a href='https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign/3.0.2' rel='nofollow noreferrer'>https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign/3.0.2</a></p> "
  },
  {
    "Id": "71737901",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72173843",
    "CreationDate": "2022-04-04T13:14:20.703",
    "Score": "9",
    "ViewCount": "36705",
    "Body": "<p>I am using spring-boot 2.3.3.RELEASE with the according spring-boot-starter-parent in maven.</p> <pre><code>&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;  &lt;/parent&gt; </code></pre> <p>Due to the spring4shell CVE I wanted to upgrade the spring-framework to 5.2.20.RELEASE instead of the already included 5.2.8.RELEASE. I tried overriding the <code>spring-framework.version</code> property from spring-boot-dependencies.</p> <pre><code>    &lt;spring-framework.version&gt;5.2.20.RELEASE&lt;/spring-framework.version&gt; </code></pre> <p>But it did not work. I also looked up the spring-boot-starter-web-2.3.3.RELEASE.pom and it has the spring-web dependency hardcoded to 5.2.8.RELEASE.</p> <p>Are there any other ways of upgrading the spring-framework version in spring-boot besides  adding all the new versions as dependencies to the <code>dependencyManagement</code> section? Thx</p> <p>Full POM:</p> <pre><code>&lt;?xml version=&quot;1.0&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;parent&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;   &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;   &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;groupId&gt;group&lt;/groupId&gt; &lt;artifactId&gt;app&lt;/artifactId&gt; &lt;version&gt;3.1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt;  &lt;properties&gt;   &lt;flyway.version&gt;4.1.2&lt;/flyway.version&gt;   &lt;groovy.version&gt;2.4.20&lt;/groovy.version&gt;   &lt;spring-framework.version&gt;5.2.20.RELEASE&lt;/spring-framework.version&gt;   &lt;spring-cloud.version&gt;Hoxton.SR7&lt;/spring-cloud.version&gt;   &lt;h2.version&gt;1.4.196&lt;/h2.version&gt; &lt;/properties&gt;  &lt;dependencyManagement&gt; &lt;dependencies&gt;    &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;     &lt;version&gt;${spring-cloud.version}&lt;/version&gt;     &lt;type&gt;pom&lt;/type&gt;     &lt;scope&gt;import&lt;/scope&gt;   &lt;/dependency&gt;  &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;dependencies&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;   &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;   &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;   &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;org.mockito&lt;/groupId&gt;   &lt;artifactId&gt;mockito-core&lt;/artifactId&gt; &lt;/dependency&gt;   &lt;dependency&gt;   &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;   &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;   &lt;version&gt;${groovy.version}&lt;/version&gt; &lt;/dependency&gt;  &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml --&gt; &lt;dependency&gt;   &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;   &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;app&lt;/finalName&gt; &lt;resources&gt;   &lt;resource&gt;     &lt;directory&gt;src/main/resources&lt;/directory&gt;     &lt;filtering&gt;true&lt;/filtering&gt;     &lt;includes&gt;       &lt;include&gt;**/version.json&lt;/include&gt;       &lt;include&gt;**/**.properties&lt;/include&gt;     &lt;/includes&gt;   &lt;/resource&gt;    &lt;resource&gt;     &lt;directory&gt;src/main/resources&lt;/directory&gt;     &lt;filtering&gt;false&lt;/filtering&gt;     &lt;includes&gt;       &lt;include&gt;**/*.*&lt;/include&gt;     &lt;/includes&gt;     &lt;excludes&gt;       &lt;exclude&gt;**/version.json&lt;/exclude&gt;       &lt;exclude&gt;**/**.properties&lt;/exclude&gt;     &lt;/excludes&gt;   &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; &lt;/project&gt; </code></pre> <p><strong>EDIT:</strong> This is a part of mvn dependency:tree:</p> <pre><code>+- org.springframework.boot:spring-boot-starter-webflux:jar:2.3.3.RELEASE:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-json:jar:2.3.3.RELEASE:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.11.2:compile [INFO] |  |  \\- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.11.2:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-reactor-netty:jar:2.3.3.RELEASE:compile [INFO] |  +- org.springframework:spring-web:jar:5.2.8.RELEASE:compile [INFO] |  +- org.springframework:spring-webflux:jar:5.2.8.RELEASE:compile [INFO] |  \\- org.synchronoss.cloud:nio-multipart-parser:jar:1.1.0:compile [INFO] |     \\- org.synchronoss.cloud:nio-stream-storage:jar:1.1.3:compile </code></pre> <p>If you have a look at the <code>spring-boot-starter-webflux-2.3.3.RELEASE.pom</code> which includes the problematic spring-web 5.2.8.RELEASE you will find that the spring version is hardcoded to 5.2.8.RELEASE. So setting the <code>spring.framework</code> property in maven will have no effect.</p> <pre><code>    &lt;dependency&gt;       &lt;groupId&gt;org.springframework&lt;/groupId&gt;       &lt;artifactId&gt;spring-web&lt;/artifactId&gt;       &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;       &lt;scope&gt;compile&lt;/scope&gt;     &lt;/dependency&gt; </code></pre> <p>Output of mvn help:effective-pom:</p> <pre><code> &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 126 --&gt;         &lt;artifactId&gt;spring-web&lt;/artifactId&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 127 --&gt;         &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 128 --&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 131 --&gt;         &lt;artifactId&gt;spring-webflux&lt;/artifactId&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 132 --&gt;         &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;  &lt;!-- org.springframework:spring-framework-bom:5.2.8.RELEASE, line 133 --&gt;       &lt;/dependency&gt; </code></pre> <p><strong>Edit after Solution by @Inthai2002:</strong> I have additonally an internal lib pom imported in my pom.xml</p> <pre><code>&lt;dependencyManagement&gt;         &lt;dependencies&gt;             &lt;dependency&gt;                 &lt;groupId&gt;internal&lt;/groupId&gt;                 &lt;artifactId&gt;lib&lt;/artifactId&gt;                 &lt;version&gt;4.4.0&lt;/version&gt;                 &lt;scope&gt;import&lt;/scope&gt;                 &lt;type&gt;pom&lt;/type&gt;             &lt;/dependency&gt;              &lt;dependency&gt;                 &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                 &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                 &lt;version&gt;${spring-cloud.version}&lt;/version&gt;                 &lt;type&gt;pom&lt;/type&gt;                 &lt;scope&gt;import&lt;/scope&gt;             &lt;/dependency&gt;          &lt;/dependencies&gt;     &lt;/dependencyManagement&gt; </code></pre> <p>and this internal lib has the spring-boot-dependencies pom directly imported which leads to the fact that spring-framework.version property is ignored:</p> <pre><code>          &lt;dependency&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;                 &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;                 &lt;scope&gt;import&lt;/scope&gt;                 &lt;type&gt;pom&lt;/type&gt;             &lt;/dependency&gt; </code></pre> ",
    "OwnerUserId": "10674026",
    "LastEditorUserId": "10674026",
    "LastEditDate": "2022-05-11T05:34:15.847",
    "LastActivityDate": "2022-05-11T05:34:15.847",
    "Title": "How to upgrade spring framework version in spring boot",
    "Tags": "<java><spring><spring-boot><maven>",
    "AnswerCount": "3",
    "CommentCount": "10",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I just tried your pom (with and without the <strong>spring-framework.version</strong> property) on a clean m2 repo. Without the property, spring-framework is 5.2.8, with the property, it is 5.2.20. Can you try on a clean repo?</p> <p>The <strong>spring-framework-bom</strong> at version X is hardcoded to all the spring packages for version X (see <a href='https://repo1.maven.org/maven2/org/springframework/spring-framework-bom/5.2.8.RELEASE/spring-framework-bom-5.2.8.RELEASE.pom' rel='noreferrer'>https://repo1.maven.org/maven2/org/springframework/spring-framework-bom/5.2.8.RELEASE/spring-framework-bom-5.2.8.RELEASE.pom</a>)</p> <p>The <strong>spring-framework.version</strong> property is declared and used to pull the <strong>spring-framework-bom</strong> in <strong>spring-boot-dependencies</strong> and inherited by its descendants (see <a href='https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.3.RELEASE/spring-boot-dependencies-2.3.3.RELEASE.pom' rel='noreferrer'>https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.3.3.RELEASE/spring-boot-dependencies-2.3.3.RELEASE.pom</a>).</p> <p><strong>spring-boot-dependencies</strong> is parent of <strong>spring-boot-starter-parent</strong> (see <a href='https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.3.3.RELEASE/spring-boot-starter-parent-2.3.3.RELEASE.pom' rel='noreferrer'>https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-starter-parent/2.3.3.RELEASE/spring-boot-starter-parent-2.3.3.RELEASE.pom</a>).</p> <p>Because the property is inherited by descendant, you can override its value at the pom of your application. By overriding it with 5.2.20, you are swapping out spring-framework-bom 5.2.8 for 5.2.20 which effectively pull most of the spring packages for 5.2.20</p> ",
    "highest_rated_answer": "<p>As per the official doc : <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#appendix.dependency-versions.properties' rel='nofollow noreferrer'>https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html#appendix.dependency-versions.properties</a></p> <pre><code>&lt;spring-framework.version&gt;5.2.20.RELEASE&lt;/spring-framework.version&gt; </code></pre> <p>will only override the versions for Group ID org.springframework and not to org.springframework.boot. I don't see a version property for spring boot, so might have to include the version in the dependency.</p> "
  },
  {
    "Id": "74627676",
    "PostTypeId": "1",
    "CreationDate": "2022-11-30T12:18:20.047",
    "Score": "9",
    "ViewCount": "6834",
    "Body": "<p>I have upgraded the spring boot version from 2.3.5 to 2.7.5 , resolved most of the dependency versions. But when i do the maven clean install , i received the compilation failure error : cannot access LoggingEventAware [ERROR]   class file for org.slf4j.spi.LoggingEventAware not found</p> <p>But i do not see any error in the java file - LoggingConfiguration.java.</p> <p>When i just do reload of project to resolve all the dependencies - it gives error for maven plugin : Cannot resolve plugin org.apache.maven.plugins:maven-release-plugin:3.1.1</p> <p>I am not sure what is the issue. I have tried to restart IntelliJ after invalidate cache and also cleared the .m2 repository .Nothing helps. Please suggest your inputs how to resolve the same.</p> <p>Here is the sample pom.xml</p> <pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.7.5&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;          &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;11&lt;/java.version&gt;         &lt;maven-compiler-plugin.version&gt;3.10.1&lt;/maven-compiler-plugin.version&gt;         &lt;maven-surefire-plugin.version&gt;2.22.2&lt;/maven-surefire-plugin.version&gt;         &lt;maven-release-plugin.version&gt;3.1.1&lt;/maven-release-plugin.version&gt;         &lt;maven-scm-provider-gitexe.version&gt;1.9.5&lt;/maven-scm-provider-gitexe.version&gt;         &lt;junit.platform.version&gt;4.13.0&lt;/junit.platform.version&gt;                 &lt;logback-json-classic&gt;0.1.5&lt;/logback-json-classic&gt;         &lt;logback-jackson.version&gt;0.1.5&lt;/logback-jackson.version&gt;      &lt;/properties&gt;  &lt;/project&gt; ``` </code></pre> ",
    "OwnerUserId": "11932435",
    "LastActivityDate": "2023-05-02T11:43:04.503",
    "Title": "Compilation Failure : cannot access LoggingEventAware [ERROR] class file for org.slf4j.spi.LoggingEventAware not found on mvn clean install -U",
    "Tags": "<spring-boot><maven><java-11><spring-boot-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Upgrade to <code>slf4j-api:2.0.4</code> or later to address this issues. Something in your dependency tree is likely pulling an older version.</p> "
  },
  {
    "Id": "42390860",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42391322",
    "CreationDate": "2017-02-22T12:01:00.937",
    "Score": "88",
    "ViewCount": "232571",
    "Body": "<p>I'm trying to set an active profile in Spring Boot application using Maven 3.<br> In my pom.xml I set <strong>default active profile</strong> and property <strong>spring.profiles.active</strong>  to <strong>development</strong>:</p>  <pre><code>&lt;profiles&gt;     &lt;profile&gt;         &lt;id&gt;development&lt;/id&gt;         &lt;properties&gt;             &lt;spring.profiles.active&gt;development&lt;/spring.profiles.active&gt;         &lt;/properties&gt;         &lt;activation&gt;             &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;         &lt;/activation&gt;     &lt;/profile&gt; &lt;/profiles&gt; </code></pre>  <p>but every time I run my application, I receive the following message in logs:</p>  <pre><code>No active profile set, falling back to default profiles: default </code></pre>  <p>and the SpringBoot profile is set to default (reads application.properties instead application-development.properties)<br><br> What else should I do to have my SpringBoot active profile set using Maven profile?<br> Any help highly appreciated.</p> ",
    "OwnerUserId": "4787269",
    "LastActivityDate": "2024-01-02T01:38:08.607",
    "Title": "Configure active profile in SpringBoot via Maven",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "10",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>The Maven profile and the Spring profile are two completely different things. Your pom.xml defines <code>spring.profiles.active</code> variable which is available in the build process, but not at runtime. That is why only the default profile is activated.</p>  <p><strong>How to bind Maven profile with Spring?</strong></p>  <p>You need to pass the build variable to your application so that it is available when it is started.</p>  <ol> <li><p>Define a placeholder in your <code>application.properties</code>:</p>  <pre><code>spring.profiles.active=@spring.profiles.active@ </code></pre>  <p>The <code>@spring.profiles.active@</code> variable must match the declared property from the Maven profile.</p></li> <li><p>Enable resource filtering in you pom.xml:</p>  <pre><code>&lt;build&gt;     &lt;resources&gt;         &lt;resource&gt;             &lt;directory&gt;src/main/resources&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;         &lt;/resource&gt;     &lt;/resources&gt;     \u2026 &lt;/build&gt; </code></pre>  <p>When the build is executed, all files in the <code>src/main/resources</code> directory will be processed by Maven and the placeholder in your <code>application.properties</code> will be replaced with the variable you defined in your Maven profile. </p></li> </ol>  <p>For more details you can <a href='http://dolszewski.com/spring/spring-boot-properties-per-maven-profile/' rel='noreferrer'>go to my post</a> where I described this use case.</p> ",
    "highest_rated_answer": "<p>Or rather easily:</p>  <pre><code>mvn spring-boot:run -Dspring-boot.run.profiles={profile_name} </code></pre> "
  },
  {
    "Id": "53707080",
    "PostTypeId": "1",
    "AcceptedAnswerId": "53708051",
    "CreationDate": "2018-12-10T13:50:04.073",
    "Score": "84",
    "ViewCount": "81641",
    "Body": "<h1>Introduction</h1>  <p>So I noticed the following line in the gradle file of the jhipster project:</p>  <pre><code>annotationProcessor ('org.springframework.boot:spring-boot-configuration-processor') {         exclude group: 'com.vaadin.external.google', module: 'android-json'     } </code></pre>  <p><a href='https://github.com/jhipster/jhipster-sample-app-gradle/blob/9e9c3db8f3bedba4b1efd85ecb6ff3f12a5f596a/build.gradle#L230' rel='noreferrer'>https://github.com/jhipster/jhipster-sample-app-gradle/blob/9e9c3db8f3bedba4b1efd85ecb6ff3f12a5f596a/build.gradle#L230</a></p>  <p>We also used the same configuration in Maven for another project to solve the following problem: <a href='https://stackoverflow.com/q/53260385/1688441'>Maven transient dependency (library/jar vaadin json) is not being excluded</a></p>  <h1>Questions</h1>  <p>And now I have the following questions:</p>  <ul> <li>What does the spring-boot-configuration-processor dependency do?</li> <li>Why is it necessary to sometimes exclude dependencies from the processor?</li> <li>Why doesn't the processor necessarily appear in the mvn-dependency tree?</li> <li>Why are exclusions used with processor in situations where it's very difficult to exclude a dependency?</li> </ul> ",
    "OwnerUserId": "1688441",
    "LastActivityDate": "2021-12-02T23:36:42.830",
    "Title": "What is the spring-boot-configuration-processor ? Why do people exclude libraries from it? Why is it invisible in dependency tree?",
    "Tags": "<java><spring><maven><spring-boot><gradle>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p><code>spring-boot-configuration-processor</code> is an annotation processor that generates metadata about classes in your application that are annotated with <code>@ConfigurationProperties</code>. This metadata is used by your IDE (Eclipse, IntelliJ, or NetBeans) to provide auto-completion and documentation for the properties when editing <code>application.properties</code> and <code>application.yaml</code> files. You can learn a bit more about it in the <a href='https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#configuration-metadata.annotation-processor' rel='noreferrer'>relevant section</a> of Spring Boot's reference documentation.</p> <p>Since Spring Boot 1.5.10, the exclusion is no longer necessary as <code>com.vaadin.external.google:android-json</code> is no longer a dependency of <code>spring-boot-configuration-processor</code>.</p> ",
    "highest_rated_answer": "<blockquote>   <p>What does the spring-boot-configuration-processor dependency do?</p> </blockquote>  <p>It <a href='https://jakubstas.com/configuration-meta-data-in-spring-boot/#.XA53bhP7SL8' rel='noreferrer'>scans the libraries in the build and sees what properties they use</a> so as to <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html' rel='noreferrer'>inform the IDE</a></p>  <blockquote>   <p>Why is it necessary to sometimes exclude dependencies from the processor?</p> </blockquote>  <p>Maven libraries can clash sometimes - the one you reference was excluded by JHipster because <a href='https://github.com/jhipster/generator-jhipster/commit/9e36776721af1b3cd5f3adbcffbba6696612db53' rel='noreferrer'>it led to errors when on the classpath together with another library in JHipster's dependencies</a></p>  <blockquote>   <p>Why doesn't the processor necessarily appear in the mvn dependency:tree?</p> </blockquote>  <p>It does for me on the <code>jhipster-sample-app</code>. Presumably you're referring to the <a href='https://stackoverflow.com/questions/53260385/maven-transient-dependency-library-jar-vaadin-json-is-not-being-excluded#comment93414598_53260385'>comment on the linked issue</a> stating that the <code>android-json</code> library isn't in the tree. I've asked there about that.</p>  <blockquote>   <p>Why are exclusions used with processor in situations where it's very difficult to exclude a dependency?</p> </blockquote>  <p>This is a <a href='https://stackoverflow.com/questions/3190216/maven-dependency-clash'>dependency clash</a> issue like any other really, it just happens that the processor is bringing in the key dependency (or rather was, as @<a href='https://stackoverflow.com/users/1384297/andy-wilkinson'>Andy Wilkinson</a> points out <code>com.vaadin.external.google:android-json</code> is no longer used by the processor)</p> "
  },
  {
    "Id": "30207842",
    "PostTypeId": "1",
    "AcceptedAnswerId": "43822161",
    "CreationDate": "2015-05-13T07:03:50.677",
    "Score": "83",
    "ViewCount": "141092",
    "Body": "<p>I have an external .jar that cannot be imported from public repositories using pom.xml, it's <code>sqljdbc41.jar</code>.</p>  <p>I can run the project locally from my IDE, and everything will work. I referenced the library after downloading it like so:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;     &lt;artifactId&gt;sqljdbc41&lt;/artifactId&gt;     &lt;version&gt;4.1&lt;/version&gt;     &lt;scope&gt;system&lt;/scope&gt;     &lt;systemPath&gt;${basedir}/lib/sqljdbc41.jar&lt;/systemPath&gt; &lt;/dependency&gt; </code></pre>  <p>When I run <code>mvn clean package</code> to create my .jar file and try to run the created .jar, a mistake will pop up, which mentions the SQL Server references are not valid. I then extracted my .jar file and true enough, everything that is referenced in the <code>pom.xml</code> file properly gets downloaded and added, however, my SQL Server does not.</p>  <p>I can, in a very hacky way* just manually add the <code>sqljdbc41.jar</code> to my /lib folder after it's been compiled as a .jar, and it'll work, however that seems highly unoptimal. What would be a better approach?</p>  <hr>  <p>*Opening the .jar file with Winrar, going to the /lib folder, manually selecting my <code>sqljdbc41.jar</code> file, then make sure to select the No Compression option bottom left where Winrar gives you compression options, in case you find this by Google and no one answered.</p> ",
    "OwnerUserId": "1224232",
    "LastActivityDate": "2022-11-09T09:39:37.070",
    "Title": "Add external library .jar to Spring boot .jar internal /lib",
    "Tags": "<maven><spring-boot>",
    "AnswerCount": "8",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>you can set 'includeSystemScope' to true. </p>  <pre><code>&lt;plugin&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;   &lt;configuration&gt;     &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;   &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> ",
    "highest_rated_answer": "<p>You could install the sqljdbc41.jar in your local repository :</p>  <pre><code>mvn install:install-file -Dfile=path/to/sqljdbc41.jar -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc41 -Dversion=4.1 -Dpackaging=jar </code></pre>  <p>And then declare the dependency as a standard dependency :</p>  <pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.microsoft.sqlserver&lt;/groupId&gt;    &lt;artifactId&gt;sqljdbc41&lt;/artifactId&gt;    &lt;version&gt;4.1&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>If you use a remote artifact repository (nexus, archiva...) you also need to deploy the artifact on this repository. You can find more here : <a href='https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html'>https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html</a></p> "
  },
  {
    "Id": "37708145",
    "PostTypeId": "1",
    "CreationDate": "2016-06-08T16:33:42.023",
    "Score": "83",
    "ViewCount": "105240",
    "Body": "<p>I want to have <strong>Liquibase</strong> configured with my <strong>Spring Boot</strong> application, so I added dependencies to <code>pom.xml</code> and set the path to <code>master.xml</code> in <code>application.properties</code>. This works fine and <strong>Spring Boot</strong> runs <strong>Liquibase</strong> at startup. The problem is that now I want to run <strong>Liquibase</strong> manually, not at startup of application. Should I completely disable auto-configuration for <strong>Liquibase</strong> or can I use it and only disable running evaluations at startup?</p> ",
    "OwnerUserId": "2205123",
    "LastEditorUserId": "9061008",
    "LastEditDate": "2021-09-10T19:47:35.577",
    "LastActivityDate": "2024-01-18T22:11:48.987",
    "Title": "Spring boot - disable Liquibase at startup",
    "Tags": "<java><spring-boot><maven><liquibase>",
    "AnswerCount": "10",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The relevant property name has changed between Spring versions:</p>  <ul> <li><p>For <strong>Spring 4.x.x</strong>: the <code>liquibase.enabled=false</code> application property disables Liquibase.</p></li> <li><p>For <strong>Spring 5.x.x</strong>: the <code>spring.liquibase.enabled=false</code> application property disables Liquibase.</p></li> </ul>  <hr>  <p>P.S. And for Flyway: </p>  <ul> <li><p><strong>Spring 4.x.x</strong>: <code>flyway.enabled=false</code></p></li> <li><p><strong>Spring 5.x.x</strong>: <code>spring.flyway.enabled=false</code></p></li> </ul> "
  },
  {
    "Id": "36217949",
    "PostTypeId": "1",
    "AcceptedAnswerId": "36218096",
    "CreationDate": "2016-03-25T10:12:27.340",
    "Score": "82",
    "ViewCount": "151933",
    "Body": "<p>Usually I'm running my Spring Boot application with command:</p> <pre><code>mvn spring-boot:run -Drun.arguments=--server.port=9090 \\    -Dpath.to.config.dir=/var/data/my/config/dir </code></pre> <p>I want to set custom port to debug, so I can connect from eclipse. When I add arguments from example <a href='https://docs.spring.io/spring-boot/docs/1.1.2.RELEASE/maven-plugin/examples/run-debug.html' rel='noreferrer'>Spring Boot Maven Plugin</a></p> <pre><code>mvn spring-boot:run -Drun.arguments=--server.port=9090 \\    -Dpath.to.config.dir=/var/data/my/config/dir \\    -Drun.jvmArguments=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8787&quot; </code></pre> <p>it works but other arguments like <code>server.port</code> or <code>path.to.config.dir</code> are no longer recognized and I get exception like:</p> <pre><code>org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [com.my.app.Controller]; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'path.to.config.dir' in string value file:///${path.to.config.dir}/some.properties&quot; </code></pre> <p><strong>Question</strong>: How I can run with all arguments?</p> ",
    "OwnerUserId": "1333931",
    "LastEditorUserId": "3665178",
    "LastEditDate": "2023-07-16T17:23:56.617",
    "LastActivityDate": "2024-02-24T18:14:00.463",
    "Title": "Maven spring boot run debug with arguments",
    "Tags": "<java><spring><maven><spring-boot><maven-3>",
    "AnswerCount": "6",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The behavior and the change you notice is happening because you started using the <a href='http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/maven-plugin/run-mojo.html#jvmArguments' rel='noreferrer'><code>jvmArguments</code></a> option:</p> <blockquote> <p>JVM arguments that should be associated with the forked process used to run the application. On command line, make sure to wrap multiple values between quotes.</p> </blockquote> <p>By default, when using it, the Spring Boot Maven plugin will also fork its execution, as described by the <a href='http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/maven-plugin/run-mojo.html#fork' rel='noreferrer'><code>fork</code></a> option:</p> <blockquote> <p>Flag to indicate if the run processes should be forked. By default process forking is only used if an agent or <code>jvmArguments</code> are specified.</p> </blockquote> <p>Hence, the usage of <code>jvmArguments</code> also activated the fork mode of the plugin execution. By forking, you are actually not picking up the others <code>-D</code> arguments passed from command line.</p> <p><strong>Solution</strong>: if you want to use the <code>jvmArguments</code>, then pass all of the required arguments to it.</p> <pre><code>mvn spring-boot:run -Drun.jvmArguments=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8787 -Dserver.port=9090 -Dpath.to.config.dir=/var/data/my/config/dir&quot; </code></pre> <p><strong>-- Edit 22/09/2020</strong> Check also the other answer from @Stephane to complent this answer (prefix of parameters)</p> ",
    "highest_rated_answer": "<p>The parameter name has to be prefixed with <code>spring-boot.</code> as in <code>-Dspring-boot.run.jvmArgument</code></p> <p>The <em>Spring Boot Reference Documentation</em>, in the <a href='https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#run-example-debug' rel='noreferrer'>Debug the Application</a> section, provided me the solution as I'm running <code>Spring Boot 2.0.3</code></p> <pre><code>mvn spring-boot:run -Dspring-boot.run.jvmArguments=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot; </code></pre> "
  },
  {
    "Id": "25071267",
    "PostTypeId": "1",
    "AcceptedAnswerId": "25074555",
    "CreationDate": "2014-08-01T00:50:25.703",
    "Score": "8",
    "ViewCount": "12203",
    "Body": "<p>I am struggling to get a multi-module Spring Boot Maven project setup correctly.  Are there any example projects that I can reference?  Currently I have my project structured like this.</p>  <p><strong>Data Module:</strong> Basically my data layer.  Is contains my POJOs and my database repo interfaces (PagingAndSortingRepository).  This module will be a dependency of the other modules in the project.  Currently I have placed a Config class in the module that looks like this </p>  <pre><code>public class Config {    @Configuration   @Profile('cloud')   static class CloudConfiguration extends AbstractCloudConfig {     @Bean     public DataSource dataSource() {       return connectionFactory().dataSource('session-questions-sql', new DataSourceConfig(new PoolConfig(4, 4), new ConnectionConfig('')));     }    }     @Configuration   @Profile('default')   static class LocalConfiguration {   } } </code></pre>  <p>I figured this configuration would be common between the other two modules so it belonged in the data module.</p>  <p><strong>Text Module:</strong> The is a very simple module, it contains a single REST API controller that will be called when a text message is sent to a certain phone number.  It stores the text message in the DB and uses one of the repo interfaces from the cdata module to do so.  This module is being built as an executable jar file and contains a class which implements EmbeddedServletContainerCustomizer.</p>  <pre><code>@Configuration @ComponentScan @EnableAutoConfiguration @EnableJpaRepositories public class App implements EmbeddedServletContainerCustomizer {    public static void main(String[] args) throws Exception {       SpringApplication.run(App.class, args);   }    @Override   public void customize(ConfigurableEmbeddedServletContainer container) {     //Enabled UTF-8 as the default character encoding for static HTML resources.     //If you would like to disable this comment out the 3 lines below or change     //the encoding to whatever you would like.     MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);     mappings.add('html', 'text/html;charset=utf-8');     container.setMimeMappings(mappings );   } } </code></pre>  <p>When I run the jar I get errors saying that rest controller class cannot autowire beans from my data module.  I saw some posts saying that you should add the package name to the @ComponentScan annotation.  For example</p>  <p>@ComponentScan('com.example.data')</p>  <p>Doing this will let the embedded tomcat server start, but I think adding that package alone causes Spring to not find my REST controller in my text module because I am getting 404s when hitting the API.  So I added my text package as well</p>  <p>@ComponentScan({'com.example.data','com.example.text'})</p>  <p>However this brings me back to the same error, Spring cannot find my beans from the data module to autowire to my REST controller.</p>  <pre><code>java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:744) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'twilioController': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.data.controllers.QuestionRepo com.example.questions.text.controller.TwilioController.questionRepo; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.data.controllers.QuestionRepo] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:648)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:909)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:898)     at com.example.text.App.main(App.java:34)     ... 6 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.example.data.controllers.QuestionRepo com.example.text.controller.TwilioController.questionRepo; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.data.controllers.QuestionRepo] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)     ... 22 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.data.controllers.QuestionRepo] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1103)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:963)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)     ... 24 more </code></pre>  <p>Does anyone have any pointers on how to do this properly?</p> ",
    "OwnerUserId": "1467165",
    "LastActivityDate": "2020-06-11T11:38:57.990",
    "Title": "Spring Boot And Multi-Module Maven Projects",
    "Tags": "<spring><maven><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>The repositories are scanned automatically from the package of your application class (the one annotated with <code>@EnableAutoConfiguration</code>). If that default does not suit you, you can easily fallback on <code>@EnableJpaRepositories</code> with the relevant packages. </p>  <p>I can see <code>com.example.data</code> and <code>com.example.text</code>. I guess you might have a project specific package as <code>com.example</code> is probably too broad. So one way to fix that would be to put your application in <code>com.example</code> (or whatever the root package of your app is).</p>  <p>Check also <a href='http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-use-spring-data-repositories' rel='noreferrer'>the doc</a></p> ",
    "highest_rated_answer": "<p>Verify beans annotation which demands to have a parent annotation in Application class, like @Transactional - parent: @EnableTransactionManagement. </p>  <p>There are some of them that provide AOP and proxy objects and provokes beans injection lifecycle failures if they are wrong or missing. Happened to me with JPA &amp; REST multimodule project (e.g thought was a multi-module component scan failure).</p>  <p><strong>Beans Resolution Hierarchy</strong></p>  <p>@Controller &lt;- @Service &lt;- @Component (Repository/Aggregation Facade) &lt;- @Repository</p> "
  },
  {
    "Id": "25813941",
    "PostTypeId": "1",
    "AcceptedAnswerId": "25815639",
    "CreationDate": "2014-09-12T17:46:57.100",
    "Score": "8",
    "ViewCount": "12585",
    "Body": "<p>I am migrating an existing project to boot. I created a brand new project using start.spring.io and copied over the source code, etc. Everything compiles, but when I do a 'mvn test' it compiles the classes but then only executes the default 'ApplicationTests' (created by start.spring.io).</p>  <p>Here's an excerpt from the maven output:</p>  <pre><code>    [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ pendview ---     [INFO] Using 'UTF-8' encoding to copy filtered resources.     [INFO] skip non existing resourceDirectory C:\\dev\\pendview2\\src\\test\\resources     [INFO]     [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ pendview ---     [INFO] Changes detected - recompiling the module!     [INFO] Compiling 26 source files to C:\\dev\\pendview2\\target\\test-classes     [INFO]     [INFO] --- maven-surefire-plugin:2.15:test (default-test) @ pendview ---     [INFO] ------------------------------------------------------------------------     [INFO] BUILD SUCCESS     [INFO] ------------------------------------------------------------------------ </code></pre>  <p>What's even stranger is that if I pass '-Dtest=TestAuthController' then it does run that specific unit test:</p>  <pre><code>    [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ pendview ---     [INFO] Changes detected - recompiling the module!     [INFO] Compiling 26 source files to C:\\dev\\pendview2\\target\\test-classes     [INFO]     [INFO] --- maven-surefire-plugin:2.15:test (default-test) @ pendview ---     [INFO] Surefire report directory: C:\\dev\\pendview2\\target\\surefire-reports      (skipped output of AuthControllerTest for brevity)      -------------------------------------------------------      T E S T S     -------------------------------------------------------Results :      Tests run: 6, Failures: 0, Errors: 0, Skipped: 0 </code></pre>  <p>What am I doing wrong? Does spring boot setup a surefire config that I'm not conforming to?</p>  <p>Any help would be greatly appreciated! -Trey</p> ",
    "OwnerUserId": "2237271",
    "LastActivityDate": "2020-08-13T12:50:17.880",
    "Title": "Spring Boot - My unit tests are being skipped",
    "Tags": "<java><spring><maven><spring-mvc><spring-boot>",
    "AnswerCount": "4",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Spring Boot configures the Surefire plugin to run all test classes that have a name ending with <code>Test</code> or <code>Tests</code> but not starting with <code>Abstract</code>. You can see this <a href='https://github.com/spring-projects/spring-boot/blob/v1.1.6.RELEASE/spring-boot-starters/spring-boot-starter-parent/pom.xml#L86-L92' rel='noreferrer'>configuration in the <code>spring-boot-starter-parent</code> pom</a>. If your test class is named <code>TestAuthController</code> then it doesn't match this configuration. Renaming it to <code>AuthControllerTest</code> or <code>AuthControllerTests</code> should fix your problem.</p> ",
    "highest_rated_answer": "<p>Seems for me there is some issue with Maven <code>surefire</code> plugin, when it doesn't detect tests, if your test class name doesn't end with <code>Tests</code> suffix. :-)</p> "
  },
  {
    "Id": "26609879",
    "PostTypeId": "1",
    "CreationDate": "2014-10-28T13:40:49.097",
    "Score": "8",
    "ViewCount": "19099",
    "Body": "<p>I tried to add <code>Spring</code> and <code>Maven</code> to one of my existing project, and I find that no matter how I configure, the logging seems to be out of my control.</p>  <p>I tried putting the <code>log4j.properties</code> in <code>src/main/java</code> and <code>src/main/resources</code>(Actually I am not sure where to put). </p>  <p>But when I use <code>Log4j</code> to log, the log displays in the console only, though I configure it into a file. </p>  <p>My <code>log4j.properties</code> is like:</p>  <pre><code>log4j.rootLogger=DEBUG, A1  log4j.appender.A1=org.apache.log4j.FileAppender log4j.appender.A1.encoding=utf-8 log4j.appender.A1.File=E:\\Programminglog\\debug.log  log4j.appender.A1.Threshold = DEBUG  log4j.appender.A1.Append=true log4j.appender.A1.layout=org.apache.log4j.PatternLayout log4j.appender.A1.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n </code></pre>  <p>I am not sure if I miss something or <code>Spring</code> overrides some settings, since I am new to <code>Maven</code> and <code>Spring</code>.</p>  <p>PS: Before I add dependencies of <code>Log4j</code> in <code>pom</code>.xml,no compile errors though I use <code>org.apache.log4j.Logger</code> </p>  <p>This is how my application.java looks like:</p>  <pre><code>@Configuration @EnableAutoConfiguration @ComponentScan({'hello','wodinow.weixin.jaskey'}) public class Application extends WebMvcConfigurerAdapter  {      public static void main(String[] args) {         ApplicationContext ctx = SpringApplication.run(Application.class, args);          System.out.println('Let's inspect the beans provided by Spring Boot:');          String[] beanNames = ctx.getBeanDefinitionNames();         Arrays.sort(beanNames);         for (String beanName : beanNames) {             System.out.println(beanName);         }          LogUtil.info('Application Boots!');// here this line does not show in the file     }      @Bean     public CommandService commandService(){         return CommandService.getInstance();     } } </code></pre>  <p><img src='https://i.stack.imgur.com/KcFiC.jpg' alt='enter image description here'></p> ",
    "OwnerUserId": "2087628",
    "LastEditorUserId": "2087628",
    "LastEditDate": "2014-11-30T13:02:18.453",
    "LastActivityDate": "2023-06-20T17:39:04.890",
    "Title": "Log4j seems not to work in Spring Boot",
    "Tags": "<java><spring><maven><log4j><spring-boot>",
    "AnswerCount": "4",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>If you are using log4j with spring-boot then you have to add dependency with 'exclusions' in your pom.xml </p>  <pre><code> &lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;   &lt;version&gt;1.3.3.RELEASE&lt;/version&gt;   **&lt;exclusions&gt;     &lt;exclusion&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;     &lt;/exclusion&gt;   &lt;/exclusions&gt;** &lt;/dependency&gt;  **&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;   &lt;version&gt;1.2.5.RELEASE&lt;/version&gt; &lt;/dependency&gt;** </code></pre>  <p>Please follow this. It will resolve your problem.</p>  <p><a href='http://www.atechref.com/blog/maven/spring-boot-using-log4j-logging/' rel='noreferrer'>http://www.atechref.com/blog/maven/spring-boot-using-log4j-logging/</a></p> "
  },
  {
    "Id": "27297308",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27298098",
    "CreationDate": "2014-12-04T15:06:59.557",
    "Score": "8",
    "ViewCount": "4120",
    "Body": "<p>Is it possible to use Spring Boots Maven plugin command <code>spring-boot:run</code> when the parent POM of the project is using packaging mode POM because of its children?</p>  <hr>  <p>I have multi module maven project with a 'master' POM that is in it's turn a child of the Spring Boot Parent module. Looking something like this:</p>  <pre><code>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;project&lt;/artifactId&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;     &lt;version&gt;0.1.0&lt;/version&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.2.0.BUILD-SNAPSHOT&lt;/version&gt;         &lt;relativePath/&gt;     &lt;/parent&gt;      &lt;modules&gt;         &lt;module&gt;module1&lt;/module&gt;         &lt;module&gt;module2&lt;/module&gt;         &lt;module&gt;module3&lt;/module&gt;     &lt;/modules&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;start-class&gt;com.example.module1.Application&lt;/start-class&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre>  <p>This is basically our 'master' POM which every child uses as it's parent. Now we want to perform the <code>spring-boot:run</code> command from the working directory this 'master' POM is in. Problem is, this generates a <code>ClassNotFoundException</code> which is odd since module1 (where this <code>Application</code> class is located) is included in the POM and mentioned as a module.</p>  <p>Using a single module maven project and <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> this compiles and runs the Application class so it is not Spring-Boot that is not working right here.</p>  <p>What do I have to change to get this working or is it simply not possible to use the <code>spring-boot-maven-plugin</code> plugin when dealing with multi module Maven projects?</p>  <hr>  <p>Sidenote: My Application class / Module 1 has the other modules as dependencies so keep this in mind when answering the question. Any suggestions on how to improve this are very appreciated. </p> ",
    "OwnerUserId": "2835449",
    "LastActivityDate": "2015-06-12T18:54:14.220",
    "Title": "Spring Boot with POM packaging Agregator",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>It is not possible, as far as I know, because the plugin requires an executable jar to run.</p> <p>The docs for the <a href='http://docs.spring.io/autorepo/docs/spring-boot/1.2.0.BUILD-SNAPSHOT/maven-plugin/run-mojo.html' rel='nofollow noreferrer'>spring-boot plugin</a> goal &quot;run&quot; says:</p> <blockquote> <p>Description</p> <p>Run an executable archive application</p> </blockquote> <p>Packaging pom is will not create an executable. It will only generate a pom.xml.</p> <p>Try to run mvn install and look at the artifact deployed to your local repository:</p> <p>I just did for a module I have with packaging pom:</p> <pre><code>[INFO] Installing C:\\projects\\boot-parent\\pom.xml to  C:\\Users\\...\\repository\\no\\boot-parent\\0.0.1-SNAPSHOT\\boot-parent-0.0.1-SNAPSHOT.pom </code></pre> <p>As you can see the artifact is boot-parent-0.0.1-SNAPSHOT.pom.</p> <br> <p>Try putting the plugin-configuration in the pom for module1 which has the start-class (main-class) and has packaging jar.</p> <p>Edit for your comment:</p> <p>Your comment suggests that you have issues with your client side Maven installation. Have a look at <a href='https://stackoverflow.com/questions/4856307/when-maven-says-resolution-will-not-be-reattempted-until-the-update-interval-of'>this answer</a>. And especially the answer given by @ChristianAchilli.</p> <blockquote> <p>I use to solve this issue by deleting the corresponding failed to download artifact directory in my local repo. Next time I run the maven command the artifact download is triggered again. Therefore I'd say it's a client side setting.</p> </blockquote> <p>Again, hope this helps!</p> <p>Thomas</p> ",
    "highest_rated_answer": "<p>Make one module more where is only your Application inside. If you insert dependencies to your modules you can start your module normal with spring-boot:run or export as jar.</p>  <p>See your parent only as container.</p>  <p>Hope that work for you</p> "
  },
  {
    "Id": "27576629",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27578076",
    "CreationDate": "2014-12-20T03:25:23.913",
    "Score": "8",
    "ViewCount": "12081",
    "Body": "<p>I have a very simple spring boot application that I want to deploy to Jboss EAP. Here is my simple application class: </p>  <pre><code>@SpringBootApplication  public class MayurApplication extends SpringBootServletInitializer{      public static void main(String[] args) {         SpringApplication.run(MayurApplication.class, args);     }      @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(applicationClass);     }      private static Class&lt;MayurApplication&gt; applicationClass = MayurApplication.class; }  @RestController class GreetingController {      @RequestMapping('/hello/{name}')     String hello(@PathVariable String name) {         return 'Hello, ' + name + '!';     } } </code></pre>  <p>and my pom.xml is also very basic. When I run this application on Tomcat, using the embedded Tomcat what ships with spring boot. Everything works like charm in just one click. I can access <code>http://localhost:8080/demo/hello/World</code> and it works too.</p>  <p>Now I tried to make it Jboss EAP compatible war, I disabled the Tomcat by excluding from spring-boot-starter-web, and convert it into a war project. (as suggested by article <a href='http://spring.io/blog/2014/03/07/deploying-spring-boot-applications' rel='nofollow noreferrer'>http://spring.io/blog/2014/03/07/deploying-spring-boot-applications</a>).</p>  <p>I also added:</p>  <pre><code>&lt;dependency&gt;                   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;                   &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;                  &lt;scope&gt;provided&lt;/scope&gt;             &lt;/dependency&gt;, </code></pre>  <p>as it was complaining.</p>  <p>Now after all this, it compiles fine and creates a war too. When I copied this war to jboss deployment, I can see it successfully deployed on console.  But the rest api <code>http://localhost:8080/demo/hello/World</code> just does not work and constantly throws error on browser:</p>  <pre><code>JBWEB000068: message /demo/hello/World JBWEB000069: description JBWEB000124: The requested resource is not available. </code></pre>  <p>What am I doing wrong?</p> ",
    "OwnerUserId": "3521463",
    "LastEditorUserId": "472495",
    "LastEditDate": "2017-09-19T13:13:46.180",
    "LastActivityDate": "2017-09-19T13:13:46.180",
    "Title": "springBoot application on Jboss EAP, servlet context not lodaed",
    "Tags": "<maven-3><spring-boot><jboss-eap-6>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Answer is here :  <a href='https://stackoverflow.com/questions/20666513/spring-java-config-vs-jboss-7/21314659#comment32870531_21314659'>Spring Java Config vs Jboss 7</a> </p>  <p>Apparently '/' does not work on Jboss EAP 6.3 , but '/*' works. and they seems to have fixed it with wildfly 8</p> ",
    "highest_rated_answer": "<p>Found this in <a href='http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix' rel='noreferrer'>Spring Boot Reference Guide</a>, add the below line in application.properties file</p>  <pre><code>server.servlet-path=/* </code></pre>  <p>tested this in jBoss EAP 6.2 and worked fine.</p> "
  },
  {
    "Id": "34850125",
    "PostTypeId": "1",
    "AcceptedAnswerId": "34863406",
    "CreationDate": "2016-01-18T08:26:06.210",
    "Score": "8",
    "ViewCount": "12409",
    "Body": "<p>Should not maven-checkstyle-plugin provides default config xml file? Why got this error when running maven? </p>  <p>I can't google some solution for this issue , please help me get it, Thanks!</p>  <p>The error message as below:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check   (checkstyle-validation) on project explorer-parent: Failed during   checkstyle execution: Unable to find suppressions file at location:   src/checkstyle/checkstyle-suppressions.xml: Could not find resource   'src/checkstyle/checkstyle-suppressions.xml'. -> [Help 1]</p> </blockquote>  <hr>  <blockquote>   <p>attached pom file:   <a href='https://i.stack.imgur.com/49dED.png' rel='noreferrer'>parent pom</a>   <a href='https://i.stack.imgur.com/kXMBS.png' rel='noreferrer'>module pom</a></p> </blockquote> ",
    "OwnerUserId": "5412341",
    "LastEditorUserId": "641627",
    "LastEditDate": "2017-09-05T23:20:04.897",
    "LastActivityDate": "2017-09-05T23:20:04.897",
    "Title": "Got 'Could not find resource 'src/checkstyle/checkstyle-suppressions.xml' when using spring boot 1.3.1",
    "Tags": "<maven><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>You are using the wrong parent in your <code>pom.xml file</code>. You are using <code>spring-boot-parent</code> but it should be <code>spring-boot-starter-parent</code>.</p>  <p>Update the <code>pom.xml</code> of <code>explorer-parent</code> so that its <code>&lt;parent&gt;</code> looks like this:</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.3.1.RELEASE&lt;/version&gt; &lt;/parent&gt; </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "35966441",
    "PostTypeId": "1",
    "CreationDate": "2016-03-13T04:23:47.963",
    "Score": "8",
    "ViewCount": "30686",
    "Body": "<p>Basically, access '/' and '/a' are working on browser. Acess '/testme' is not working. Error is</p>  <blockquote>   <p>2016-03-13 15:04:37.709 ERROR 1933 --- [io-8080-exec-57]   o.s.boot.context.web.ErrorPageFilter     : Forwarding to error page   from request [/testmenull] due to exception [Circular view path   [testme.html]: would dispatch back to the current handler URL   [/XXXX/testme.html] again. Check your ViewResolver setup! (Hint: This   may be the result of an unspecified view, due to default view name   generation.)]</p> </blockquote>  <p>I do a string grep, but cannot found 'ViewResolver'. I have no idea why '/' and '/a' work. Any idea?</p>  <p>See image for more: <a href='https://i.stack.imgur.com/qTFmh.png' rel='noreferrer'><img src='https://i.stack.imgur.com/qTFmh.png' alt='enter image description here'></a></p>  <p>All xml files: <a href='https://i.stack.imgur.com/st4Lk.png' rel='noreferrer'><img src='https://i.stack.imgur.com/st4Lk.png' alt='enter image description here'></a></p>  <p>pom.xml</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.xxxxx&lt;/groupId&gt;   &lt;artifactId&gt;Monitor&lt;/artifactId&gt;   &lt;packaging&gt;war&lt;/packaging&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;!--&lt;name&gt;Monitor&lt;/name&gt;--&gt;   &lt;url&gt;http://maven.apache.org&lt;/url&gt;    &lt;parent&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;       &lt;version&gt;1.1.9.RELEASE&lt;/version&gt;   &lt;/parent&gt;    &lt;dependencies&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;javax.websocket&lt;/groupId&gt;           &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;           &lt;version&gt;1.1&lt;/version&gt;           &lt;scope&gt;provided&lt;/scope&gt; &lt;!--for web socket--&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;mysql&lt;/groupId&gt;           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;           &lt;version&gt;5.1.31&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.hateoas&lt;/groupId&gt;           &lt;artifactId&gt;spring-hateoas&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;           &lt;artifactId&gt;gson&lt;/artifactId&gt;           &lt;version&gt;2.3&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;           &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;junit&lt;/groupId&gt;         &lt;artifactId&gt;junit&lt;/artifactId&gt;         &lt;version&gt;3.8.1&lt;/version&gt;         &lt;scope&gt;test&lt;/scope&gt;       &lt;/dependency&gt;   &lt;/dependencies&gt;    &lt;build&gt;       &lt;finalName&gt;Monitor&lt;/finalName&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;               &lt;version&gt;3.1&lt;/version&gt;               &lt;configuration&gt;                   &lt;compilerVersion&gt;1.7&lt;/compilerVersion&gt;                   &lt;source&gt;1.7&lt;/source&gt;                   &lt;target&gt;1.7&lt;/target&gt;               &lt;/configuration&gt;           &lt;/plugin&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;           &lt;/plugin&gt;           &lt;!--&lt;plugin&gt;--&gt;               &lt;!--&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;--&gt;               &lt;!--&lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;--&gt;               &lt;!--&lt;executions&gt;--&gt;                   &lt;!--&lt;execution&gt;--&gt;                       &lt;!--&lt;id&gt;attach-sources&lt;/id&gt;--&gt;                       &lt;!--&lt;goals&gt;--&gt;                           &lt;!--&lt;goal&gt;jar&lt;/goal&gt;--&gt;                       &lt;!--&lt;/goals&gt;--&gt;                   &lt;!--&lt;/execution&gt;--&gt;               &lt;!--&lt;/executions&gt;--&gt;           &lt;!--&lt;/plugin&gt;--&gt;       &lt;/plugins&gt;       &lt;resources&gt;           &lt;resource&gt;               &lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt;           &lt;/resource&gt;           &lt;resource&gt;               &lt;directory&gt;${basedir}/src/main/java&lt;/directory&gt;           &lt;/resource&gt;       &lt;/resources&gt;   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>web.xml</p>  <pre><code>&lt;!DOCTYPE web-app PUBLIC  '-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN'  'http://java.sun.com/dtd/web-app_2_3.dtd' &gt;  &lt;web-app&gt;   &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt; &lt;/web-app&gt; </code></pre> ",
    "OwnerUserId": "350878",
    "LastEditorUserId": "5702727",
    "LastEditDate": "2016-03-13T12:03:57.110",
    "LastActivityDate": "2022-07-01T14:43:35.710",
    "Title": "Circular view path exception with Spring framework",
    "Tags": "<java><eclipse><maven><spring-mvc><spring-boot>",
    "AnswerCount": "6",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>the value of <code>@RequestMapping</code> is &quot;testme&quot; and the value of return is also &quot;testme&quot; so that when you access &quot;/testme&quot;, the web will redirect to &quot;/testme&quot; again. This will lead to endless redirection to &quot;/testme&quot;.</p> "
  },
  {
    "Id": "38532683",
    "PostTypeId": "1",
    "CreationDate": "2016-07-22T17:58:08.450",
    "Score": "8",
    "ViewCount": "11896",
    "Body": "<p>I am facing below issue while I try to run my Spring Cloud Config Client:</p>  <pre><code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'DATABASE_NAME' in string value '${DATABASE_NAME}'     at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:174)     at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)     at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:204 </code></pre>  <p>My dependencies in <strong>POM.xml</strong> are as below:</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.3.6.RELEASE&lt;/version&gt;     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;dependencyManagement&gt;     &lt;dependencies&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-config&lt;/artifactId&gt;             &lt;version&gt;1.1.1.RELEASE&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;             &lt;version&gt;Brixton.SR3&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;dependencies&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;         &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;  &lt;/dependencies&gt; </code></pre>  <p>The <strong>bootstrap.yml</strong></p>  <pre><code>spring: application: name: my-config-client cloud: services:   registrationMethod: route config:   enabled: true   uri: http://localhost:${config.port:8888} </code></pre>  <p>The <strong>application.yml</strong> is as below:</p>  <pre><code># HTTP Server server: port: 2222  # Spring properties spring:   profiles:      active: dev  #Disable HTTP Basic Authentication security:   basic:     enabled: false </code></pre>  <p>The class where I am trying to access the property is as below:</p>  <pre><code>@RefreshScope @Component public class MyProperty {      @Value('${DATABASE_NAME}')     private String databaseName;       public String getDatabaseName() {         return databaseName;     } } </code></pre>  <p>My config server is running fine. When I use this url on browser <a href='http://localhost:8888/configserver/dev' rel='noreferrer'>http://localhost:8888/configserver/dev</a>, It gives the below result:</p>  <pre><code>{      'name':'configserver',    'profiles':[         'dev'    ],    'label':'master',    'version':'c991526a93fb776e37e18e138c7485d894d6ea4f',    'propertySources':[         {            'name':'https://onestash.abc.com/scm/kapmol/microservice-config-repo.git/configserver.properties',          'source':{               'DATABASE_NAME':'ABC',             'CONVERT_USERS':'Y',             'LRDS_JNDI_NAME':'jdbc/tds_new'          }       }    ] } </code></pre>  <p>I tried with all the posts who were facing this issue. But, it is not working for me. May be, I am missing some points. If anybody can provide help, it would be great.</p>  <p>Thanks</p> ",
    "OwnerUserId": "4168569",
    "LastActivityDate": "2022-11-29T01:17:55.920",
    "Title": "Spring Cloud Config client not loading the value from config server",
    "Tags": "<maven><spring-boot><spring-cloud-config>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>There are some breaking changes with the new spring cloud module read more: <a href='https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes#breaking-changes' rel='nofollow noreferrer'>here.</a></p> <blockquote> <p>Bootstrap, provided by spring-cloud-commons, is no longer enabled by default. If your project requires it, it can be re-enabled by properties or by a new starter.</p> <ul> <li><p>To re-enable by properties set spring.cloud.bootstrap.enabled=true or spring.config.use-legacy-processing=true. These need to be set as an environment variable, java system property or a command line argument.</p> </li> <li><p>The other option is to include the new spring-cloud-starter-bootstrap</p> </li> </ul> </blockquote> <p>It worked for me by adding these dependencies:</p> <pre><code>&lt;parent&gt;   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;   &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;   &lt;version&gt;2020.0.0&lt;/version&gt;   &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; </code></pre> <pre><code>&lt;dependencyManagement&gt;    &lt;dependencies&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;        &lt;version&gt;${spring-cloud.version}&lt;/version&gt;        &lt;type&gt;pom&lt;/type&gt;        &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;      &lt;/dependencies&gt; &lt;/dependencyManagement&gt; </code></pre> <pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;     &lt;/dependency&gt;        &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;      &lt;/dependency&gt; </code></pre> "
  },
  {
    "Id": "38875379",
    "PostTypeId": "1",
    "AcceptedAnswerId": "38876801",
    "CreationDate": "2016-08-10T13:50:59.810",
    "Score": "8",
    "ViewCount": "3422",
    "Body": "<p>After upgrading from Spring Boot 1.3.7 to 1.4.0 we can no longer start our application as a single jar build with the Spring Boot Maven plugin. Our application is a small REST interface using Jersey and Jetty. We use Maven and our pom file is pretty standard Spring Boot.</p>  <p>We can still run the application using <code>mvn spring-boot:run</code> and from within Eclipse, but when run as a single jar Jersey <code>ResourceFinder</code> complains that it cannot find <code>.jar!/BOOT-INF/classes</code>.</p>  <p>When I unpack the jar the folder <code>BOOT-INF/classes</code> is present and contains the expected classes and resources.</p>  <p>Any help appreciated.</p>  <pre><code>2016-08-10 14:58:31.162 ERROR 16071 --- [           main] o.s.boot.SpringApplication                : Application startup failed  org.springframework.beans.factory.BeanCreationException:  Error creating bean with name 'jerseyConfig' defined in URL [jar:file:/acmesource/acme/acme-core/acme-core-api/target/acme-core-api-0.1 SNAPSHOT.jar!/BOOT-INF/classes!/com/acme/core/api/JerseyConfig.class]: Bean  instantiation via constructor failed; nested exception is  org.springframework.beans.BeanInstantiationException: Failed to instantiate  [com.acme.core.api.JerseyConfig]: Constructor threw exception; nested  exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /acmesource/acme/acme-core/acme-core api/target/acme-core-api-0.1-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory) </code></pre> ",
    "OwnerUserId": "6700462",
    "LastActivityDate": "2017-03-17T08:11:15.620",
    "Title": "SIngle jar startup failed after upgrade from Spring Boot 1.3.7 to 1.4.0",
    "Tags": "<spring-boot><spring-boot-maven-plugin>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>From the <a href='https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.4-Release-Notes#jersey-classpath-scanning-limitations' rel='noreferrer'>Spring Boot 1.4 release notes</a>:</p>  <blockquote>   <p>The change to the layout of executable jars means that a <a href='https://java.net/jira/browse/JERSEY-2085' rel='noreferrer'>limitation in Jersey's classpath scanning</a> now affects executable jar files   as well as executable war files. To work around the problem, classes that you wish to be scanned by Jersey should be packaged in a jar and included as a dependency in <code>BOOT-INF/lib</code>. The Spring Boot launcher should then be <a href='http://docs.spring.io/spring-boot/docs/1.4.x/reference/htmlsingle/#howto-extract-specific-libraries-when-an-executable-jar-runs' rel='noreferrer'>configured to unpack those jars on start up</a> so that Jersey can scan their contents.</p> </blockquote> ",
    "highest_rated_answer": "<p>Just another solution:</p>  <p>Although Jersey cannot scan your classes inside the new version of the fat boot jar, you can achieve the same effect using Spring classpath scanning facilities. This way you can scan a package similarly to <code>ResourceConfig.packages()</code>:</p>  <pre class='lang-java prettyprint-override'><code>ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false); scanner.addIncludeFilter(new AnnotationTypeFilter(Provider.class)); scanner.addIncludeFilter(new AnnotationTypeFilter(Path.class)); config.registerClasses(scanner.findCandidateComponents('your.package.to.scan').stream()             .map(beanDefinition -&gt; ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), config.getClassLoader()))             .collect(Collectors.toSet())); </code></pre>  <p>Note: please have a look at the source of <code>org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener</code>. This is the stock solution and you can see that it does the same: it scans for classes annotated with <code>@Path</code> or <code>@Provider</code> (but doesn't manage to find anything because of the broken scanning mechanism).</p>  <p>By the way the bean based method posted by lanwen may be clearer :) Just add <code>@Provider</code> to that too.</p> "
  },
  {
    "Id": "39245732",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39246493",
    "CreationDate": "2016-08-31T09:27:08.153",
    "Score": "8",
    "ViewCount": "54092",
    "Body": "<p>I am trying to write a simple RESTful service using Spring Boot. However, there is an error message I am not able to solve. I have been researching and it looks like it is a conflict between SpringBoot versions, however I am not sure about how can I get rid of it. </p>  <p>I have this SpringBootApp:</p>  <pre><code>import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  /**  * REST Service application  */ @SpringBootApplication public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } </code></pre>  <p>Associated with this pom.xml: </p>  <pre><code>&lt;?xml version='1.0'?&gt; &lt;project     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'     xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.websystique.springmvc&lt;/groupId&gt;     &lt;artifactId&gt;Spring4MVCHelloWorldRestServiceDemo&lt;/artifactId&gt;     &lt;packaging&gt;war&lt;/packaging&gt;     &lt;version&gt;1.0.0&lt;/version&gt;     &lt;name&gt;Spring4MVCHelloWorldRestServiceDemo Maven Webapp&lt;/name&gt;      &lt;properties&gt;         &lt;springframework.version&gt;4.3.0.RELEASE&lt;/springframework.version&gt;         &lt;jackson.library&gt;2.7.5&lt;/jackson.library&gt;         &lt;spring.batch.version&gt;2.1.9.RELEASE&lt;/spring.batch.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-core&lt;/artifactId&gt;             &lt;version&gt;${springframework.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;             &lt;version&gt;${springframework.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;             &lt;version&gt;${springframework.version}&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;version&gt;4.11&lt;/version&gt; &lt;!-- Or whatever JUnit you're using. --&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;javax.servlet&lt;/groupId&gt;             &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;             &lt;version&gt;3.1.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;             &lt;version&gt;${jackson.library}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;             &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;             &lt;version&gt;${jackson.library}&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.batch&lt;/groupId&gt;             &lt;artifactId&gt;spring-batch-core&lt;/artifactId&gt;             &lt;version&gt;${spring.batch.version}&lt;/version&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework&lt;/groupId&gt;                     &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;                 &lt;/exclusion&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework&lt;/groupId&gt;                     &lt;artifactId&gt;spring-core&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;       &lt;/dependencies&gt;       &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                     &lt;version&gt;3.2&lt;/version&gt;                     &lt;configuration&gt;                         &lt;source&gt;1.7&lt;/source&gt;                         &lt;target&gt;1.7&lt;/target&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                     &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;                     &lt;version&gt;2.4&lt;/version&gt;                     &lt;configuration&gt;                         &lt;warSourceDirectory&gt;src/main/webapp&lt;/warSourceDirectory&gt;                         &lt;warName&gt;Spring4MVCHelloWorldRestServiceDemo&lt;/warName&gt;                         &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;          &lt;finalName&gt;Spring4MVCHelloWorldRestServiceDemo&lt;/finalName&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>Looks fine for me, but I am getting this error:</p>  <pre><code>Exception in thread 'main' java.lang.NoClassDefFoundError: org/springframework/core/env/ConfigurableEnvironment     at com.application.Application.main(Application.java:13) Caused by: java.lang.ClassNotFoundException: org.springframework.core.env.ConfigurableEnvironment     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 1 more </code></pre> ",
    "OwnerUserId": "4240291",
    "LastActivityDate": "2021-09-04T05:52:05.733",
    "Title": "java.lang.NoClassDefFoundError: org/springframework/core/env/ConfigurableEnvironment",
    "Tags": "<java><eclipse><spring><maven><spring-boot>",
    "AnswerCount": "8",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p><strong>Recommended Approach</strong></p>  <ol> <li>Go to <a href='https://start.spring.io/' rel='noreferrer'>Spring boot Initialzr</a> site and select web stack as a dependency as shown in below <a href='https://i.stack.imgur.com/1BvSK.png' rel='noreferrer'><img src='https://i.stack.imgur.com/1BvSK.png' alt='figure'></a>.</li> <li>As Spring Boot uses the concept of <strong>Opinionated dependencies and Bill of Materials</strong>, It will automatically pull the other dependencies and resolve your classNotFoundException issue. And in your case it misses out the Spring-core-4.2.4.RELEASE.jar dependency.</li> <li><p>Execute the Maven Goal as <strong>clean install spring-boot:run -e</strong> and you can find your maven dependencies in your IDE and below given is a sample POM file.</p>  <pre><code>  &lt;?xml version='1.0' encoding='UTF-8'?&gt;  &lt;project xmlns='http://maven.apache.org/POM/4.0.0'              xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0     http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.example&lt;/groupId&gt;   &lt;artifactId&gt;demo&lt;/artifactId&gt;  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  &lt;packaging&gt;war&lt;/packaging&gt;       &lt;name&gt;demo&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;       &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;      &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;      &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;      &lt;properties&gt;       &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-       8&lt;/project.reporting.outputEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;   &lt;dependencies&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;      &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;              &lt;scope&gt;provided&lt;/scope&gt;       &lt;/dependency&gt;     &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;      &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;       &lt; /dependency&gt;     &lt;/dependencies&gt;    &lt;build&gt;     &lt;finalName&gt;demo&lt;/finalName&gt;        &lt;plugins&gt;          &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;          &lt;/plugin&gt;       &lt;/plugins&gt;     &lt;/build&gt; </code></pre></li> </ol>  <p></p> ",
    "highest_rated_answer": "<p>Spring boot is running - </p>  <pre><code>&lt;spring.version&gt;4.3.2.RELEASE&lt;/spring.version&gt; </code></pre>  <p>For -</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;     &lt;/dependency&gt; </code></pre>  <p>While you are importing -</p>  <pre><code>    &lt;springframework.version&gt;4.3.0.RELEASE&lt;/springframework.version&gt; </code></pre>  <p>You can confirm on the master pom -</p>  <p><a href='https://github.com/spring-projects/spring-boot/blob/v1.4.0.RELEASE/spring-boot-dependencies/pom.xml' rel='nofollow'>https://github.com/spring-projects/spring-boot/blob/v1.4.0.RELEASE/spring-boot-dependencies/pom.xml</a></p>  <p>Can you update the spring version in your pom? Or deal with managing maven dependencies</p> "
  },
  {
    "Id": "41912757",
    "PostTypeId": "1",
    "CreationDate": "2017-01-28T17:35:53.063",
    "Score": "8",
    "ViewCount": "3340",
    "Body": "<p>I am using test annotation introduced in spring-boot 1.4.3 for my integration tests</p>  <pre><code>@RunWith(SpringRunner.class) @SpringBootTest public class MyServiceIT { } </code></pre>  <p>According to <a href='https://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#testcontext-ctx-management-caching' rel='noreferrer'>documentation</a>, test context is cached and reused to speed up integration tests.  This behavior is what I want since it takes significant amount of time to initialize application context. My failsafe plugin is configured with </p>  <pre><code>&lt;forkCount&gt;1&lt;/forkCount&gt; &lt;reuseForks&gt;true&lt;/reuseForks&gt; </code></pre>  <p>to allow integration tests to run in the same process to take advantage of application context caching.</p>  <p>Recently, I wrote a integration test used @MockBean annotation to mock behavior for some beans.  </p>  <pre><code>@RunWith(SpringRunner.class) @SpringBootTest public class AnotherServiceIT {   @MockBean   SomeService service1 } </code></pre>  <p>While the test runs fine on it's own, when running through maven verify, multiple integration tests fails with the error message </p>  <blockquote>   <p>javax.naming.NamingException: Another resource already exists with   name dataSource - pick a different name</p> </blockquote>  <p>If I skip this particular test with JUnit @Ignore annotation, everything goes back to normal. </p>  <p>This behavior seems to indicate that using @MockBean changes the caching behavior, and each test attempts to create its own datasource.  I should also mention that I am using an <strong>AtomikosDataSourceBean</strong> created through <strong>XADataSourceAutoConfiguration</strong>.</p>  <p>How can I overcome this issue so my integration test can still use cached context and use <code>@MockBean</code> at the same time?</p> ",
    "OwnerUserId": "603588",
    "LastEditorUserId": "603588",
    "LastEditDate": "2017-02-02T17:44:00.393",
    "LastActivityDate": "2017-02-08T16:59:14.037",
    "Title": "spring integration test fail to load context 'Another resource already exists with name dataSource'",
    "Tags": "<maven><spring-boot><jta><spring-test><atomikos>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Hmm, does SomeService relate to your Datasource in any way?</p>  <p>Because your context is cached and @MockBean does the following:</p>  <blockquote>   <p>used to add mocks to a Spring ApplicationContext ... Any existing single bean of the same type defined in the context will be replaced by the mock,</p> </blockquote>  <p>and</p>  <blockquote>   <p>If there is more than one bean of the requested type, qualifier metadata must be specified at field level:</p> </blockquote>  <pre><code> @RunWith(SpringRunner.class)  public class ExampleTests {   @MockBean  @Qualifier('example')  private ExampleService service; </code></pre>  <p><strong>Edit:</strong></p>  <p>So if your SomeService is an implementation of a DataSource try adding a Qualifier.  If SomeService has a DataSource in it, and you need to access some methods in it, you could try to use @Mock and specify the any objects that need to be returned either through their own mock or autowire.</p>  <pre><code>@Mock SomeService someService;  @Mock SomeDependency mockDependency;  @Autowired OtherDependency realDependency;  @Before public void setUp() {     MockitoAnnotations.initMocks(this);     doReturn(mockDependency).when(someService).getSomeDependency();     doReturn(realDependency).when(someService).getOtherDependency(); } </code></pre> "
  },
  {
    "Id": "42194680",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42196324",
    "CreationDate": "2017-02-12T23:52:43.367",
    "Score": "8",
    "ViewCount": "20682",
    "Body": "<p>I have a spring boot application which works fine when run through intellij. But when I run it from the jar I am getting the below exception.</p>  <pre><code>        2017-02-13 05:18:28.596  WARN 8581 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat     2017-02-13 05:18:28.606 ERROR 8581 --- [           main] o.s.boot.SpringApplication               : Application startup failed      org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:536) ~[spring-context-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at com.testservice.challenge.testserviceServiceApplication.main(testserviceServiceApplication.java:13) [classes!/:0.0.1-SNAPSHOT]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111]         at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [bus-route-service-0.0.1-SNAPSHOT-exec.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [bus-route-service-0.0.1-SNAPSHOT-exec.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [bus-route-service-0.0.1-SNAPSHOT-exec.jar:0.0.1-SNAPSHOT]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [bus-route-service-0.0.1-SNAPSHOT-exec.jar:0.0.1-SNAPSHOT]     Caused by: org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:117) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.&lt;init&gt;(TomcatEmbeddedServletContainer.java:84) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getTomcatEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:537) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:179) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:164) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         ... 16 common frames omitted     Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'applicationConfig.JerseyConfig' defined in URL [jar:file:/home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes!/com/testservice/challenge/ApplicationConfig$JerseyConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.testservice.challenge.ApplicationConfig$JerseyConfig]: Constructor threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes (No such file or directory)         at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:234) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:215) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:91) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:79) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:241) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.selfInitialize(EmbeddedWebApplicationContext.java:228) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.access$000(EmbeddedWebApplicationContext.java:89) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:213) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:55) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5178) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11]         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11]         at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11]         at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11]         at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_111]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_111]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_111]         at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_111]     Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'applicationConfig.JerseyConfig' defined in URL [jar:file:/home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes!/com/testservice/challenge/ApplicationConfig$JerseyConfig.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.testservice.challenge.ApplicationConfig$JerseyConfig]: Constructor threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes (No such file or directory)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1155) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1099) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         ... 35 common frames omitted     Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.testservice.challenge.ApplicationConfig$JerseyConfig]: Constructor threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes (No such file or directory)         at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:154) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1147) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         ... 47 common frames omitted     Caused by: org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes (No such file or directory)         at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:89) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:65) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.addResourceFinder(PackageNamesScanner.java:282) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.init(PackageNamesScanner.java:198) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:154) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:110) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:680) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:660) ~[jersey-server-2.25.1.jar!/:na]         at com.testservice.challenge.ApplicationConfig$JerseyConfig.&lt;init&gt;(ApplicationConfig.java:24) ~[classes!/:0.0.1-SNAPSHOT]         at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_111]         at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_111]         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_111]         at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_111]         at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:142) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         ... 49 common frames omitted     Caused by: java.io.FileNotFoundException: /home/mayooran/Projects/bus-route-challenge/target/bus-route-service-0.0.1-SNAPSHOT-exec.jar!/BOOT-INF/classes (No such file or directory)         at java.io.FileInputStream.open0(Native Method) ~[na:1.8.0_111]         at java.io.FileInputStream.open(FileInputStream.java:195) ~[na:1.8.0_111]         at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138) ~[na:1.8.0_111]         at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:93) ~[na:1.8.0_111]         at sun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:90) ~[na:1.8.0_111]         at sun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:188) ~[na:1.8.0_111]         at java.net.URL.openStream(URL.java:1045) ~[na:1.8.0_111]         at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.getInputStream(JarZipSchemeResourceFinderFactory.java:177) ~[jersey-server-2.25.1.jar!/:na]         at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:87) ~[jersey-server-2.25.1.jar!/:na]         ... 62 common frames omitted </code></pre>  <p>Below is my pom file.</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.testservice.challenge&lt;/groupId&gt;     &lt;artifactId&gt;test-service&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;test-service&lt;/name&gt;     &lt;description&gt;&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;         &lt;relativePath/&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;         &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;         &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jersey&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-reflect&lt;/artifactId&gt;             &lt;version&gt;1.6.4&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito&lt;/artifactId&gt;             &lt;version&gt;1.6.4&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;1.6.4&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;version&gt;4.11&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.mockito&lt;/groupId&gt;             &lt;artifactId&gt;mockito-all&lt;/artifactId&gt;             &lt;version&gt;1.10.19&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-context&lt;/artifactId&gt;             &lt;version&gt;1.1.7.RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                  &lt;configuration&gt;                     &lt;classifier&gt;exec&lt;/classifier&gt;                     &lt;mainClass&gt;com.testservice.challenge.TestServiceApplication&lt;/mainClass&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;                 &lt;dependencies&gt;                     &lt;dependency&gt;                         &lt;groupId&gt;org.springframework&lt;/groupId&gt;                         &lt;artifactId&gt;springloaded&lt;/artifactId&gt;                         &lt;version&gt;1.2.6.RELEASE&lt;/version&gt;                     &lt;/dependency&gt;                 &lt;/dependencies&gt;             &lt;/plugin&gt;          &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre>  <p>I tried to create the jar by both </p>  <pre><code>mvn clean package  </code></pre>  <p>and</p>  <pre><code>mvn clean install spring-boot:repackage </code></pre>  <p>Then I run the jar by java -jar -DParamName='someParam'</p>  <p>What am I doing wrong here? I am new to Spring. Any help would be much appreciated.</p> ",
    "OwnerUserId": "2625772",
    "LastEditorUserId": "4501804",
    "LastEditDate": "2017-02-13T03:31:36.193",
    "LastActivityDate": "2021-02-04T10:45:23.833",
    "Title": "Spring boot application won't run when trying to run from the jar file",
    "Tags": "<java><spring><maven><spring-boot><jar>",
    "AnswerCount": "4",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>You have <code>spring-boot-starter-jersey</code> in your pom.xml. The error you are getting is <code>/BOOT-INF/classes (No such file or directory)</code>. This is the issue with jersey which doesn't work well with spring-boot fat jar. Please refer <a href='https://github.com/spring-projects/spring-boot/issues/6598' rel='noreferrer'>this</a> and <a href='https://github.com/spring-projects/spring-boot/issues/1468' rel='noreferrer'>this</a> for more details. For work around you have to package the classes that should be scanned by jersey in a jar and extract the jar as given at Spring-Boot documentation <a href='http://docs.spring.io/spring-boot/docs/1.5.x/reference/htmlsingle/#howto-extract-specific-libraries-when-an-executable-jar-runs' rel='noreferrer'>Extract specific libraries when an executable jar runs</a></p> ",
    "highest_rated_answer": "<p>@abaghel answer has the correct explanation, and arguably the best solution as well.</p>  <p>Since Jersey's scanning step is what's failing, another way to work around it is to explicitly register each resource. I replaced this:</p>  <pre><code>@Component public JerseyConfig() extends ResourceConfig {     packages('com.mydomain.resource'); } </code></pre>  <p>with</p>  <pre><code>@Component public JerseyConfig() extends ResourceConfig {     register(TimeResource.class);     register(SpaceResource.class);     // etc. } </code></pre>  <p>(Tested with Spring Boot 2.1.3)</p>  <p>My code has about 25 Jersey of these resource classes to register. This highlights the downside to this approach, namely that the explicit registration has to be maintained. New resource classes won't be found automatically, and it can be a confusing error to run into. </p>  <p>On the other hand, you don't need to split your project up. So explicit registration might occasionally be good enough.</p> "
  },
  {
    "Id": "44177266",
    "PostTypeId": "1",
    "CreationDate": "2017-05-25T09:42:41.810",
    "Score": "8",
    "ViewCount": "103866",
    "Body": "<p>I am creating simple spring boot web application I am using the project generated by spring Initializer</p>  <p>I have set my JDK and maven in the path Also done setting for JAVA_HOME</p>  <p>While running the application getting following error </p>  <p>Non-resolvable parent POM: Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:1.5.3.RELEASE from/to central (<a href='http://repo.maven.apache.org/maven2' rel='noreferrer'>http://repo.maven.apache.org/maven2</a>): This is usually a temporary error during hostname resolution and means that the local server did not receive a response from an authoritative server (repo.maven.apache.org) and 'parent.relativePath' points at no local POM @ line 14, column 10 -> [Help 2]</p>  <p>following is my POM in the project</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'      xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.iot.tme&lt;/groupId&gt; &lt;artifactId&gt;PowerBIDemo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt;  &lt;name&gt;PowerBIDemo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;  &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt;  &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;  &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "4019390",
    "LastEditorUserId": "-1",
    "LastEditDate": "2018-05-29T12:12:46.367",
    "LastActivityDate": "2023-11-07T13:47:14.857",
    "Title": "Non-resolvable parent POM: Could not transfer artifact org.springframework.boot",
    "Tags": "<spring><maven><spring-boot>",
    "AnswerCount": "10",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>try to update maven dependencies by hands <code>mvn dependency:purge-local-repository</code>.</p> "
  },
  {
    "Id": "44253010",
    "PostTypeId": "1",
    "AcceptedAnswerId": "47233723",
    "CreationDate": "2017-05-30T03:36:23.980",
    "Score": "8",
    "ViewCount": "25187",
    "Body": "<p>I have a basic SpringBoot app. using Spring Initializer, embedded Tomcat, Thymeleaf template engine, and package as an executable JAR file. is a multi-module project with Spring Boot, the project will have 3 modules. Here the parent module pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;groupId&gt;com.tdkcloud&lt;/groupId&gt;     &lt;artifactId&gt;tdk-cloud&lt;/artifactId&gt;     &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;      &lt;modules&gt;            &lt;module&gt;tdk-core&lt;/module&gt;         &lt;module&gt;tdk-batch&lt;/module&gt;         &lt;module&gt;tdk-web&lt;/module&gt;     &lt;/modules&gt;       &lt;dependencies&gt;         &lt;!-- Spring Boot dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- Test dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;uk.co.jemos.podam&lt;/groupId&gt;             &lt;artifactId&gt;podam&lt;/artifactId&gt;             &lt;version&gt;7.0.5.RELEASE&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;           &lt;!-- Logging dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;             &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- Email dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- Security dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- Spring data --&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt;         &lt;/dependency&gt;        &lt;/dependencies&gt;  &lt;/project&gt; </code></pre>  <p>Here the module core</p>  <pre><code>&lt;?xml version='1.0'?&gt; &lt;project xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd' xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;         &lt;groupId&gt;com.tdkcloud&lt;/groupId&gt;         &lt;artifactId&gt;tdk-cloud&lt;/artifactId&gt;         &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.tdkcloud.core&lt;/groupId&gt;   &lt;artifactId&gt;tdk-core&lt;/artifactId&gt;    &lt;packaging&gt;jar&lt;/packaging&gt;          &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;   &lt;/properties&gt;    &lt;dependencies&gt;           &lt;!--  Hibernate dependencies --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.hibernate&lt;/groupId&gt;             &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.googlecode.libphonenumber&lt;/groupId&gt;             &lt;artifactId&gt;libphonenumber&lt;/artifactId&gt;             &lt;version&gt;8.4.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;commons-codec&lt;/groupId&gt;             &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;             &lt;!-- &lt;version&gt;1.10&lt;/version&gt; --&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;             &lt;!-- &lt;version&gt;2.9.0.pr3&lt;/version&gt; --&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;             &lt;!-- &lt;version&gt;2.9.0.pr3&lt;/version&gt; --&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;             &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;                &lt;/dependency&gt;          &lt;dependency&gt;       &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;       &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;       &lt;version&gt;1.9.9&lt;/version&gt; &lt;/dependency&gt;       &lt;/dependencies&gt;  &lt;/project&gt; </code></pre>  <p>and here the module web:</p>  <pre><code>&lt;?xml version='1.0'?&gt; &lt;project xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd' xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;         &lt;groupId&gt;com.tdkcloud&lt;/groupId&gt;         &lt;artifactId&gt;tdk-cloud&lt;/artifactId&gt;         &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;    &lt;groupId&gt;com.tdkcloud.web&lt;/groupId&gt;   &lt;artifactId&gt;tdk-web&lt;/artifactId&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;start-class&gt;com.tdkcloud.TdkCloudApplication&lt;/start-class&gt;   &lt;/properties&gt;    &lt;dependencies&gt;          &lt;!-- tdk-core dependencies --&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.tdkcloud.core&lt;/groupId&gt;             &lt;artifactId&gt;tdk-core&lt;/artifactId&gt;             &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;                    &lt;/dependency&gt;           &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;           &lt;!-- Webjars for JQuery and Bootstrap --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.webjars&lt;/groupId&gt;             &lt;artifactId&gt;bootstrap&lt;/artifactId&gt;             &lt;version&gt;3.3.7-1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.webjars&lt;/groupId&gt;             &lt;artifactId&gt;jquery&lt;/artifactId&gt;             &lt;version&gt;3.2.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- Spring Security --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;             &lt;!-- &lt;version&gt;3.0.2.RELEASE&lt;/version&gt; --&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;archive&gt;                         &lt;manifest&gt;                             &lt;mainClass&gt;com.tdkcloud.TdkCloudApplication&lt;/mainClass&gt;                         &lt;/manifest&gt;                     &lt;/archive&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;         &lt;!--  &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  --&gt;   &lt;/project&gt; </code></pre>  <p>from the parent root I generate all the modules using:</p>  <pre><code>mvn clean package </code></pre>  <p>But the problem is that the <code>tdk-web-0.0.2-SNAPSHOT.jar</code> does not contain the <code>tdk-core-0.0.2-SNAPSHOT.jar</code> and then it fails on the startup</p>  <p>Here the maven result:</p>  <pre><code>MacBook-Pro-de-nunito:tdk-cloud calzada$ mvn clean package -Dmaven.test.skip=true [INFO] Scanning for projects... [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO]  [INFO] tdk-cloud [INFO] tdk-core [INFO] tdk-batch [INFO] tdk-web [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-cloud 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-cloud --- [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-core 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.h2database:h2:jar:1.4.194 is missing, no dependency information available [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-core --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-core --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO] Copying 1 resource [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-core --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 52 source files to /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target/classes [INFO]  [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ tdk-core --- [INFO] Not copying test resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ tdk-core --- [INFO] Not compiling test sources [INFO]  [INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ tdk-core --- [INFO] Tests are skipped. [INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-core --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target/tdk-core-0.0.2-SNAPSHOT.jar [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-batch 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-batch --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-batch/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-batch --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-batch/src/main/resources [INFO] skip non existing resourceDirectory /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-batch/src/main/resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-batch --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 1 source file to /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-batch/target/classes [INFO]  [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ tdk-batch --- [INFO] Not copying test resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ tdk-batch --- [INFO] Not compiling test sources [INFO]  [INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ tdk-batch --- [INFO] Tests are skipped. [INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-batch --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-batch/target/tdk-batch-0.0.2-SNAPSHOT.jar [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-web 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-web --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-web --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 0 resource [INFO] Copying 339 resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-web --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 25 source files to /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/classes [INFO]  [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ tdk-web --- [INFO] Not copying test resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ tdk-web --- [INFO] Not compiling test sources [INFO]  [INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ tdk-web --- [INFO] Tests are skipped. [INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  </code></pre>  <p>This is the error I got:</p>  <pre><code>*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration. </code></pre>  <p>I unzipped the jar and there is no class of the core module</p>  <p>adding the proposed code to the module web:</p>  <pre><code>&lt;plugin&gt;                     &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;phase&gt;install&lt;/phase&gt;                             &lt;goals&gt;                                 &lt;goal&gt;copy-dependencies&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                 &lt;/plugin&gt; </code></pre>  <p>I have the next error:  <code>Error resolving template '/tdk/login/login', template might not exist or might not be accessible by any of the configured Template Reso</code> </p>  <p>but the template is there: <a href='https://i.stack.imgur.com/1PrUj.png' rel='noreferrer'><img src='https://i.stack.imgur.com/1PrUj.png' alt='enter image description here'></a></p> ",
    "OwnerUserId": "4450024",
    "LastEditorUserId": "4450024",
    "LastEditDate": "2017-05-30T16:19:30.580",
    "LastActivityDate": "2019-02-08T15:15:57.537",
    "Title": "SpringBoot: running a multi module project",
    "Tags": "<java><spring><maven><spring-mvc><spring-boot>",
    "AnswerCount": "7",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Recently, I have tried to implement one of my project structure/layout as maven multi module project. </p>  <p>I followed following spring guide link, hope this will help you and others <a href='https://spring.io/guides/gs/multi-module/' rel='nofollow noreferrer'>Official Spring multi module project link</a></p> ",
    "highest_rated_answer": "<pre><code>            &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;executable&gt;true&lt;/executable&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt; </code></pre>  <p>I suggest this for creating a executable Jar.</p> "
  },
  {
    "Id": "44485589",
    "PostTypeId": "1",
    "CreationDate": "2017-06-11T15:35:05.433",
    "Score": "8",
    "ViewCount": "27816",
    "Body": "<p>I'm getting <code>SpringBootServletInitializer cannot be resolved to a type</code> as far as I understand this is a dependencies issue.</p>  <p>While I feel comfortable writing Java code, this is my firs Application using <code>maven</code> and <code>spring-boot</code> naturally I'm clueless.</p>  <p><strong>pom.xml:</strong></p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;univers-web&lt;/artifactId&gt;     &lt;packaging&gt;war&lt;/packaging&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.3.6.RELEASE&lt;/version&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.vaadin&lt;/groupId&gt;             &lt;artifactId&gt;vaadin-spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;2.0.1&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;executable&gt;true&lt;/executable&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre>  <p><strong>SpringBootApplication.java:</strong></p>  <pre><code>package com.thebyteguru.launcher;  import org.springframework.boot.SpringApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.context.web.SpringBootServletInitializer;  public class SpringBootApplication extends SpringBootServletInitializer {      protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(SpringBootApplication.class);     }      public static void main(String[] args) {         SpringApplication.run(SpringBootApplication.class, args);     }  } </code></pre>  <p>I can see that the relevant <code>jar</code> files are present in the <code>Maven Dependencies</code> folder, and while <code>import</code>'ing the needed <code>class</code>'es I noticed that the <code>package</code>'es are there but they are 'empty'(meaning intellisense finds the packages but not the classes inside them).</p>  <p><strong>What am I missing?</strong></p> ",
    "OwnerUserId": "2466646",
    "LastActivityDate": "2018-12-06T23:53:57.817",
    "Title": "Dependencies issue 'SpringBootServletInitializer cannot be resolved to a type'",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "4",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I had the same issue.My solution is </p>  <p>instead of </p>  <pre><code>import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; </code></pre>  <p>use </p>  <pre><code>import org.springframework.boot.web.support.SpringBootServletInitializer; </code></pre>  <p>Also in pom </p>  <pre><code>&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.6.RELEASE&lt;/version&gt; &lt;/parent&gt; </code></pre> "
  },
  {
    "Id": "44662626",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44679126",
    "CreationDate": "2017-06-20T20:41:49.927",
    "Score": "8",
    "ViewCount": "25879",
    "Body": "<p>I am using Netbeans 8.2 to develop Spring applications. This specific app with which I am having trouble is a Spring Boot 1.5.3 app. I have a spring xml file and an application.properties that I keep in /config under the root project directory. </p>  <p>I am passing the spring xml file to my project via the <code>@ImportResource</code> annotation and a value property like <code>@ImportResource(value='${config.xmlfile}')</code>.</p>  <p>When I click the 'Run Project' button in Netbeans my Spring app starts up and it correctly finds the application.properties file in my /config folder. However, any classpath references to other files in that folder are lost. For example, setting the config.xml file to <code>classpath:config/file.xml</code> or <code>classpath:file.xml</code> both fail to find the file but <code>file:config/file.xml</code> works.</p>  <p>Similarly, when running from the command line I have the following as my structure:</p>  <pre><code>app/ |-- bin |   `-- app-run.sh |-- config |   |-- application.properties |   |-- log4j2.xml |   |-- file.xml `-- app-exec.jar </code></pre>  <p>I am using the <code>spring-boot-maven-plugin</code> to make the jar as follows:</p>  <pre><code>&lt;plugin&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;      &lt;version&gt;${spring.boot.version}&lt;/version&gt;      &lt;executions&gt;           &lt;execution&gt;                &lt;goals&gt;                     &lt;goal&gt;repackage&lt;/goal&gt;                &lt;/goals&gt;                &lt;configuration&gt;                     &lt;classifier&gt;exec&lt;/classifier&gt;                &lt;/configuration&gt;           &lt;/execution&gt;      &lt;/executions&gt; &lt;/plugin&gt; </code></pre>  <p>and my app-run.sh script executes the following:</p>  <pre><code>exec /bin/java -cp :.:../config/*:../app-exec.jar  -Dlogging.config=../config/log4j2.xml  -Dspring.config.location=../config/application.properties  -jar ../app-exec.jar </code></pre>  <p>where /bin/java represents the location where I have java installed. The classpath set in -cp does not seem to be working here. Similarly to when running through the IDE, setting the config.xml file to classpath:config/file.xml or classpath:file.xml both fail to find the file but file:../config/file.xml works.</p>  <p>I would like to be able to set the classpath in both the IDE and from command line so that I can access files in Spring using classpath reference to make things easier. I do NOT want to put them all in <code>src/main/resources</code> and have them be packaged in the jar, as I need to edit these after packaging and deployment.</p>  <p>Does anybody have any ideas or helpful hints? Thanks in advance!</p> ",
    "OwnerUserId": "7190546",
    "LastEditorUserId": "7190546",
    "LastEditDate": "2018-02-15T16:07:14.697",
    "LastActivityDate": "2018-08-08T15:28:43.983",
    "Title": "Spring Boot add files to classpath from command line execution",
    "Tags": "<java><maven><spring-boot><netbeans><spring-boot-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<h2>Updated answer:</h2>  <p>You can follow the practice in my original answer, but we recently dropped this for a simpler and cleaner option that is more standard (the 'Java' way). We made the change because we needed to dynamically load dependent libraries at runtime that were not available at compile time (in their exact version). In our case we wanted to load dependent jars only from separate folder(s) and not from an executable jar. We ended up having duplicate dependencies in the executable jars and in separate folder(s), so we decided to drop the executable jar Properties Launcher and instead only load dependencies from separate folders. This is often <strong>NOT</strong> the best option and should be evaluated for your use case. I prefer reading the standard Java classpath.</p>  <p>To run a Spring Boot app without an executable jar, we used Maven Assembly to put the dependent jars in a /libs directory and dropped the spring-boot-maven-plugin. The steps and some code for this are below:</p>  <ol> <li>Remove the spring-boot-maven-plugin that creates the executable jar in ZIP format</li> <li><p>Add the following to your assembly XML</p>  <p><code>&lt;dependencySets&gt;      &lt;dependencySet&gt;           &lt;outputDirectory&gt;where you want the libs to go&lt;/outputDirectory&gt;            &lt;useProjectArtifact&gt;whether you want to include the project            artifact here&lt;/useProjectArtifact&gt;      &lt;/dependencySet&gt; &lt;/dependencySets&gt;</code></p></li> <li><p>Run your code from the main class and include the dependent jar folder(s) on the classpath. Use the standard classpath notation on your OS and not the custom, awkward PropertiesLauncher loader path syntax</p>  <p><code>java -cp &lt;standard-classpath&gt; &lt;main-class&gt;</code></p></li> </ol>  <p>An example of an actual call:     <code>java -cp $CLASSPATH:./lib/*:./cfg/*:my-app.jar Application.class</code></p>  <p>In this way you execute the Spring Boot app via standard java execution call, no custom Spring loading syntax. You just need to ensure that all of your dependencies are available on the classpath at runtime. We found this much easier to maintain and made this the standard for all of our apps.</p>  <h2>Original answer:</h2>  <p>After some researching, and thanks to @TuyenNguyen's helpful answer I was able to get the following working:</p>  <p>I added the following to my spring-boot-maven-plugin so that when I run from the command line it uses the <code>PropertiesLauncher</code> instead of the <code>JarLauncher</code>:</p>  <pre><code>&lt;configuration&gt;      &lt;mainClass&gt;${mainClass}&lt;/mainClass&gt;      &lt;layout&gt;ZIP&lt;/layout&gt; //THIS IS THE IMPORTANT PART &lt;/configuration&gt; </code></pre>  <p>See <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-property-launcher-features' rel='nofollow noreferrer'>here</a> and <a href='http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/loader/PropertiesLauncher.html' rel='nofollow noreferrer'>here</a> for more about the <code>PropertiesLauncher</code> options. It allows you to set the classpath, among other things. See <a href='https://stackoverflow.com/questions/26140784/spring-boot-is-it-possible-to-use-external-application-properties-files-in-arbi'>here</a>, <a href='https://stackoverflow.com/questions/21322673/spring-boot-properties-launcher-unable-to-use'>here</a>, and <a href='http://blog.lizhao.net/2014/08/how-to-add-extra-dir-to-classpath-at.html' rel='nofollow noreferrer'>here</a> for where I found the answer to this problem. Using format ZIP makes the <code>PropertiesLauncher</code> be used.</p>  <p>From there, I was able to use this command to launch the application as I intended:</p>  <pre><code>java -Dloader.path=../config,../ -Dloader.config.location=classpath:application.properties -jar ../app-exec.jar </code></pre>  <p>Another important note: when specifying the <code>-Dloader.path</code> make sure to use comma-separated values and only directories and files, as described <a href='https://stackoverflow.com/questions/31827173/does-wildcard-pattern-supported-in-loader-path-for-spring-boot-application'>here</a>. Also, be sure to put the -D args before you specify -jar jar or they will not be set.</p>  <p>If anyone has any suggestions or edits to further improve this answer or the original question in order to help additional users, please let me know or make the edits yourself!</p> ",
    "highest_rated_answer": "<p>If you don't put your files in <code>src/main/resources</code> then you can put it inside any folder that you want, BUT you must set your folder as a resources folder. Because <code>classpath</code> is always point to resources folder. Once you make your folder as a resource folder, it will be packaged into the jar. If you want to edit your resource file, just using <a href='http://www.7-zip.org/download.html' rel='nofollow noreferrer'>7 zip tool</a> to open your jar -> edit files -> save -> it will update your change in the jar.</p>  <p>Another solution is create a folder, put all files you want to edit and not packaged in that, then set classpath manually to that folder every time you run, but the way you set above is not correct, try <a href='https://stackoverflow.com/a/36365308/4039840'>this</a> solution for set classpath correct way.</p> "
  },
  {
    "Id": "44944699",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44944985",
    "CreationDate": "2017-07-06T09:17:44.507",
    "Score": "8",
    "ViewCount": "9595",
    "Body": "<p>I have used the spring boot initializer to generate a project. </p>  <p>What does this line do?  Why is it used?  What would happen if its not used?</p>  <pre><code>&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; </code></pre>  <p>An extract from The pom looks like this </p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.rob.jpa.troubleshooting&lt;/groupId&gt;     &lt;artifactId&gt;jpademo&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;jpademo&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;      ...etc </code></pre> ",
    "OwnerUserId": "1030168",
    "LastActivityDate": "2021-01-10T11:21:06.860",
    "Title": "Spring boot default initalization relativePath",
    "Tags": "<maven><spring-boot><build><initialization>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>It's the relative path from the module's pom.xml to the parent's pom.xml (Ref: <a href='http://maven.apache.org/ref/3.0/maven-model/maven.html#class_parent' rel='nofollow noreferrer'>Maven Documentation</a>)</p> <p>In your case, its not required. because parent's pom is taken from JAR file.</p> <p>Scenario : If we have <code>Application1</code> as parent to the module <code>Application2</code>, then we need to specifiy  to locate the pom of Parent in the module's pom.xml</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "45293176",
    "PostTypeId": "1",
    "CreationDate": "2017-07-25T03:00:09.087",
    "Score": "8",
    "ViewCount": "22065",
    "Body": "<p>I have a SpringBoot application. One class needs to import javax.servlet.filter and implements the filter for customization. It builds successfully locally, but failed to start up on the cloud server and throws llegalStateExceptions. It's the filter class caused the issue. Once I remove the filter, the app runs successfully locally and on the cloud. </p>  <p>I think it might be possible that app could not find javax.servlet api in maven, or it's a servlet/embedded tomcat incompatibility issue. We have most of the dependencies from org.springframework.boot. The only tomcat related part we have is:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;     &lt;artifactId&gt;tomcat-jdbc&lt;/artifactId&gt;     &lt;version&gt;LATEST&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>We don't have the following:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;     &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;  &lt;dependency&gt;     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;     &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;     &lt;version&gt;3.1.0&lt;/version&gt;     &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; </code></pre>  <p>I tried to add them (individually and both) and changed scope to compile, or remove scope. All sorts of dependencies minor changes, but nothing works so far. Please let me know if you have any good suggestions.</p> ",
    "OwnerUserId": "7782671",
    "LastEditorUserId": "2051454",
    "LastEditDate": "2017-07-25T06:57:58.480",
    "LastActivityDate": "2020-07-07T10:07:00.840",
    "Title": "javax.servlet in Springboot Application",
    "Tags": "<java><maven><servlets><spring-boot>",
    "AnswerCount": "4",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The <code>provided</code> scope means that you intend that library to be provided by the environment in which you deploy your code. Why would you do such a thing? Well, by default tomcat puts libs containing javax.servlet classes on the classpath for you, and many other servers do the same. It's a way of allowing container providers  (tomcat, jboss, websphere, etc.) to provide custom implementations of a library that specific to their container.</p>  <p>Maven interprets the <code>provided</code> scope as meaning that you do not want to include the library in any bundles or deployments, uberjars, zips, or whatever. Spring-boot produces an uber-jar -- that is, it packages all your application dependencies in your application's single artefact (as opposed to keeping them in separate files which is how we used to do java in the ancient past before we knew better).</p>  <p>So, if you find that you're missing that package at run time it may be because it isn't actually <code>provided</code> by your container and you have to supply it yourself by removing the scope tag completely. This will tell maven to bundle it up in your uber-jar for use at runtime.</p>  <p>Looking at your specific problem, neither of those libraries should be <code>provided</code> so you should remove the scope tags completely from all your dependencies. If that doesn't work, you have other problems.</p>  <p>BTW: As an aside, it's a really bad idea to use <code>LATEST</code> as the version number for any dependency. It violates dozens of best-practices and against certain binary stores (nexus for example) it barely works and isn't guaranteed. You should instead find out which version of tomcat-jdbc you're meant to be using and use the absolute version instead. In this case the <code>LATEST</code> version is almost certainly the wrong one to be using.</p> "
  },
  {
    "Id": "45306016",
    "PostTypeId": "1",
    "CreationDate": "2017-07-25T14:18:04.920",
    "Score": "8",
    "ViewCount": "1073",
    "Body": "<p>I am getting an exception when trying to annotate images via Google Vision using the provided java client google vision.</p>  <p>specifically this code where the batch client.batchAnnotateImages occurs:</p>  <pre><code>public void processOCR(byte[] file)  {      List&lt;AnnotateImageRequest&gt; requests = new ArrayList&lt;&gt;();        ByteString imageByteString = ByteString.copyFrom(file);        Image img = Image.newBuilder().setContent(imageByteString).build();       Feature feat = Feature.newBuilder().setType(Type.DOCUMENT_TEXT_DETECTION).build();        AnnotateImageRequest request = AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();       requests.add(request);        try (ImageAnnotatorClient client = ImageAnnotatorClient.create())        {          BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);         List&lt;AnnotateImageResponse&gt; responses = response.getResponsesList();         client.close();          //visionResultsDTO result = new visionResultsDTO();         String ParagraphText = '';           for (AnnotateImageResponse res : responses) {           if (res.hasError()) {             //throw exception.             return;           }            // For full list of available annotations, see http://g.co/cloud/vision/docs           TextAnnotation annotation = res.getFullTextAnnotation();           for (Page page: annotation.getPagesList()) {             String pageText = '';             for (Block block : page.getBlocksList()) {           String blockText = '';               for (Paragraph para : block.getParagraphsList()) {                 String paraText = '';                 for (Word word: para.getWordsList()) {                   String wordText = '';               for (Symbol symbol: word.getSymbolsList()) {                     wordText = wordText + symbol.getText();                   }               paraText = paraText + wordText;                 }                 // Output Example using Paragraph:                 blockText = blockText + paraText;               }               pageText = pageText + blockText;             }           }           ParagraphText = annotation.getText();         //  result.setResultText(ParagraphText);         }       } catch (Exception e)        {         // TODO Auto-generated catch block         e.printStackTrace();        }  } </code></pre>  <p>I am being presented with the following Stack Trace / Error:</p>  <blockquote>   <p>java.lang.NoSuchMethodError: com.google.common.util.concurrent.MoreExecutors.directExecutor()Ljava/util/concurrent/Executor;       at com.google.api.gax.retrying.BasicRetryingFuture.(BasicRetryingFuture.java:77)       at com.google.api.gax.retrying.CallbackChainRetryingFuture.(CallbackChainRetryingFuture.java:62)       at com.google.api.gax.retrying.ScheduledRetryingExecutor.createFuture(ScheduledRetryingExecutor.java:86)       at com.google.api.gax.grpc.RetryingCallable.futureCall(RetryingCallable.java:57)       at com.google.api.gax.grpc.RetryingCallable.futureCall(RetryingCallable.java:42)       at com.google.api.gax.grpc.AuthCallable.futureCall(AuthCallable.java:57)       at com.google.api.gax.grpc.UnaryCallable.futureCall(UnaryCallable.java:282)       at com.google.api.gax.grpc.UnaryCallable.futureCall(UnaryCallable.java:293)       at com.google.api.gax.grpc.UnaryCallable.call(UnaryCallable.java:321)       at com.google.cloud.vision.v1.ImageAnnotatorClient.batchAnnotateImages(ImageAnnotatorClient.java:201)       at com.google.cloud.vision.v1.ImageAnnotatorClient.batchAnnotateImages(ImageAnnotatorClient.java:177)       at za.co.thumbtribe.core.googlevision.service.impl.GoogleVisionServiceImpl.processOCR(GoogleVisionServiceImpl.java:55)</p> </blockquote>  <p>Here are my POM Dependencies : </p>  <pre><code>&lt;dependencies&gt; &lt;!-- Spring --&gt; &lt;dependency&gt;   &lt;groupId&gt;org.springframework&lt;/groupId&gt;   &lt;artifactId&gt;spring-web&lt;/artifactId&gt;   &lt;version&gt;4.2.5.RELEASE&lt;/version&gt;   &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;com.google.cloud&lt;/groupId&gt;     &lt;artifactId&gt;google-cloud-vision&lt;/artifactId&gt;     &lt;version&gt;0.20.3-beta&lt;/version&gt;     &lt;exclusions&gt;     &lt;exclusion&gt;       &lt;groupId&gt;com.google.auth&lt;/groupId&gt;       &lt;artifactId&gt;google-auth-library-oauth2-http&lt;/artifactId&gt;     &lt;/exclusion&gt;     &lt;exclusion&gt;       &lt;groupId&gt;com.google.auth&lt;/groupId&gt;       &lt;artifactId&gt;google-auth-library-credentials&lt;/artifactId&gt;     &lt;/exclusion&gt;   &lt;exclusion&gt;     &lt;groupId&gt;com.google.guava&lt;/groupId&gt;     &lt;artifactId&gt;*&lt;/artifactId&gt; &lt;/exclusion&gt;   &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;com.google.auth&lt;/groupId&gt;   &lt;artifactId&gt;google-auth-library-oauth2-http&lt;/artifactId&gt;   &lt;version&gt;0.7.0&lt;/version&gt;  &lt;/dependency&gt;  &lt;dependency&gt;   &lt;groupId&gt;com.google.auth&lt;/groupId&gt;   &lt;artifactId&gt;google-auth-library-credentials&lt;/artifactId&gt;   &lt;version&gt;0.7.0&lt;/version&gt; &lt;/dependency&gt;  &lt;/dependencies&gt; </code></pre>  <p>I have tried excluding guava and including multiple versions of the API.</p>  <p>The code shown is the sample code from the google vision client implementation.</p>  <p>any ideas ?</p> ",
    "OwnerUserId": "2902112",
    "LastActivityDate": "2017-08-04T14:00:46.070",
    "Title": "Google Vision Batch Annotate Images with Java Client Library",
    "Tags": "<java><maven><spring-boot><google-vision>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The missing method <code>directExecutor</code> in <code>MoreExecutors</code> class is annotated <code>@since 18.0</code> in the sources of guava (See <a href='https://google.github.io/guava/releases/19.0/api/docs/src-html/com/google/common/util/concurrent/MoreExecutors.html#line.440' rel='noreferrer'>source</a>).</p>  <p>I guess you have in your classpath an older version of Guava that appears before the version 19.</p>  <p>You should run <code>mvn dependency:analyze</code> to track down the culprit. You may <code>mvn dependency:analyze | grep guava</code> to filter the output. </p>  <p>Then you can check which package imports the old dependency with :</p>  <p><code>mvn dependency:tree -Dverbose</code></p> "
  },
  {
    "Id": "45425337",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45425491",
    "CreationDate": "2017-07-31T21:09:28.547",
    "Score": "8",
    "ViewCount": "10444",
    "Body": "<p>I can run a Spring Boot application with a following Maven command:</p>  <pre><code>mvn spring-boot:run  </code></pre>  <p>but I don't know how to do a  graceful shutdown of application which was started in a such way. Please advise.</p> ",
    "OwnerUserId": "1219755",
    "LastActivityDate": "2017-07-31T21:28:22.837",
    "Title": "Spring Boot Maven plugin - spring-boot:run and graceful shutdown",
    "Tags": "<maven><spring-boot><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>To gracefully exit your application simply hit <code>ctrl-c</code> in your terminal.</p>  <p>Or you can use <code>mvn spring-boot:start</code> to start you app in background and <code>mvn spring-boot:stop</code> to shutdown gracefuly.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "46947633",
    "PostTypeId": "1",
    "CreationDate": "2017-10-26T06:53:29.183",
    "Score": "8",
    "ViewCount": "38178",
    "Body": "<p>I am using dependencies as below</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.app&lt;/groupId&gt;     &lt;artifactId&gt;App&lt;/artifactId&gt;     &lt;packaging&gt;war&lt;/packaging&gt;     &lt;version&gt;0.0.2-SNAPSHOT&lt;/version&gt;     &lt;properties&gt;         &lt;main.basedir&gt;${basedir}/../..&lt;/main.basedir&gt;         &lt;ant.version&gt;1.9.3&lt;/ant.version&gt;     &lt;/properties&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;     &lt;/parent&gt;     &lt;build&gt;         &lt;finalName&gt;CransoApp&lt;/finalName&gt;         &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;source&gt;1.8&lt;/source&gt;                     &lt;target&gt;1.8&lt;/target&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!--&lt;plugin&gt;                 &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;warSourceDirectory&gt;WebContent&lt;/warSourceDirectory&gt;                     &lt;failOnMissingWebXml&gt;true&lt;/failOnMissingWebXml&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;--&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;dependencies&gt;                     &lt;dependency&gt;                         &lt;groupId&gt;org.springframework&lt;/groupId&gt;                         &lt;artifactId&gt;springloaded&lt;/artifactId&gt;                         &lt;version&gt;1.2.6.RELEASE&lt;/version&gt;                     &lt;/dependency&gt;                 &lt;/dependencies&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.6&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;copy-resources&lt;/id&gt;                         &lt;phase&gt;validate&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;copy-resources&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;outputDirectory&gt;${basedir}/target/classes/public&lt;/outputDirectory&gt;                             &lt;resources&gt;                                 &lt;resource&gt;                                     &lt;directory&gt;src/main/webapp&lt;/directory&gt;                                     &lt;filtering&gt;true&lt;/filtering&gt;                                 &lt;/resource&gt;                                 &lt;!--&lt;addResources&gt;true&lt;/addResources&gt;--&gt;                             &lt;/resources&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;descriptorRefs&gt;                         &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;                     &lt;/descriptorRefs&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;!-- end::web[] --&gt;         &lt;!-- tag:: Spring Data JPA --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;!-- end:: Spring Data JPA --&gt;         &lt;!-- tag::security[] --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;             &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;javax.servlet&lt;/groupId&gt;             &lt;artifactId&gt;jstl&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;javax.mail&lt;/groupId&gt;             &lt;artifactId&gt;mail&lt;/artifactId&gt;             &lt;version&gt;1.4.3&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt;             &lt;artifactId&gt;spring-integration-mail&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;             &lt;artifactId&gt;velocity&lt;/artifactId&gt;             &lt;version&gt;1.6.4&lt;/version&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;         &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;!-- https://mvnrepository.com/artifact/org.jboss.arquillian.junit/arquillian-junit-container --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jboss.arquillian.junit&lt;/groupId&gt;             &lt;artifactId&gt;arquillian-junit-container&lt;/artifactId&gt;             &lt;version&gt;1.1.13.Final&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/project&gt; </code></pre>  <p>When I try to run 'mvn test' it ends in below error. My IDE can find the SpringBootTest and SpringRunner classes.</p>  <pre><code>    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project App: Compilation failure: Compilation failure:     [ERROR] /E:/WebProjects/app/src/test/java/com/app/SpringBootAppTest.java:[5,45] package org.springframework.boot.test.context does not exist     [ERROR] /E:/WebProjects/App/src/test/java/com/app/SpringBootAppTest.java:[6,47] package org.springframework.test.context.junit4 does not exist     [ERROR] /E:/WebProjects/App/src/test/java/com/app/SpringBootAppTest.java:[11,2] cannot find symbol     [ERROR]   symbol: class SpringBootTest     [ERROR] /E:/WebProjects/App/src/test/java/com/app/SpringBootAppTest.java:[12,10] cannot find symbol     [ERROR]   symbol: class SpringRunner </code></pre>  <p>How to overcome the test setup issue on the below code? And I have tried cleaning .m2 directory and re-downloaded the dependencies.</p>  <blockquote> <pre><code>package com.app; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; @RunWith(SpringRunner.class) public class SpringBootAppTest { @Test public void runBootTest(){     assert('test').equalsIgnoreCase('Test'); } } </code></pre> </blockquote>  <p><code>.m2</code> directory has the required jars. My IDE able to find the classes. Either way I can't run the maven test with cli and IDE. If any version that I use has conflict over another? I can easily build new project with <code>parent 1.5.7</code> and <code>spring-boot-starter-test</code> dependencies. But why can't the same doesn't work in this setup? Even debug mode doesn't give much detail about the missing classes.</p> ",
    "OwnerUserId": "5860497",
    "LastEditorUserId": "5860497",
    "LastEditDate": "2017-10-26T17:33:14.817",
    "LastActivityDate": "2022-12-14T17:14:19.587",
    "Title": "package org.springframework.boot.test.context does not exist",
    "Tags": "<maven><spring-boot><spring-boot-test>",
    "AnswerCount": "5",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>The problem is in your dependency, remove test scope <code>&lt;scope&gt;test&lt;/scope&gt;</code> from it:</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;     &lt;/dependency&gt; </code></pre> "
  },
  {
    "Id": "47321197",
    "PostTypeId": "1",
    "CreationDate": "2017-11-16T03:42:07.823",
    "Score": "8",
    "ViewCount": "6901",
    "Body": "<p>Deploy <code>Spring Cloud</code> project with <code>docker</code>, some code in the <code>pom.xml</code>:</p>  <pre><code>&lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- tag::plugin[] --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.4.3&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;                     &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!-- end::plugin[] --&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre>  <p>when i run the command: <code>mvn package docker:build</code>, it throws errors:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build (default) on project users-microservice: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command </code></pre>  <p>why will it connect to localhost:2375? Any idea, i will appreciate!</p> ",
    "OwnerUserId": "5443977",
    "LastEditorUserId": "5443977",
    "LastEditDate": "2017-11-17T03:13:11.887",
    "LastActivityDate": "2017-11-25T09:33:56.050",
    "Title": "Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build Exception caught: HttpHostConnectException: Connect to localhost:2375",
    "Tags": "<docker><spring-boot><maven-3><spring-cloud>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>Please update your <code>docker-maven-plugin</code>'s version from 0.4.3 to 1.0.0</p>  <pre><code>&lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- tag::plugin[] --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;1.0.0&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;                     &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!-- end::plugin[] --&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre> "
  },
  {
    "Id": "52933220",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52934014",
    "CreationDate": "2018-10-22T15:49:48.663",
    "Score": "8",
    "ViewCount": "18844",
    "Body": "<p>We working in small team of 4 people. We using docker to deploy our services. One of the services is a java Spring Boot project which is deployed after building docker image with maven. To make docker image of Spring Boot service we use <code>mvn clean package dockerfile:build</code>.</p>  <p>The fun part is that my colleagues have no problem building docker image of Spring Boot service. And I get maven error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default-cli) on project 'foo': Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('osxkeychain') </code></pre>  <p>I tried to remove all maven repositories from <code>.m2/repository</code>, restart docker, and remove all images.</p>  <p>Later I tried to run <code>mvn clean package dockerfile:build</code> in to two separate commands:</p>  <ul> <li><code>mvn package</code>, then</li> <li><code>mvn docker:build</code></li> </ul>  <p><code>mvn package</code> passed, and <code>mvn docker:build</code> failed with the same error as shown above.</p>  <p>Maven version <code>3.5.4</code>, Docker version <code>18.06.1-ce, build e68fc7a</code>, OS: macOS mojave</p>  <p>I even tried to restart my PC hoping that it will fix it...</p>  <p>Edited: Here is the maven pom plugin <code>dockerfile-maven-plugin</code></p>  <pre><code>... &lt;plugin&gt;     &lt;groupId&gt;com.spotify&lt;/groupId&gt;     &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.3.6&lt;/version&gt;     &lt;configuration&gt;         &lt;repository&gt;${project.artifactId}&lt;/repository&gt;     &lt;/configuration&gt; &lt;/plugin&gt; ... </code></pre>  <p>Edit 2:</p>  <p>Full error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default) on project spring-boot-service: Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('swarm') [ERROR]  at [Source: N/A; line: -1, column: -1] (through reference chain: java.util.LinkedHashMap['stackOrchestrator']) [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre>  <p>Edit 3:</p>  <p>docker-compose.yml</p>  <pre><code>wrapper:   image: spring-boot-service:latest ports:   - '8080:8080' expose:   - '8080' links:   - db   - another-service </code></pre>  <p>Solved:</p>  <p>In my case it was wrong version of <code>dockerfile-maven-plugin</code>. I used <code>1.3.6</code>, and <code>1.4.7</code> fixed the problem. </p>  <p>Thanks to <a href='https://stackoverflow.com/users/3301492/boris'>Boris</a>!</p>  <p>Update: One more thing!</p>  <p>Make sure when <code>mvn</code> finish build naming is correct, for example:</p>  <pre><code>[INFO] Successfully built **spring-boot-service:0.0.1-SNAPSHOT** </code></pre>  <p>And <code>docker-compose.yml</code> should look like this:</p>  <pre><code>... wrapper:   image: **spring-boot-service:0.0.1-SNAPSHOT** ... </code></pre> ",
    "OwnerUserId": "5834613",
    "LastEditorUserId": "5834613",
    "LastEditDate": "2018-10-22T17:35:29.400",
    "LastActivityDate": "2022-08-11T11:28:21.330",
    "Title": "Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build on project 'foo': Could not build image:",
    "Tags": "<java><maven><docker><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Here is the <a href='https://github.com/spotify/dockerfile-maven/tree/master/plugin' rel='nofollow noreferrer'>dockerfile-maven-plugin</a> config:</p> <pre class='lang-xml prettyprint-override'><code>&lt;plugin&gt;   &lt;groupId&gt;com.spotify&lt;/groupId&gt;   &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;   &lt;version&gt;${dockerfile-maven-plugin.version}&lt;/version&gt;   &lt;executions&gt;     &lt;execution&gt;       &lt;id&gt;default&lt;/id&gt;       &lt;goals&gt;         &lt;goal&gt;build&lt;/goal&gt;         &lt;goal&gt;push&lt;/goal&gt;       &lt;/goals&gt;     &lt;/execution&gt;   &lt;/executions&gt;   &lt;configuration&gt;     &lt;repository&gt;${project.artifactId}&lt;/repository&gt;     &lt;tag&gt;${project.version}&lt;/tag&gt;     &lt;buildArgs&gt;       &lt;JAR_FILE&gt;target/${project.build.finalName}.jar&lt;/JAR_FILE&gt;     &lt;/buildArgs&gt;   &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> <p><strong>NOTE:</strong> use the latest released version <a href='https://search.maven.org/artifact/com.spotify/dockerfile-maven-plugin' rel='nofollow noreferrer'>1.4.7</a></p> <p>This configures the plugin to build and push your image with a <a href='https://github.com/spotify/dockerfile-maven#consistent-build-lifecycle' rel='nofollow noreferrer'>single command</a>:</p> <pre class='lang-bash prettyprint-override'><code>$ mvn clean deploy </code></pre> <p>If you only want to build the Docker image, run:</p> <pre class='lang-bash prettyprint-override'><code>$ mvn clean package </code></pre> ",
    "highest_rated_answer": "<p>Solution:</p> <ol> <li>Go to docker desktop</li> <li>Open settings</li> <li>Go to general and put tick on Expose daemon on tcp://localhost:2375 without TLS <a href='https://i.stack.imgur.com/0FJ6S.png' rel='nofollow noreferrer'>enter image description here</a></li> </ol> "
  },
  {
    "Id": "54420437",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54515164",
    "CreationDate": "2019-01-29T11:51:47.817",
    "Score": "8",
    "ViewCount": "12579",
    "Body": "<p>I would like to read files from sub directories of resource folder. I am facing issues with jar execution.</p>  <p>This is my directory structure.</p>  <p><code>src/main/resources     |_ Conf          |_ conf1               |_ config.txt          |_ conf2               |_ config.txt</code></p>  <p>Here, I am trying to read <code>config.txt</code> files from all sub directories of <code>Conf</code> folder.  I do not know what sub directories <code>Conf</code> will have. I know the classpath till <code>Conf</code>. So, I will give classpath till <code>Conf</code> and trying to get sub directories and files.</p>  <p>I tried to achieve this using <code>ClassPathResource</code>. This works fine if it is file. I am facing issues when it comes to directory. I am using <code>getFile</code> api to get the directory path to walk through that directory for sub directories which is causing issue in jar execution.</p>  <p>Here is my code:</p>  <p>Below code is to read sub directories in <code>Conf</code> folder.</p>  <pre><code>List&lt;Map&lt;String,String&gt;&gt; list = new ArrayList&lt;Map&lt;String,String&gt;&gt;();  ClassPathResource classPathResource = new ClassPathResource('Conf');  File dir = classPathResource.getFile();  Files.walk(Paths.get(dir.toString()))      .filter(Files::isDirectory)       // This is to exempt current dir.      .filter((Path p)-&gt;!p.toString().equals(dir.toString()))      .forEach(f-&gt; {list.add(readDirectory(f.toString()));}); </code></pre>  <p>Reading each sub directory.</p>  <pre><code>public Map&lt;String, String&gt; readDirectory(String dir) {      Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();      String confDir = dir.substring(dir.lastIndexOf(File.separator)+1);     try {           Files.list(Paths.get(dir))                    .filter(f-&gt;f.toString().matches('.*conf\\\\.txt'))            .forEach(file -&gt;approvedTermsMap.put                                (confDir,readFile(file.toFile())));     } catch (IOException e) {         e.printStackTrace();         }         return map;  } </code></pre>  <p>Reading file:</p>  <pre><code>public String readFile(File confFile) {         StringBuffer terms = new StringBuffer();        try (BufferedReader reader = new BufferedReader(new               FileReader(confFile)))     {         reader.lines().forEach(term-&gt;                                                  terms.append(term + '|'));     } catch (FileNotFoundException e) {             e.printStackTrace();     } catch (IOException e) {             e.printStackTrace();     } return terms.toString(); } </code></pre>  <p>Here, I should not use <code>classPathResource.getFile()</code> to get the absolute path because it tries to find file in file system which will not avilable in case of jar. So, I need alternate way to get absolute path of resource directory. I have to pass it to <code>File.walk</code> api to find sub directories and files.</p> ",
    "OwnerUserId": "3610740",
    "LastActivityDate": "2019-02-04T12:28:57.780",
    "Title": "Read files from sub directories of class path resource folder in spring boot",
    "Tags": "<java><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>As mentioned in the question, first I want to get <code>confX</code> directories then read <code>conf.txt</code> files.</p>  <p>Finally, I could solve my issue as below.</p>  <pre><code>ClassLoader cl = this.getClass().getClassLoader(); ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(cl); try {         Resource resources[] = resolver.getResources('classpath:Conf/*/'); } catch (IOException e) {         e.printStackTrace(); } </code></pre>  <p>This will give all sub directories of <code>Conf</code> directory. Here <code>/</code> at the end in <code>classpath:Conf/*/</code> is very important. If we do not give <code>/</code> it will work normally but will not work in jar.  From the above code block <code>resources[]</code> array will contains directory location like this <code>class path resource [Conf/conf1/] and so on</code>. I need sub directory name to read corresponding file. Here is the code for it.</p>  <pre><code>Arrays.asList(resources).stream()                         .forEach(resource -&gt;{                                    Pattern dirPattern = Pattern.compile('.*?\\\\[(.*/(.*?))/\\\\]$');                                   if (resource.toString().matches('.*?\\\\[.*?\\\\]$')) {                                       Matcher matcher = dirPattern.matcher(resource.toString());                                      if (matcher.find()) {                                         String dir = matcher.group(1);                                         readFile(dir);                                       }                                   }                              });   public void readFile(String dir) {     ClassPathResource classPathResource = new ClassPathResource(dir+ '/conf.txt');     try (BufferedReader fileReader = new BufferedReader(             new InputStreamReader(classPathResource2.getInputStream()))) {         fileReader.lines().forEach(data -&gt; System.out.println(data));      }catch (IOException e) {         e.printStackTrace();     } } </code></pre>  <p>I need to map each txt file with its corresponding directory. That is why I approached this way. If you just need to get files and read you can do it like below. This will list everything under <code>Conf</code> directory.</p>  <pre><code> ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(cl); try {         Resource resources[] = resolver.getResources('classpath:Conf/**'); } catch (IOException e) {         e.printStackTrace(); } </code></pre> ",
    "highest_rated_answer": "<p>Try the following code. It can scan up the required files up to n levels which can be specified using maxDepth varaible in following code</p>  <pre><code>// Finding a file upto x level in File Directory using NIO Files.find     Path start = Paths.get('/Users/***/Documents/server_pull');     int maxDepth = 5;     try(Stream&lt;Path&gt; stream = Files.find(start,                                          maxDepth,                                          (path, attr) -&gt; String.valueOf(path).endsWith('.txt'))){         String fileName = stream                             .sorted()                             .map(String::valueOf)                             .filter((path) -&gt; {                                 //System.out.println('In Filter : '+path);                                 return String.valueOf(path).endsWith('config.txt');                             })                             .collect(Collectors.joining());         System.out.println('fileName : '+fileName);     }catch(Exception e){         e.printStackTrace();     } </code></pre>  <p>Another way by using Files.walk methods as follows:</p>  <pre><code>// Finding a file upto x level in File Directory using NIO Files.walk      Path startWalk = Paths.get('/Users/***/Documents/server_pull');     int depth = 5;     try( Stream&lt;Path&gt; stream1 = Files.walk(startWalk,                                              depth)){         String walkedFile = stream1                             .map(String::valueOf)                             .filter(path -&gt; {                                 return String.valueOf(path).endsWith('config.txt');                             })                             .sorted()                             .collect(Collectors.joining());         System.out.println('walkedFile = '+walkedFile);      }catch(Exception e){         e.printStackTrace();     } </code></pre> "
  },
  {
    "Id": "54928869",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54957922",
    "CreationDate": "2019-02-28T15:16:16.470",
    "Score": "8",
    "ViewCount": "4140",
    "Body": "<p>I have a very simple repository test, it runs just fine when I'm using  JUnit's 4 '@RunWith(SpringRunner.Class)'. When I tried to use '@ExtendWith' like in the provided example I get a NullPointerException when trying to work with the repository. It seems like '@Autowire' doesn't inject the repository when using the latter annotation. Here's the pom.xml file and stack trace: <a href='https://pastebin.com/4KSsgLfb' rel='noreferrer'>https://pastebin.com/4KSsgLfb</a></p>  <p>Entity Class: </p>  <pre><code>package org.tim.entities;  import lombok.AccessLevel; import lombok.Data; import lombok.NonNull; import lombok.Setter; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.validation.constraints.NotNull;  @Entity @Data public class ExampleEntity {  @Id @Setter(AccessLevel.NONE) @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id;  @NotNull @NonNull private String name; </code></pre>  <p>}</p>  <p>Repository Class:</p>  <pre><code>package org.tim.repositories;  import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import org.tim.entities.ExampleEntity;  @Repository public interface ExampleRepository extends JpaRepository&lt;ExampleEntity, Long&gt; { } </code></pre>  <p>Test Class:</p>  <pre><code>package org.tim;  import org.junit.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.tim.entities.ExampleEntity; import org.tim.repositories.ExampleRepository;   @ExtendWith(SpringExtension.class) @DataJpaTest public class exampleTestClass {  @Autowired private ExampleRepository exampleRepository;  @Test public void exampleTest() {     exampleRepository.save(new ExampleEntity('name')); } } </code></pre> ",
    "OwnerUserId": "6396636",
    "LastEditorUserId": "6396636",
    "LastEditDate": "2019-03-01T20:21:56.657",
    "LastActivityDate": "2019-07-02T21:04:36.880",
    "Title": "Migrating from JUnit4 to JUnit5 throws NullPointerException on @Autowired repositories",
    "Tags": "<maven><spring-boot><junit5>",
    "AnswerCount": "2",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>You're using the wrong <code>@Test</code> annotation.</p>  <p>When using the <code>SpringExtension</code> and JUnit Jupiter (JUnit 5), you have to use <code>import org.junit.jupiter.api.Test;</code> instead of <code>import org.junit.Test;</code>.</p> ",
    "highest_rated_answer": "<p>in the documentation it says:</p>  <blockquote>   <p>If you are using JUnit 4, don\u2019t forget to also add @RunWith(SpringRunner.class) to your test, otherwise the annotations will be ignored. If you are using JUnit 5, there\u2019s no need to add the equivalent @ExtendWith(SpringExtension) as @SpringBootTest and the other @\u2026Test annotations are already annotated with it.</p> </blockquote>  <p><a href='https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html' rel='nofollow noreferrer'>Testing Spring Boot Applications</a></p>  <p>So try removing the @extendWith in your testclass</p> "
  },
  {
    "Id": "56565538",
    "PostTypeId": "1",
    "CreationDate": "2019-06-12T15:17:53.630",
    "Score": "8",
    "ViewCount": "4466",
    "Body": "<p>We use spring-boot 2.1.5 with spring-boot-maven-plugin to start the package for integration tests. Important parts of our pom look like this:</p>  <pre><code>&lt;plugin&gt;   &lt;groupId&gt;io.fabric8&lt;/groupId&gt;   &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;   &lt;version&gt;0.30.0&lt;/version&gt;   &lt;configuration&gt;     &lt;images&gt;       &lt;image&gt;         &lt;name&gt;postgres:9.6.13&lt;/name&gt;         &lt;alias&gt;app-it&lt;/alias&gt;         &lt;run&gt;           &lt;ports&gt;             &lt;port&gt;app.datasource.port:5432&lt;/port&gt;           &lt;/ports&gt;           &lt;wait&gt;             &lt;log&gt;(?s)database system is ready to accept connections.&lt;/log&gt;             &lt;time&gt;20000&lt;/time&gt;           &lt;/wait&gt;         &lt;/run&gt;       &lt;/image&gt;     &lt;/images   &lt;/configuration&gt;   &lt;executions&gt;     &lt;execution&gt;      &lt;id&gt;prepare-it-database&lt;/id&gt;       &lt;phase&gt;pre-integration-test&lt;/phase&gt;       &lt;goals&gt;         &lt;goal&gt;start&lt;/goal&gt;       &lt;/goals&gt;     &lt;/execution&gt;     &lt;execution&gt;       &lt;id&gt;remove-it-database&lt;/id&gt;       &lt;phase&gt;post-integration-test&lt;/phase&gt;       &lt;goals&gt;         &lt;goal&gt;stop&lt;/goal&gt;       &lt;/goals&gt;     &lt;/execution&gt;   &lt;/executions&gt; &lt;/plugin&gt;   &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;       &lt;executable&gt;true&lt;/executable&gt;     &lt;/configuration&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;goals&gt;           &lt;goal&gt;repackage&lt;/goal&gt;         &lt;/goals&gt;       &lt;/execution&gt;       &lt;execution&gt;         &lt;id&gt;pre-integration-test&lt;/id&gt;         &lt;goals&gt;           &lt;goal&gt;start&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;workingDirectory&gt;${project.basedir}&lt;/workingDirectory&gt;           &lt;environmentVariables&gt;             &lt;app.datasource.port&gt;${app.datasource.port}&lt;/app.datasource.port&gt;            &lt;/environmentVariables&gt;            &lt;profiles&gt;              &lt;profile&gt;integration&lt;/profile&gt;            &lt;/profiles&gt;          &lt;/configuration&gt;        &lt;/execution&gt;        &lt;execution&gt;          &lt;id&gt;post-integration-test&lt;/id&gt;          &lt;goals&gt;            &lt;goal&gt;stop&lt;/goal&gt;          &lt;/goals&gt;        &lt;/execution&gt;      &lt;/executions&gt;    &lt;/plugin&gt;    &lt;plugin&gt;      &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;      &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;      &lt;version&gt;${frontend-maven-plugin.version}&lt;/version&gt;      &lt;executions&gt;        &lt;execution&gt;        &lt;id&gt;run e2e tests&lt;/id&gt;        &lt;phase&gt;integration-test&lt;/phase&gt;        &lt;goals&gt;          &lt;goal&gt;npm&lt;/goal&gt;        &lt;/goals&gt;        &lt;configuration&gt;          &lt;workingDirectory&gt;../frontend&lt;/workingDirectory&gt;          &lt;arguments&gt;run verify&lt;/arguments&gt;        &lt;/configuration&gt;        &lt;/execution&gt;      &lt;/executions&gt;    &lt;/plugin&gt;  &lt;/plugins&gt; </code></pre>  <p>Sometimes everything works fine. But sometimes the process just hangs. So I started it with </p>  <p><code>mvn -X clean verify</code> </p>  <p>The result is rather strange as the spring-boot-maven plugin hangs and is  checking the ready state of the spring application only once. All other attemps only follow after hitting Ctrl-C. </p>  <pre><code>... [DEBUG] Active profile(s): integration [DEBUG] Application argument(s):  [DEBUG] Environment variable(s): app.datasource.port=16032 [DEBUG] Connecting to local MBeanServer at port 9001 [DEBUG] Waiting for spring application to start... [DEBUG] MBean server at port 9001 is not up yet... [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 1)    .   ____          _            __ _ _  /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\  \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v2.1.5.RELEASE)  2019-06-12 15:34:06.482  INFO 113957 --- [ main] ...: Starting Application on kt101 with PID 113957 ... ... 2019-06-12 15:34:30.801  INFO 113957 --- [ main] ...: Started Application in 24.862 seconds (JVM running for 25.284) </code></pre>  <p>The process hangs. Nothing happens. No more messages checking the application state (like attempt 2)</p>  <p>After hitting <strong>[Ctrl-C]</strong></p>  <pre><code>2019-06-12 16:05:02.258  INFO 113957 --- [      Thread-25] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService [DEBUG] DOCKER&gt; Closing LogWaitChecker callback [DEBUG] MBean server at port 9001 is not up yet... [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 2) [DEBUG] MBean server at port 9001 is not up yet... [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 3) ... [DEBUG] MBean server at port 9001 is not up yet... [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 60) ... [INFO] backend ................................... FAILURE [33:37 min] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 33:47 min [INFO] Finished at: 2019-06-12T16:06:05+02:00 [INFO] Final Memory: 238M/6637M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started: Failed to connect to MBean server at port 9001: Spring application did not start before the configured timeout (60000ms -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Could not figure out if the application has started     at org.springframework.boot.maven.StartMojo.waitForSpringApplication (StartMojo.java:198)     at org.springframework.boot.maven.StartMojo.runWithForkedJvm (StartMojo.java:97)     at org.springframework.boot.maven.AbstractRunMojo.doRunWithForkedJvm (AbstractRunMojo.java:284)     at org.springframework.boot.maven.AbstractRunMojo.run (AbstractRunMojo.java:245)     at org.springframework.boot.maven.AbstractRunMojo.execute (AbstractRunMojo.java:198)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Failed to connect to MBean server at port 9001     at org.springframework.boot.maven.StartMojo.waitForForkedSpringApplication (StartMojo.java:224)     at org.springframework.boot.maven.StartMojo.waitForSpringApplication (StartMojo.java:187)     at org.springframework.boot.maven.StartMojo.runWithForkedJvm (StartMojo.java:97)     at org.springframework.boot.maven.AbstractRunMojo.doRunWithForkedJvm (AbstractRunMojo.java:284)     at org.springframework.boot.maven.AbstractRunMojo.run (AbstractRunMojo.java:245)     at org.springframework.boot.maven.AbstractRunMojo.execute (AbstractRunMojo.java:198)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Spring application did not start before the configured timeout (60000ms     at org.springframework.boot.maven.StartMojo.execute (StartMojo.java:277)     at org.springframework.boot.maven.StartMojo.waitForForkedSpringApplication (StartMojo.java:207)     at org.springframework.boot.maven.StartMojo.waitForSpringApplication (StartMojo.java:187)     at org.springframework.boot.maven.StartMojo.runWithForkedJvm (StartMojo.java:97)     at org.springframework.boot.maven.AbstractRunMojo.doRunWithForkedJvm (AbstractRunMojo.java:284)     at org.springframework.boot.maven.AbstractRunMojo.run (AbstractRunMojo.java:245)     at org.springframework.boot.maven.AbstractRunMojo.execute (AbstractRunMojo.java:198)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) [ERROR]  [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR]  [ERROR] After correcting the problems, you can resume the build with the command [ERROR]   mvn &lt;goals&gt; -rf :backend </code></pre>  <p>This is rather strange as the spring-boot-maven-plugin seems to hang in the line <code>synchronized(this.lock)</code> and can not enter the synchronized block.</p>  <p><a href='https://github.com/spring-projects/spring-boot/blob/9b5cb4f9b86f258403419a92124a70eb3c099667/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java#L246' rel='noreferrer'>https://github.com/spring-projects/spring-boot/blob/9b5cb4f9b86f258403419a92124a70eb3c099667/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java#L246</a></p>  <pre><code>            String message = 'Spring application is not ready yet, waiting ' + wait + 'ms (attempt ' + (i + 1) + ')';             getLog().debug(message);             synchronized (this.lock) {                 try {                     this.lock.wait(wait);                 }                 catch (InterruptedException ex) {                     Thread.currentThread().interrupt();                     throw new IllegalStateException('Interrupted while waiting for Spring Boot app to start.');                 } } </code></pre>  <p>And even more strange: it happens one out of four times I execute this command.</p>  <p>I have two Java Processes running. The original maven process and my Spring Application. I took ThreadDumps of both.</p>  <p>Maven process:</p>  <p><a href='https://pastebin.com/KCfZxDEa' rel='noreferrer'>https://pastebin.com/KCfZxDEa</a></p>  <p>Forked Process with Spring Application</p>  <p><a href='https://pastebin.com/fn0SHjVW' rel='noreferrer'>https://pastebin.com/fn0SHjVW</a></p>  <p>The Spring Application runs fine by the way if I open localhost:8080 The maven plugin seems to hang in the JMXConnection:</p>  <pre><code>'main' #1 prio=5 os_prio=0 tid=0x00007f28dc00b800 nid=0x1e2f runnable [0x00007f28e6865000]    java.lang.Thread.State: RUNNABLE     at java.net.SocketInputStream.socketRead0(Native Method)     at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)     at java.net.SocketInputStream.read(SocketInputStream.java:171)     at java.net.SocketInputStream.read(SocketInputStream.java:141)     at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)     at java.io.BufferedInputStream.read(BufferedInputStream.java:265)     - locked &lt;0x00000006b0963158&gt; (a java.io.BufferedInputStream)     at java.io.DataInputStream.readByte(DataInputStream.java:265)     at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:222)     at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:161)     at com.sun.jmx.remote.internal.PRef.invoke(Unknown Source)     at javax.management.remote.rmi.RMIConnectionImpl_Stub.getAttribute(Unknown Source)     at javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.getAttribute(RMIConnector.java:903)     at org.springframework.boot.maven.SpringApplicationAdminClient.isReady(SpringApplicationAdminClient.java:63) </code></pre>  <p>How can I fix this? Why does it happen sometimes and not always?</p> ",
    "OwnerUserId": "351758",
    "LastEditorUserId": "351758",
    "LastEditDate": "2019-06-14T10:08:34.950",
    "LastActivityDate": "2019-06-14T10:08:34.950",
    "Title": "Spring boot maven plugin hangs",
    "Tags": "<maven><spring-boot>",
    "AnswerCount": "0",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": null
  },
  {
    "Id": "56638350",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56687848",
    "CreationDate": "2019-06-17T20:17:27.820",
    "Score": "8",
    "ViewCount": "7824",
    "Body": "<p>I am trying to follow <a href='https://www.baeldung.com/spring-boot-vaadin' rel='noreferrer'>this Spring Boot/Vaadin guide</a> <strong>however</strong> I'm using Gradle, <em>not</em> Maven.</p>  <p>At the very top of that guide they say to use the following Maven XML:</p>  <pre><code>&lt;dependencyManagement&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.vaadin&lt;/groupId&gt;             &lt;artifactId&gt;vaadin-bom&lt;/artifactId&gt;             &lt;version&gt;10.0.11&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;scope&gt;import&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt; </code></pre>  <p>However I don't see a <code>dependencyManagement</code> task available via Gradle. So I ask: how do I replicate the same behavior as the <code>&lt;dependencyManagement/&gt;</code> XML element above over in 'Gradle land'?</p>  <h3>Update: current attempt</h3>  <pre><code>dependencyManagement {      imports {           mavenBom 'com.vaadin:vaadin-bom:10.0.11'      } } </code></pre>  <p>Only problem with this is that when I add it to my <code>build.gradle</code> and then run <code>./gradlew clean</code> I get the following Gradle error:</p>  <blockquote>   <p>'<em>Could not find method dependencyManagement() for arguments...</em>'</p> </blockquote> ",
    "OwnerUserId": "5235665",
    "LastEditorUserId": "5235665",
    "LastEditDate": "2019-06-17T20:31:08.860",
    "LastActivityDate": "2022-11-05T06:30:48.810",
    "Title": "Replicating Maven 'dependencyManagement' tag from inside Gradle build",
    "Tags": "<maven><spring-boot><gradle>",
    "AnswerCount": "2",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>This should give you a working build:</p>  <pre><code>plugins {     // the Gradle plugin which provides the \u201cdependencyManagement\u201d block     id 'io.spring.dependency-management' version '1.0.6.RELEASE'     // add Java build functionality to be able to follow the Vaadin guide     id 'java' }  dependencyManagement {     imports {         // the Maven BOM which contains a coherent set of module versions         // for Vaadin dependencies         mavenBom 'com.vaadin:vaadin-bom:10.0.11'     } }  repositories {     // find dependency modules on Maven Central     mavenCentral() }  dependencies {     // the dependency module you need according to the Vaadin with     // Spring Boot guide; the version of the module is taken from the     // imported BOM; transitive dependencies are automatically taken     // care of by Gradle (just as with Maven)     compile 'com.vaadin:vaadin-spring-boot-starter' } </code></pre>  <p>Run <code>./gradlew dependencies --configuration compileClasspath</code> to see that all dependencies are available on your Java compile classpath now.</p>  <hr>  <p>Edited to reply to the question in the comments: indeed, the import of the BOM leads to a slightly different set of dependencies than would be used without it. You can see the dependencies difference like so:</p>  <ol> <li><code>./gradlew dependencies --configuration compileClasspath &gt; with-BOM.txt</code></li> <li>Remove the <code>dependencyManagement</code> block and add a version to the single dependency: <code>compile 'com.vaadin:vaadin-spring-boot-starter:10.0.11'</code></li> <li><code>./gradlew dependencies --configuration compileClasspath &gt; without-BOM.txt</code></li> <li><code>diff -u with-BOM.txt without-BOM.txt</code></li> </ol>  <p>You can see slight differences like <code>org.webjars.bowergithub.webcomponents:webcomponentsjs:1.2.6</code> being used with the BOM and version <code>1.2.2</code> without it. The reason for that can be found in <a href='https://repo1.maven.org/maven2/com/vaadin/vaadin-bom/10.0.11/vaadin-bom-10.0.11.pom' rel='nofollow noreferrer'>the BOM</a> where version <code>1.2.6</code> is defined and where the authors also mention the reason for that: \u201cTransitive webjar dependencies, defined here for repeatable builds\u201d</p> ",
    "highest_rated_answer": "<p>Generally maven <code>dependencyManagement</code> tag is used to import bom or control transitive versions. Gradle does that with <code>platform</code> component, like below example.</p> <pre><code>dependencies {   implementation platform('com.vaadin:vaadin-bom:10.0.11')   implementation ('com.vaadin:vaadin-core') } </code></pre> <p>This does not force you to depend on spring plugin for importing bom.</p> "
  },
  {
    "Id": "58091902",
    "PostTypeId": "1",
    "CreationDate": "2019-09-25T05:52:49.137",
    "Score": "8",
    "ViewCount": "13781",
    "Body": "<p>I using spring boot multiple modules and i want inherit application.properties from parent . I have parent module :  spring-ecommere-demo and sub module : model , core and security. In parent modules i put some config jdbc look like : </p>  <p><strong>application.properties</strong> (parent module)</p>  <pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/BaoTrung spring.datasource.username=root spring.datasource.password=123456 spring.jpa.show-sql=true </code></pre>  <p>And in sub module security i specific config look like:</p>  <p><strong>application-security.properties</strong> (security module)</p>  <pre><code>app.jwtSecret= JWTSuperSecretKey app.jwtExpirationInMs = 604800000 </code></pre>  <p>And config in Spring Boot application in security module look like : </p>  <pre><code>@SpringBootApplication(scanBasePackages = 'springecommeredemo') @PropertySources({         @PropertySource('application-security.properties') }) </code></pre>  <p>But when i run it, it throw me exception </p>  <p>Description:</p>  <blockquote>   <p>Failed to configure a DataSource: 'url' attribute is not specified and   no embedded datasource could be configured.</p>      <p>Reason: Failed to determine a suitable driver class</p>      <p>Action:</p>      <p>Consider the following:   If you want an embedded database (H2, HSQL or   Derby), please put it on the classpath.   If you have database settings   to be loaded from a particular profile you may need to activate it   (the profiles dev are currently active).</p> </blockquote>  <p>It mean sub module security can't inherit properties from parent project. How to inherit all properties from parent module. Because i using same database , i don't want config duplicate jdbc in my project. I want inherit common properties.Please help</p> ",
    "OwnerUserId": "6902739",
    "LastActivityDate": "2022-12-01T20:03:51.113",
    "Title": "How to inherit application.properties with spring boot multiple modules",
    "Tags": "<java><spring><maven><spring-boot><dependency-properties>",
    "AnswerCount": "4",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You need to add multiple <code>Properties</code> can be accessed in Spring, I added duplicated annotation for <code>@PropertySource</code> since before <code>Java 8</code> if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With <code>Java 8</code>, that's no longer necessary, allowing for cleaner, more readable code.</p>  <pre><code>@SpringBootApplication(scanBasePackages = 'springecommeredemo') @PropertySource('application.properties') @PropertySource('application-security.properties') </code></pre> "
  },
  {
    "Id": "58311212",
    "PostTypeId": "1",
    "CreationDate": "2019-10-09T19:42:30.033",
    "Score": "8",
    "ViewCount": "1511",
    "Body": "<p>I am currently using SonarQube Community Edition version 7.7 on Java 8 JDK using Maven, Iwant to start evaluating OpenJDK 13 . Sonarqube doesn't support OpenJDK 13</p> ",
    "OwnerUserId": "11466265",
    "LastEditorUserId": "2653911",
    "LastEditDate": "2019-10-10T10:18:47.147",
    "LastActivityDate": "2019-11-19T19:41:08.807",
    "Title": "is there any compatible version of SonarQube with Java 13",
    "Tags": "<maven><spring-boot><sonarqube><java-13>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ClosedDate": "2020-02-10T08:20:34.487",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>As per the documentation <a href='https://docs.sonarqube.org/latest/requirements/requirements/' rel='nofollow noreferrer'>here</a>, it says SonarQube only supports JDK11 (Oracle or OpenJDK)</p> "
  },
  {
    "Id": "58749384",
    "PostTypeId": "1",
    "CreationDate": "2019-11-07T13:04:10.583",
    "Score": "8",
    "ViewCount": "11832",
    "Body": "<p>I am getting this error :</p>  <pre><code>APPLICATION FAILED TO START ***************************  Description:  Configuration property name 'appConfig.baseVersion' is not valid:      Invalid characters: 'C'     Bean: paymentCheckoutRequestBuilder     Reason: Canonical names should be kebab-case ('-' separated), lowercase alpha-numeric characters and must start with a letter  Action:  Modify 'appConfig.baseVersion' so that it conforms to the canonical names requirements.  </code></pre>  <p>paymentCheckoutRequestBuilder is a bean of class PaymentCheckoutRequestBuilder. How am I supposed to fix this , you cannot name a class in kebab-case.</p>  <p>Also, this error occurred after I tried upgrading my spring-boot to 2.2.0.</p>  <p>And what is this appConfig.baseVersion , not able to find anything online. </p> ",
    "OwnerUserId": "3220051",
    "LastActivityDate": "2021-10-08T11:01:50.933",
    "Title": "Spring boot application fails to run because of bean naming violation",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>property appConfig.baseVersion is in camel case so you should use use prefix in configuration as shown below</p> <pre><code>     mqConfig:          enable: false       </code></pre> <p>then your Configuration file must have <code>@ConfigurationProperties(prefix = &quot;mq-config&quot;)</code></p> <p>For current example the application.yaml should be</p> <pre><code>appConfig:    baseVersion: 1 </code></pre> <p>And java class should be</p> <pre><code>@Configuration @ConfigurationProperties(prefix = &quot;app-config&quot;) public class TestConfig {   int baseVersion;  } </code></pre> <p>And the</p> "
  },
  {
    "Id": "58878713",
    "PostTypeId": "1",
    "CreationDate": "2019-11-15T14:07:56.273",
    "Score": "8",
    "ViewCount": "9927",
    "Body": "<p>I am developing a simple spring boot web enabled application. Spring boot Version is 2.2.1. When I start application I am getting this error</p>  <pre><code>*************************** APPLICATION FAILED TO START ***************************  Description:  An attempt was made to call a method that does not exist. The attempt was made from the following location:      org.hibernate.validator.internal.xml.config.ValidationBootstrapParameters.&lt;init&gt;(ValidationBootstrapParameters.java:63)  The following method did not exist:      javax.validation.BootstrapConfiguration.getClockProviderClassName()Ljava/lang/String;  The method's class, javax.validation.BootstrapConfiguration, is available from the following locations:      jar:file:/home/shantanu/.m2/repository/io/swagger/swagger-codegen-cli/2.3.0/swagger-codegen-cli-2.3.0.jar!/javax/validation/BootstrapConfiguration.class     jar:file:/home/shantanu/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar!/javax/validation/BootstrapConfiguration.class     jar:file:/home/shantanu/.m2/repository/jakarta/validation/jakarta.validation-api/2.0.1/jakarta.validation-api-2.0.1.jar!/javax/validation/BootstrapConfiguration.class  It was loaded from the following location:      file:/home/shantanu/.m2/repository/io/swagger/swagger-codegen-cli/2.3.0/swagger-codegen-cli-2.3.0.jar   Action:  Correct the classpath of your application so that it contains a single, compatible version of javax.validation.BootstrapConfiguration </code></pre>  <p>I have no idea what is causing this error. I even tried putting exclusions for javax.validations on multiple dependencies but nothing helped. Here's the POM dependency tree. Please help.</p>  <pre><code>[INFO] com.ibm.dip:MonolithDecomposer:jar:0.1 [INFO] +- org.springframework.boot:spring-boot-starter:jar:2.2.1.RELEASE:compile [INFO] |  +- org.springframework.boot:spring-boot:jar:2.2.1.RELEASE:compile [INFO] |  |  \\- org.springframework:spring-context:jar:5.2.1.RELEASE:compile [INFO] |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.2.1.RELEASE:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.2.1.RELEASE:compile [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile [INFO] |  |  |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile [INFO] |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.12.1:compile [INFO] |  |  |  \\- org.apache.logging.log4j:log4j-api:jar:2.12.1:compile [INFO] |  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.29:compile [INFO] |  +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile [INFO] |  +- org.springframework:spring-core:jar:5.2.1.RELEASE:compile [INFO] |  |  \\- org.springframework:spring-jcl:jar:5.2.1.RELEASE:compile [INFO] |  \\- org.yaml:snakeyaml:jar:1.25:compile [INFO] +- org.springframework.boot:spring-boot-devtools:jar:2.2.1.RELEASE:runtime (optional)  [INFO] +- org.springframework.boot:spring-boot-starter-test:jar:2.2.1.RELEASE:test [INFO] |  +- org.springframework.boot:spring-boot-test:jar:2.2.1.RELEASE:test [INFO] |  +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.2.1.RELEASE:test [INFO] |  +- com.jayway.jsonpath:json-path:jar:2.4.0:test [INFO] |  |  \\- net.minidev:json-smart:jar:2.3:test [INFO] |  |     \\- net.minidev:accessors-smart:jar:1.2:test [INFO] |  |        \\- org.ow2.asm:asm:jar:5.0.4:test [INFO] |  +- jakarta.xml.bind:jakarta.xml.bind-api:jar:2.3.2:test [INFO] |  |  \\- jakarta.activation:jakarta.activation-api:jar:1.2.1:test [INFO] |  +- org.junit.jupiter:junit-jupiter:jar:5.5.2:test [INFO] |  |  +- org.junit.jupiter:junit-jupiter-api:jar:5.5.2:test [INFO] |  |  |  +- org.apiguardian:apiguardian-api:jar:1.1.0:test [INFO] |  |  |  +- org.opentest4j:opentest4j:jar:1.2.0:test [INFO] |  |  |  \\- org.junit.platform:junit-platform-commons:jar:1.5.2:test [INFO] |  |  +- org.junit.jupiter:junit-jupiter-params:jar:5.5.2:test [INFO] |  |  \\- org.junit.jupiter:junit-jupiter-engine:jar:5.5.2:test [INFO] |  |     \\- org.junit.platform:junit-platform-engine:jar:1.5.2:test [INFO] |  +- org.mockito:mockito-junit-jupiter:jar:3.1.0:test [INFO] |  +- org.assertj:assertj-core:jar:3.13.2:test [INFO] |  +- org.hamcrest:hamcrest:jar:2.1:compile [INFO] |  +- org.mockito:mockito-core:jar:3.1.0:test [INFO] |  |  +- net.bytebuddy:byte-buddy:jar:1.10.2:test [INFO] |  |  +- net.bytebuddy:byte-buddy-agent:jar:1.10.2:test [INFO] |  |  \\- org.objenesis:objenesis:jar:2.6:test [INFO] |  +- org.skyscreamer:jsonassert:jar:1.5.0:test [INFO] |  |  \\- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test [INFO] |  +- org.springframework:spring-test:jar:5.2.1.RELEASE:test [INFO] |  \\- org.xmlunit:xmlunit-core:jar:2.6.3:test [INFO] +- com.github.javaparser:javaparser-core:jar:3.15.2:compile [INFO] +- org.apache.commons:commons-io:jar:1.3.2:compile [INFO] +- org.springframework.boot:spring-boot-starter-data-mongodb:jar:2.2.1.RELEASE:compile [INFO] |  +- org.mongodb:mongodb-driver:jar:3.11.2:compile [INFO] |  |  +- org.mongodb:bson:jar:3.11.2:compile [INFO] |  |  \\- org.mongodb:mongodb-driver-core:jar:3.11.2:compile [INFO] |  \\- org.springframework.data:spring-data-mongodb:jar:2.2.1.RELEASE:compile [INFO] |     +- org.springframework:spring-tx:jar:5.2.1.RELEASE:compile [INFO] |     +- org.springframework:spring-beans:jar:5.2.1.RELEASE:compile [INFO] |     +- org.springframework:spring-expression:jar:5.2.1.RELEASE:compile [INFO] |     \\- org.springframework.data:spring-data-commons:jar:2.2.1.RELEASE:compile [INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.10.0:compile [INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.10.0:compile [INFO] |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.10.0:compile [INFO] +- commons-lang:commons-lang:jar:2.6:compile [INFO] +- io.swagger:swagger-codegen-cli:jar:2.3.0:compile [INFO] +- io.swagger.parser.v3:swagger-parser:jar:2.0.15:compile [INFO] |  +- io.swagger.parser.v3:swagger-parser-v2-converter:jar:2.0.15:compile [INFO] |  |  +- io.swagger:swagger-parser:jar:1.0.47:compile [INFO] |  |  |  \\- io.swagger:swagger-core:jar:1.5.24:compile [INFO] |  |  |     +- io.swagger:swagger-models:jar:1.5.24:compile [INFO] |  |  |     |  \\- io.swagger:swagger-annotations:jar:1.5.24:compile [INFO] |  |  |     \\- com.google.guava:guava:jar:27.0.1-android:compile [INFO] |  |  |        +- com.google.guava:failureaccess:jar:1.0.1:compile [INFO] |  |  |        +- com.google.guava:listenablefuture:jar:9999.0-empty-to-avoid-conflict-with-guava:compile [INFO] |  |  |        +- org.checkerframework:checker-compat-qual:jar:2.5.2:compile [INFO] |  |  |        +- com.google.errorprone:error_prone_annotations:jar:2.2.0:compile [INFO] |  |  |        +- com.google.j2objc:j2objc-annotations:jar:1.1:compile [INFO] |  |  |        \\- org.codehaus.mojo:animal-sniffer-annotations:jar:1.17:compile [INFO] |  |  +- io.swagger:swagger-compat-spec-parser:jar:1.0.47:compile [INFO] |  |  |  +- com.github.java-json-tools:json-schema-validator:jar:2.2.8:compile [INFO] |  |  |  |  +- com.github.java-json-tools:json-schema-core:jar:1.2.8:compile [INFO] |  |  |  |  |  +- org.mozilla:rhino:jar:1.7R4:compile [INFO] |  |  |  |  |  \\- com.github.fge:uri-template:jar:0.9:compile [INFO] |  |  |  |  +- javax.mail:mailapi:jar:1.4.3:compile [INFO] |  |  |  |  |  \\- javax.activation:activation:jar:1.1:compile [INFO] |  |  |  |  +- joda-time:joda-time:jar:2.10.5:compile [INFO] |  |  |  |  +- com.googlecode.libphonenumber:libphonenumber:jar:8.0.0:compile [INFO] |  |  |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile [INFO] |  |  |  |  \\- net.sf.jopt-simple:jopt-simple:jar:5.0.3:compile [INFO] |  |  |  +- com.github.fge:json-patch:jar:1.6:compile [INFO] |  |  |  |  \\- com.github.fge:jackson-coreutils:jar:1.6:compile [INFO] |  |  |  |     \\- com.github.fge:msg-simple:jar:1.1:compile [INFO] |  |  |  |        \\- com.github.fge:btf:jar:1.2:compile [INFO] |  |  |  \\- org.apache.httpcomponents:httpclient:jar:4.5.10:compile [INFO] |  |  |     +- org.apache.httpcomponents:httpcore:jar:4.4.12:compile [INFO] |  |  |     \\- commons-codec:commons-codec:jar:1.13:compile [INFO] |  |  +- io.swagger.core.v3:swagger-models:jar:2.0.10:compile [INFO] |  |  \\- io.swagger.parser.v3:swagger-parser-core:jar:2.0.15:compile [INFO] |  +- io.swagger.parser.v3:swagger-parser-v3:jar:2.0.15:compile [INFO] |  |  +- io.swagger.core.v3:swagger-core:jar:2.0.10:compile [INFO] |  |  |  +- javax.xml.bind:jaxb-api:jar:2.3.1:compile [INFO] |  |  |  |  \\- javax.activation:javax.activation-api:jar:1.2.0:compile [INFO] |  |  |  \\- io.swagger.core.v3:swagger-annotations:jar:2.0.10:compile [INFO] |  |  \\- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.10.0:compile [INFO] |  +- org.slf4j:slf4j-ext:jar:1.7.29:compile [INFO] |  +- org.slf4j:slf4j-api:jar:1.7.29:compile [INFO] |  \\- commons-io:commons-io:jar:2.4:compile [INFO] +- org.json:json:jar:20160810:compile [INFO] +- com.googlecode.json-simple:json-simple:jar:1.1.1:compile [INFO] |  \\- junit:junit:jar:4.12:compile [INFO] |     \\- org.hamcrest:hamcrest-core:jar:2.1:compile [INFO] +- javax.validation:validation-api:jar:2.0.1.Final:compile [INFO] +- org.apache.maven:maven-model:jar:3.5.0:compile [INFO] |  +- org.codehaus.plexus:plexus-utils:jar:3.0.24:compile [INFO] |  \\- org.apache.commons:commons-lang3:jar:3.9:compile [INFO] +- org.springframework.boot:spring-boot-starter-web:jar:2.2.1.RELEASE:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-json:jar:2.2.1.RELEASE:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.10.0:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.10.0:compile [INFO] |  |  \\- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.10.0:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.2.1.RELEASE:compile [INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.27:compile [INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:9.0.27:compile [INFO] |  |  \\- org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.27:compile [INFO] |  +- org.springframework.boot:spring-boot-starter-validation:jar:2.2.1.RELEASE:compile [INFO] |  |  +- jakarta.validation:jakarta.validation-api:jar:2.0.1:compile [INFO] |  |  \\- org.hibernate.validator:hibernate-validator:jar:6.0.18.Final:compile [INFO] |  |     +- org.jboss.logging:jboss-logging:jar:3.4.1.Final:compile [INFO] |  |     \\- com.fasterxml:classmate:jar:1.5.1:compile [INFO] |  +- org.springframework:spring-web:jar:5.2.1.RELEASE:compile [INFO] |  \\- org.springframework:spring-webmvc:jar:5.2.1.RELEASE:compile [INFO] |     \\- org.springframework:spring-aop:jar:5.2.1.RELEASE:compile [INFO] \\- org.eclipse.jgit:org.eclipse.jgit:jar:5.2.1.201812262042-r:compile [INFO]    +- com.jcraft:jsch:jar:0.1.54:compile [INFO]    +- com.jcraft:jzlib:jar:1.1.1:compile [INFO]    \\- com.googlecode.javaewah:JavaEWAH:jar:1.1.6:compile </code></pre> ",
    "OwnerUserId": "877942",
    "LastActivityDate": "2020-03-15T10:48:10.413",
    "Title": "Spring boot application fails to start with javax.validation.BootstrapConfiguration error",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>It looks like you have both have: </p>  <p><code>jakarta.validation:jakarta.validation-api</code></p>  <p>(transitive dependency via <code>org.springframework.boot:spring-boot-starter-validation</code>) </p>  <p>and </p>  <p><code>javax.validation:validation-api</code></p>  <p>on your classpath. </p>  <p>Since Spring Boot 2.2: Java EE dependencies with a <code>javax.</code> group ID are replaced by the equivalent Jakarta EE dependencies with a <code>jakarta.</code> group ID in Spring Boot\u2019s starters.</p>  <p>For more information check the release notes:<br> <a href='https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes#jakarta-ee-dependencies' rel='noreferrer'>https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes#jakarta-ee-dependencies</a></p>  <p>So you can remove the <code>javax.validation:validation-api</code> dependency from your project.</p> "
  },
  {
    "Id": "60530318",
    "PostTypeId": "1",
    "CreationDate": "2020-03-04T16:15:00.987",
    "Score": "8",
    "ViewCount": "30449",
    "Body": "<p>In my project there are many tests marked with @SpringBootTest which I don't regard as unit tests and rather as integration tests. So I would like to run only the unit tests when I execute:</p>  <p>mvn clean install</p>  <p>actually I want to run this command as part of pre-commit git hook but @SpringBootTest makes it longer to finish execution. </p>  <p>Is there a way to exclude the tests marked with @SpringBootTest? May be there is a pattern we can pass to maven that excludes/certain tests. Or may be write a test suite that includes the spring boot tests.</p>  <p>I did google search to achieve the above but don't have much luck.</p>  <p>Is there even a better way? </p>  <p>@Update: Constraint is maven pom file can't be modified.</p>  <p>@Update2: I have a solution that looks promising:</p>  <pre><code>1. Use @Category('IntegrationTests') for @SpringBootTests tests. 2. Create TestSuite with excludeCategory: @RunWith(CategoryRunner.class) @ExcludeCategory('IntegrationTests') public class TestSuite { } 3. From mvn command line, run only TestSuite. </code></pre>  <p>I am not sure this is the best. Appreciate anyone's better approach.</p> ",
    "OwnerUserId": "1539343",
    "LastEditorUserId": "1539343",
    "LastEditDate": "2020-03-05T17:39:21.373",
    "LastActivityDate": "2020-08-30T12:55:12.167",
    "Title": "Maven / Spring boot project - how to skip @SpringBootTest",
    "Tags": "<java><spring-boot><maven><junit>",
    "AnswerCount": "3",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>If you have different kinds of tests, and want to be able to specify which tests to run, you can do that with @Conditionals or with @Profile.</p>  <p>Examples:</p>  <ul> <li><p><a href='https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.html' rel='noreferrer'><code>@ConditionalOnProperty('test.run.integration')</code></a> The class will only be loaded by Spring when property <code>test.run.integration</code> is defined and not <code>false</code>.</p></li> <li><p><a href='https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html' rel='noreferrer'><code>@Profile('integrationtest')</code></a> The class will only be loaded by Spring when profile <code>integrationtest</code> is active.</p></li> </ul> "
  },
  {
    "Id": "63850202",
    "PostTypeId": "1",
    "AcceptedAnswerId": "63853229",
    "CreationDate": "2020-09-11T15:39:28.887",
    "Score": "8",
    "ViewCount": "16401",
    "Body": "<p>I am using Spring Boot <code>3.2.1</code>.</p> <p>I don't want to put sensitive data at config file as <code>application.yml</code>. So they are referring to environment variables.</p> <p>Execution works fine at IntelliJ configuration settings for application (at <code>Environment variables</code> section).</p> <p>However, it fails for maven execution from the console:</p> <pre><code>./mvnw -Ddemo-api-key=all56 -Ddemo-host=https://demo.api spring-boot:run </code></pre> <p>Here is exception details:</p> <pre><code>java.lang.IllegalArgumentException: Not enough variable values available to expand 'demo-host'         at org.springframework.web.util.UriComponents$VarArgsTemplateVariables.getValue(UriComponents.java:367) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.web.util.UriComponents.expandUriComponent(UriComponents.java:262) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.expand(HierarchicalUriComponents.java:960) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:434) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.web.util.HierarchicalUriComponents.expandInternal(HierarchicalUriComponents.java:52) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.web.util.UriComponents.expand(UriComponents.java:172) ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE] </code></pre> <p>Here is a snippet from <code>application.yml</code>:</p> <pre><code>car-parks-url: ${demo-host}/cap-ws/getCarParks?apiKey=${demo-api-key} </code></pre> <p>If I will put it higher at <code>application.yml</code> it works fine:</p> <pre><code>demo-api-key: all56 demo-host: https://demo.api </code></pre> <p>URL is formed correctly and all data are pulled fine.</p> <p><em><strong>Could not understand what is missed for passing it as the environment variables with maven?</strong></em></p> ",
    "OwnerUserId": "1498427",
    "LastEditorUserId": "1498427",
    "LastEditDate": "2020-09-11T18:27:29.713",
    "LastActivityDate": "2020-09-11T20:32:16.200",
    "Title": "Pass environment variables to Spring Boot application with Maven",
    "Tags": "<spring-boot><maven><environment-variables><yaml>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>It's not the same as:</p> <pre><code>java -jar -Ddemo-api-key=all56 -Ddemo-host=https://demo.api myApp.jar </code></pre> <p>Where you are passing env vars <em><strong>directly to your application</strong></em>.</p> <p>If you do:</p> <pre><code>./mvnw -Ddemo-api-key=all56 \\ -Ddemo-host=https://demo.api spring-boot:run </code></pre> <p>You are passing the vars to <em><strong>maven task and not to the application</strong></em>.</p> <p>You could use:</p> <pre><code> ./mvnw  spring-boot:run \\  -Dspring-boot.run.arguments=&quot;--demo-host=https://demo.api --demo-api-key=all56&quot; </code></pre> <p>or</p> <pre><code> ./mvnw  spring-boot:run -Dspring-boot.run.jvmArguments=&quot;\\  -Ddemo-host=https://demo.api -Ddemo-api-key=all56&quot; </code></pre> <p>Those commands indicate that you what to pass those vars to Spring Boot application.</p> <p><em><strong>Additional resource:</strong></em></p> <ul> <li><a href='https://www.logicbig.com/tutorials/spring-framework/spring-boot/different-ways-to-pass-application-properties.html' rel='noreferrer'>Spring Boot: Different ways to pass application properties</a></li> </ul> ",
    "highest_rated_answer": null
  },
  {
    "Id": "64414584",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67416368",
    "CreationDate": "2020-10-18T14:40:26.367",
    "Score": "8",
    "ViewCount": "11797",
    "Body": "<p>I was trying to build a project about API authentication using JWT. I have installed the io.jsonwebtoken package with version 0.9.1 in order to do that.</p> <p>My pom.xml</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.xyz&lt;/groupId&gt;     &lt;artifactId&gt;jwt_api_authentication&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;jwt_api_authentication&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;                  &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;                  &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;                  &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;                  &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;                  &lt;dependency&gt;             &lt;!-- JSON Web Token Support --&gt;             &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;             &lt;artifactId&gt;jjwt&lt;/artifactId&gt;             &lt;version&gt;0.9.1&lt;/version&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;  </code></pre> <p>While I'm trying to import &quot;io.jsonwebtoken.security.Keys&quot; I'm getting this error: &quot;Cannot resolve symbol 'security'&quot;.</p> <p>I tried 0.6.0 but still no luck.</p> <p>How can I fix this? Thanks.</p> ",
    "OwnerUserId": "10811604",
    "LastActivityDate": "2023-01-27T05:20:00.423",
    "Title": "Cannot resolve symbol 'security' while importing io.jsonwebtoken.security.Keys;",
    "Tags": "<java><spring-boot><maven><jwt><pom.xml>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I have this configuration in my pom.xml. This worked for me. I removed the dependency as you have in the question and replaced it with below.</p> <pre><code>&lt;dependency&gt;     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;     &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;     &lt;version&gt;0.11.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;     &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;     &lt;version&gt;0.11.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;     &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;     &lt;version&gt;0.11.5&lt;/version&gt; &lt;/dependency&gt; </code></pre> <p><b>Edit: 27 Jan 2023</b></p> <p>Updated versions of the libs to the latest version 0.11.5 from earlier 0.11.1 in the answer.</p> ",
    "highest_rated_answer": "<p>Based on <a href='https://search.maven.org/search?q=fc:io.jsonwebtoken.security.Keys%20AND%20g:io.jsonwebtoken' rel='noreferrer'>https://search.maven.org/search?q=fc:io.jsonwebtoken.security.Keys%20AND%20g:io.jsonwebtoken</a> (this is how you can get the list of artifacts with a specific groupId containing a specific class), you need at least 0.10.0 ofjjwt-api</p> "
  },
  {
    "Id": "65073944",
    "PostTypeId": "1",
    "AcceptedAnswerId": "65088573",
    "CreationDate": "2020-11-30T12:51:11.530",
    "Score": "8",
    "ViewCount": "1617",
    "Body": "<p>I have some integration tests that are run with the failsafe plugin. This works until Spring Boot 2.3.5.RELEASE, but after migrating to 2.4.0 the ITs are no longer executed.</p> <ol> <li><p>Does anybody have the same problem?</p> </li> <li><p>How can I debug failsafe to find out why the tests are not executed?</p> </li> </ol> ",
    "OwnerUserId": "1045142",
    "LastEditorUserId": "466862",
    "LastEditDate": "2022-03-04T14:15:17.363",
    "LastActivityDate": "2022-03-04T14:15:17.363",
    "Title": "IT are no longer executed with failsafe plugin after migrating to Spring Boot 2.4.0",
    "Tags": "<java><spring-boot><maven-failsafe-plugin>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The problem was that the ITs are Junit4 tests and Spring Boot 2.4.0 removed the vintage Junit dependency.</p> <p>I had to add the following dependency.</p> <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;     &lt;scope&gt;test&lt;/scope&gt;     &lt;exclusions&gt;         &lt;exclusion&gt;             &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;             &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;         &lt;/exclusion&gt;     &lt;/exclusions&gt; &lt;/dependency&gt; </code></pre> ",
    "highest_rated_answer": "<p>For me I &quot;updated&quot; my IT test so it uses Junit 5 style imports. Also failsafe plugin version -&gt; 3.0.0-M5</p> <p>Now they run.</p> <p>Instead of silently not running, yikes.</p> "
  },
  {
    "Id": "65874319",
    "PostTypeId": "1",
    "AcceptedAnswerId": "65874531",
    "CreationDate": "2021-01-24T18:20:48.803",
    "Score": "8",
    "ViewCount": "20055",
    "Body": "<p>I'm new in Spring Boot, I'm trying to build a simple application with REST Api, and I'm getting this error immediately when starting the app:</p> <pre><code>Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2021-01-24 20:08:19.505 ERROR 11344 --- [  restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  An attempt was made to call a method that does not exist. The attempt was made from the following location:      org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration.requestMappingHandlerAdapter(WebMvcAutoConfiguration.java:369)  The following method did not exist:      'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration.requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager, org.springframework.format.support.FormattingConversionService, org.springframework.validation.Validator)'  The method's class, org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration, is available from the following locations:      jar:file:/C:/Users/user/.m2/repository/org/springframework/spring-webmvc/5.1.3.RELEASE/spring-webmvc-5.1.3.RELEASE.jar!/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.class  The class hierarchy was loaded from the following locations:      org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration: file:/C:/Users/user/.m2/repository/org/springframework/spring-webmvc/5.1.3.RELEASE/spring-webmvc-5.1.3.RELEASE.jar     org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport: file:/C:/Users/user/.m2/repository/org/springframework/spring-webmvc/5.1.3.RELEASE/spring-webmvc-5.1.3.RELEASE.jar   Action:  Correct the classpath of your application so that it contains a single, compatible version of org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration   Process finished with exit code 0 </code></pre> <p>I did not finish yet with the development of the app, but I can't go on because of this errors.</p> <p>There are my classes so far:</p> <p>pom.xml</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.4.2&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;micro1&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;micro1&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;11&lt;/java.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;            &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;javax.persistence&lt;/groupId&gt;             &lt;artifactId&gt;javax.persistence-api&lt;/artifactId&gt;             &lt;version&gt;2.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.h2database&lt;/groupId&gt;             &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;!--            &lt;version&gt;1.4.200&lt;/version&gt;--&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;             &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;       &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;                 &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.19.1&lt;/version&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;  </code></pre> <p>controller:</p> <pre><code>package com.example.micro1.controllers;  import com.example.micro1.entities.User; import com.example.micro1.services.Service; import lombok.Data; import org.springframework.web.bind.annotation.*;  @RestController @RequestMapping(&quot;/users&quot;) @Data public class Controller {     private final Service service;      @PostMapping     User addNewUser(@RequestBody User user){         return service.add(user);     } }  </code></pre> <p>service:</p> <pre><code>package com.example.micro1.services;   import com.example.micro1.entities.User; import com.example.micro1.repositories.Repository; import lombok.Data;  @org.springframework.stereotype.Service @Data public class Service {     private final Repository repository;      public User add(User user){         return repository.save(user);     } }  </code></pre> <p>repository:</p> <pre><code>package com.example.micro1.repositories;  import com.example.micro1.entities.User; import org.springframework.data.jpa.repository.JpaRepository;  @org.springframework.stereotype.Repository public interface Repository extends JpaRepository&lt;User, Integer&gt; {     @Override     &lt;S extends User&gt; S save(S s); } </code></pre> <p>One entity for now:</p> <pre><code>package com.example.micro1.entities;  import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id;  @Entity public class User {     @Id     @GeneratedValue(strategy = GenerationType.AUTO)     private int id;     private String name;     private String phoneNumber; } </code></pre> <p>application.properties:</p> <pre><code>#h2 spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password=password spring.jpa.database-platform=org.hibernate.dialect.H2Dialect spring.h2.console.enabled=true </code></pre> <p>The application class:</p> <pre><code>package com.example.micro1;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class Micro1Application {      public static void main(String[] args) {         SpringApplication.run(Micro1Application.class, args);     }  } </code></pre> <p>Please tell me if there is something else that I should write here... Thanks!</p> ",
    "OwnerUserId": "10766303",
    "LastEditorUserId": "10766303",
    "LastEditDate": "2021-01-24T18:29:42.957",
    "LastActivityDate": "2023-06-09T18:00:49.773",
    "Title": "Spring boot application fails after start - An attempt was made to call a method that does not exist. The attempt was made from the following location",
    "Tags": "<java><spring><spring-boot><maven><spring-mvc>",
    "AnswerCount": "5",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Your starter <code>spring-boot-starter-web</code> contains inside itself these dependencies</p> <pre><code>&lt;dependency&gt;   &lt;groupId&gt;org.springframework&lt;/groupId&gt;   &lt;artifactId&gt;spring-web&lt;/artifactId&gt;   &lt;version&gt;5.3.3&lt;/version&gt;   &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;org.springframework&lt;/groupId&gt;   &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;   &lt;version&gt;5.3.3&lt;/version&gt;   &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; </code></pre> <p>besides, you add in your pom.xml that:</p> <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;         &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;     &lt;/dependency&gt; </code></pre> <p>so, when you'll start your application you have in classpath ambiguity. I think it's cause of your problem. Spring Boot starters save you the trouble of specifying explicitly declare dependency. Try to remove <code>spring-webmvc</code> dependency.</p> ",
    "highest_rated_answer": "<p>I had this same issue when I run a Spring Boot Application of Web. But I got following error messages:</p> <pre><code>*************************** APPLICATION FAILED TO START ***************************  Description:  An attempt was made to call a method that does not exist. The attempt was made from the following location:      org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration.configureHandlerExceptionResolvers(WebMvcAutoConfiguration.java:519)  The following method did not exist:      org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration.addDefaultHandlerExceptionResolvers(Ljava/util/List;)V  The method's class, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, is available from the following locations:      jar:file:/Users/itzhouq/dev/mavne_repository/org/springframework/boot/spring-boot-autoconfigure/2.1.6.RELEASE/spring-boot-autoconfigure-2.1.6.RELEASE.jar!/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class  It was loaded from the following location:      file:/Users/itzhouq/dev/mavne_repository/org/springframework/boot/spring-boot-autoconfigure/2.1.6.RELEASE/spring-boot-autoconfigure-2.1.6.RELEASE.jar   Action:  Correct the classpath of your application so that it contains a single, compatible version of org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration </code></pre> <p>This may be <code>spring-boot-autoconfigure</code>'s exception, so I have checked the dependency of it:</p> <p><code>org.springframework.boot:spring-boot-web:2.2.1.RELEASE</code>--&gt;<br /> <code>org.springframework.boot:spring-boot-starter:2.2.1.RELEASE</code> --&gt;<br /> <code>org.springframework.boot:spring-boot-autoconfigure:2.2.1.RELEASE(omitted for conflict with 2.1.6.RELEASE)</code>.</p> <p>Obviously, the <code>autoconfigure</code> was failing because of a version conflict. To solve this problem, I have added the following dependency:</p> <pre class='lang-xml prettyprint-override'><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;     &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;/dependency&gt; </code></pre> <p>I've confirmed this dependency had been added in the module and I've rerun the application.</p> "
  },
  {
    "Id": "67297184",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67298107",
    "CreationDate": "2021-04-28T09:09:26.447",
    "Score": "8",
    "ViewCount": "17453",
    "Body": "<p>my project is java spring boot 2 with maven . I use springdoc-openapi-ui dependency. problem is @Parameter(required = false) not working on my api params. <a href='https://i.stack.imgur.com/kOT7k.png' rel='noreferrer'><img src='https://i.stack.imgur.com/kOT7k.png' alt='enter image description here' /></a></p> <p><a href='https://i.stack.imgur.com/Op5xO.png' rel='noreferrer'><img src='https://i.stack.imgur.com/Op5xO.png' alt='enter image description here' /></a></p> ",
    "OwnerUserId": "6672520",
    "LastActivityDate": "2023-05-24T20:22:57.193",
    "Title": "@Parameter(required = false) not working in swagger open api v3",
    "Tags": "<java><spring-boot><maven><swagger-ui><springdoc-openapi-ui>",
    "AnswerCount": "3",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I don't know how much of swagger annotations Springdoc-openapi supports but according to its own example at <a href='https://github.com/springdoc/springdoc-openapi-demos/blob/master/springdoc-openapi-spring-boot-2-webmvc/src/main/java/org/springdoc/demo/app2/api/PetApi.java' rel='noreferrer'>PetApiDemo</a> in <em>/findByStatus</em> or <em>/findByTags</em> endpoints you can see by applying <code>@RequestParam(required = false)</code> which is a Spring Annotation! a parameter has become optional.</p> <pre><code>import org.springframework.web.bind.annotation.RequestParam; default ResponseEntity&lt;List&lt;Pet&gt;&gt; findPetsByStatus(         @Parameter(                 explode = Explode.TRUE,                  name = &quot;status&quot;,                  in = ParameterIn.QUERY,                  description = &quot;Status values that need to be considered for filter&quot;,                  style = ParameterStyle.FORM,                  schema = @Schema(                         type = &quot;string&quot;, defaultValue = &quot;available&quot;,                          allowableValues = {&quot;available&quot;, &quot;pending&quot;, &quot;sold&quot;}                 )         )         @Valid @RequestParam(value = &quot;status&quot;, required = false)         List&lt;String&gt; status) {     return getDelegate().findPetsByStatus(status); } </code></pre> ",
    "highest_rated_answer": "<p>I analyzed the options reported above and came to the following conclusions</p> <p>Both <code>@RequestParam(required = false)</code> and <code>@Nullable</code> result in the same behavior in the swagger documentation by removing the *<strong>required</strong>, however the behavior is different in the application:</p> <ul> <li><p>Using <code>@RequestParam(required = false)</code> makes the method more descriptive but if the object is not passed it will be null. This requires handling to avoid NullpointerException</p> </li> <li><p>When using <code>@Nullable</code>, if the object is not passed, an instance of the object is still received with all attributes as null, in this case not requiring treatment</p> </li> </ul> <p>In my case I chose to use <code>@Nullable</code> in the interface to keep the default behavior</p> "
  },
  {
    "Id": "70105271",
    "PostTypeId": "1",
    "AcceptedAnswerId": "70794333",
    "CreationDate": "2021-11-25T02:53:28.123",
    "Score": "8",
    "ViewCount": "2557",
    "Body": "<p>I'm trying to create a minimal jre for Spring Boot microservices using jdeps and jlink, but I'm getting the following error when I get to the using jdeps part</p> <pre><code>Exception in thread &quot;main&quot; java.lang.module.FindException: Module java.annotation not found, required by org.apache.tomcat.embed.core     at java.base/java.lang.module.Resolver.findFail(Resolver.java:893)     at java.base/java.lang.module.Resolver.resolve(Resolver.java:192)     at java.base/java.lang.module.Resolver.resolve(Resolver.java:141)     at java.base/java.lang.module.Configuration.resolve(Configuration.java:421)     at java.base/java.lang.module.Configuration.resolve(Configuration.java:255)     at jdk.jdeps/com.sun.tools.jdeps.JdepsConfiguration$Builder.build(JdepsConfiguration.java:564)     at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.buildConfig(JdepsTask.java:603)     at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:557)     at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:533)     at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49) </code></pre> <p>I already tried the following commands with no effect</p> <pre><code>jdeps --ignore-missing-deps --multi-release 17 --module-path target/lib/* target/errorrr-*.jar jdeps --multi-release 16 --module-path target/lib/* target/errorrr-*.jar jdeps --ignore-missing-deps --multi-release 17 --class-path target/lib/* target/errorrr-*.jar </code></pre> <p>I already tried it with java versions 11, 16 and 17 and different versions of Spring Boot.</p> <p>All dependencies needed for build are copied to target/lib folder by maven-dependency-plugin plugin when I run mvn install</p> <p>After identifying the responsible dependency I created a new project from scratch with only it to isolate the error, but it remained.</p> <p>I tried to use gradle at first but as the error remained I changed it to mavem but also no change.</p> <p>When I add the specified dependency that is being requested the error changes to</p> <pre><code>#13 1.753 Exception in thread &quot;main&quot; java.lang.Error: java.util.concurrent.ExecutionException: com.sun.tools.jdeps.MultiReleaseException         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.DependencyFinder.waitForTasksCompleted(DependencyFinder.java:271)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.DependencyFinder.parse(DependencyFinder.java:133)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.DepsAnalyzer.run(DepsAnalyzer.java:129)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.ModuleExportsAnalyzer.run(ModuleExportsAnalyzer.java:74)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.JdepsTask$ListModuleDeps.run(JdepsTask.java:1047)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:574)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:533)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49)         #13 1.753 Caused by: java.util.concurrent.ExecutionException: com.sun.tools.jdeps.MultiReleaseException         #13 1.753       at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)         #13 1.753       at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)         #13 1.753       at jdk.jdeps/com.sun.tools.jdeps.DependencyFinder.waitForTasksCompleted(DependencyFinder.java:267)         #13 1.754       ... 7 more         #13 1.754 Caused by: com.sun.tools.jdeps.MultiReleaseException         #13 1.754       at jdk.jdeps/com.sun.tools.jdeps.VersionHelper.add(VersionHelper.java:62)         #13 1.754       at jdk.jdeps/com.sun.tools.jdeps.ClassFileReader$JarFileReader.readClassFile(ClassFileReader.java:360)         #13 1.754       at jdk.jdeps/com.sun.tools.jdeps.ClassFileReader$JarFileIterator.hasNext(ClassFileReader.java:402)         #13 1.754       at jdk.jdeps/com.sun.tools.jdeps.DependencyFinder.lambda$parse$5(DependencyFinder.java:179)         #13 1.754       at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)         #13 1.754       at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)         #13 1.754       at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)         #13 1.754       at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)         #13 1.754       at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)         #13 1.754       at java.base/java.lang.Thread.run(Thread.java:833) </code></pre> <p>My pom.xml</p> <pre><code>   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.6.0&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.example&lt;/groupId&gt;    &lt;artifactId&gt;errorrr&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;errorrr&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;17&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;         &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;         &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;     &lt;/dependencies&gt;     &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;id&gt;copy-dependencies&lt;/id&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;                        &lt;/goals&gt;                        &lt;configuration&gt;                            &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;                        &lt;/configuration&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;  &lt;/project&gt;  </code></pre> <p>If I don't need to use this dependency I can do all the build processes and at the end I have a 76mb jre</p> ",
    "OwnerUserId": "13041893",
    "LastEditorUserId": "13041893",
    "LastEditDate": "2021-11-25T12:35:27.667",
    "LastActivityDate": "2022-04-27T08:12:31.650",
    "Title": "Jdeps Module java.annotation not found",
    "Tags": "<java><spring-boot><maven><jlink><jdeps>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>I arrived at a solution that is valid, not perfect, but it works correctly. In my case the lib &quot;jackson&quot; was the cause of the problem. It uses java multi release and somehow during jdeps it was causing some error. After some tests I understood that I could remove this lib from the evaluation, and that no module would be missing from deps.info. I needed to add this task for removal:</p> <pre><code>task myDeleteTask(type: Delete) {     delete files(&quot;${buildDir}/temp-lib/jackson-databind-{your_version}.jar&quot;)     delete files(&quot;${buildDir}/temp-lib/jackson-datatype-jdk8-{your_version}.jar&quot;)     delete files(&quot;${buildDir}/temp-lib/jackson-datatype-jsr310-{your_version}.jar&quot;)     delete files(&quot;${buildDir}/temp-lib/jackson-module-parameter-names-{your_version}.jar&quot;)     delete files(&quot;${buildDir}/temp-lib/jackson-core-{your_version}.jar&quot;)     delete files(&quot;${buildDir}/temp-lib/jackson-dataformat-cbor-{your_version}.jar&quot;) } task tempCopyDependencies(type: Copy) {     from configurations.runtimeClasspath     into &quot;$buildDir/temp-lib&quot; }  tasks.named(&quot;build&quot;){     finalizedBy(&quot;tempCopyDependencies&quot;)     finalizedBy(&quot;myDeleteTask&quot;) } </code></pre> <p>OBS: in the question I used maven because it is easier and I have a wider knowledge, but my real project uses gradle, which ends up making the delete task easier to do</p> ",
    "highest_rated_answer": "<p>I was facing a similar issue, what helped in my case - is specifying both <code>--class-path</code> and <code>--module-path</code> pointing to the same directory with libs. According to your example, I think it should be <code>jdeps --ignore-missing-deps --print-module-deps --multi-release 17 --module-path=&quot;target/lib/*&quot; --class-path=&quot;target/lib/*&quot; target/errorrr-*.jar</code>.</p> <p>Also, <code>jdeps</code> from JDK 17 (and maybe earlier versions) <a href='https://stackoverflow.com/questions/69943899/jdeps-cant-print-module-deps-due-to-a-multireleaseexception'>seems to have a bug where it can throw <code>com.sun.tools.jdeps.MultiReleaseException</code></a>. It seems to have been fixed in JDK 18, at least it works without any issues for me.</p> <p>With Docker you can do a staged build that will identify the dependencies first using JDK 18, and then build a new JRE image out of JDK 17. Like this:</p> <pre><code>FROM amazoncorretto:18-alpine as deps  COPY ./app.jar /app/app.jar RUN mkdir /app/unpacked &amp;&amp; \\     cd /app/unpacked &amp;&amp; \\     unzip ../app.jar &amp;&amp; \\     cd .. &amp;&amp; \\     $JAVA_HOME/bin/jdeps \\     --ignore-missing-deps \\     --print-module-deps \\     -q \\     --recursive \\     --multi-release 17 \\     --class-path=&quot;./unpacked/BOOT-INF/lib/*&quot; \\     --module-path=&quot;./unpacked/BOOT-INF/lib/*&quot; \\     ./app.jar &gt; /deps.info  FROM amazoncorretto:17.0.3-alpine as corretto-jdk  RUN apk add --no-cache binutils  COPY --from=deps /deps.info /deps.info  RUN $JAVA_HOME/bin/jlink \\     --verbose \\     --add-modules $(cat /deps.info) \\     --strip-debug \\     --no-man-pages \\     --no-header-files \\     --compress=2 \\     --output /customjre </code></pre> <p>You can check the full example here: <a href='https://github.com/monosoul/jvm-in-docker/blob/main/jre-slim-auto.dockerfile' rel='noreferrer'>https://github.com/monosoul/jvm-in-docker/blob/main/jre-slim-auto.dockerfile</a></p> <p>For anyone interested, here's a blog article about using <code>jlink</code> and <code>jdeps</code>: <a href='https://blog.monosoul.dev/2022/04/25/reduce-java-docker-image-size/' rel='noreferrer'>https://blog.monosoul.dev/2022/04/25/reduce-java-docker-image-size/</a></p> "
  },
  {
    "Id": "71295726",
    "PostTypeId": "1",
    "CreationDate": "2022-02-28T13:27:47.593",
    "Score": "8",
    "ViewCount": "3338",
    "Body": "<p>I am trying to build the docker image of a Spring Boot application in Gitlab-ci.yaml (Pipeline) by using the command &quot;spring-boot:build-image&quot; with out using Dockerfile. The command is working fine on terminal development work station. But the CI/CD Pipeline of Gitlab is throwing the error. Appreciate if any one can help.</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.4:build-image (default-cli) on project buildpackdemo: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.6.4:build-image failed: Connection to the Docker daemon at 'localhost' failed with error &quot;[2] No such file or directory&quot;; ensure the Docker daemon is running and accessible: com.sun.jna.LastErrorException: [2] No such file or directory -&gt; [Help 1] </code></pre> <h2>Gitlab-ci.yaml</h2> <pre><code>maven-build:   image: maven:3-jdk-11   stage: build   script:     - &quot;mvn spring-boot:build-image&quot;   artifacts:     paths:       - target/*.jar </code></pre> ",
    "OwnerUserId": "11618200",
    "LastEditorUserId": "4620822",
    "LastEditDate": "2022-03-01T10:57:28.450",
    "LastActivityDate": "2022-09-02T19:13:39.220",
    "Title": "Using spring-boot:build-image in Gitlab-ci.yaml Pipeline to create a docker image",
    "Tags": "<spring-boot><maven><gitlab-ci>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>I was running into the same issue, and I was finally able to get it working by setting the <code>DOCKER_HOST</code> variable. So, things would look something like this:</p> <pre><code>variables:   DOCKER_HOST: tcp://docker:2375  maven-build:   image: maven:3-jdk-11   stage: build   services:     - docker:dind   script:     - &quot;mvn spring-boot:build-image&quot;   artifacts:     paths:       - target/*.jar </code></pre> "
  },
  {
    "Id": "27904594",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27905557",
    "CreationDate": "2015-01-12T14:44:29.477",
    "Score": "78",
    "ViewCount": "123443",
    "Body": "<p>I am trying to deploy a Spring Boot app to Tomcat, because I want to deploy to AWS. I created a WAR file, but it does not seem to run on Tomcat, even though it is visible.</p>  <p>Details:<br> 0. Here is my app:</p>  <pre><code>@Configuration @ComponentScan @EnableAutoConfiguration public class App {     public static void main(String[] args) {         SpringApplication.run(SampleController.class, args);     } }  @Controller @EnableAutoConfiguration public class SampleController {     @RequestMapping('/help')     @ResponseBody     String home() {         String input = 'Hi! Please use 'tag','check' and 'close' resources.';         return input;     } } </code></pre>  <p>application.properties has following:</p>  <pre><code>server.port=${port:7777} </code></pre>  <ol> <li><p>After reading a number of <a href='http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#build-tool-plugins-maven-packaging' rel='noreferrer'>pages</a> and <a href='https://stackoverflow.com/questions/24741816/deploy-spring-boot-to-tomcat'>question-answers</a> I added following to my POM:</p>  <p> http://maven.apache.org/xsd/maven-4.0.0.xsd'>     4.0.0</p>  <pre><code>&lt;groupId&gt;com.niewlabs&lt;/groupId&gt; &lt;artifactId&gt;highlighter&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  &lt;packaging&gt;war&lt;/packaging&gt;  &lt;properties&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt;     &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.1.9.RELEASE&lt;/version&gt; &lt;/parent&gt;     &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; </code></pre>  <p></p></li> <li><p>I ran'mvn package'and got WAR file (size 250Mb), which I put into 'webapps' folder.</p></li> <li>I started Tomcat and am able to see my app listed, in my case '/highlighter-1.0-SNAPSHOT'.</li> <li>Clicking on the link for the app results in 'Status 404' page.</li> <li>When I run Spring Boot app just by itself, without container it runs on localhost:7777, but there is nothing there when I run it in Tomcat. </li> </ol>  <p>Update: There is another <a href='http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file' rel='noreferrer'>reference</a>. Not sure how useful it is.</p> ",
    "OwnerUserId": "1515058",
    "LastEditorUserId": "-1",
    "LastEditDate": "2017-05-23T12:02:53.363",
    "LastActivityDate": "2023-01-10T18:07:33.600",
    "Title": "Spring Boot War deployed to Tomcat",
    "Tags": "<spring><maven><tomcat><spring-boot>",
    "AnswerCount": "13",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>This guide explains in detail how to deploy Spring Boot app on Tomcat:<br> <a href='http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file'>http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file</a></p>  <p>Essentially I needed to add following class:</p>  <pre><code>public class WebInitializer extends SpringBootServletInitializer {        @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(App.class);     }     } </code></pre>  <p>Also I added following property to POM:</p>  <pre><code>&lt;properties&gt;             &lt;start-class&gt;mypackage.App&lt;/start-class&gt; &lt;/properties&gt; </code></pre> ",
    "highest_rated_answer": "<p>Hey make sure to do this changes to the pom.xml</p>  <pre><code>&lt;packaging&gt;war&lt;/packaging&gt; </code></pre>  <p>in the dependencies section make sure to indicated the tomcat is provided so you dont need the embeded tomcat plugin.</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;             &lt;dependency&gt;         &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;         &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;        </code></pre>  <p>This is the whole pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;demo&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;war&lt;/packaging&gt;      &lt;name&gt;demo&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;start-class&gt;com.example.Application&lt;/start-class&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;                 &lt;dependency&gt;             &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;             &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;             &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;   &lt;/project&gt; </code></pre>  <p>And the Application class should be like this </p>  <p>Application.java</p>  <pre><code>package com.example;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.support.SpringBootServletInitializer;  @SpringBootApplication public class Application extends SpringBootServletInitializer {       /**      * Used when run as JAR      */     public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }      /**      * Used when run as WAR      */     @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {         return builder.sources(Application.class);     }  } </code></pre>  <p>And you can add a controller for testing MyController.java</p>  <pre><code>package com.example;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody;  @Controller public class MyController {      @RequestMapping('/hi')     public @ResponseBody String hiThere(){         return 'hello world!';     } } </code></pre>  <p>Then you can run the project in a tomcat 8 version and access the controller like this</p>  <p><a href='http://localhost:8080/demo/hi'>http://localhost:8080/demo/hi</a></p>  <p>If for some reason you are not able to add the project to tomcat do a right click in the project and then go to the Build Path->configure build path->Project Faces</p>  <p>make sure only this 3 are selected</p>  <p>Dynamic web Module 3.1 Java 1.8 Javascript 1.0</p> "
  },
  {
    "Id": "23316843",
    "PostTypeId": "1",
    "AcceptedAnswerId": "23317071",
    "CreationDate": "2014-04-26T21:43:50.643",
    "Score": "76",
    "ViewCount": "98308",
    "Body": "<p>Is there any way to input arguments when launching spring-boot application (mvn spring-boot:run) from commandline and then get them in main()?</p> ",
    "OwnerUserId": "1797171",
    "LastEditorUserId": "37298",
    "LastEditDate": "2017-01-23T14:58:19.077",
    "LastActivityDate": "2023-03-11T03:51:09.483",
    "Title": "Get command-line arguments from spring-boot:run",
    "Tags": "<java><maven><spring-boot><command-line-arguments>",
    "AnswerCount": "10",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Looking at the <a href='https://github.com/spring-projects/spring-boot/blob/07bb33d8ed302d70f44b33ed419cc1a6fe08c9f6/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java#L116' rel='noreferrer'>source code</a> of the spring-boot-maven-plugin I found that you need to do:</p> <pre><code>mvn spring-boot:run -Drun.arguments=&quot;arg1,arg2&quot; </code></pre> <p>Another way to get more information about what options the <code>run</code> goal of the <code>spring-boot</code> plugin supports is to execute the following command:</p> <pre><code>mvn help:describe -Dcmd=spring-boot:run -Ddetail </code></pre> <p>For Spring Boot 2.x, the source is <a href='https://github.com/spring-projects/spring-boot/blob/68c6860d88b69756ffd0dff76c64e3e29c29ab68/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java#L113' rel='noreferrer'>here</a> and you now need to use <code>-Dspring-boot.run.arguments=&quot;args1,args2&quot;</code></p> <p>(edit from april 2021) For Spring Boot 2.2+, you now need to use <code>-Dspring-boot.run.arguments=&quot;args1 args2&quot;</code></p> <p>If you are using Gradle and you want to be able to pass command line arguments to the Gradle <code>bootRun</code> task, you first need to configure, for example like so:</p> <pre><code>bootRun {     if ( project.hasProperty('args') ) {         args project.args.split('\\\\s+')     } } </code></pre> <p>and run the task using <code>gradle bootRun -Pargs=&quot;arg1 arg2&quot;</code></p> ",
    "highest_rated_answer": "<p>When passing multiple arguments using -Drun.arguments, if the argument in turn has 'comma-separated' values, then only the first value of each argument is used. To avoid this repeat the argument as many times as the number of values.</p>  <p>This is more of a workaround. Not sure if there is an alternative unless the delimiter is different - like '|'.</p>  <p>E.g Issue:</p>  <pre><code>mvn spring-boot:run -Drun.arguments='--spring.profiles.active=test,dev' </code></pre>  <p>Picks only 'test' profile for the above command.</p>  <p>Workaround:</p>  <pre><code>mvn spring-boot:run -Drun.arguments='--spring.profiles.active=test,--spring.profiles.active=dev' </code></pre>  <p>Picks both 'dev' &amp; 'test' profiles for the above command.</p> "
  },
  {
    "Id": "54867295",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54867850",
    "CreationDate": "2019-02-25T13:26:49.343",
    "Score": "76",
    "ViewCount": "120665",
    "Body": "<p>When running my jar file: <code>java -jar target/places-1.0-SNAPSHOT.jar</code></p> <p>I'm getting the next error :</p> <blockquote> <p>no main manifest attribute, in target/places-1.0-SNAPSHOT.jar</p> </blockquote> <p>The <code>pom.xml</code> contains the <code>spring-boot-maven-plugin</code>:</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;mainClass&gt;com.places.Main&lt;/mainClass&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> <p>I also tried to create a <code>MANIFEST.MF</code> file and specifying the class, but it didnt help.</p> <p>In addition, I also tried:</p> <pre><code>&lt;properties&gt;       &lt;!-- The main class to start by executing &quot;java -jar&quot; --&gt;       &lt;start-class&gt;com.places.Main&lt;/start-class&gt; &lt;/properties&gt; </code></pre> <p>Main class:</p> <pre><code>@SpringBootApplication public class Main {     public static void main(String[] args) throws InterruptedException {         SpringApplication.run(Main.class,args);     } } </code></pre> <p>Any idea what else can I try?</p> ",
    "OwnerUserId": "4340793",
    "LastEditorUserId": "5626568",
    "LastEditDate": "2022-03-14T21:20:33.863",
    "LastActivityDate": "2023-08-06T12:48:35.503",
    "Title": "SpringBoot no main manifest attribute (maven)",
    "Tags": "<java><maven><spring-boot><manifest><spring-boot-maven-plugin>",
    "AnswerCount": "8",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>Try adding <code>repackage</code> goal to execution goals.</p> <p>Otherwise you would need to call the plugin explicitly as <code>mvn package spring-boot:repackage</code>.</p> <p>With the goal added, you have to call only <code>mvn package</code>.</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;mainClass&gt;com.places.Main&lt;/mainClass&gt;     &lt;/configuration&gt;      &lt;executions&gt;         &lt;execution&gt;             &lt;goals&gt;                 &lt;goal&gt;repackage&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> ",
    "highest_rated_answer": "<p>During the <em>Maven</em> <code>package</code> lifecycle phase, the <em>jar</em> archive is enhanced by <em>Spring Boot Maven Plugin</em> and the original <em>jar</em> file (that should have been built using the standard <em>maven-jar-plugin</em>) is replaced with an <em>enhanced</em> <strong><em>executable</em></strong> jar.</p>  <p>Hence you have either to issue the <code>spring-boot:repackage</code> goal yourself when building your module:</p>  <pre><code>mvn package spring-boot:repackage </code></pre>  <p>Or add the <code>goal</code> explicitly within the plugin configuration:</p>    <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;mainClass&gt;com.places.Main&lt;/mainClass&gt;     &lt;/configuration&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;goals&gt;                 &lt;goal&gt;repackage&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre>  <p>You can find more details about the <em>Spring Boot Maven Plugin</em> <a href='https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#repackage' rel='noreferrer'><code>repackage</code> goal</a> within the official documentation.</p> "
  },
  {
    "Id": "54467287",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54468127",
    "CreationDate": "2019-01-31T18:44:54.703",
    "Score": "73",
    "ViewCount": "149551",
    "Body": "<p>What is the correct way of specifying Java 11 as the version to be used in Spring (or Spring Boot) pom.xml file?</p>  <p>I.e., what value do I need to put in the <code>java.version</code> property of the pom?</p>  <p>For Java 8 we use <code>1.8</code>, just like <a href='https://spring.io/guides/gs/spring-boot/#use-maven' rel='noreferrer'>the documentation shows</a>, for Java 9 it's <code>1.9</code>.</p>  <p>I'm not sure if Java 11 would be <code>1.11</code> (although it seems unlikely), and I've seen it specified as just <code>11</code> when using <code>maven-compiler-plugin</code>, however I'm not using the compiler plugin.</p>  <p>e.g. </p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;version&gt;3.8.0&lt;/version&gt;     &lt;configuration&gt;         &lt;release&gt;11&lt;/release&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>I've searched around and couldn't find the answer, as pretty much any documentation I've read as well as blog posts related to the Java version only show versions 8 or 9.</p>  <p>So what should I use? <code>1.11</code> or just <code>11</code>?</p>  <p>I tried both and my web server seems to start correctly and compile correctly (IntelliJ shows <code>Information:javac 11.0.2 was used to compile java sources</code>) however I'm not entirely convinced that changing the <code>java.version</code> value is doing anything, because I can set it to e.g. <code>100</code> and everything works fine.</p>  <p>The only related questions I could find are: <a href='https://stackoverflow.com/questions/51427248/minimum-spring-version-compatible-with-java-11'>Minimum Spring version compatible with Java 11</a>, <a href='https://stackoverflow.com/questions/52512058/spring-boot-fails-due-to-a-hibernate-error-after-migrating-to-jdk-11?noredirect=1&amp;lq=1'>Spring Boot fails due to a Hibernate error after migrating to JDK 11</a> and <a href='https://stackoverflow.com/questions/52891927/spring-4-3-x-with-openjdk-11'>Spring 4.3.x with OpenJDK 11</a>, but they don't really shed any light.</p> ",
    "OwnerUserId": "767676",
    "LastEditorUserId": "339637",
    "LastEditDate": "2022-01-17T04:43:33.883",
    "LastActivityDate": "2023-01-11T06:09:13.733",
    "Title": "How to specify Java version in Spring/Spring Boot pom.xml?",
    "Tags": "<java><spring><maven><spring-boot><pom.xml>",
    "AnswerCount": "5",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p><strong>Short Answer:</strong></p> <p>The correct way is to use the followings values in <code>&lt;java.version&gt;</code> for different Java versions:</p> <ul> <li>Java 8  : 1.8 or 8</li> <li>Java 9  : 9</li> <li>Java 10 : 10</li> <li>Java 11 : 11</li> <li>Java 12 : 12</li> <li>.....</li> <li>.....</li> <li>Java 17 : 17</li> <li>Java 18 : 18</li> <li>Java 19 : 19</li> </ul> <p>So for Java 11 , it should be:</p> <pre><code>&lt;properties&gt;    &lt;java.version&gt;11&lt;/java.version&gt; &lt;/properties&gt; </code></pre> <blockquote> <p>However I'm not sure if Java 11 would be &quot;1.11&quot; (seems unlikely), and I've seen it specified as just &quot;11&quot; when using maven-compiler-plugin, however I'm not using the compiler plugin.</p> </blockquote> <p>Actually , at the end it still uses <code>maven-compiler-plugin</code> to compile. Springboot just configures a <code>&lt;java.version&gt;</code> property such that by changing this value , you are implicitly changing <code>maven-compiler-plugin</code> 's <code>&lt;source/&gt;</code> and <code>&lt;target/&gt;</code> to the same value as what specified in the <code>&lt;java.version&gt;</code> :</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;version&gt;3.8.0&lt;/version&gt;     &lt;configuration&gt;         &lt;source&gt;11&lt;/source&gt;  &lt;!-- same as &lt;java.version&gt; --&gt;         &lt;target&gt;11&lt;/target&gt;    &lt;!-- same as &lt;java.version&gt; --&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> <hr /> <p><strong>Detailed Answer:</strong></p> <p>Seem like you want details to convince you.</p> <p>It is because every spring boot project will extend the parent pom <code>spring-boot-starter-parent</code> which <a href='https://github.com/spring-projects/spring-boot/blob/b4e890c3be6d35c3473fc5ed67b056ead277285f/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml#L18' rel='noreferrer'>defines</a> <code>&lt;java.version&gt;</code> as follows:</p> <pre><code>&lt;properties&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;maven.compiler.source&gt;${java.version}&lt;/maven.compiler.source&gt;     &lt;maven.compiler.target&gt;${java.version}&lt;/maven.compiler.target&gt; &lt;/properties&gt; </code></pre> <p>From the maven-compiler-plugin <a href='https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#release' rel='noreferrer'>docs</a>, <code>maven.compiler.source</code> and <code>maven.compiler.target</code> are the <a href='https://stackoverflow.com/questions/23391502/whats-the-meaning-of-user-property-of-maven-plugin-parameter'>user property</a> for the <code>&lt;source&gt;</code> and <code>&lt;target&gt;</code> config parameters. Due to the behaviour of the user property, setting these two properties to <code>11</code> means to set the following :</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;     &lt;version&gt;3.8.0&lt;/version&gt;     &lt;configuration&gt;         &lt;source&gt;11&lt;/source&gt;   &lt;!-- maven.compiler.source  --&gt;         &lt;target&gt;11&lt;/target&gt; &lt;!-- maven.compiler.target --&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> <p>From the <code>maven-compiler-plugin</code> <a href='https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#release' rel='noreferrer'>docs</a> again, <code>&lt;source&gt;</code> and <code>&lt;target&gt;</code> are the <code>-source</code> and <code>-target</code> argument for the Java compiler (<code>javac</code>). Then, from <a href='https://docs.oracle.com/en/java/javase/12/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9' rel='noreferrer'>javac</a> docs, we can see that these two arguments are allowed to have the following values:</p> <blockquote> <ul> <li>1.6 : No language changes were introduced in Java SE 6. However, encoding errors in source files are now reported as errors instead of warnings as was done in earlier releases of Java Platform, Standard Edition.</li> <li>6   : Synonym for 1.6.</li> <li>1.7 : The compiler accepts code with features introduced in Java SE 7.</li> <li>7   : Synonym for 1.7.</li> <li>1.8 : The compiler accepts code with features introduced in Java SE 8.</li> <li>8   : Synonym for 1.8.</li> <li>9   : The compiler accepts code with features introduced in Java SE 9.</li> <li>10  : The compiler accepts code with features introduced in Java SE 10.</li> <li>11  : The compiler accepts code with features introduced in Java SE 11.</li> <li>12  : The compiler accepts code with features introduced in Java SE 12.</li> </ul> </blockquote> <p>Hence, <code>&lt;java.version&gt;</code> should be set to <code>11</code> for Java 11.</p> ",
    "highest_rated_answer": "<p>If any one looking to specifying Java 11 as the version to be used in Spring (or Spring Boot) in a <strong>gradle</strong> project, then use either sourceCompatibility = '11' or sourceCompatibility = '1.11' in your build.gradle file</p>  <pre><code>plugins { id 'org.springframework.boot' version '2.1.4.RELEASE' }  apply plugin: 'io.spring.dependency-management'  group = 'au.com.ranuka' version = '0.0.1-SNAPSHOT'  sourceCompatibility = '11' //or  sourceCompatibility = '1.11'  repositories {    mavenCentral() }  dependencies {  } </code></pre> "
  },
  {
    "Id": "65910112",
    "PostTypeId": "1",
    "AcceptedAnswerId": "65910205",
    "CreationDate": "2021-01-26T22:19:47.370",
    "Score": "73",
    "ViewCount": "190163",
    "Body": "<p>I don\u00b4t know what\u00b4s the problem. Trying to install maven for a college project. I already installed maven as instructed <a href='https://stackoverflow.com/questions/10649707/maven-mvn-command-not-found'>here</a>. <a href='https://i.stack.imgur.com/ARiCg.png' rel='noreferrer'>Picture Environmental Variables</a>, <a href='https://i.stack.imgur.com/WiIoG.png' rel='noreferrer'>maven version in cmd</a>  And I also tried to delete the .m2 file. When I try to install maven over the plugin in InteliJ, I get the message: &quot;process terminated&quot; with no extra info. Then I tried to install over the terminal with mvn clean install and i got this.</p> <pre><code>[INFO] Scanning for projects... [WARNING] [WARNING] Some problems were encountered while building the effective model for com.college:sprinttool:jar:0.0.1-SNAPSHOT [WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.springframework.boot:spring-boot-starter-data-jpa:jar -&gt; duplicate declaration of version (?) @ line 50, column 15 [WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.springframework.boot:spring-boot-starter-test:jar -&gt; duplicate declaration of version (?) @ line 55, column 15 [WARNING] [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING] [WARNING] For this reason, future Maven versions might no longer support building such malformed projects. [WARNING] [INFO] [INFO] -------------------&lt; com.college:sprinttool &gt;-------------------- [INFO] Building sprinttool 0.0.1-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO] [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ sprinttool --- [INFO] Deleting E:\\Code Practices\\sprinttool\\sprinttool\\target [INFO] [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ sprinttool --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>Then I ran &quot;mvn clean install -X&quot; for more Information and it gives out this in addition.</p> <pre><code>    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:64)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:564)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) Caused by: org.apache.maven.plugin.MojoExecutionException: Input length = 1     at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:362)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:64)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:564)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) Caused by: org.apache.maven.shared.filtering.MavenFilteringException: Input length = 1     at org.apache.maven.shared.filtering.DefaultMavenFileFilter.copyFile (DefaultMavenFileFilter.java:113)     at org.apache.maven.shared.filtering.DefaultMavenResourcesFiltering.filterResources (DefaultMavenResourcesFiltering.java:262)     at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:356)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:64)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:564)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) Caused by: java.nio.charset.MalformedInputException: Input length = 1     at java.nio.charset.CoderResult.throwException (CoderResult.java:274)     at sun.nio.cs.StreamDecoder.implRead (StreamDecoder.java:352)     at sun.nio.cs.StreamDecoder.read (StreamDecoder.java:188)     at java.io.InputStreamReader.read (InputStreamReader.java:181)     at java.io.BufferedReader.read1 (BufferedReader.java:210)     at java.io.BufferedReader.read (BufferedReader.java:287)     at java.io.BufferedReader.fill (BufferedReader.java:161)     at java.io.BufferedReader.read (BufferedReader.java:182)     at org.apache.maven.shared.filtering.BoundedReader.read (BoundedReader.java:85)     at org.apache.maven.shared.filtering.MultiDelimiterInterpolatorFilterReaderLineEnding.read (MultiDelimiterInterpolatorFilterReaderLineEnding.java:235)     at org.apache.maven.shared.filtering.MultiDelimiterInterpolatorFilterReaderLineEnding.read (MultiDelimiterInterpolatorFilterReaderLineEnding.java:197)     at java.io.Reader.read (Reader.java:229)     at org.apache.maven.shared.utils.io.IOUtil.copy (IOUtil.java:199)     at org.apache.maven.shared.utils.io.IOUtil.copy (IOUtil.java:181)     at org.apache.maven.shared.utils.io.FileUtils.copyFile (FileUtils.java:1908)     at org.apache.maven.shared.filtering.DefaultMavenFileFilter.copyFile (DefaultMavenFileFilter.java:98)     at org.apache.maven.shared.filtering.DefaultMavenResourcesFiltering.filterResources (DefaultMavenResourcesFiltering.java:262)     at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:356)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:64)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:564)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) [ERROR] [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>I honestly have no clue what it is telling me. Is it because there is something wrong with my pom.xml? Pls help me! Thank you in advance.</p> <pre class='lang-xml prettyprint-override'><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.4.2&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.college&lt;/groupId&gt;     &lt;artifactId&gt;sprinttool&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;sprintplanningtool&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;     &lt;properties&gt;         &lt;java.version&gt;15&lt;/java.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!--dependency&gt;             &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;             &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;             &lt;version&gt;3.6.3&lt;/version&gt;         &lt;/dependency--&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.postgresql&lt;/groupId&gt;             &lt;artifactId&gt;postgresql&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                 &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;         &lt;/dependency&gt;          &lt;!--dependency&gt;             &lt;groupId&gt;javax.el&lt;/groupId&gt;             &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;             &lt;version&gt;3.0.0&lt;/version&gt;         &lt;/dependency--&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-bom&lt;/artifactId&gt;             &lt;version&gt;5.3.3.RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;!--dependency&gt;             &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;             &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;             &lt;version&gt;6.0.2.Final&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;             &lt;artifactId&gt;hibernate-validator-annotation-processor&lt;/artifactId&gt;             &lt;version&gt;6.0.2.Final&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;             &lt;artifactId&gt;javax.el&lt;/artifactId&gt;             &lt;version&gt;2.2.6&lt;/version&gt;         &lt;/dependency--&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;source&gt;10&lt;/source&gt;                     &lt;target&gt;10&lt;/target&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; </code></pre> <p>Edit: I used the spring boot intitializer to create the project.</p> ",
    "OwnerUserId": "8789802",
    "LastEditorUserId": "346112",
    "LastEditDate": "2022-04-26T13:08:52.680",
    "LastActivityDate": "2024-02-15T17:29:05.160",
    "Title": "Maven clean install: Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources",
    "Tags": "<java><spring><spring-boot><maven><maven-resources-plugin>",
    "AnswerCount": "21",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>It might be a new bug coming with some latest release of <em>Spring-boot</em> (and then : <em>Spring</em>).</p> <p>I had it. The workaround is to put in your <code>pom.xml</code> this corrected dependency :</p> <pre class='lang-xml prettyprint-override'><code>&lt;!-- Pour contourner un bug \u00e0 la g\u00e9n\u00e9ration par Spring-boot 2.4.x :  Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project application-etude: Input length = 1 --&gt;                &lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;     &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt;                </code></pre> <p>But this is a temporary workaround to 'save you' at the time the trouble fall upon you.</p> <p>The way to correct the trouble correctly is to ensure that your <code>properties</code> files are now correctly encoded in UTF-8.</p> <p>Because the underlying cause that makes this problem appearing is the presence of &quot;junk chars&quot; replacing accented characters when ISO-8859-1 (or other) properties files are considered as UTF-8 ones by <em>Spring</em>, while they aren't.</p> ",
    "highest_rated_answer": "<p>The root cause of the exception is that some resources contain resources which should not filtered (aka binary). The correct solution is to define an exclude for file extensions which should not filtered <a href='https://maven.apache.org/plugins/maven-resources-plugin/examples/binaries-filtering.html' rel='noreferrer'>like the following</a>:</p> <pre><code>&lt;project&gt;   ...   &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;         &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;nonFilteredFileExtensions&gt;             &lt;nonFilteredFileExtension&gt;pdf&lt;/nonFilteredFileExtension&gt;             &lt;nonFilteredFileExtension&gt;swf&lt;/nonFilteredFileExtension&gt;           &lt;/nonFilteredFileExtensions&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;     ...   &lt;/build&gt;   ... &lt;/project&gt; </code></pre> "
  },
  {
    "Id": "40089443",
    "PostTypeId": "1",
    "AcceptedAnswerId": "40089738",
    "CreationDate": "2016-10-17T14:46:07.697",
    "Score": "71",
    "ViewCount": "140195",
    "Body": "<p>I have a Spring Boot application and I have created a Jar out of that. Following is my <code>pom.xml</code>:</p>  <pre><code>&lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;         &lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;         &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;!-- WebJars --&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.mail&lt;/groupId&gt;         &lt;artifactId&gt;mail&lt;/artifactId&gt;         &lt;version&gt;1.4.7&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;         &lt;artifactId&gt;gson&lt;/artifactId&gt;         &lt;version&gt;2.6.2&lt;/version&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>I want to use this Jar in my other application so added this jar to my application. But when I am calling a method in that Jar, it is throwing a <code>ClassNotFoundException</code>.</p>  <p>How can I fix this issue? How can I add a dependency to a Spring Boot JAR?</p> ",
    "OwnerUserId": "4081897",
    "LastEditorUserId": "1743880",
    "LastEditDate": "2017-02-12T13:27:07.337",
    "LastActivityDate": "2023-05-08T12:11:57.303",
    "Title": "How to add a dependency to a Spring Boot Jar in another project?",
    "Tags": "<maven><spring-boot><jar><spring-boot-maven-plugin>",
    "AnswerCount": "12",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>By default, Spring Boot repackages your JAR into an executable JAR, and it does that by putting all of your classes inside <code>BOOT-INF/classes</code>, and all of the dependent libraries inside <code>BOOT-INF/lib</code>. The consequence of creating this fat JAR is that you can no longer use it as a dependency for other projects.</p>  <p>From <a href='http://docs.spring.io/spring-boot/docs/1.4.1.RELEASE/maven-plugin/examples/repackage-classifier.html' rel='noreferrer'>Custom repackage classifier</a>:</p>  <blockquote>   <p>By default, the <code>repackage</code> goal will replace the original artifact with the repackaged one. That's a sane behaviour for modules that represent an app but if your module is used as a dependency of another module, you need to provide a classifier for the repackaged one.</p>      <p>The reason for that is that application classes are packaged in <code>BOOT-INF/classes</code> so that the dependent module cannot load a repackaged jar's classes.</p> </blockquote>  <p>If you want to keep the original main artifact in order to use it as a dependency, you can add a <a href='http://docs.spring.io/spring-boot/docs/1.4.1.RELEASE/maven-plugin/repackage-mojo.html#classifier' rel='noreferrer'><code>classifier</code></a> in the <code>repackage</code> goal configuration:</p>  <pre><code>&lt;plugin&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;   &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;   &lt;executions&gt;     &lt;execution&gt;       &lt;goals&gt;         &lt;goal&gt;repackage&lt;/goal&gt;       &lt;/goals&gt;       &lt;configuration&gt;         &lt;classifier&gt;exec&lt;/classifier&gt;       &lt;/configuration&gt;     &lt;/execution&gt;   &lt;/executions&gt; &lt;/plugin&gt; </code></pre>  <p>With this configuration, the Spring Boot Maven Plugin will create 2 JARs: the main one will be the same as a usual Maven project, while the second one will have the classifier appended and be the executable JAR.</p> ",
    "highest_rated_answer": " <blockquote> <p>If you are using <code>spring-boot-starter-parent</code>, such execution is already pre-configured with a <code>repackage</code> execution ID so that only the plugin definition should be added.</p> </blockquote> <h3>Spring Boot <strong>3.x</strong></h3> <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                         &lt;goal&gt;repackage&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p><a href='https://docs.spring.io/spring-boot/docs/3.0.0/maven-plugin/reference/htmlsingle/#packaging' rel='nofollow noreferrer'>Read more</a></p> <hr /> <h3>Spring Boot <strong>2.x</strong></h3> <pre><code>  &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;id&gt;repackage&lt;/id&gt;         &lt;configuration&gt;           &lt;classifier&gt;exec&lt;/classifier&gt;         &lt;/configuration&gt;       &lt;/execution&gt;     &lt;/executions&gt;     ...   &lt;/plugin&gt; </code></pre> <p><a href='https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/maven-plugin/examples/repackage-classifier.html' rel='nofollow noreferrer'>Read more</a></p> <hr /> <h3>Spring Boot <strong>1.x</strong></h3> <pre><code>  &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.5.20.RELEASE&lt;/version&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;goals&gt;           &lt;goal&gt;repackage&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;classifier&gt;exec&lt;/classifier&gt;         &lt;/configuration&gt;       &lt;/execution&gt;     &lt;/executions&gt;     ...   &lt;/plugin&gt; </code></pre> <p><a href='https://docs.spring.io/spring-boot/docs/1.5.20.RELEASE/maven-plugin/examples/repackage-classifier.html' rel='nofollow noreferrer'>Read more</a></p> "
  },
  {
    "Id": "42840576",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42840829",
    "CreationDate": "2017-03-16T17:09:53.343",
    "Score": "70",
    "ViewCount": "92398",
    "Body": "<p>I've generated a Spring Boot web application using Spring Initializer, embedded Tomcat, Thymeleaf template engine.Technologies used: Spring Boot 1.4.2.RELEASE, Spring 4.3.4.RELEASE, Thymeleaf 2.1.5.RELEASE, Tomcat Embed 8.5.6, Maven 3, Java 8</p>  <p>I have an SpringBoot app. with these 2 classes:</p>  <pre><code>@Profile('!war') @SpringBootApplication @Import({SecurityConfig.class ,PersistenceConfig.class, ServiceConfig.class}) public class BookApplication {      public static void main(String[] args) {         SpringApplication.run(BookApplication.class, args);     } }  @Profile('war') @Import({SecurityConfig.class ,PersistenceConfig.class}) @SpringBootApplication public class BookApplicationWar extends SpringBootServletInitializer {      @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(BookApplicationWar.class);     }      public static void main(String[] args) throws Exception {         SpringApplication.run(BookApplicationWar.class, args);     }  } </code></pre>  <p>I generate the war with this command</p>  <pre><code> mvn clean package -DskipTests -Dspring.profiles.active=pebloc,war -DAPP-KEY=pebloc </code></pre>  <p>But I got this error:</p>  <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.2.RELEASE:repackage (default) on project book: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.5.2.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.tdk.BookApplication, com.tdk.BookApplicationWar] -&gt; [Help 1] </code></pre> ",
    "OwnerUserId": "4450024",
    "LastActivityDate": "2023-02-01T14:02:16.667",
    "Title": "SpringBoot: Unable to find a single main class from the following candidates",
    "Tags": "<spring><maven><spring-mvc><spring-boot><spring-profiles>",
    "AnswerCount": "14",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>If you have more than one main class, you need to explicitly <a href='http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/maven-plugin/repackage-mojo.html#mainClass' rel='noreferrer'>configure the main class</a> in each profile:</p>  <pre><code>&lt;profiles&gt;     &lt;profile&gt;         &lt;id&gt;profile1&lt;/id&gt;         &lt;properties&gt;           &lt;spring.boot.mainclass&gt;com.SomeClass&lt;/spring.boot.mainclass&gt;         &lt;/properties&gt;     &lt;/profile&gt;     &lt;profile&gt;         &lt;id&gt;profile2&lt;/id&gt;         &lt;properties&gt;           &lt;spring.boot.mainclass&gt;com.SomeOtherClass&lt;/spring.boot.mainclass&gt;         &lt;/properties&gt;     &lt;/profile&gt; &lt;/profiles&gt; </code></pre>  <p>...</p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;     &lt;executions&gt;       &lt;execution&gt;         &lt;goals&gt;           &lt;goal&gt;repackage&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;           &lt;mainClass&gt;${spring.boot.mainclass}&lt;/mainClass&gt;         &lt;/configuration&gt;       &lt;/execution&gt;     &lt;/executions&gt;     ... &lt;/plugin&gt; </code></pre>  <p>See <a href='http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/maven-plugin/repackage-mojo.html' rel='noreferrer'><strong>spring-boot:repackage</strong></a></p> ",
    "highest_rated_answer": "<p>Define single main class via start-class property</p> <pre><code>&lt;properties&gt;       &lt;start-class&gt;com.may.Application&lt;/start-class&gt; &lt;/properties&gt; </code></pre> <p>Alternatively, define the main class in the spring-boot-maven-plugin</p> <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;configuration&gt;                 &lt;mainClass&gt;com.may.Application&lt;/mainClass&gt;             &lt;/configuration&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p>Or via profiles</p> <pre><code>&lt;profiles&gt;         &lt;profile&gt;             &lt;id&gt;profile1&lt;/id&gt;             &lt;properties&gt;                 &lt;spring.boot.mainclass&gt;com.may.Application1&lt;/spring.boot.mainclass&gt;             &lt;/properties&gt;         &lt;/profile&gt;         &lt;profile&gt;             &lt;id&gt;profile2&lt;/id&gt;             &lt;properties&gt;                 &lt;spring.boot.mainclass&gt;com.may.Application2&lt;/spring.boot.mainclass&gt;             &lt;/properties&gt;         &lt;/profile&gt; &lt;/profiles&gt;  &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;mainClass&gt;${spring.boot.mainclass}&lt;/mainClass&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre> "
  },
  {
    "Id": "21788134",
    "PostTypeId": "1",
    "AcceptedAnswerId": "21788324",
    "CreationDate": "2014-02-14T19:39:38.187",
    "Score": "7",
    "ViewCount": "14590",
    "Body": "<p>I'm trying to build the simplest app in spring and I have the following code for my single controller</p>  <pre><code>    package User;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  /**  * Created by Bula on 14/02/14.  */ @Controller public class UsersController {      @RequestMapping('/user')     public String index()     {         return 'user_index';     }  } </code></pre>  <p>Here is the Main.java. The one that boots everything:</p>  <pre><code>  package main;  import javafx.application.Application; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.context.annotation.ComponentScan;   @ComponentScan @EnableAutoConfiguration public class Main {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } </code></pre>  <p>Also this is the pom.xml</p>  <pre><code>  &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'          xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;blog&lt;/groupId&gt;     &lt;artifactId&gt;blog&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring&lt;/artifactId&gt;             &lt;version&gt;2.5.6&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;             &lt;version&gt;4.0.0.RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;             &lt;version&gt;1.0.0.BUILD-SNAPSHOT&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot&lt;/artifactId&gt;             &lt;version&gt;1.0.0.BUILD-SNAPSHOT&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;   &lt;/project&gt; </code></pre>  <p>I have updated the maven hence all the libraries technically should be there. Here is the error that gets thrown(I tried googling it but nothing showed up which came any close to what I faced ):</p>  <pre><code>    Exception in thread 'main' java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(Ljava/util/List;)V     at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:371)     at org.springframework.boot.SpringApplication.getSpringFactoriesInstances(SpringApplication.java:343)     at org.springframework.boot.SpringApplication.initialize(SpringApplication.java:221)     at org.springframework.boot.SpringApplication.&lt;init&gt;(SpringApplication.java:197)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:877)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:866)     at main.Main.main(Main.java:14)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)  Process finished with exit code 1 </code></pre>  <p>My user_index.html does exist however I don't think the error is in any kind linked with it since it only has a html tag. Here is an image with all the libraries that I have: <img src='https://i.stack.imgur.com/tmVvX.png' alt='enter image description here'></p> ",
    "OwnerUserId": "1290607",
    "LastActivityDate": "2019-04-07T02:11:56.887",
    "Title": "Spring Starting throws an exception",
    "Tags": "<java><spring><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>So I created a maven project in Eclipse from your pom. What I've found is that you're getting the org.springframework.core.annotation.AnnotationAwareOrderComparator in two jars. The 2.5.2 spring jar and the 4.0. Get rid of the 2.5.2 jar. That's old. The new jar has the same class with the method that the new code is calling.</p>  <p>The issue, at the heart, is that you're double loading the core jars.</p> ",
    "highest_rated_answer": "<p>The answer above (Virmundi) is correct in the sense says two classes are 'colliding'. In my case I was defining my maven dependencies fine </p>  <pre><code>&lt;!-- Provided Spring dependencies spring-beans, spring-context, spring-core, spring-tx --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;         &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;     &lt;/dependency&gt; </code></pre>  <p>but had an old Spring jar in my classpath in which version indeed didn't had this method</p>  <pre><code>java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(Ljava/util/List;)V </code></pre> "
  },
  {
    "Id": "24025004",
    "PostTypeId": "1",
    "AcceptedAnswerId": "24040465",
    "CreationDate": "2014-06-03T21:12:20.123",
    "Score": "7",
    "ViewCount": "4983",
    "Body": "<p>I'm working with a Maven multi module with a war depending on an other war.</p>  <p>The Spring Boot webapp depends on a basic webapp that only serves html files.</p>  <p>When I run the Spring Boot app, I'm able to access services and html from the main webapp (the Spring Boot one) but I can't access the html files from the dependency war (404). But these html files are well packaged in the Spring Boot webapp war...</p>  <p>Here is a project that show the problem:<br> <a href='https://github.com/cthiebault/spring-boot-war-overlays' rel='noreferrer'>https://github.com/cthiebault/spring-boot-war-overlays</a></p>  <p>This project has 2 war modules:</p>  <ul> <li><strong>dependency-webapp</strong>: basic webapp serving just html (/dependency/index.html)</li> <li><strong>main-webapp</strong>: Spring Boot webapp (copied from Spring Guides <a href='https://github.com/spring-guides/gs-serving-web-content' rel='noreferrer'>gs-serving-web-content</a>). This webapp has a dependency on <strong>dependency-webapp</strong>.</li> </ul>  <p>Here is the main-webapp pom.xml:</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;     &lt;groupId&gt;spring-boot-overlays&lt;/groupId&gt;     &lt;artifactId&gt;parent&lt;/artifactId&gt;     &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;   &lt;/parent&gt;    &lt;artifactId&gt;main-webapp&lt;/artifactId&gt;   &lt;packaging&gt;war&lt;/packaging&gt;    &lt;dependencies&gt;     &lt;dependency&gt;       &lt;groupId&gt;spring-boot-overlays&lt;/groupId&gt;       &lt;artifactId&gt;dependency-webapp&lt;/artifactId&gt;       &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;       &lt;type&gt;war&lt;/type&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;    &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;       &lt;/plugin&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;         &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;overlays&gt;             &lt;overlay&gt;               &lt;groupId&gt;spring-boot-overlays&lt;/groupId&gt;               &lt;artifactId&gt;dependency-webapp&lt;/artifactId&gt;             &lt;/overlay&gt;           &lt;/overlays&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt;    &lt;properties&gt;     &lt;start-class&gt;hello.Application&lt;/start-class&gt;   &lt;/properties&gt;  &lt;/project&gt; </code></pre>  <p>Run the webapp: </p>  <pre><code>mvn install cd main-webapp mvn spring-boot:run </code></pre>  <h3>EDIT 1: Here are the logs when I try to access html pages:</h3>  <p><code>http://localhost:8080/index.html</code> <strong>--> OK</strong></p>  <pre><code>o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/index.html] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /index.html s.w.s.m.m.a.RequestMappingHandlerMapping : Did not find handler method for [/index.html] o.s.w.s.handler.SimpleUrlHandlerMapping  : Matching patterns for request [/index.html] are [/**] o.s.w.s.handler.SimpleUrlHandlerMapping  : URI Template variables for request [/index.html] are {} o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapping [/index.html] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@25595861] and 1 interceptor o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/index.html] is: -1 o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [index.html] against base location: ServletContext resource [/] o.s.w.s.r.ResourceHttpRequestHandler     : Found matching resource: ServletContext resource [/index.html] o.s.w.s.r.ResourceHttpRequestHandler     : Determined media type 'text/html' for ServletContext resource [/index.html] o.s.w.s.r.ResourceHttpRequestHandler     : Resource not modified - returning 304 o.s.web.servlet.DispatcherServlet        : Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling o.s.web.servlet.DispatcherServlet        : Successfully completed request </code></pre>  <p><code>http://localhost:8080/dependency/index.html</code> <strong>--> ERROR 404</strong></p>  <pre><code>o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/dependency/index.html] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /dependency/index.html s.w.s.m.m.a.RequestMappingHandlerMapping : Did not find handler method for [/dependency/index.html] o.s.w.s.handler.SimpleUrlHandlerMapping  : Matching patterns for request [/dependency/index.html] are [/**] o.s.w.s.handler.SimpleUrlHandlerMapping  : URI Template variables for request [/dependency/index.html] are {} o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapping [/dependency/index.html] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@25595861] and 1 interceptor o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/dependency/index.html] is: -1 o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [dependency/index.html] against base location: ServletContext resource [/] o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [dependency/index.html] against base location: class path resource [META-INF/resources/] o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [dependency/index.html] against base location: class path resource [resources/] o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [dependency/index.html] against base location: class path resource [static/] o.s.w.s.r.ResourceHttpRequestHandler     : Trying relative path [dependency/index.html] against base location: class path resource [public/] o.s.w.s.r.ResourceHttpRequestHandler     : No matching resource found - returning 404 o.s.web.servlet.DispatcherServlet        : Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling o.s.web.servlet.DispatcherServlet        : Successfully completed request </code></pre>  <p>Any idea of what's wrong?</p> ",
    "OwnerUserId": "386713",
    "LastEditorUserId": "386713",
    "LastEditDate": "2014-06-04T13:08:34.807",
    "LastActivityDate": "2014-06-04T14:38:56.080",
    "Title": "Spring Boot & Maven war overlay",
    "Tags": "<maven><spring-boot><maven-war-plugin>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>The Spring Boot plugin doesn't know about the overlay (it's pretty basic), so you can raise an issue about that if you like in github. The WAR file from your project deploys and runs (with java -jar) just fine though, so everything else is working.</p> ",
    "highest_rated_answer": null
  },
  {
    "Id": "25479986",
    "PostTypeId": "1",
    "AcceptedAnswerId": "25509937",
    "CreationDate": "2014-08-25T06:16:38.810",
    "Score": "7",
    "ViewCount": "16261",
    "Body": "<p>I'm having some problems with Spring Boot and JSF. The servlet appears to start up correctly, but when I attempt to access a resource I get the following exception</p>  <pre><code>java.lang.IllegalStateException: Could not find backup for factory javax.faces.context.FacesContextFactory.      at javax.faces.FactoryFinder$FactoryManager.getFactory(FactoryFinder.java:1011)     at javax.faces.FactoryFinder.getFactory(FactoryFinder.java:343)     at javax.faces.webapp.FacesServlet.init(FacesServlet.java:302)     at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)     at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:884)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)     at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1720)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:724) </code></pre>  <p>My Application class is as follows</p>  <pre><code>@Configuration @EnableAutoConfiguration @ComponentScan public class Application extends SpringBootServletInitializer {      public static void main(String[] args) {         SpringApplication.run(Application.class);     }      @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(Application.class);     }      @Bean     public FacesServlet facesServlet() {         return new FacesServlet();     }      @Bean     public ServletRegistrationBean facesServletRegistration() {         ServletRegistrationBean registration = new ServletRegistrationBean(             facesServlet(), '*.xhtml');         registration.setName('Christmas');         return registration;     }      @Bean     public ServletListenerRegistrationBean&lt;ConfigureListener&gt; jsfConfigureListener() {         return new ServletListenerRegistrationBean&lt;ConfigureListener&gt;(             new ConfigureListener());     } } </code></pre>  <p>I have no web.xml or faces-config.xml, and my pom.xml is as follows</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.x.y.z&lt;/groupId&gt;     &lt;artifactId&gt;project&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.1.5.RELEASE&lt;/version&gt;     &lt;/parent&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.primefaces&lt;/groupId&gt;             &lt;artifactId&gt;primefaces&lt;/artifactId&gt;             &lt;version&gt;5.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;!-- JSF 2 --&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.sun.faces&lt;/groupId&gt;             &lt;artifactId&gt;jsf-api&lt;/artifactId&gt;             &lt;version&gt;2.1.11&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.sun.faces&lt;/groupId&gt;             &lt;artifactId&gt;jsf-impl&lt;/artifactId&gt;             &lt;version&gt;2.1.11&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;  &lt;/project&gt; </code></pre>  <p>I have a suspicion that there are some conflicts in the dependencies relating to the jsf api, but I can't seem to figure out where. Any help on fixing this issue would be greatly appreciated.</p> ",
    "OwnerUserId": "1034134",
    "LastEditorUserId": "1034134",
    "LastEditDate": "2014-08-25T06:40:34.120",
    "LastActivityDate": "2019-02-24T22:20:36.517",
    "Title": "Spring Boot with JSF; Could not find backup for factory javax.faces.context.FacesContextFactory",
    "Tags": "<maven><jsf><jsf-2><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>To get JSF working on Spring Boot without a <code>web.xml</code> or <code>faces-config.xml</code> you need to force it to load its configuration files via an init parameter on the <code>ServletContext</code>. An easy way to do that is to implement <code>ServletContextAware</code>:</p>  <pre class='lang-java prettyprint-override'><code>public class Application implements ServletContextAware {      // ...      @Override     public void setServletContext(ServletContext servletContext) {         servletContext.setInitParameter('com.sun.faces.forceLoadConfiguration', Boolean.TRUE.toString());                } } </code></pre>  <p>JSF's <code>ConfigureListener</code> also has a dependency on JSP, so you'll need to add a dependency on Jasper to your pom:</p>  <pre class='lang-xml prettyprint-override'><code>&lt;dependency&gt;     &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;     &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;/dependency&gt; </code></pre>  <p>It's not directly related to your problem, but you don't need to declare <code>FacesServlet</code> as a bean. The <code>ServletRegistrationBean</code> is sufficient.</p>  <p>This leaves <code>Application.java</code> looking as follows:</p>  <pre class='lang-java prettyprint-override'><code>import javax.faces.webapp.FacesServlet; import javax.servlet.ServletContext;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.context.embedded.ServletListenerRegistrationBean; import org.springframework.boot.context.embedded.ServletRegistrationBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.context.ServletContextAware;  import com.sun.faces.config.ConfigureListener;  @Configuration @EnableAutoConfiguration @ComponentScan public class Application implements ServletContextAware {      public static void main(String[] args) {         SpringApplication.run(Application.class);     }      @Bean     public ServletRegistrationBean facesServletRegistration() {         ServletRegistrationBean registration = new ServletRegistrationBean(             new FacesServlet(), '*.xhtml');         registration.setLoadOnStartup(1);         return registration;     }      @Bean     public ServletListenerRegistrationBean&lt;ConfigureListener&gt; jsfConfigureListener() {         return new ServletListenerRegistrationBean&lt;ConfigureListener&gt;(             new ConfigureListener());     }      @Override     public void setServletContext(ServletContext servletContext) {         servletContext.setInitParameter('com.sun.faces.forceLoadConfiguration', Boolean.TRUE.toString());            } } </code></pre> ",
    "highest_rated_answer": "<p>probably you forget add listener com.sun.faces.config.ConfigureListener.class : </p>  <pre><code>  @Bean     public ServletContextInitializer servletContextInitializer() {          return sc -&gt; {             ***sc.addListener(com.sun.faces.config.ConfigureListener.class);***             sc.setInitParameter('com.sun.faces.expressionFactory', 'com.sun.el.ExpressionFactoryImpl');             sc.setInitParameter('com.sun.faces.forceLoadConfiguration', Boolean.TRUE.toString());             sc.setInitParameter('facelets.DEVELOPMENT', Boolean.TRUE.toString());             sc.setInitParameter('javax.faces.DEFAULT_SUFFIX', '.xhtml');             sc.setInitParameter('javax.faces.FACELETS_LIBRARIES', 'springsecurity.taglib.xml');             sc.setInitParameter('javax.faces.FACELETS_REFRESH_PERIOD', '1');             sc.setInitParameter('javax.faces.FACELETS_SKIP_COMMENTS', Boolean.TRUE.toString());             sc.setInitParameter('javax.faces.PARTIAL_STATE_SAVING_METHOD', Boolean.TRUE.toString());             sc.setInitParameter('javax.faces.PROJECT_STAGE', 'Development');             sc.setInitParameter('javax.faces.STATE_SAVING_METHOD', 'server');             sc.setInitParameter('primefaces.CLIENT_SIDE_VALIDATION', Boolean.TRUE.toString());             sc.setInitParameter('primefaces.FONT_AWESOME', Boolean.TRUE.toString());             sc.setInitParameter('primefaces.THEME', 'Omega');         };     } </code></pre> "
  },
  {
    "Id": "25494507",
    "PostTypeId": "1",
    "AcceptedAnswerId": "25515108",
    "CreationDate": "2014-08-25T21:18:09.793",
    "Score": "7",
    "ViewCount": "7523",
    "Body": "<p>I am currently using Spring Boot and annotation-based configuration to manage my spring applications. The project is composed of a registration and an external library of services.</p>  <p>Service is composed of classes annotated with <code>@Service</code> and have a <code>@Reposity</code> injected into them.</p>  <p>Registration injects the <code>@Service</code>.</p>  <p>Project Structure (4 maven projects):</p>  <pre><code>xelamitchell (Parent POM)   +- domain   +- service (Spring JPA)  registration (separate project with Spring Boot) </code></pre>  <p>Registration has a maven dependecy to service.</p>  <p>PersonService:</p>  <pre><code>package org.xelamitchell.service.person;  import org.xelamitchell.domain.person.Person; import java.util.List;  /**  * Manages {@link Person}s.  *   * @author amitchell  */ public interface PersonService {      List&lt;Person&gt; list();      Person get(Long id);      Boolean exists(Long id);      Person save(Person person);      Boolean delete(Long id);  }  package org.xelamitchell.service.person;  import org.xelamitchell.domain.person.Person; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Primary; import org.springframework.stereotype.Service;  /**  *  * @author amitchell  */ @Primary @Service public class DefaultPersonService implements PersonService {      private PersonRepository repository;      protected DefaultPersonService() {}      @Autowired     public DefaultPersonService(PersonRepository repository) {         this.repository = repository;     }      @Override     public List&lt;Person&gt; list() {         return repository.findAll();     }      @Override     public Person get(Long id) {         return repository.findOne(id);     }      @Override     public Boolean exists(Long id) {         return repository.exists(id);     }      @Override     public Person save(Person person) {         return repository.save(person);     }      @Override     public Boolean delete(Long id) {          if(id != null) {             repository.delete(id);         }          return repository.exists(id);     }  } </code></pre>  <p>PersonRepository:</p>  <pre><code>package org.xelamitchell.service.person;  import org.xelamitchell.domain.person.Person; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository;  /**  *  * @author amitchell  */ @Repository public interface PersonRepository extends JpaRepository&lt;Person, Long&gt; {  } </code></pre>  <p>Service Library configuration:</p>  <pre><code>@Configuration public class ServiceContext { } </code></pre>  <p>Application configuration:</p>  <pre><code>@Configuration @ComponentScan(basePackages = {'org.xelamitchell'}) @EnableAutoConfiguration //@Import({WebContext.class, ServiceContext.class}) public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } </code></pre>  <p>Spring boot is defined in the POM for Application.</p>  <p>The exception I keep getting is that the <code>@Repository</code> classes were not able to be injected into their respective <code>@Service</code>:</p>  <pre><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personController': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.xelamitchell.service.person.PersonService org.xelamitchell.registration.PersonController.service; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at org.xelamitchell.registration.Application.main(Application.java:26) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.xelamitchell.service.person.PersonService org.xelamitchell.registration.PersonController.service; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)     ... 16 common frames omitted Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:747)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1114)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1017)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)     ... 18 common frames omitted Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1103)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:963)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:811)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:739)     ... 31 common frames omitted  Exception in thread 'main' org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personController': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.xelamitchell.service.person.PersonService org.xelamitchell.registration.PersonController.service; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at org.xelamitchell.registration.Application.main(Application.java:26) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.xelamitchell.service.person.PersonService org.xelamitchell.registration.PersonController.service; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)     ... 16 more Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'defaultPersonService' defined in file [/home/amitchell/Workspace/org/xelamitchell/service/target/classes/org/xelamitchell/service/person/DefaultPersonService.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.xelamitchell.service.person.PersonRepository]: : No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:747)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1114)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1017)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1017)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:480)     ... 18 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.xelamitchell.service.person.PersonRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1103)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:963)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:858)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:811)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:739)     ... 31 more </code></pre> ",
    "OwnerUserId": "1145251",
    "LastEditorUserId": "1145251",
    "LastEditDate": "2014-08-26T20:05:18.753",
    "LastActivityDate": "2014-08-27T16:53:16.953",
    "Title": "Including Spring context from an external jar does not find services",
    "Tags": "<java><maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "15",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Edited after the discussion...</p>  <p>Add the '@EnableJpaRepositories' and '@EntityScan' on top of your Application class.</p>  <pre><code>@EnableJpaRepositories('org.xelamitchell') @EntityScan('org.xelamitchell') </code></pre>  <p>HTH...</p> ",
    "highest_rated_answer": "<p>Where's your implementation of interface: PersonRepository? find it, add <code>@Repository</code> on it, and remove this anotation from PersonRepository interface.</p> "
  },
  {
    "Id": "25610281",
    "PostTypeId": "1",
    "AcceptedAnswerId": "25629342",
    "CreationDate": "2014-09-01T17:01:06.157",
    "Score": "7",
    "ViewCount": "14458",
    "Body": "<p>I have a working WebApp based on Spring Boot (newest 1.1.5.RELEASE) and Thymeleaf.<br/> Now I would like to add functionality to send emails and use Thymeleaf as templating engine. <br/><br/> In pom.xml I add:<br/></p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt;     &lt;artifactId&gt;spring-integration-mail&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;     &lt;groupId&gt;javax.mail&lt;/groupId&gt;     &lt;artifactId&gt;mail&lt;/artifactId&gt;     &lt;version&gt;1.4.7&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;javax.activation&lt;/groupId&gt;     &lt;artifactId&gt;activation&lt;/artifactId&gt;     &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Following this tutorial: <a href='http://www.thymeleaf.org/doc/articles/springmail.html' rel='nofollow noreferrer'>http://www.thymeleaf.org/doc/articles/springmail.html</a> <br/> I got complete (no XML) Java configuration like that:</p>  <pre><code>@Configuration public ThymeleafReplaceConfigurator {   @Bean     public JavaMailSender getJavaMailSenderImpl(){         JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();          Properties props = new Properties();         /* some properties here */          javaMailSender.setJavaMailProperties(props);      return javaMailSender;     }      @Bean     public ClassLoaderTemplateResolver emailTemplateResolver(){         ClassLoaderTemplateResolver emailTemplateResolver = new ClassLoaderTemplateResolver();         emailTemplateResolver.setPrefix('/mails/');         emailTemplateResolver.setSuffix('.html');         emailTemplateResolver.setTemplateMode('HTML5');         emailTemplateResolver.setCharacterEncoding('UTF-8');         emailTemplateResolver.setOrder(1);          return emailTemplateResolver;     }      @Bean     public ServletContextTemplateResolver defaultWebTemplateResolver(){         ServletContextTemplateResolver webTemplateResolver = new ServletContextTemplateResolver();         webTemplateResolver.setPrefix('/templates/');         webTemplateResolver.setSuffix('.html');         webTemplateResolver.setTemplateMode('HTML5');         webTemplateResolver.setCharacterEncoding('UTF-8');         webTemplateResolver.setOrder(2);          return webTemplateResolver;     }      @Bean     public SpringTemplateEngine templateEngine(){     SpringTemplateEngine templateEngine = new SpringTemplateEngine();     templateEngine.setTemplateResolver(emailTemplateResolver());     templateEngine.setTemplateResolver(defaultWebTemplateResolver());     return templateEngine;     }      @Bean     public ThymeleafViewResolver thymeleafViewResolver() {         ThymeleafViewResolver thymeleafViewResolver = new ThymeleafViewResolver();          thymeleafViewResolver.setTemplateEngine(templateEngine());         thymeleafViewResolver.setCharacterEncoding('UTF-8');          return thymeleafViewResolver;     } } </code></pre>  <p>Folder and files tree is like:</p>  <pre><code>src   main     resources       templates         login.html         error.html       mails         exampleMail.html </code></pre>  <p>But it does not work. Application starts correctly but accessing pages (which works without this configuration) causes exception like:</p>  <p>Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template 'login', template might not exist or might not be accessible by any of the configured Template Resolvers<br/><br/> I tried to put different prefixes into webTemplateResolver.setPrefix but without success. <br/> Also I have noticed reported bug in earlier version of Thymeleaf causing that but looks like it was fixed and I have newer version.<br/><br/> <strong>Does anyone see the mistake in this configuration?</strong></p> ",
    "OwnerUserId": "3997870",
    "LastEditorUserId": "3950069",
    "LastEditDate": "2019-07-10T11:30:35.857",
    "LastActivityDate": "2019-07-10T11:30:35.857",
    "Title": "Spring boot sending emails using Thymeleaf as template - configuration does not work",
    "Tags": "<java><email><maven><spring-boot><thymeleaf>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>The main problem is that you are configuring too much. </p>  <p>Spring Boot already configures a <code>TemplateEngine</code> as well as a <code>ThymeleafViewResolver</code>. See the <a href='https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java' rel='noreferrer'><code>ThymeleafAutoConfiguration</code></a> for that. If you <a href='https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java#L109' rel='noreferrer'>look at that class</a> you will also notice that it will auto detect any <code>ITemplateResolver</code> instances you might have in your application and it will add it to the <code>SpringTemplateEngine</code>.</p>  <p>The solution is quite simple remove everything but the email configuration and the <code>emailTemplateResolver</code>. Everything else will be handled by Spring Boot.</p>  <pre><code>@Configuration public class ThymeleafEmailConfiguration {    @Bean     public JavaMailSender getJavaMailSenderImpl(){         JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();          Properties props = new Properties();         /* some properties here */          javaMailSender.setJavaMailProperties(props);          return javaMailSender;     }      @Bean     public ClassLoaderTemplateResolver emailTemplateResolver(){         ClassLoaderTemplateResolver emailTemplateResolver = new ClassLoaderTemplateResolver();         emailTemplateResolver.setPrefix('/mails/');         emailTemplateResolver.setSuffix('.html');         emailTemplateResolver.setTemplateMode('HTML5');         emailTemplateResolver.setCharacterEncoding('UTF-8');         emailTemplateResolver.setOrder(1);          return emailTemplateResolver;     } } </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "26141346",
    "PostTypeId": "1",
    "AcceptedAnswerId": "26147401",
    "CreationDate": "2014-10-01T12:25:35.700",
    "Score": "7",
    "ViewCount": "14870",
    "Body": "<p>I want to use the latest version of spring-data-mongodb, in order to use the full text search feature, but I don't know how I can specify this using the spring-boot-starter-data-mongodb dependence.</p>  <p>You can read here: <a href='http://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-mongodb/1.1.7.RELEASE' rel='noreferrer'>maven repository</a> that the spring-data-mongodb version is not specify.</p>  <p>This is my pom file:</p>  <pre class='lang-xml prettyprint-override'><code>&lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.1.6.RELEASE&lt;/version&gt;     &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;         &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- Spring Boot --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;!-- Spring Boot Rest --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;!-- Spring Boot Test --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- Spring MongoDB integration --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;     &lt;/dependency&gt; </code></pre> ",
    "OwnerUserId": "4079785",
    "LastEditorUserId": "2696260",
    "LastEditDate": "2014-10-01T13:28:48.093",
    "LastActivityDate": "2020-09-06T17:38:56.270",
    "Title": "How can I specify the spring-data-mongodb version using spring-boot?",
    "Tags": "<mongodb><maven><pom.xml><spring-boot>",
    "AnswerCount": "3",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>Spring Boot defines all its dependencies and dependency versions in the <a href='https://github.com/spring-projects/spring-boot/tree/master/spring-boot-dependencies' rel='noreferrer'>spring-boot-dependencies</a> project. This project only contains a <a href='https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml' rel='noreferrer'>pom</a> with only dependencies and versions as properties.</p>  <p>Spring Data releases all of its compatible releases in a so called release train and this makes sure that all dependencies of that version will work together. </p>  <p>When you take <a href='https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml#L110' rel='noreferrer'>a closer look a the pom</a> you will see a maven property named <code>spring-data-releasetrain.version</code> and for the upcoming Spring Boot 1.2 it points to the latest release train version <code>Evans-RELEASE</code>. The 1.1.7 version points to the previous version <code>Dijkstra-SR4</code>. I would suggest an upgrade from 1.1.6 to 1.1.7 just in case.</p>  <p>You're project already has the <code>spring-boot-starter-parent</code> project as its parent so in theory upgrading the Spring Data versions should be as easy as overriding the specified property.</p>  <pre><code>&lt;properties&gt;     &lt;spring-data-releasetrain.version&gt;Evans-RELEASE&lt;/spring-data-releasetrain.version&gt; &lt;/properties&gt; </code></pre>  <p>As mentioned earlier the use of the release train is preferred as this will make sure you get all the compatible versions. </p> ",
    "highest_rated_answer": "<p>You can find that mongodb dependency in the parent project pom file </p>  <pre><code>/../.m2/repository/org/springframework/boot/spring-boot-dependencies/2.3.0.RELEASE/spring-boot-dependencies-2.3.0.RELEASE.pom </code></pre>  <p>That file defines all the dependency version for other libs SpringBoot use</p>  <pre><code>&lt;properties&gt;     &lt;activemq.version&gt;5.15.12&lt;/activemq.version&gt;     &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;     ...     &lt;mongodb.version&gt;4.0.3&lt;/mongodb.version&gt;     ... &lt;/properties&gt; </code></pre>  <p>So if you want to use different version for mongodb, define a properties in your pom file to override the default one like (I think this will only work if you use <code>spring-boot-starter-parent</code> as parent )</p>  <pre><code>&lt;properties&gt;     &lt;mongodb.version&gt;3.11.2&lt;/mongodb.version&gt; &lt;/properties&gt; </code></pre> "
  },
  {
    "Id": "26149711",
    "PostTypeId": "1",
    "AcceptedAnswerId": "26362146",
    "CreationDate": "2014-10-01T20:09:00.937",
    "Score": "7",
    "ViewCount": "3757",
    "Body": "<p>I have an application composed of multiple maven war projects.</p>  <p>I have another maven project that runs JUnit integration tests against the manually-started tomcat-deployed multi-war application using org.springframework.web.client.RestTemplate calls.</p>  <p>However, I'd like my integration test project to actually start my multi-war application (once for the duration of the entire suite) before it runs my tests...in spring-boot!</p>  <p>From my integration test project, I'd like to be able to run all the war projects together as a spring-boot application, each with their own contextPaths (e.g. localhost:8080/a for project 'a', localhost:8080/b for project 'b', etc. ), and without changing the original war projects (that are not (yet) spring-boot aware). If I can't make these projects run from my integration test project in spring-boot without changing them then I'd at least like to minimize the use of spring-boot dependencies and configuration in packaged war files...as much as possible.</p>  <p>I was able to get my integration test project to depend on a single war project, start it up and run tests against it...but I was unsuccessful getting two war projects running together in spring-boot under separate contextPaths.</p>  <p>Any suggestions would be welcome!</p>  <p>Here are some of the resources I've been using to put this together:</p>  <ul> <li><p>(Spring-boot documentation) <a href='http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html' rel='noreferrer'>http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html</a></p></li> <li><p>(Blog post touching on starting spring app once for test suite) <a href='http://www.nurkiewicz.com/2010/12/speeding-up-spring-integration-tests.html' rel='noreferrer'>http://www.nurkiewicz.com/2010/12/speeding-up-spring-integration-tests.html</a></p></li> <li><p>(Suggestions for including war files as dependencies in a integration test project pom) <a href='http://eureka.ykyuen.info/2009/10/30/maven-dependency-on-jarwar-package/' rel='noreferrer'>http://eureka.ykyuen.info/2009/10/30/maven-dependency-on-jarwar-package/</a></p></li> </ul> ",
    "OwnerUserId": "1098564",
    "LastActivityDate": "2018-08-10T08:33:56.463",
    "Title": "Integration testing of multi-war application in Spring Boot",
    "Tags": "<java><spring><maven><junit><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": "<p>As per Andy's suggestion, I went with the Tomcat7 Maven Plugin and it worked just fine. The Jetty Maven Plugin was another option (and better documented IMO) although I couldn't find a way to avoid having to provide a 'path' to my WAR files. The Tomcat7 Maven Plugin, let me load up my WARs from my local .m2 repository. I should also say that the following links were helpful as well...</p>  <ul> <li><a href='http://cupofjava.de/blog/2013/02/05/integration-tests-with-maven-and-tomcat/' rel='nofollow noreferrer'>http://cupofjava.de/blog/2013/02/05/integration-tests-with-maven-and-tomcat/</a></li> <li><a href='https://stackoverflow.com/a/16936585/1098564'>https://stackoverflow.com/a/16936585/1098564</a></li> </ul>  <p>Here's part of my integration test project pom...</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;             &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;             &lt;version&gt;2.17&lt;/version&gt;             &lt;configuration&gt;                 &lt;skipTests&gt;true&lt;/skipTests&gt;             &lt;/configuration&gt;         &lt;/plugin&gt;         &lt;plugin&gt;             &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;             &lt;version&gt;2.17&lt;/version&gt;             &lt;configuration&gt;                 &lt;includes&gt;                     &lt;include&gt;**/*Test*&lt;/include&gt;                 &lt;/includes&gt;             &lt;/configuration&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                         &lt;goal&gt;integration-test&lt;/goal&gt;                         &lt;goal&gt;verify&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;             &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;2.2&lt;/version&gt;             &lt;configuration&gt;                 &lt;path&gt;/&lt;/path&gt;                 &lt;webapps&gt;                     &lt;webapp&gt;                         &lt;groupId&gt;com.mycompany&lt;/groupId&gt;                         &lt;artifactId&gt;app1&lt;/artifactId&gt;                         &lt;version&gt;${project.version}&lt;/version&gt;                         &lt;type&gt;war&lt;/type&gt;                         &lt;asWebapp&gt;true&lt;/asWebapp&gt;                     &lt;/webapp&gt;                     &lt;webapp&gt;                         &lt;groupId&gt;com.mycompany&lt;/groupId&gt;                         &lt;artifactId&gt;app2&lt;/artifactId&gt;                         &lt;version&gt;${project.version}&lt;/version&gt;                         &lt;type&gt;war&lt;/type&gt;                         &lt;asWebapp&gt;true&lt;/asWebapp&gt;                     &lt;/webapp&gt;                 &lt;/webapps&gt;             &lt;/configuration&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;id&gt;start-tomcat&lt;/id&gt;                     &lt;phase&gt;pre-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;run-war&lt;/goal&gt;                     &lt;/goals&gt;                     &lt;configuration&gt;                         &lt;fork&gt;true&lt;/fork&gt;                     &lt;/configuration&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                     &lt;id&gt;stop-tomcat&lt;/id&gt;                     &lt;phase&gt;post-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;shutdown&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> ",
    "highest_rated_answer": null
  },
  {
    "Id": "26314374",
    "PostTypeId": "1",
    "CreationDate": "2014-10-11T11:56:06.987",
    "Score": "7",
    "ViewCount": "29078",
    "Body": "<p>My POM is as below. But the executable JAR is not being create when I run 'mvn clean package'. However, when I remove the dependencyManagement element and add spring boot as parent  POM, everything works.</p>  <p>What am I missing?</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.example&lt;/groupId&gt;     &lt;artifactId&gt;sample-boot&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;      &lt;dependencyManagement&gt;         &lt;dependencies&gt;             &lt;dependency&gt;                 &lt;!-- Import dependency management from Spring Boot --&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;                 &lt;version&gt;1.2.0.M2&lt;/version&gt;                 &lt;type&gt;pom&lt;/type&gt;                 &lt;scope&gt;import&lt;/scope&gt;             &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;/dependencyManagement&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;repositories&gt;         &lt;repository&gt;             &lt;id&gt;spring-snapshots&lt;/id&gt;             &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;             &lt;/snapshots&gt;         &lt;/repository&gt;         &lt;repository&gt;             &lt;id&gt;spring-milestones&lt;/id&gt;             &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;pluginRepositories&gt;         &lt;pluginRepository&gt;             &lt;id&gt;spring-snapshots&lt;/id&gt;             &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;         &lt;/pluginRepository&gt;         &lt;pluginRepository&gt;             &lt;id&gt;spring-milestones&lt;/id&gt;             &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;         &lt;/pluginRepository&gt;     &lt;/pluginRepositories&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "4132205",
    "LastEditorUserId": "52070",
    "LastEditDate": "2016-03-21T12:21:10.063",
    "LastActivityDate": "2017-04-18T08:08:07.573",
    "Title": "Spring Boot Maven Plugin not creating executable jar",
    "Tags": "<spring><maven-3><spring-boot>",
    "AnswerCount": "7",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>You need to configure spring-boot-maven-plugin by yourself:</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.1.8.RELEASE&lt;/version&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                         &lt;goal&gt;repackage&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>Obviously set your own plugin version. Now if you run mvn install or mvn package you'll have executable JAR generated.</p> "
  },
  {
    "Id": "27214584",
    "PostTypeId": "1",
    "AcceptedAnswerId": "27221342",
    "CreationDate": "2014-11-30T14:58:41.313",
    "Score": "7",
    "ViewCount": "10640",
    "Body": "<p>Good day, I have just created a project to use Spring-boot, and thymeleaf. I am attempting to take advantage of the layout dialect in order to take advantage of its 'tiles like templating'. I have looked up this problem and each response recommends me to add the layout dialect as a spring-boot configuration file. but each attempt I have had at this has failed, the most recent one came from this link <a href='https://stackoverflow.com/questions/23531580/how-do-i-add-a-thymeleaf-dialect-to-spring-boot'>How do I add a thymeleaf dialect to spring boot?</a> . so I added this in the configuration file</p>  <pre><code>@Configuration public class ThymleafConfiguration {     @Bean     public LayoutDialect layoutDialect() {         return new LayoutDialect();     } } </code></pre>  <p>but it always results with:</p>  <pre><code>'Error resolving template 'layout.html', template might not exist or might not be accessible by any of the configured Template Resolvers (welcomeHome:4)' </code></pre>  <p>however the layout.html is in the /resources/templates folder, so i know it isnt a location mismatch. My goal is just to add the layout Dialect with out disrupting too much of the spring-boot autoconfiguration settings. my pom has both the thymeleaf-layout-dialect and thymeleaf starter dependencies.</p>  <p>welcomeHome.html</p>  <pre class='lang-html prettyprint-override'><code>&lt;html xmlns='http://www.w3.org/1999/xhtml'       xmlns:layout='http://www.ultraq.net.nz/thymeleaf/layout'       layout:decorator='layout.html'&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/&gt; </code></pre>  <p>stack trace: </p>  <pre><code>org.thymeleaf.exceptions.TemplateInputException: Error resolving template 'layout.html', template might not exist or might not be accessible by any of the configured Template Resolvers (welcomeHome:4)     at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:245)     at nz.net.ultraq.thymeleaf.decorator.DecoratorProcessor.processAttribute(DecoratorProcessor.java:92)     at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)     at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)     at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1016)     at org.thymeleaf.dom.Node.processNode(Node.java:971)     at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:672)     at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:655)     at org.thymeleaf.dom.Node.processNode(Node.java:990)     at org.thymeleaf.dom.Document.process(Document.java:93)     at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)     at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)     at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)     at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)     at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1221)     at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1005)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:952)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) </code></pre>  <p>pom.xml</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;org.worksBeyond&lt;/groupId&gt;     &lt;artifactId&gt;worksBeyondv2&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;war&lt;/packaging&gt;      &lt;name&gt;WorksBeyond&lt;/name&gt;     &lt;description&gt;A base project for works beyond&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.1.9.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-social-facebook&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-social-linkedin&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-social-twitter&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;!-- &lt;dependency&gt;                 &lt;groupId&gt;javax.servlet&lt;/groupId&gt;                 &lt;artifactId&gt;jstl&lt;/artifactId&gt;             &lt;/dependency&gt; --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-context&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-neo4j&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.hibernate&lt;/groupId&gt;             &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;start-class&gt;worksBeyond.Application&lt;/start-class&gt;         &lt;java.version&gt;1.7&lt;/java.version&gt;     &lt;/properties&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;      &lt;repositories&gt;         &lt;repository&gt;             &lt;id&gt;spring-releases&lt;/id&gt;             &lt;name&gt;Spring Releases&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;         &lt;/repository&gt;         &lt;repository&gt;             &lt;id&gt;neo4j&lt;/id&gt;             &lt;name&gt;Neo4j&lt;/name&gt;             &lt;url&gt;http://m2.neo4j.org/&lt;/url&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;pluginRepositories&gt;         &lt;pluginRepository&gt;             &lt;id&gt;spring-releases&lt;/id&gt;             &lt;name&gt;Spring Releases&lt;/name&gt;             &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;         &lt;/pluginRepository&gt;     &lt;/pluginRepositories&gt;  &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "4308821",
    "LastEditorUserId": "8583692",
    "LastEditDate": "2018-07-21T19:38:57.293",
    "LastActivityDate": "2018-07-21T19:38:57.293",
    "Title": "how to add the layout dialect to spring-boot thymeleaf autoconfiguration file",
    "Tags": "<maven><spring-boot><thymeleaf>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0",
    "accepted_answer": "<p>OK! so I figured out the solution. The issue lied within the decorator name in the view resolver. So in the welcomeHome.html the original decorator declaration was: </p>  <p><div class='snippet' data-lang='js' data-hide='false'>  <div class='snippet-code'>  <pre class='snippet-code-html lang-html prettyprint-override'><code>welcomeHome.html      &lt;html xmlns='http://www.w3.org/1999/xhtml'        xmlns:layout='http://www.ultraq.net.nz/thymeleaf/layout'        layout:decorator='layout.html'&gt;        &lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/&gt;</code></pre>  </div>  </div>  </p>  <p>The working solution is : </p>  <p><div class='snippet' data-lang='js' data-hide='false'>  <div class='snippet-code'>  <pre class='snippet-code-html lang-html prettyprint-override'><code>&lt;html xmlns='http://www.w3.org/1999/xhtml'   xmlns:layout='http://www.ultraq.net.nz/thymeleaf/layout'    layout:decorator='layout'&gt;    &lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/&gt;</code></pre>  </div>  </div>  </p>  <p>The difference lies in the omitting the '.html' at the end of layout.html . So</p>  <p>layout:decorator='layout.html'</p>  <p>becomes: </p>  <p>layout:decorator='layout'</p>  <p>From what I am now understanding, the thymeleafautoconfiguration sets the suffix to .html. which means it isnt necessary to add it in the decorator's file name. </p> ",
    "highest_rated_answer": "<p>The <code>LayoutDialect</code> is already autoconfigured, so you shouldn't need to do anything. Are you sure 'templates/layout.html' is actually on the classpath?</p> "
  },
  {
    "Id": "27934418",
    "PostTypeId": "1",
    "CreationDate": "2015-01-14T01:25:12.123",
    "Score": "7",
    "ViewCount": "12052",
    "Body": "<p>I have the following in my Spring Boot application pom as per <a href='http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-maven-without-a-parent' rel='noreferrer'>the documentation</a>:</p>    <pre class='lang-xml prettyprint-override'><code>  &lt;dependencyManagement&gt;     &lt;dependencies&gt;       &lt;!-- Spring --&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;         &lt;version&gt;${spring-boot.version}&lt;/version&gt;         &lt;type&gt;pom&lt;/type&gt;         &lt;scope&gt;import&lt;/scope&gt;       &lt;/dependency&gt;     &lt;/dependencies&gt;   &lt;/dependencyManagement&gt; </code></pre>  <p>I need to use use <code>dependencyManagement</code> and <code>&lt;scope&gt;import&lt;/scope&gt;</code> because I need to use a standard corporate base pom.</p>  <p>However, it doesn't seem possible to exclude transitive dependencies of <code>spring-boot-dependencies</code>. In my particular case, Spring Boot <code>1.2.1.RELEASE</code> is bringing in a version of Jetty that is too new with respect to some of my other <code>&lt;dependencies&gt;</code>. I tried using an <code>&lt;exclusion&gt;</code> of the form:</p>  <pre class='lang-xml prettyprint-override'><code>  &lt;dependencyManagement&gt;     &lt;dependencies&gt;       &lt;!-- Spring --&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;${spring-boot.version}&lt;/version&gt;         &lt;type&gt;pom&lt;/type&gt;         &lt;scope&gt;import&lt;/scope&gt;          &lt;!-- Doesn't work --&gt;         &lt;exclusions&gt;           &lt;exclusion&gt;             &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;             &lt;artifactId&gt;*&lt;/artifactId&gt;           &lt;/exclusion&gt;         &lt;/exclusions&gt;        &lt;/dependency&gt;      &lt;/dependencies&gt;   &lt;/dependencyManagement&gt; </code></pre>  <p>using <a href='http://maven.apache.org/docs/3.2.1/release-notes.html' rel='noreferrer'>Maven 3.2.1's wildcard support</a>, but it doesn't seem to take effect. </p>  <p>Is there a solution to this problem other than explicitly overriding all the Jetty dependencies? There are many Jetty libraries and that approach would be quite brittle. Furthermore, it appears I would need to do the same with Jetty's transitive dependencies as well.</p> ",
    "OwnerUserId": "527333",
    "LastEditorUserId": "527333",
    "LastEditDate": "2015-01-14T12:42:56.450",
    "LastActivityDate": "2020-07-23T08:55:41.503",
    "Title": "How to exclude transitive dependencies of spring-boot-dependencies from maven import scope",
    "Tags": "<maven><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0",
    "accepted_answer": null,
    "highest_rated_answer": "<p>According to the <a href='https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/maven-plugin/reference/html/' rel='noreferrer'>Spring Boot Maven Plugin 2.3.1.RELEASE documentation</a>, to override individual dependencies, you need to add entries in the <code>dependencyManagement</code> section of your project <strong>before</strong> the <code>spring-boot-dependencies</code> entry.</p>  <pre class='lang-xml prettyprint-override'><code>  &lt;dependencyManagement&gt;     &lt;dependencies&gt;       &lt;!-- Your jetty version dependency --&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;         &lt;artifactId&gt;*&lt;/artifactId&gt;         &lt;version&gt;${jetty.version}&lt;/version&gt;       &lt;/dependency&gt;        &lt;!-- Spring --&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;${spring-boot.version}&lt;/version&gt;         &lt;type&gt;pom&lt;/type&gt;         &lt;scope&gt;import&lt;/scope&gt;       &lt;/dependency&gt;     &lt;/dependencies&gt;   &lt;/dependencyManagement&gt; </code></pre> "
  }
]