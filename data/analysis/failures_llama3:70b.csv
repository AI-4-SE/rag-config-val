final_failure_category,llm,config,uncertainty,correct,rating,reasoning,context_str,project,option_name,option_type,option_value,option_technology,option_file,dependent_option_name,dependent_option_type,dependent_option_value,dependent_option_technology,dependent_option_file,final_category,sub_category,responses,shot_info,project_info
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The configuration options have the same value, but this does not necessarily imply a dependency. Maven projects can have independent POMs with identical model versions. To determine a dependency, we need to examine the project structure, inheritance, and aggregation relationships.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",apollo,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,apollo-audit/apollo-audit-api/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,apollo-biz/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in apollo-audit/apollo-audit-api/pom.xml and apollo-biz/pom.xml, follow these steps: 1) Check if both POM files have the same model version (4.0.0). 2) Verify that the parent POM file is correctly referenced in the child POM file using the <parent> tag. 3) Ensure that the packaging type of the parent POM file is set to 'pom' to enable aggregation."",
    ""rationale"": ""The project.modelVersion in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Resource Sharing,llama3:70b,config2,8.0,FN,True,"The two configuration options have the same value '/health', but they are defined in different YAML files belonging to separate Spring Boot applications. Since they are part of distinct Eureka clients, it is unlikely that modifying one option would directly impact the other. The health check URL path is a client-side configuration, and each client maintains its own instance information.","I've tried:

  * management.endpoints.web.base-path
  * eureka.instance.health-check-url-path

I'm currently using spring boot 2.1.2.RELEASE and matching version of SBA

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [netflix-eureka](/questions/tagged/netflix-eureka ""show questions tagged 'netflix-eureka'"")
  * [spring-boot-admin](/questions/tagged/spring-boot-admin ""show questions tagged 'spring-boot-admin'"")

[Share](/q/57295151 ""Short permalink to this question"")

Follow

[edited Jul 31, 2019 at 16:23](/posts/57295151/revisions ""show all edits to
this post"")

phury

asked Jul 31, 2019 at 16:17

[![phury's user
avatar](https://www.gravatar.com/avatar/47cc4aff85057e530c0b3837c39e966e?s=64&d=identicon&r=PG)](/users/1598255/phury)

[phury](/users/1598255/phury)phury

2,18322 gold badges2323 silver badges3333 bronze badges

1

  * I am also facing this issue, have you found the resolution of it.

- [springcloudlearner](/users/8339426/springcloudlearner ""457 reputation"")

Commented Apr 15, 2021 at 15:31

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/57295151/spring-boot-admin-with-
eureka-client-and-custom-context-path-fails-on-health-
sta?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/57720236/timeline ""Show activity on this post."")

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 1 ](/q/30496926 ""Question score \(upvotes - downvotes\)"") [Eureka Spring
Boot client exception](/questions/30496926/eureka-spring-boot-client-
exception)

[ 4 ](/q/35012941 ""Question score \(upvotes - downvotes\)"") [Enable
eureka.client.healthcheck](/questions/35012941/enable-eureka-client-
healthcheck)

[ 7 ](/q/35172625 ""Question score \(upvotes - downvotes\)"") [Spring Cloud
Config Eureka-first approach not working](/questions/35172625/spring-cloud-
config-eureka-first-approach-not-working)

[ 3 ](/q/35835348 ""Question score \(upvotes - downvotes\)"") [Spring Eureka
server does not find context-path in client url](/questions/35835348/spring-
eureka-server-does-not-find-context-path-in-client-url)

[ 0 ](/q/39942392 ""Question score \(upvotes - downvotes\)"") [How to register
spring boot admin client to spring boot admin client through
eureka?](/questions/39942392/how-to-register-spring-boot-admin-client-to-
spring-boot-admin-client-through-eur)

[ 5 ](/q/40504955 ""Question score \(upvotes - downvotes\)"") [How to correctly
set management.context-path for spring boot admin client under eureka
discovery environment?

1. Service Discovery: Eureka Clients  
---  
[Prev](multi_pr01.html) |  |  [Next](multi_spring-cloud-eureka-server.html)  
  
* * *

# 1. Service Discovery: Eureka Clients

Service Discovery is one of the key tenets of a microservice-based
architecture. Trying to hand-configure each client or some form of convention
can be difficult to do and can be brittle. Eureka is the Netflix Service
Discovery Server and Client. The server can be configured and deployed to be
highly available, with each server replicating state about the registered
services to the others.

## 1.1 How to Include Eureka Client

To include the Eureka Client in your project, use the starter with a group ID
of `org.springframework.cloud` and an artifact ID of `spring-cloud-starter-
netflix-eureka-client`. See the [Spring Cloud Project
page](https://projects.spring.io/spring-cloud/) for details on setting up your
build system with the current Spring Cloud Release Train.

## 1.2 Registering with Eureka

When a client registers with Eureka, it provides meta-data about itself --
such as host, port, health indicator URL, home page, and other details. Eureka
receives heartbeat messages from each instance belonging to a service. If the
heartbeat fails over a configurable timetable, the instance is normally
removed from the registry.

The following example shows a minimal Eureka client application:

    
    
    _@SpringBootApplication_
    _@RestController_
    public class Application {
    
        _@RequestMapping(""/"")_
        public String home() {
            return ""Hello world"";
        }
    
        public static void main(String[] args) {
            new SpringApplicationBuilder(Application.class).web(true).run(args);
        }
    
    }

Note that the preceding example shows a normal [Spring
Boot](https://projects.spring.io/spring-boot/) application. By having `spring-
cloud-starter-netflix-eureka-client` on the classpath, your application
automatically registers with the Eureka Server. Configuration is required to
locate the Eureka server, as shown in the following example:

**application.yml.

Configuration is required to
locate the Eureka server, as shown in the following example:

**application.yml.  **

    
    
    eureka:
      client:
        serviceUrl:
          defaultZone: http://localhost:8761/eureka/

In the preceding example, ""defaultZone"" is a magic string fallback value that
provides the service URL for any client that does not express a preference (in
other words, it is a useful default).

The default application name (that is, the service ID), virtual host, and non-
secure port (taken from the `Environment`) are `${spring.application.name}`,
`${spring.application.name}` and `${server.port}`, respectively.

Having `spring-cloud-starter-netflix-eureka-client` on the classpath makes the
app into both a Eureka ""instance"" (that is, it registers itself) and a
""client"" (it can query the registry to locate other services). The instance
behaviour is driven by `eureka.instance.*` configuration keys, but the
defaults are fine if you ensure that your application has a value for
`spring.application.name` (this is the default for the Eureka service ID or
VIP).

See [EurekaInstanceConfigBean](https://github.com/spring-cloud/spring-cloud-
netflix/tree/master/spring-cloud-netflix-eureka-
client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java)
and [EurekaClientConfigBean](https://github.com/spring-cloud/spring-cloud-
netflix/tree/master/spring-cloud-netflix-eureka-
client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java)
for more details on the configurable options.

To disable the Eureka Discovery Client, you can set `eureka.client.enabled` to
`false`. Eureka Discovery Client will also be disabled when
`spring.cloud.discovery.enabled` is set to `false`.

## 1.3 Authenticating with the Eureka Server

HTTP basic authentication is automatically added to your eureka client if one
of the `eureka.client.serviceUrl.defaultZone` URLs has credentials embedded in
it (curl style, as follows: `<http://user:password@localhost:8761/eureka>`).

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f57295151%2fspring-
boot-admin-with-eureka-client-and-custom-context-path-fails-on-health-sta) or
[log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f57295151%2fspring-
boot-admin-with-eureka-client-and-custom-context-path-fails-on-health-sta) to
customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f57295151%2fspring-boot-admin-with-eureka-client-and-custom-context-path-fails-on-health-sta)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f57295151%2fspring-boot-admin-with-eureka-client-and-custom-context-path-fails-on-health-sta)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10.",apollo,eureka.instance.health-check-url-path,PATH,/health,spring,apollo-adminservice/src/main/resources/application.yml,eureka.instance.health-check-url-path,PATH,/health,spring,apollo-assembly/src/main/resources/application.yml,Others,Eureka,"{
    ""plan"": ""1. Analyze the configuration options: eureka.instance.health-check-url-path in apollo-adminservice/src/main/resources/application.yml and apollo-assembly/src/main/resources/application.yml.\n2. Identify the values of both configuration options as '/health'.\n3. Evaluate whether the identical value indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration options eureka.instance.health-check-url-path in both application.yml files have the same value '/health', which is a common default health check URL path for Eureka instances. This similarity does not inherently indicate a dependency between them, as each instance can have its own health check URL path."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Inferring Dependencies,llama3:70b,config2,8.0,FP,False,"The configuration options project.build.resources.resource.excludes.exclude_**/*.properties and project.build.resources.resource.includes.include_**/*.properties have identical values (**/*.properties), which suggests that they are mutually exclusive. If a file matches the include pattern, it will be included in the resources, and if it matches the exclude pattern, it will be excluded. Therefore, these configuration options depend on each other to ensure that files are either included or excluded correctly.","Thanks.

Properties files from where? Your main jar? Dependencies?

In the former case, putting resources under `src/test/resources` as suggested
is probably the most straight forward and simplest option.

In the later case, you'll have to create a custom assembly descriptor with
special `excludes/exclude` in the
[`unpackOptions`](http://maven.apache.org/plugins/maven-assembly-
plugin/assembly.html#class_unpackOptions).

[Share](/a/4114667 ""Short permalink to this answer"")

[Improve this answer](/posts/4114667/edit)

Follow

answered Nov 6, 2010 at 19:05

[![Pascal Thivent's user
avatar](https://www.gravatar.com/avatar/dc1a5b5fdba36ae9cdcf6e267f1a86ca?s=64&d=identicon&r=PG)](/users/70604/pascal-
thivent)

[Pascal Thivent](/users/70604/pascal-thivent)Pascal Thivent

568k140140 gold badges1.1k1.1k silver badges1.1k1.1k bronze badges

Add a comment  | 

0

[](/posts/72919798/timeline ""Show activity on this post."")

here is [another solution](https://www.kianworknotes.com/2019/12/how-to-
exclude-all-files-in-resources.html) to **exclude all files in resources
folder** , the final configuration looks like:

    
    
    <build>
        <!-- exclude all files in resources-->    
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/**</exclude>
                </excludes>
                <filtering>false</filtering>
            </resource>
        </resources>
    
        <!-- other configurations/plugins in the pom.xml-->
    </build>
    

or we can [use includes](https://maven.apache.org/plugins/maven-resources-
plugin/examples/include-exclude.html) to only package some file or folder. But
this method has a side effect. IDE will also exclude the resource files in
`target/classes` folder. **maven-jar-plugin** only affect jar file.

[![Apache Maven Resources Plugin](../../../images/apache-maven-
project.png)](https://www.apache.org/)

[![](../../../images/maven-logo-black-on-white.png)](../../../)

* * *

  * [Apache](https://www.apache.org/ ""Apache"")/
  * [Maven](../../../index.html ""Maven"")/
  * [Plugins](../../index.html ""Plugins"")/
  * [Apache Maven Resources Plugin](../index.html ""Apache Maven Resources Plugin"")/
  * Including and excluding files and directories [![](./images/accessories-text-editor.png)](https://github.com/apache/maven-resources-plugin/tree/maven-resources-plugin-3.3.1/src/site/apt/examples/include-exclude.apt)
  * | Last Published: 2023-03-21
  * Version: 3.3.1

  * Overview
  * [Introduction](./index.html ""Introduction"")
  * [Goals](./plugin-info.html ""Goals"")
  * [Usage](./usage.html ""Usage"")
  * [FAQ](./faq.html ""FAQ"")
  * [License](http://www.apache.org/licenses/ ""License"")
  * [Download](./download.html ""Download"")
  * Examples
  * [Specifying a character encoding scheme](./examples/encoding.html ""Specifying a character encoding scheme"")
  * [Specifying resource directories](./examples/resource-directory.html ""Specifying resource directories"")
  * [Filtering](./examples/filter.html ""Filtering"")
  * [Filtering properties files](./examples/filtering-properties-files.html ""Filtering properties files"")
  * Including and excluding files and directories
  * [Escape Filtering](./examples/escape-filtering.html ""Escape Filtering"")
  * [Copy Resources](./examples/copy-resources.html ""Copy Resources"")
  * [Binaries Filtering](./examples/binaries-filtering.html ""Binaries Filtering"")
  * [Custom Resources Filters](./examples/custom-resource-filters.html ""Custom Resources Filters"")
  * Project Documentation
  * [Project Information](./project-info.html ""Project Information"")
  * [Project Reports](./project-reports.html ""Project Reports"")
  * Maven Projects
  * [Archetype](./././archetype/index.html ""Archetype"")
  * [Artifact Resolver](./././resolver/index.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project>
      ...
      <name>My Resources Plugin Practice Project</name>
      ...
      <build>
        ...
        <resources>
          <resource>
            <directory>[your directory]</directory>
            <excludes>
              <exclude>[non-resource file #1]</exclude>
              <exclude>[non-resource file #2]</exclude>
              <exclude>[non-resource file #3]</exclude>
              ...
              <exclude>[non-resource file #n]</exclude>
            </excludes>
          </resource>
          ...
        </resources>
        ...
      </build>
      ...
    </project>

For example, if we want to include all text and RTF files under our `src/my-
resources` directory and in all its subdirectories, we can do the following:

    
    
    <project>
      ...
      <name>My Resources Plugin Practice Project</name>
      ...
      <build>
        ...
        <resources>
          <resource>
            <directory>src/my-resources</directory>
            <includes>
              <include>**/*.txt</include>
              <include>**/*.rtf</include>
            </includes>
          </resource>
          ...
        </resources>
        ...
      </build>
      ...
    </project>

Also, if we want to include everything except the bitmaps, jpegs, and gifs, we
can simply exclude them by:

    
    
    <project>
      ...
      <name>My Resources Plugin Practice Project</name>
      ...
      <build>
        ...
        <resources>
          <resource>
            <directory>src/my-resources</directory>
            <excludes>
              <exclude>**/*.bmp</exclude>
              <exclude>**/*.jpg</exclude>
              <exclude>**/*.jpeg</exclude>
              <exclude>**/*.gif</exclude>
            </excludes>
          </resource>
          ...
        </resources>
        ...
      </build>
      ...
    </project>

Of course, we can also have both `<includes>` and `<excludes>` elements. For
example, if we want to include all text files that does not contain the word
""test"" in their filename.

[chad's user
avatar](https://i.sstatic.net/BVCox.jpg?s=64)](/users/507675/chad)

[chad](/users/507675/chad)chad

7,48966 gold badges3939 silver badges5757 bronze badges

 | 

##  3 Answers 3

Sorted by:  [ Reset to default ](/questions/9216557/referencing-resources-
directory-from-project-object-model-variables?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

64

[](/posts/15004792/timeline ""Show activity on this post."")

    
    
    ${project.build.resources[0].directory}
    

[maven reference @ Sonatype, chapter 'resource
filtering'](http://books.sonatype.com/mvnref-book/reference/resource-
filtering-sect-properties.html) says that anything from maven internal
""Model.class"" can be accessed. quote :

> ""_For a full list of properties available on the Maven Model object, take a
> look at the JavaDoc for the maven-model project
> here<http://maven.apache.org/ref/3.0.4/maven-model/apidocs/index.html>. Once
> you load this JavaDoc, take a look at the Model class. From this Model class
> JavaDoc, you should be able to navigate to the POM property you wish to
> reference._""

Then, [maven help plugin](http://maven.apache.org/plugins/maven-help-plugin)
has a handy [help:evaluate](http://maven.apache.org/plugins/maven-help-
plugin/evaluate-mojo.html) goal that let you do trial&error to discover the
properties.

[Share](/a/15004792 ""Short permalink to this answer"")

[edited Apr 11, 2018 at 8:54](/posts/15004792/revisions ""show all edits to
this post"")

[!",apollo,project.build.resources.resource.excludes.exclude_**/*.properties,PATH,**/*.properties,maven,pom.xml,project.build.resources.resource.includes.include_**/*.properties,PATH,**/*.properties,maven,pom.xml,Others,Others,"{
    ""plan"": ""To evaluate the dependency between project.build.resources.resource.excludes.exclude_**/*.properties and project.build.resources.resource.includes.include_**/*.properties, we need to analyze their usage in the Maven build process. We can use the Maven help plugin's 'help:evaluate' goal to explore the properties available on the Maven Model object. We can also refer to the Maven documentation and JavaDoc for the Maven Model class to understand the properties better."",
    ""rationale"": ""The configuration options project.build.resources.resource.excludes.exclude_**/*.properties and project.build.resources.resource.includes.include_**/*.properties are used to specify the exclusion and inclusion patterns for resources in a Maven build. They serve opposite purposes, but their values can be complementary. For example, excluding **/*.properties files might be necessary when including other resource files. Therefore, there is a dependency between these options based on value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration options eureka.client.fetch-registry and eureka.server.enableSelfPreservation appear to have an indirect dependency due to their related functionalities in the Eureka server setup. When both options are set to FALSE, it may lead to inconsistencies in the registry information and self-preservation mechanism. However, this dependency is not strictly based on value equality but rather on the logical connection between their purposes.","## eureka server set up

_pom.xml_

    
    
    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR1</spring-cloud.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

_main application class_

    
    
    @SpringBootApplication
    @EnableEurekaServer
    public class DiscoveryServerApplication {
    
        public static void main(String[] args) {
            SpringApplication.run(DiscoveryServerApplication.class, args);
        }
    }
    

_application.properties_

    
    
    server.port=8761
    eureka.client.register-with-eureka=false
    eureka.client.fetch-registry=false
    

**eureka client set up**

_pom.xml_

    
    
    <properties>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR1</spring-cloud.version>
    </properties>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.

netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar!/:1.9.8]         at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.

* [**EurekaClientApplication.java**](http://EurekaClientApplication.java)**:**

    
    
     package com.example.eurekaclient;  
    import org.springframework.boot.SpringApplication;  
    import org.springframework.boot.autoconfigure.SpringBootApplication;  
    import org.springframework.cloud.netflix.eureka.EnableEurekaClient;  
    @SpringBootApplication  
    @EnableEurekaClient  
    public class EurekaClientApplication {  
        public static void main(String[] args) {  
            SpringApplication.run(EurekaClientApplication.class, args);  
        }  
    }

# Step 3: Configure Application Properties

Configure the application properties to register the client with the Eureka
server.

  * **application.yml:**

    
    
     server:  
      port: 8080  
    spring:  
      application:  
        name: eureka-client  
    eureka:  
      client:  
        service-url:  
          defaultZone: http://localhost:8761/eureka/

# Step 4: Create a Simple REST Controller

Create a simple REST controller to test the Eureka client.

  * [**GreetingController.java**](http://GreetingController.java)**:**

    
    
     package com.example.eurekaclient;  
    import org.springframework.web.bind.annotation.GetMapping;  
    import org.springframework.web.bind.annotation.RestController;  
    @RestController  
    public class GreetingController {  
        @GetMapping(""/greeting"")  
        public String greeting() {  
            return ""Hello from Eureka Client!"";  
        }  
    }

# Step 5: Run the Eureka Client

Run the Eureka client application. It should register itself with the Eureka
server.

# 4\. Running and Testing the Setup

  1. **Start the Eureka Server:** Run the Eureka server application. Access the Eureka dashboard at `<http://localhost:8761>`. You should see an empty registry initially.
  2. **Start the Eureka Client:** Run the Eureka client application. After a few moments, the client should appear in the Eureka dashboard, indicating successful registration.
  3. **Access the Client Service:** You can access the client service at `<http://localhost:8080/greeting>`. This will return ""Hello from Eureka Client!"".

# 5\.

* **EurekaClientApplication.java:**

    
    
    package com.example.eurekaclient;
    
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
    
    @SpringBootApplication
    @EnableEurekaClient
    public class EurekaClientApplication {
    
        public static void main(String[] args) {
            SpringApplication.run(EurekaClientApplication.class, args);
        }
    }
    

Enter fullscreen mode Exit fullscreen mode

###  Step 3: Configure Application Properties

Configure the application properties to register the client with the Eureka
server.

  * **application.yml:**

    
    
    server:
      port: 8080
    
    spring:
      application:
        name: eureka-client
    
    eureka:
      client:
        service-url:
          defaultZone: http://localhost:8761/eureka/
    

Enter fullscreen mode Exit fullscreen mode

###  Step 4: Create a Simple REST Controller

Create a simple REST controller to test the Eureka client.

  * **GreetingController.java:**

    
    
    package com.example.eurekaclient;
    
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;
    
    @RestController
    public class GreetingController {
    
        @GetMapping(""/greeting"")
        public String greeting() {
            return ""Hello from Eureka Client!"";
        }
    }
    

Enter fullscreen mode Exit fullscreen mode

###  Step 5: Run the Eureka Client

Run the Eureka client application. It should register itself with the Eureka
server.

##  4\. Running and Testing the Setup

  1. **Start the Eureka Server:** Run the Eureka server application. Access the Eureka dashboard at `http://localhost:8761`. You should see an empty registry initially.

  2. **Start the Eureka Client:** Run the Eureka client application. After a few moments, the client should appear in the Eureka dashboard, indicating successful registration.

  3. **Access the Client Service:** You can access the client service at `http://localhost:8080/greeting`. This will return ""Hello from Eureka Client!"".

##  5\. Conclusion

Setting up a Eureka server and client in Spring Boot 3.3.0+ is straightforward
thanks to the robust support provided by Spring Cloud Netflix.

Setting Up the Eureka Server

###  Step 1: Create a New Spring Boot Project

You can use Spring Initializr to create a new Spring Boot project. Ensure you
include the Eureka Server dependency.

  * **pom.xml:**

    
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Other dependencies as required -->
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>2023.0.0</version> <!-- Replace with the latest BOM version -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

Enter fullscreen mode Exit fullscreen mode

###  Step 2: Enable Eureka Server

Create a main application class and annotate it with `@EnableEurekaServer`.

  * **EurekaServerApplication.java:**

    
    
    package com.example.eurekaserver;
    
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
    
    @SpringBootApplication
    @EnableEurekaServer
    public class EurekaServerApplication {
    
        public static void main(String[] args) {
            SpringApplication.run(EurekaServerApplication.class, args);
        }
    }
    

Enter fullscreen mode Exit fullscreen mode

###  Step 3: Configure Application Properties

Configure the application properties to set up the Eureka server.",apollo,eureka.client.fetch-registry,BOOLEAN,FALSE,spring,apollo-assembly/src/main/resources/application.yml,eureka.server.enableSelfPreservation,BOOLEAN,FALSE,spring,apollo-configservice/src/main/resources/application.yml,Others,Eureka,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their purpose and usage in the application. The eureka.client.fetch-registry option is used by Eureka clients to control whether they should fetch the registry information from the server or not. On the other hand, the eureka.server.enableSelfPreservation option is used by the Eureka server to enable self-preservation mode, which allows it to protect itself from being removed when there are no instances registered. These options serve different purposes and are used in different contexts."",
    ""rationale"": ""The identical value of FALSE for both configuration options does not necessarily indicate a dependency between them. The eureka.client.fetch-registry option is specific to Eureka clients, while the eureka.server.enableSelfPreservation option is specific to the Eureka server. They operate independently and do not influence each other's behavior."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this dependency is that both dependencies are part of the Spring Cloud framework and share the same groupId. This implies that they are related and might be used together in the project. Therefore, if one dependency is updated or changed, it may affect the other dependency as well.","I am following a tutorial to learn eureka server/client with spring boot when
I try to install maven dependencies in the `pom.xml` I get the error in the
title

this is my pom.xml file:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.3.3.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.nlimits</groupId>
        <artifactId>movie_info_service</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>movie_info_service</name>
        <description>Movie Info Service</description>
    
        <properties>
            <java.version>11</java.version>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.

0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>3.2.5</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.example</groupId>
        <artifactId>gateway</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>gateway</name>
        <description>Demo project for Spring Boot</description>
        <properties>
            <java.version>17</java.version>
            <spring-cloud.version>2023.0.1</spring-cloud.version>
        </properties>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>${spring-cloud.version}</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    
        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </build>
    </project> 
    

[Share](/a/78435981 ""Short permalink to this answer"")

Follow

[edited May 9 at 20:33](/posts/78435981/revisions ""show all edits to this
post"")

[![wafL's user
avatar](https://i.sstatic.net/IFq4V.png?s=64)](/users/12456169/wafl)

[wafL](/users/12456169/wafl)

62366 silver badges1616 bronze badges

answered May 6 at 10:25

[!

***services.com</url>
    
      <modules>
    <!--something here not wanted to share-->
        <module>eureka-server</module>
      </modules>
    
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
        <spring.boot.dependency.version  >2.5.7</spring.boot.dependency.version>
        <spring.cloud-version>2020.0.3</spring.cloud-version>
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>${spring.boot.dependency.version}</version>
            <scope>import</scope>
            <type>pom</type>
          </dependency>
          <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>${spring.cloud-version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
    
      <dependencies>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
      </dependencies>
    
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
              <version>${spring.boot.maven.plugin.version}</version>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </project>
    

[Share](/a/75774312 ""Short permalink to this answer"")

Follow

answered Mar 18, 2023 at 7:00

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

**Step 1:** Add spring-cloud.version tag in pom.xml as show below. Ofcourse
you can change the version or use below mention version.

    
    
    <properties>
        ...
        <spring-cloud.version>2021.0.8</spring-cloud.version>
        ...
    </properties>
    

**Step 2:** Add dependency as show below

    
    
    <dependency>
       <groupId>org.springframework.cloud</groupId> 
       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>
    

**Step 3:** Add dependency management tag just below dependencies tag

    
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-dependencies</artifactId>
          <version>${spring-cloud.version}</version>
          <type>pom</type>
          <scope>import</scope>
        </dependency>
      </dependencies>
    </dependencyManagement>
    

[Share](/a/76993192 ""Short permalink to this answer"")

Follow

answered Aug 28, 2023 at 13:21

[![Pushpendra Kushvaha's user
avatar](https://lh3.googleusercontent.com/a-/AAuE7mDnFI6NI8-DZFzxBKk_x5cLBog3ZsI41e7SN39yeA=k-s64)](/users/12866947/pushpendra-
kushvaha)

[Pushpendra Kushvaha](/users/12866947/pushpendra-kushvaha)Pushpendra Kushvaha

9511 silver badge66 bronze badges

Add a comment  | 

0

[](/posts/74783351/timeline ""Show activity on this post."")

Adding the version of eureka discovery client manually can help to resolve the
problem. I added the version and it worked.

    
    
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        <version>2.2.10.RELEASE</version>
    </dependency>
    

[Share](/a/74783351 ""Short permalink to this answer"")

Follow

[edited Dec 16, 2022 at 4:46](/posts/74783351/revisions ""show all edits to
this post"")

[!",apollo,project.dependencies.dependency_spring-cloud-starter-netflix-eureka-client.groupId,NAME,org.springframework.cloud,maven,apollo-biz/pom.xml,project.dependencies.dependency_spring-cloud-starter-zookeeper-discovery.groupId,NAME,org.springframework.cloud,maven,apollo-biz/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, first identify the groupId values in both configurations. Since they have the same groupId value 'org.springframework.cloud', it indicates that they are part of the same Spring Cloud ecosystem. Next, check if they have the same artifactId or version values. If they do, it would imply a value-equality dependency between them."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-cloud-starter-netflix-eureka-client.groupId and project.dependencies.dependency_spring-cloud-starter-zookeeper-discovery.groupId have the same groupId value 'org.springframework.cloud', indicating they are part of the same Spring Cloud ecosystem. However, without further information about their artifactId or version values, it cannot be concluded that a dependency exists between them solely based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Inferring Dependencies,llama3:70b,config2,6.0,FP,False,"The configuration options mentioned have the same value, which is org.springframework.boot. This suggests that both modules are using the Spring Boot framework, which could imply a dependency between them. However, without further analysis of the Maven project structure and dependencies, it is unclear if this constitutes a direct or transitive dependency.","annotation:javax.annotation-api:jar:1.3.2:compile
    [INFO] \- com.amazonaws:aws-java-sdk-sns:jar:1.12.753:compile
    

Complete pom.xml:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId> 
            <artifactId>spring-boot-starter-parent</artifactId> 
            <version>3.3.1</version> 
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.xxx.xx.xxx</groupId>
        <artifactId>app-api-dpp</artifactId>   
        <version>0.0.1-SNAPSHOT</version> 
        <name>app-api-dpp</name>
        <description>Dashboard for My Ptoject</description>
        <properties>
            <java.version>17</java.version> 
            <!-- <start-class>com.xxx.xx.xxx.ProcessStageApplication</start-class>   -->
        </properties>
        <dependencies>
            <!-- guava: externally defined -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>32.1.0-jre</version>
            </dependency>
            <!-- json-smart:externally defined -->
            <dependency>
                    <groupId>net.minidev</groupId>
                    <artifactId>json-smart</artifactId>
                    <version>2.4.9</version>
            </dependency>
            <!-- json-smart:externally defined -->
            <dependency>
                    <groupId>com.jayway.jsonpath</groupId>
                    <artifactId>json-path</artifactId>
                    <version>2.9.0</version>
            </dependency>
    
            <!-- Add spring-data-commons dependency -->
            <!-- excluding: guava,

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

[DEBUG] MBean server at port 9001 is not up yet. [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 60) . [INFO] backend . FAILURE [33:37 min] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 33:47 min [INFO] Finished at: 2019-06-12T16:06:05+02:00 [INFO] Final Memory: 238M/6637M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started: Failed to connect to MBean server at port 9001: Spring application did not start before the configured timeout (60000ms -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

html)
      * [GraalVM Native Applications](./how-to/native-image/index.html)
        * [Developing Your First GraalVM Native Application](./how-to/native-image/developing-your-first-application.html)
        * [Testing GraalVM Native Images](./how-to/native-image/testing-native-applications.html)
      * [Class Data Sharing](./how-to/class-data-sharing.html)
      * [Deploying Spring Boot Applications](./how-to/deployment/index.html)
        * [Traditional Deployment](./how-to/deployment/traditional-deployment.html)
        * [Deploying to the Cloud](./how-to/deployment/cloud.html)
        * [Installing Spring Boot Applications](./how-to/deployment/installing.html)
      * [Docker Compose](./how-to/docker-compose.html)
    * [Build Tool Plugins](./build-tool-plugin/index.html)
      * [Maven Plugin](./maven-plugin/index.html)
        * [Getting Started](./maven-plugin/getting-started.html)
        * [Using the Plugin](./maven-plugin/using.html)
        * [Goals](./maven-plugin/goals.html)
        * [Packaging Executable Archives](./maven-plugin/packaging.html)
        * [Packaging OCI Images](./maven-plugin/build-image.html)
        * [Running your Application with Maven](./maven-plugin/run.html)
        * [Ahead-of-Time Processing](./maven-plugin/aot.html)
        * [Running Integration Tests](./maven-plugin/integration-tests.html)
        * [Integrating with Actuator](./maven-plugin/build-info.html)
        * [Help Information](./maven-plugin/help.html)
      * [Gradle Plugin](index.html)
        * [Getting Started](getting-started.html)
        * [Managing Dependencies](managing-dependencies.html)
        * [Packaging Executable Archives](packaging.html)
        * [Packaging OCI Images](packaging-oci-image.html)
        * [Publishing your Application](publishing.html)
        * [Running your Application with Gradle](running.html)
        * [Ahead-of-Time Processing](aot.html)
        * [Integrating with Actuator](integrating-with-actuator.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.",apollo,project.dependencies.dependency_spring-boot-starter-actuator.groupId,NAME,org.springframework.boot,maven,apollo-common/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.groupId,NAME,org.springframework.boot,maven,apollo-portal/pom.xml,Others,Others,"{
    ""plan"": ""1. Identify the groupId values: org.springframework.boot in both configuration options.\n2. Check if they are part of the same Maven project or ecosystem.\n3. Evaluate if one option is a dependency of the other based on their groupId values."",
    ""rationale"": ""The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem. The configuration option project.dependencies.dependency_spring-boot-starter-actuator.groupId in apollo-common/pom.xml and the option project.build.plugins.plugin_spring-boot-maven-plugin.groupId in apollo-portal/pom.xml depend on each other as they share the same groupId, which is a unique identifier for Maven projects."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Apollo is a reliable configuration management system, suitable for microservice configuration management scenarios.
The server side is developed based on Spring Boot, Spring Cloud, Maven, Docker, and Docker-Compose.
It is decomposed into 4 modules, including and admin service, meta server, a portal, and a client.
The primary database in Apollo is MySQL.

In the Apollo project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of apollo is as follows:

apollo/
├── apollo-adminservice/
│   ├── pom.xml
│   └── src/
├── apollo-assembly/
│   ├── pom.xml
│   └── src/
├── apollo-audit/
│   ├── apollo-audit-annotation/
│   ├── apollo-audit-api/
│   ├── apollo-audit-impl/
│   ├── apollo-audit-spring-boot-starter/
│   └── pom.xml
├── apollo-biz/
│   ├── pom.xml
│   └── src/
├── apollo-build-sql-converter/
│   ├── pom.xml
│   └── src/
├── apollo-buildtools/
│   ├── pom.xml
│   ├── src/
│   └── style/
├── apollo-common/
│   ├── pom.xml
│   └── src/
├── apollo-configservice/
│   ├── pom.xml
│   └── src/
├── apollo-portal/
│   ├── pom.xml
│   └── src/
├── changes/
├── doc/
│   └── images/
├── docs/
│   ├── charts/
│   ├── CNAME
│   ├── css/
│   ├── en/
│   ├── index.html
│   ├── scripts/
│   └── zh/
├── LICENSE
├── mvnw
├── mvnw.cmd
├── pom.xml
└── scripts/
    ├── build.bat
    ├── build.sh
    ├── openapi/
    └── sql/"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both POM files have the same value '4.0.0', which indicates that they are using the same Maven model version. However, this equality does not imply a direct dependency between them. The dependency would exist if one of the projects is aggregating the other, or if they share a common parent project.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/device-manager/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-manager/device-manager/pom.xml and jetlinks-manager/pom.xml, we need to check if they have the same value. Since both have the value modelVersion:4.0.0, we can conclude that they depend on each other due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,"The configuration options project.dependencies.dependency_protocol-component.groupId with value org.jetlinks.community in jetlinks-manager/network-manager/pom.xml and project.dependencies.dependency_tdengine-component.groupId with value org.jetlinks.community in jetlinks-standalone/pom.xml have the same group ID value. This suggests that they may be related, but it does not necessarily imply a direct dependency between them. To determine if there is a dependency, we need to analyze the transitive dependencies in each POM file.","Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Overview

In this tutorial, we will review two important [Maven](/maven-guide) tags —
_dependencyManagement_ and  _dependencies_.

**These features are especially useful for multi-module projects.**

We'll review the similarities and differences of the two tags, and we'll also
look at some common mistakes that developers make when using them that can
cause confusion.

## 2\. Usage

In general, we use the _dependencyManagement_ tag to avoid repeating the
_version_ and _scope_ tags when we define our dependencies in the
_dependencies_ tag. In this way, the required dependency is declared in a
central POM file.

### 2.1. _dependencyManagement_

This tag consists of a _dependencies_ tag which itself might contain multiple
_dependency_ tags. Each _dependency_ is supposed to have at least three main
tags: _groupId_ , _artifactId,_ and _version_. Let's see an example:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-lang3</artifactId>
                        <version>3.14.0</version>
                    </dependency>
                </dependencies>
            </dependencyManagement>
            

The above code just declares the new artifact _commons-lang3_ , but it doesn't
really add it to the project dependency resource list.

### 2.2. _dependencies_

This tag contains a list of _dependency_ tags.

In this case, we will
encounter compile or runtime errors, depending on the mentioned _scope_.

Let's see an example:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-lang3</artifactId>
                        <version>3.14.0</version>
                    </dependency>
                    ...
                </dependencies>
            </dependencyManagement>
            

Imagine the above POM code snippet. Then suppose we're going to use this
library in a sub-module source file:

            
                        import org.apache.commons.lang3.StringUtils;
            
            public class Main {
            
                public static void main(String[] args) {
                    StringUtils.isBlank("" "");
                }
            }
            

This code will not compile because of the missing library. The compiler
complains about an error:

            
                        [ERROR] Failed to execute goal compile (default-compile) on project sample-module: Compilation failure
            [ERROR] ~/sample-module/src/main/java/com/baeldung/Main.java:[3,32] package org.apache.commons.lang3 does not exist

To avoid this error, it's enough to add the below _dependencies_ tag to the
sub-module POM file:

            
                        <dependencies>
                <dependency>
                    <groupId>org.apache.commons</groupId>
                    <artifactId>commons-lang3</artifactId>
                </dependency>
            </dependencies>
            

## 8\. Conclusion

In this tutorial, we compared Maven's _dependencyManagement_ and
_dependencies_ tags. Then, we reviewed their similarities and differences and
saw how they work together.

As usual, the code for these examples is available [over on
GitHub](https://github.com/eugenp/tutorials/tree/master/maven-modules/maven-
simple/maven-dependency).

Partner - Aegik AB - NPI EA (cat= Persistence)

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)  

**Slow MySQL query performance** is all too common. Of course it is.

The Jet Profiler was **built entirely for MySQL** , so it's fine-tuned for it
and does advanced everything with relaly minimal impact and no server changes.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",jetlinks-community,project.dependencies.dependency_protocol-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-manager/network-manager/pom.xml,project.dependencies.dependency_tdengine-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-standalone/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: org.jetlinks.community.\n2. Check if they are part of the same project or ecosystem.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_protocol-component.groupId and the option project.dependencies.dependency_tdengine-component.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same JetLinks Community ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The configuration options project.modelVersion in both POM files have the same value 'modelVersion:4.0.0'. This suggests that they might be related, but it does not necessarily imply a direct dependency between them. In Maven, the modelVersion is a required element and specifies the version of the POM model. It is possible that these two projects are separate and independent, but happen to use the same POM model version.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/authentication-manager/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-manager/authentication-manager/pom.xml and jetlinks-manager/pom.xml, follow these steps: 1) Check if both POM files have the same model version (4.0.0). 2) Verify that the parent-child relationship is established correctly between the two modules. 3) Ensure that the project.modelVersion is consistent across all modules to maintain compatibility."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Inferring Dependencies,llama3:70b,config2,8.0,FN,True,"The configuration options do not depend on each other due to value-equality. The artifactId 'elasticsearch-component' in both pom.xml files refers to different components, and their dependencies are defined separately. There is no inherent relationship between them.","If you are
looking for a SNAPSHOT version, the Elastic Maven Snapshot repository is
available at <https://snapshots.elastic.co/maven/>.

#### Installation in a Gradle project by using
Jackson[edit](https://github.com/elastic/elasticsearch-
java/edit/8.14/docs/setup/installation.asciidoc ""Edit this page on GitHub"")

    
    
    dependencies {
        implementation 'co.elastic.clients:elasticsearch-java:8.14.3'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    }

#### Installation in a Maven project by using
Jackson[edit](https://github.com/elastic/elasticsearch-
java/edit/8.14/docs/setup/installation.asciidoc ""Edit this page on GitHub"")

In the `pom.xml` of your project, add the following repository definition and
dependencies:

    
    
    <project>
      <dependencies>
    
        <dependency>
          <groupId>co.elastic.clients</groupId>
          <artifactId>elasticsearch-java</artifactId>
          <version>8.14.3</version>
        </dependency>
    
        <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.17.0</version>
        </dependency>
    
      </dependencies>
    </project>

#### If you get ClassNotFoundException:
jakarta.json.spi.JsonProvider[edit](https://github.com/elastic/elasticsearch-
java/edit/8.14/docs/setup/installation.asciidoc ""Edit this page on GitHub"")

It may happen that after setting up the dependencies, your application fails
with `ClassNotFoundException: jakarta.json.spi.JsonProvider`.

If this happens, you have to explicitly add the `jakarta.json:jakarta.json-
api:2.0.1` dependency.

**Gradle:**

    
    
    dependencies {
        ...
        implementation 'jakarta.json:jakarta.json-api:2.0.1'
    }

**Maven:**

    
    
    <project>
      <dependencies>
        ...
        <dependency>
          <groupId>jakarta.json</groupId>
          <artifactId>jakarta.json-api</artifactId>
          <version>2.0.1</version>
        </dependency>
    
      </dependencies>
    </project>

**Why is this needed?

[« Javadoc](java-rest-low-javadoc.html) [Dependencies »](java-rest-low-usage-
dependencies.html)

[Elastic Docs](/guide/) ›[Elasticsearch Java API Client [8.14]](index.html)
›[Java Low Level REST Client](java-rest-low.html) ›[Getting started](java-
rest-low-usage.html)

# Maven Repository

[edit](https://github.com/elastic/elasticsearch/edit/8.14/docs/java-rest/low-
level/usage.asciidoc ""Edit this page on GitHub"")

## Maven
Repository[edit](https://github.com/elastic/elasticsearch/edit/8.14/docs/java-
rest/low-level/usage.asciidoc ""Edit this page on GitHub"")

The low-level Java REST client is hosted on [Maven
Central](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.elasticsearch.client%22).
The minimum Java version required is `1.8`.

The low-level REST client is subject to the same release cycle as
Elasticsearch. Replace the version with the desired client version, first
released with `5.0.0-alpha4`. There is no relation between the client version
and the Elasticsearch version that the client can communicate with. The low-
level REST client is compatible with all Elasticsearch versions.

If you are looking for a SNAPSHOT version, the Elastic Maven Snapshot
repository is available at <https://snapshots.elastic.co/maven/>.

### Maven
configuration[edit](https://github.com/elastic/elasticsearch/edit/8.14/docs/java-
rest/low-level/usage.asciidoc ""Edit this page on GitHub"")

Here is how you can configure the dependency using maven as a dependency
manager. Add the following to your `pom.xml` file:

    
    
    <dependency>
        <groupId>org.elasticsearch.client</groupId>
        <artifactId>elasticsearch-rest-client</artifactId>
        <version>8.14.3</version>
    </dependency>

### Gradle
configuration[edit](https://github.com/elastic/elasticsearch/edit/8.14/docs/java-
rest/low-level/usage.asciidoc ""Edit this page on GitHub"")

Here is how you can configure the dependency using gradle as a dependency
manager.

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

**

Some frameworks like Spring Boot or Helidon come with their Gradle and Maven
plugins or their Maven BOM files to ease development and dependency
management. These plugins and BOM define the versions to use for a number of
well-known libraries.

One these libraries can be `jakarta.json:json-api` that defines the standard
Java JSON API. In version `1.x` this library used the `javax.json` package,
while in version `2.x` it uses the `jakarta.json` package after [the
transition from JavaEE to
JakartaEE](https://blogs.oracle.com/javamagazine/post/transition-from-java-ee-
to-jakarta-ee).

The Java API Client depends on version `2.0.1` of this library, in order to
use the newer and future-proof `jakarta.json` package. But some build plugins
and BOMs override the Java API Client's dependency to use version `1.x` in the
older `javax.json` namespace, resulting in `ClassNotFoundException:
jakarta.json.spi.JsonProvider`.

Adding the correct version as top-level project dependency solves the problem.

If your application also requires `javax.json` you can add the
`javax.json:javax.json-api:1.1.4` dependency, which is equivalent to
`jakarta.json:jakarta.json-api:1.1.6`.

[« Setup](_setup.html) [Connecting »](connecting.html)

Most Popular

Video

[ Get Started with Elasticsearch ](https://www.elastic.co/webinars/getting-
started-elasticsearch?page=docs&placement=top-video)

Video

[ Intro to Kibana ](https://www.elastic.co/webinars/getting-started-
kibana?page=docs&placement=top-video)

Video

[ ELK for Logs & Metrics ](https://www.elastic.co/webinars/introduction-elk-
stack?page=docs&placement=top-video)

Add the following to your `build.gradle` file:

    
    
    dependencies {
        compile 'org.elasticsearch.client:elasticsearch-rest-client:8.14.3'
    }

[« Javadoc](java-rest-low-javadoc.html) [Dependencies »](java-rest-low-usage-
dependencies.html)

Most Popular

Video

[ Get Started with Elasticsearch ](https://www.elastic.co/webinars/getting-
started-elasticsearch?page=docs&placement=top-video)

Video

[ Intro to Kibana ](https://www.elastic.co/webinars/getting-started-
kibana?page=docs&placement=top-video)

Video

[ ELK for Logs & Metrics ](https://www.elastic.co/webinars/introduction-elk-
stack?page=docs&placement=top-video)",jetlinks-community,project.artifactId,NAME,elasticsearch-component,maven,jetlinks-components/elasticsearch-component/pom.xml,project.dependencies.dependency_elasticsearch-component.artifactId,NAME,elasticsearch-component,maven,jetlinks-manager/device-manager/pom.xml,Multi-Maven-Modules,Module as Dependency,"{
    ""plan"": ""1. Identify the Maven dependencies in both configurations: project.artifactId with value elasticsearch-component in jetlinks-components/elasticsearch-component/pom.xml and project.dependencies.dependency_elasticsearch-component.artifactId with value elasticsearch-component in jetlinks-manager/device-manager/pom.xml.\n2. Check if both configurations are part of the same project.\n3. Evaluate whether the artifactId 'elasticsearch-component' in both configurations refers to the same Maven dependency."",
    ""rationale"": ""The configuration option project.artifactId with value elasticsearch-component in jetlinks-components/elasticsearch-component/pom.xml identifies the unique ID of the artifact within the Maven project. The configuration option project.dependencies.dependency_elasticsearch-component.artifactId with the same value elasticsearch-component in jetlinks-manager/device-manager/pom.xml specifies a dependency on the same artifact. As both configurations are part of the same project, it indicates a value-equality dependency."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Inheritance and Overrides,llama3:70b,config2,6.0,FN,True,"The configuration options do not directly depend on each other due to value-equality. The groupId values are the same (org.jetlinks.community), but they belong to different components and modules within the Maven project. However, it is possible that there are indirect dependencies or inherited configurations that could establish a connection between them.","Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element. Else, {groupId, artifactId} would suffice if you
do not intend to override the defaults for classifier and type (jar and null
respectively). So default is a good keyword in that definition; any sub-
element(s) (other than groupId, artifactId, classifier and type, of course)
explicitly assigned value(s) at the point you reference a dependency override
the defaults in the dependencyManagement element.

So, any dependency element outside of dependencyManagement, whether as a
reference to some dependencyManagement element or as a standalone is
immediately resolved (i.e. installed to the local repository and available for
classpaths).

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",jetlinks-community,project.dependencies.dependency_timeseries-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/configure-component/pom.xml,project.parent_notify-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/notify-component/notify-email/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: org.jetlinks.community.\n2. Check if these groupId values are part of the same project ecosystem.\n3. Evaluate whether the equality of groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_timeseries-component.groupId and the option project.parent_notify-component.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same JetLinks Community ecosystem, which suggests a dependency between these two configuration options."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both POMs have the same value, but this does not imply a dependency between them. The value 4.0.0 is a standard version number for Maven projects and does not create a relationship between the two components.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/logging-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/relation-component/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-components/logging-component/pom.xml and jetlinks-components/relation-component/pom.xml, follow these steps:\n1. Check if both POM files have the same model version, which is 4.0.0.\n2. Verify that both modules are part of the same Maven project or a multi-module project.\n3. If both conditions are met, then the configuration options depend on each other due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_vertx-core.groupId and project.dependencies.dependency_vertx-mqtt.groupId have the same value 'io.vertx', which suggests a potential dependency between them. This is because Maven uses the groupId to identify dependencies, and having the same groupId for both configurations implies that they might be related.","0-SNAPSHOT</version>
    <packaging>jar</packaging>
    
    <parent>
        <groupId>com.abc.xyc</groupId>
        <artifactId>parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    
    <dependencies>
        .
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-stack-depchain</artifactId>
        </dependency>
        . 
    </dependencies>
    

The error I get is:'dependencies.dependency.version' for io.vertx:vertx-stack-
depchain:jar is missing. When I specify the version in child pom, it works
fine. My question is why isn't it getting the version from my parent pom?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [xml](/questions/tagged/xml ""show questions tagged 'xml'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [pom.xml](/questions/tagged/pom.xml ""show questions tagged 'pom.xml'"")
  * [vert.x](/questions/tagged/vert.x ""show questions tagged 'vert.x'"")

[Share](/q/63458833 ""Short permalink to this question"")

[Improve this question](/posts/63458833/edit)

Follow

asked Aug 17, 2020 at 21:22

[![AR17's user
avatar](https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=64)](/users/9584426/ar17)

[AR17](/users/9584426/ar17)AR17

6122 silver badges55 bronze badges

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/63458833/dependency-version-is-
missing-dependencies-dependency-version-for-io-vertxv?answertab=scoredesc#tab-
top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/63465485/timeline ""Show activity on this post."")

Trying to specify my vertx version for different modules in the parent pom. My
parent pom file is:

    
    
    <groupId>com.abc.xyc</groupId>
    <artifactId>parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Parent POM</name>
    
    <modules>
        .
        <module>Server</module>
        .
    </modules>
    
    <properties>
        .
        <vertx.version>3.8.2</vertx.version>
        <vertx.verticle>com.abc.xyc.as4.MainVerticle</vertx.verticle>
        <vertx-maven-plugin.version>1.0.22</vertx-maven-plugin.version>
        <lmax.version>3.4.2</lmax.version>
        .
    </properties>
    
    <dependencyManagement>
        <dependencies>
            .
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-stack-depchain</artifactId>
                <version>${vertx.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-core</artifactId>
                <version>${vertx.version}</version>
            </dependency>
            .
        </dependencies>
    </dependencyManagement>
    
    <build>
            <pluginManagement>
                .
                <plugins>
                    <plugin>
                        <groupId>io.reactiverse</groupId>
                        <artifactId>vertx-maven-plugin</artifactId>
                        <version>${vertx-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>vmp</id>
                                <goals>
                                    <goal>initialize</goal>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <redeploy>true</redeploy>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManageme>
    </build>
    

This is my child pom file

    
    
    <artifactId>Server</artifactId>
    <version>1.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 2 ](/q/2943553 ""Question score \(upvotes - downvotes\)"") [Missing artifact
error in Maven](/questions/2943553/missing-artifact-error-in-maven)

[ 3 ](/q/23690753 ""Question score \(upvotes - downvotes\)"") [Error:
'dependencies.dependency.version' must be a valid version but
is](/questions/23690753/error-dependencies-dependency-version-must-be-a-valid-
version-but-is)

[ 1 ](/q/25741728 ""Question score \(upvotes - downvotes\)"") [Maven, Vert.x and
JodaTime library - NoSuchMethodError](/questions/25741728/maven-vert-x-and-
jodatime-library-nosuchmethoderror)

[ 3 ](/q/28011972 ""Question score \(upvotes - downvotes\)"") [How to Solve
Dependency Error in pom.xml](/questions/28011972/how-to-solve-dependency-
error-in-pom-xml)

[ 0 ](/q/30214559 ""Question score \(upvotes - downvotes\)"") [Vertx trying to
launch embedded server](/questions/30214559/vertx-trying-to-launch-embedded-
server)

[ 3 ](/q/30541068 ""Question score \(upvotes - downvotes\)"") [Maven/IntelliJ
import error: io.vertx.core does not exist](/questions/30541068/maven-
intellij-import-error-io-vertx-core-does-not-exist)

[ 6 ](/q/31493604 ""Question score \(upvotes - downvotes\)"")
[java.lang.UnsupportedClassVersionError: io/vertx/core/Starter
Error](/questions/31493604/java-lang-unsupportedclassversionerror-io-vertx-
core-starter-error)

[ 0 ](/q/49977803 ""Question score \(upvotes - downvotes\)"") [Non maven jar
dependencies giving error in pom.

[ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

![](https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae)

Now available on Stack Overflow for Teams! AI features where you work: search,
IDE, and chat.

[Learn
more](https://stackoverflow.co/teams/ai/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=overflowai-learn-more) [Explore
Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=explore-teams)

  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)

##### Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you
use most.

[ Learn more about Collectives ](/collectives)

**Teams**

Q&A for work

Connect and share knowledge within a single location that is structured and
easy to search.

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Dependency Version is missing - 'dependencies.dependency.version' for
io.vertx:vertx-stack-depchain:jar is missing](/questions/63458833/dependency-
version-is-missing-dependencies-dependency-version-for-io-vertxv)

[ Ask Question ](/questions/ask)

Asked 3 years, 11 months ago

Modified [2 years ago](?lastactivity ""2022-07-18 03:30:36Z"")

Viewed 5k times

2

[](/posts/63458833/timeline ""Show activity on this post."")

Trying to specify my vertx version for different modules in the parent pom.

* Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

Draft saved

Draft discarded

### Sign up or [log
in](/users/login?ssrc=question_page&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f63458833%2fdependency-
version-is-missing-dependencies-dependency-version-for-io-vertxv%23new-answer)

Sign up using Google

Sign up using Email and Password

Submit

### Post as a guest

Name

Email

Required, but never shown

### Post as a guest

Name

Email

Required, but never shown

Post Your Answer  Discard

By clicking “Post Your Answer”, you agree to our [terms of
service](https://stackoverflow.com/legal/terms-of-service/public) and
acknowledge you have read our [privacy
policy](https://stackoverflow.com/legal/privacy-policy).

##

Not the answer you're looking for? Browse other questions tagged

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [xml](/questions/tagged/xml ""show questions tagged 'xml'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [pom.xml](/questions/tagged/pom.xml ""show questions tagged 'pom.xml'"")
  * [vert.x](/questions/tagged/vert.x ""show questions tagged 'vert.x'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.",jetlinks-community,project.dependencies.dependency_vertx-core.groupId,NAME,io.vertx,maven,jetlinks-components/network-component/mqtt-component/pom.xml,project.dependencies.dependency_vertx-mqtt.groupId,NAME,io.vertx,maven,jetlinks-components/network-component/mqtt-component/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_vertx-core.groupId and project.dependencies.dependency_vertx-mqtt.groupId.\n2. Check their values: io.vertx.\n3. Evaluate whether they depend on each other due to value equality."",
    ""rationale"": ""The configuration options project.dependencies.dependency_vertx-core.groupId and project.dependencies.dependency_vertx-mqtt.groupId have the same groupId value 'io.vertx'. This indicates that they are part of the same Vert.x ecosystem, and therefore, they depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.parent_jetlinks-components.relativePath and project.parent_network-component.relativePath have the same value ../pom.xml, which indicates that they are referencing the same parent POM file. This suggests a potential dependency between the two configuration options, as changes to the parent POM file could affect both child POM files.","This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

I have a fringe case. A fat finger case on my part.

My pom parent had this:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mygroup </groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>pom</packaging>
        <name>pom-parent</name>
    

and my (child) pom

    
    
    <parent>
        <groupId>com.mygroup</groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom-parent/pom.xml</relativePath>
    </parent>  
    

My group id in my parent had a fat finger space at the end of the name.
""com.mygroup "" instead of the correct ""com.mygroup"".

Because of this fat finger mistake........the ""groupId"" names did not
match....and I got the error.

Aka, check for fat finger mistakes before you go to too many extremes to
resolve.

error I got for internet-searching

> ""Project build error: 'parent.relativePath' of POM"" ""points at"" ""please
> verify your project structure""

[Share](/a/51485957 ""Short permalink to this answer"")

[Improve this answer](/posts/51485957/edit)

Follow

answered Jul 23, 2018 at 19:28

[![granadaCoder's user
avatar](https://i.sstatic.net/fmJRN.png?s=64)](/users/214977/granadacoder)

[granadaCoder](/users/214977/granadacoder)granadaCoder

27.5k1111 gold badges118118 silver badges160160 bronze badges

Add a comment  | 

1

[](/posts/42787205/timeline ""Show activity on this post."")

* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

Skip to content

[ ![HowToDoInJava](https://howtodoinjava.com/wp-
content/uploads/2023/12/HowToDoInJava-logo.png) ](https://howtodoinjava.com/)

Menu

Menu

  * [Java](https://howtodoinjava.com/series/java-tutorial/)
  * [Spring Boot](https://howtodoinjava.com/series/spring-boot/)
  * [Hibernate](https://howtodoinjava.com/series/hibernate-tutorials/)
  * [JUnit](https://howtodoinjava.com/series/junit/)
  * [Interview](https://howtodoinjava.com/series/interview-guides/)

# Maven Parent and Child POM Example

[Lokesh Gupta](https://howtodoinjava.com/author/lokeshgupta1981/)

December 25, 2022

[Maven](https://howtodoinjava.com/maven/)

[Maven](https://howtodoinjava.com/tag/maven/)

**Maven parent POM** (or super POM) is used to structure the project to
**avoid redundancies or duplicate configurations** using _inheritance between
pom files_. It helps in easy maintenance in long term.

Note that if any dependency or property is configured in both parent and child
POMs with different values then the child POM value will take priority.

## 1\. Contents of Parent POM

A parent POM can be declared with packaging `pom`. It is not meant to be
distributed because it is only referenced from other projects.

Maven parent pom can contain almost everything, and those can be inherited
into child pom files e.g

  * Common data - Developers' names, SCM address, distribution management etc.
  * Constants - Such as version numbers
  * Common dependencies - Common to all children. It has the same effect as writing them several times in individual pom files.
  * Properties - For example plugins, declarations, executions and IDs.
  * Configurations
  * Resources

## 2\. A simple Example of Parent POM and Child POM

To match a parent POM, Maven uses two rules:

  * There is a pom file in the project's root directory or in a given relative path.
  * Reference from the child POM file contains the same coordinates as stated in the parent POM file.",jetlinks-community,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/network-component/pom.xml,project.parent_network-component.relativePath,PATH,../pom.xml,maven,jetlinks-components/network-component/tcp-component/pom.xml,Multi-Maven-Modules,Project Structure,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and usage in the Maven project structure. Since both options are of type PATH with values ../pom.xml, it indicates that they are referencing parent POM files. We should check if these parent POM files have the same coordinates (groupId, artifactId, version) and if they contain similar configurations or dependencies. If so, then we can conclude that there is a dependency between the two configuration options due to value-equality."",
    ""rationale"": ""The 'project.parent.relativePath' in a Maven project specifies the relative path to the parent POM file. In this case, both options have the same value ../pom.xml, which means they are referencing the same parent POM file. If this parent POM file contains common configurations or dependencies, then it can be inferred that there is a dependency between the two configuration options due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Configuration Consistency,llama3:70b,config2,8.0,FN,True,The configuration options do not directly depend on each other due to value-equality. The issue arises from incompatible Maven versions and incorrect configuration of Spring Cloud dependencies.,"(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.",jetlinks-community,project.dependencies.dependency_notify-core.groupId,NAME,${project.groupId},maven,jetlinks-components/notify-component/notify-voice/pom.xml,project.dependencies.dependency_rule-engine-component.groupId,NAME,${project.groupId},maven,jetlinks-manager/rule-engine-manager/pom.xml,Multi-Maven-Modules,Maven Properties,"{
    ""plan"": ""1. Identify the Maven project structure and modules involved (jetlinks-components/notify-component/notify-voice and jetlinks-manager/rule-engine-manager). 2. Analyze the groupId values (${project.groupId}) in both pom.xml files, which are placeholders for the actual group ID. 3. Determine if the actual group IDs are the same across both projects, indicating a dependency."",
    ""rationale"": ""The configuration options project.dependencies.dependency_notify-core.groupId and project.dependencies.dependency_rule-engine-component.groupId have the same value (${project.groupId}), which is a placeholder for the actual group ID. If the actual group IDs are the same, it indicates that both modules belong to the same Maven project and therefore depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration option project.dependencies.dependency_hsweb-commons-crud.groupId has a value of org.hswebframework.web in jetlinks-components/elasticsearch-component/pom.xml. Similarly, the configuration option project.dependencies.dependency_hsweb-starter.groupId has a value of org.hswebframework.web in jetlinks-manager/authentication-manager/pom.xml. Since both groupId values are equal, it suggests that there is a dependency between these two configurations.","hswebframework.web/hsweb-commons-crud@4.0.16

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

## Overview

### Description

通用模块

### Snippets

Apache MavenGradleGradle (short)Gradle (Kotlin)sbtivygrapeleiningenbuildr

Copy to clipboard

    
    
    <dependency>
        <groupId>org.hswebframework.web</groupId>
        <artifactId>hsweb-commons-crud</artifactId>
        <version>4.0.16</version>
    </dependency>

### Maven POM File

Copy to clipboard

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <parent>
            <artifactId>hsweb-commons</artifactId>
            <groupId>org.hswebframework.web</groupId>
            <version>4.0.16</version>
        </parent>
        <modelVersion>4.0.0</modelVersion>
    
        <artifactId>hsweb-commons-crud</artifactId>
    
        <dependencies>
    
            <dependency>
                <groupId>org.hswebframework.web</groupId>
                <artifactId>hsweb-authorization-api</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webflux</artifactId>
                <optional>true</optional>
            </dependency>
    
            <dependency>
                <groupId>org.hswebframework.web</groupId>
                <artifactId>hsweb-concurrent-cache</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>io.

hswebframework.web</groupId>
                <artifactId>hsweb-concurrent-cache</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-core</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.hswebframework</groupId>
                <artifactId>hsweb-easy-orm-rdb</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.hswebframework.web</groupId>
                <artifactId>hsweb-core</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>org.hibernate.javax.persistence</groupId>
                <artifactId>hibernate-jpa-2.1-api</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.hibernate.validator</groupId>
                <artifactId>hibernate-validator</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-autoconfigure</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.hswebframework.web</groupId>
                <artifactId>hsweb-datasource-api</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <optional>true</optional>
            </dependency>
    
            <dependency>
                <groupId>io.r2dbc</groupId>
                <artifactId>r2dbc-spi</artifactId>
                <optional>true</optional>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-r2dbc</artifactId>
                <scope>compile</scope>
                <optional>true</optional>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# hsweb-commons-crud

Used in

Loading...

components

pkg:maven/org.hswebframework.web/hsweb-commons-crud@Loading...

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

Loading...

Loading...

Loading...

Loading...

Loading...

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# hsweb-commons-crud

Used in 7 components

pkg:maven/org.hswebframework.web/hsweb-commons-crud@4.0.

springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
    
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <scope>test</scope>
            </dependency>
    
            <dependency>
                <groupId>io.r2dbc</groupId>
                <artifactId>r2dbc-h2</artifactId>
                <scope>test</scope>
            </dependency>
    
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>test</scope>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-r2dbc</artifactId>
                <scope>test</scope>
            </dependency>
    
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.hswebframework.web</groupId>
                <artifactId>hsweb-commons-api</artifactId>
                <version>${project.version}</version>
            </dependency>
    
            <dependency>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-annotations</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <optional>true</optional>
            </dependency>
    
            <dependency>
                <groupId>com.github.jsqlparser</groupId>
                <artifactId>jsqlparser</artifactId>
                <version>4.6</version>
            </dependency>
        </dependencies>
    
    </project>

![Sonatype Developer For Free](/sonatype-developer-logo.svg)

### Get recommended versions right in your IDE with SCA built for teams

Sonatype Developer Team makes coding faster and safer, and provides real-time
guidance to developers to make your job easier.

[Try Developer Team For Free](https://www.sonatype.com/request-sonatype-
developer-team-
trial/?utm_campaign=Central%20Developer%20Team%20Trial&utm_source=Central&utm_medium=Product&utm_content=central&utm_term=artifact)

OSS Index

Loading...

[View](https://ossindex.sonatype.org/component/pkg:maven/org.hswebframework.web/hsweb-
commons-crud@4.0.16)

### Metadata

11 months ago

Licenses

  * The Apache License, Version 2.0

12.3 kB

* * *

### Organization

[org.hswebframework.web](/namespace/org.hswebframework.web)

* * *

### External Resources

[Project URL](https://github.com/hs-web/hsweb-commons/hsweb-commons-crud)

[Source Control](https://github.com/hs-web/hsweb-framework/hsweb-
commons/hsweb-commons-crud)

* * *

### Known Contributors

zhouhao

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)",jetlinks-community,project.dependencies.dependency_hsweb-commons-crud.groupId,NAME,org.hswebframework.web,maven,jetlinks-components/elasticsearch-component/pom.xml,project.dependencies.dependency_hsweb-starter.groupId,NAME,org.hswebframework.web,maven,jetlinks-manager/authentication-manager/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: org.hswebframework.web.\n2. Check if they are part of the same project ecosystem.\n3. Evaluate if one module depends on the other due to their groupId values."",
    ""rationale"": ""The equality of the groupId values indicates that they are part of the same hsweb framework ecosystem, but there is no direct dependency between these two configuration options based solely on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both POM files have the same value, but this doesn't necessarily imply a dependency between them. The value 4.0.0 is a standard version for Maven POM files and is not specific to these projects. Therefore, it's unlikely that one depends on the other due to value equality.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/common-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/network-component/mqtt-component/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-components/common-component/pom.xml and jetlinks-components/network-component/mqtt-component/pom.xml, follow these steps:\n1. Check if both POM files have the same model version, which is 4.0.0.\n2. Verify that both modules are part of the same Maven project or a multi-module project.\n3. If both conditions are met, then the configuration options depend on each other due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The configuration options project.modelVersion in notify-sms/pom.xml and rule-engine-component/pom.xml have the same value (modelVersion:4.0.0). While this equality does not necessarily imply a direct dependency, it suggests that both projects might be using the same Maven version or following the same project structure guidelines. However, without further analysis, we cannot conclude a definitive dependency between these configuration options.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/notify-component/notify-sms/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/rule-engine-component/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-components/notify-component/notify-sms/pom.xml and jetlinks-components/rule-engine-component/pom.xml, follow these steps: 1) Check if both POM files have the same model version, which is 4.0.0 in this case. 2) Verify that Maven exclusively supports model version 4.0.0, making it a requirement for compatibility across all modules. 3) Since the model versions are the same and Maven only supports one version, conclude that there is a dependency between the configuration options due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both POM files have the same value, which means they are independent of each other. The value 4.0.0 is a standard version number for Maven projects and does not imply any dependency between the two components.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/logging-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/timeseries-component/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in jetlinks-components/logging-component/pom.xml and jetlinks-components/timeseries-component/pom.xml, follow these steps:\n1. Check if both POM files have the same model version, which is 4.0.0.\n2. Verify that Maven exclusively supports this model version for compatibility across all modules.\n3. Since the model versions are the same, a dependency exists between the two configuration options due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","The JetLinks Community project represents a modular and comprehensive IoT platform developed with Spring Boot, Spring Webflus, ElasticSearch, PostgreSQL, Maven, Docker, and Docker-Compose. 

In the jetlinks-community project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of jetlinks-community is as follows:

TOjetlinks-community/
├── docker/
│   ├── dev-env/
│   └── run-all/
├── jetlinks-components/ # provides jetlinks modules
│   ├── common-component/
│   ├── configure-component/
│   ├── dashboard-component/
│   ├── elasticsearch-component/
│   ├── gateway-component/
│   ├── io-component/
│   ├── logging-component/
│   ├── network-component/
│   ├── notify-component/
│   ├── pom.xml
│   ├── protocol-component/
│   ├── relation-component/
│   ├── rule-engine-component/
│   ├── script-component/
│   ├── tdengine-component/
│   ├── things-component/
│   └── timeseries-component/
├── jetlinks-manager/ # provides jetlinks management modules
│   ├── authentication-manager/
│   ├── device-manager/
│   ├── logging-manager/
│   ├── network-manager/
│   ├── notify-manager/
│   ├── pom.xml
│   └── rule-engine-manager/
├── jetlinks-standalone/ # module for service startup and managing the standalone deployment
│   ├── docker-entrypoint.sh
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
└── simulator/ # device simulator for testing and development purposes
    ├── device-simulator.jar
    ├── history/
    ├── mqtt/
    └── start.shDO"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options logging.level.org.linlinjava.litemall in both application.yml files have the same value, ERROR. This suggests that they might be dependent on each other, as changing one could potentially affect the other.","[Reload]() to refresh your session.
You signed out in another tab or window. [Reload]() to refresh your session.
You switched accounts on another tab or window. [Reload]() to refresh your
session. Dismiss alert

{{ message }}

[ linlinjava ](/linlinjava) / **[litemall](/linlinjava/litemall) ** Public

  * [ Notifications ](/login?return_to=%2Flinlinjava%2Flitemall) You must be signed in to change notification settings
  * [ Fork 7.1k ](/login?return_to=%2Flinlinjava%2Flitemall)
  * [ Star  19k ](/login?return_to=%2Flinlinjava%2Flitemall)

  * [ Code ](/linlinjava/litemall)
  * [ Issues 31 ](/linlinjava/litemall/issues)
  * [ Pull requests 1 ](/linlinjava/litemall/pulls)
  * [ Actions ](/linlinjava/litemall/actions)
  * [ Projects 0 ](/linlinjava/litemall/projects)
  * [ Security ](/linlinjava/litemall/security)
  * [ Insights ](/linlinjava/litemall/pulse)

Additional navigation options

  * [ Code ](/linlinjava/litemall)
  * [ Issues ](/linlinjava/litemall/issues)
  * [ Pull requests ](/linlinjava/litemall/pulls)
  * [ Actions ](/linlinjava/litemall/actions)
  * [ Projects ](/linlinjava/litemall/projects)
  * [ Security ](/linlinjava/litemall/security)
  * [ Insights ](/linlinjava/litemall/pulse)

New issue

**Have a question about this project?** Sign up for a free GitHub account to
open an issue and contact its maintainers and the community.

[ Sign up for GitHub
](/signup?return_to=%2Flinlinjava%2Flitemall%2Fissues%2Fnew%2Fchoose)

By clicking ""Sign up for GitHub"", you agree to our [terms of
service](https://docs.github.com/terms) and [privacy
statement](https://docs.github.com/privacy). We’ll occasionally send you
account related emails.

Already on GitHub?

Try checking your
property files or IDE run configuration for this property. Enabling debug
logging could help as well.

    
    
    Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'logging.level.org.quartz' to org.springframework.boot.logging.LogLevel
    
    Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
    

[Share](/a/58834754 ""Short permalink to this answer"")

[Improve this answer](/posts/58834754/edit)

Follow

answered Nov 13, 2019 at 10:12

[![alexmagnus's user
avatar](https://www.gravatar.com/avatar/3315b391fd78b5c188c6df7a3febd296?s=64&d=identicon&r=PG)](/users/1774076/alexmagnus)

[alexmagnus](/users/1774076/alexmagnus)alexmagnus

98655 silver badges77 bronze badges

2

  * It is set in application-dev.properties, as it should be - `logging.level.org.quartz=ON`

- [borgmater](/users/3446931/borgmater ""696 reputation"")

Commented Nov 13, 2019 at 10:16

  * 2

I was so blinded by the exceptions that I didn't realize ""ON"" is not a valid
logging level ..

- [borgmater](/users/3446931/borgmater ""696 reputation"")

Commented Nov 13, 2019 at 10:39

Add a comment  | 

0

[](/posts/61153312/timeline ""Show activity on this post."")

The valid options for debugging level are:

<https://docs.spring.io/spring-
boot/docs/1.1.2.RELEASE/api/index.html?org/springframework/boot/logging/LogLevel.html>

ON is not a valid level.

[Share](/a/61153312 ""Short permalink to this answer"")

[Improve this answer](/posts/61153312/edit)

Follow

answered Apr 11, 2020 at 7:18

[!

springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>com.company.MainApp</mainClass>
                        <fork>true</fork>
                        <skip>false</skip>
                        <profiles>dev,ng</profiles>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M3</version>
                    <configuration>
              <forkCount>0</forkCount>
                    </configuration>
                </plugin>
            </plugins>
        </build>
        <reporting>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                </plugin>
            </plugins>
        </reporting>
    </project>
    
    

Application.properties:

    
    
    # WARN|DEBUG|ERROR|FATAL|TRACE|INFO|OFF
    logging.level.root=WARN
    logging.level.org.springframework=WARN
    logging.level.org.hibernate=WARN
    logging.level.org.sejda=ERROR
    logging.level.org.quartz=OFF
    
    

. and my Quartz config class:

    
    
    /**
     * Configuration of the Quartz scheduled.
     */
    @Configuration
    public class QuartzConfiguration {
    
      /**
       * Application's context.
       */
      @Autowired
      private ApplicationContext applicationContext;
    
      /**
       * Creates {@link SpringBeanJobFactory} that adds auto-wiring to Quartz jobs.
       *
       * @return Created {@link SpringBeanJobFactory}.
       */
      @Bean
      public SpringBeanJobFactory springBeanJobFactory() {
        AutoWiringSpringBeanJobFactory jobFactory = new AutoWiringSpringBeanJobFactory();
        jobFactory.setApplicationContext(applicationContext);
        return jobFactory;
      }
    
      /**
       * Creates {@link SchedulerFactoryBean} used by Quartz for scheduling.
       *
       * @return Created {@link SchedulerFactoryBean}.

After migrating to the latest release of Spring Boot 2.2.1 from 2.1, my tests
started to fail due to binding exceptions involving Quartz Scheduler logging
(btw, using Java 8). I have defined the log levels in my app properties file
in compliance with [Spring Boot docs](https://docs.spring.io/spring-
boot/docs/current/reference/htmlsingle/#boot-features-custom-log-levels), so I
fail to see why the error is popping up. I am pretty sure there is some
misconfiguration in the logging props or in the configuration class, since ALL
the tests are failing on the same error, but simply cannot find it. Below are
my error outputs and relevant files.

Error log from Intellij:

    
    
    java.lang.IllegalStateException: Failed to load ApplicationContext
    
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
        at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
        at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
        at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
        at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.

java:76)
        at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
        at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
        at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
        . 43 more
    Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [org.springframework.boot.logging.LogLevel] for value 'ON'; nested exception is java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
        at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191)
        at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:170)
        at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:96)
        at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:88)
        at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:435)
        at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:380)
        at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:320)
        . 78 more
    Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
        at org.springframework.boot.convert.",litemall,logging.level.org.linlinjava.litemall,UNKNOWN,ERROR,spring,litemall-admin-api/src/main/resources/application.yml,logging.level.org.linlinjava.litemall,UNKNOWN,ERROR,spring,litemall-wx-api/src/main/resources/application.yml,Others,Logging Level,"{
    ""plan"": ""1. Identify the configuration options: logging.level.org.linlinjava.litemall in both litemall-admin-api and litemall-wx-api projects.\n2. Analyze their values: ERROR in both cases.\n3. Evaluate whether the identical values imply a dependency between the two configurations."",
    ""rationale"": ""The configuration options logging.level.org.linlinjava.litemall have the same value 'ERROR' in both projects, but they serve the same purpose of setting the log level for the litemall module in their respective applications. Since they are not related to each other's functionality and are used in different contexts, there is no dependency between them due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,"The configuration options do not directly depend on each other due to value-equality. The groupId values are identical (org.linlinjava), but they belong to different projects (litemall-admin-api and litemall-all-war) with distinct dependencies. Maven's dependency management ensures that the versions of these dependencies are consistent across projects, but it does not create a direct dependency between these configuration options.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",litemall,project.dependencies.dependency_litemall-db.groupId,NAME,org.linlinjava,maven,litemall-admin-api/pom.xml,project.dependencies.dependency_litemall-wx-api.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_litemall-db.groupId in litemall-admin-api/pom.xml and project.dependencies.dependency_litemall-wx-api.groupId in litemall-all-war/pom.xml.\n2. Check if they have the same value, which is org.linlinjava.\n3. Evaluate whether these options depend on each other due to value-equality."",
    ""rationale"": ""The configuration options project.dependencies.dependency_litemall-db.groupId and project.dependencies.dependency_litemall-wx-api.groupId refer to the same groupId 'org.linlinjava', which is used to uniquely identify a project across all projects. Since they share the same groupId, it implies that they are part of the same project and therefore depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that both dependencies belong to the Spring Boot ecosystem and share the same groupId. This suggests a potential coupling between the two dependencies, implying that changes to one might affect the other.","Here is a FULL file as an example: (this is the ROOT build.gradle) (If you
code a monolith, you'll only have a root build.gradle, if you write multiple
""gradle modules"", you'll have a root and subproject build.gradle files) (if
you have no idea what i'm talking about see link to docs.gradle.org at bottom)

(you can remove the dependencies, but i prefer to give a full working)

    
    
    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'java'
    }
    
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
        implementation 'org.springframework.boot:spring-boot-starter-integration'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-web-services'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'com.h2database:h2'
        implementation 'mysql:mysql-connector-java'
    
    
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.batch:spring-batch-test'
        testImplementation 'org.springframework.integration:spring-integration-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }
    
    test {
        useJUnitPlatform()
    }
    
    
    allprojects {
    
        /* custom task to show dependencies.  run ""gradle printAllDependencies"" from commandline.

The primary benefit of the former is that it offers property-based
customization of managed versions, while using the latter will likely result
in faster builds.

## Managing Dependencies with the Dependency Management Plugin

When you apply the [`io.spring.dependency-
management`](https://github.com/spring-gradle-plugins/dependency-management-
plugin) plugin, Spring Boot's plugin will automatically [import the `spring-
boot-dependencies` bom](reacting.html#reacting-to-other-plugins.dependency-
management) from the version of Spring Boot that you are using. This provides
a similar dependency management experience to the one that's enjoyed by Maven
users. For example, it allows you to omit version numbers when declaring
dependencies that are managed in the bom. To make use of this functionality,
declare dependencies in the usual way but omit the version number:

  * Groovy

  * Kotlin

    
    
    dependencies {
    	implementation('org.springframework.boot:spring-boot-starter-web')
    	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    }
    
    
    dependencies {
    	implementation(""org.springframework.boot:spring-boot-starter-web"")
    	implementation(""org.springframework.boot:spring-boot-starter-data-jpa"")
    }

### Customizing Managed Versions

The `spring-boot-dependencies` bom that is automatically imported when the
dependency management plugin is applied uses properties to control the
versions of the dependencies that it manages. Browse the [Dependency Versions
Properties](../appendix/dependency-versions/properties.html) section in the
Spring Boot reference for a complete list of these properties.

To customize a managed version you set its corresponding property. For
example, to customize the version of SLF4J which is controlled by the
`slf4j.version` property:

  * Groovy

  * Kotlin

    
    
    ext['slf4j.version'] = '1.7.20'
    
    
    extra[""slf4j.version""] = ""1.7.20""

__ |  Each Spring Boot release is designed and tested against a specific set of third-party dependencies. Overriding versions may cause compatibility issues and should be done with care.   
---|---  
  
### Using Spring Boot's Dependency Management in Isolation

Spring Boot's dependency management can be used in a project without applying
Spring Boot's plugin to that project.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

I follow the instructions
[here](https://plugins.gradle.org/plugin/org.springframework.boot) for the
latest `spring.framework.boot` plugin.

My `build.gradle` has

    
    
    plugins {
      id 'java-library'
      id 'eclipse'
      id 'io.spring.dependency-management' version '1.0.11.RELEASE'
      id 'org.springframework.boot' version '2.6.2'
      id 'org.springframework.boot.experimental.thin-launcher' version '1.0.23.RELEASE'
    }
    

but gradle tasks have the error

    
    
    > Could not resolve all dependencies for configuration ':detachedConfiguration1'.
       > Could not find org.springframework.boot:spring-boot-dependencies:2.6.2.
    

_UPDATE_ I neglected to add the final lines of the error description, which
were in fact important to answer it.

    
    
     Searched in the following locations:
       - https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
       - https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
    

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [gradle](/questions/tagged/gradle ""show questions tagged 'gradle'"")

[Share](/q/70624098 ""Short permalink to this question"")

[Improve this question](/posts/70624098/edit)

Follow

[edited Jan 11, 2022 at 15:18](/posts/70624098/revisions ""show all edits to
this post"")

rupweb

asked Jan 7, 2022 at 16:10

[!

/specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](./specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](./specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](./specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](./appendix/application-properties/index.html)
      * [Auto-configuration Classes](./appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](./appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](./appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](./appendix/test-auto-configuration/index.html)
        * [Test Slices](./appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](./appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](./appendix/dependency-versions/coordinates.html)
        * [Version Properties](./appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-tools/spring-boot-gradle-
plugin/src/docs/antora/modules/gradle-plugin/pages/managing-dependencies.adoc)
[ GitHub Project ](https://github.com/spring-projects/spring-boot ""GitHub"") [
Stack Overflow ](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](./index.html)
  * [Build Tool Plugins](./build-tool-plugin/index.html)
  * [Gradle Plugin](index.html)
  * [Managing Dependencies](managing-dependencies.html)

# Managing Dependencies

To manage dependencies in your Spring Boot application, you can either apply
the [`io.spring.dependency-management`](https://github.com/spring-gradle-
plugins/dependency-management-plugin) plugin or use Gradle's native bom
support. The primary benefit of the former is that it offers property-based
customization of managed versions, while using the latter will likely result
in faster builds.",litemall,project.dependencies.dependency_spring-boot-starter-json.groupId,NAME,org.springframework.boot,maven,litemall-db/pom.xml,project.dependencies.dependency_spring-boot-starter-test.groupId,NAME,org.springframework.boot,maven,pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: org.springframework.boot.\n2. Evaluate whether these values are equal and part of the same Spring Boot ecosystem.\n3. Determine that there is no direct dependency between the two configuration options based on their groupId values."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-json.groupId and the option project.dependencies.dependency_spring-boot-starter-test.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Port Mapping,llama3:70b,config2,8.0,FP,False,"The configuration options 'services.mysql57.ports.in' with value 3306 and 'services.mysql57.ports.out' with value 3306 are likely dependent on each other because they share the same port number. In a typical Docker Compose setup, the 'in' port is used to expose the service internally within the Docker network, while the 'out' port is used to expose the service externally. Given that both ports have the same value, it implies that the internal and external access to the MySQL service are intended to be on the same port.","Mysql already exposes 3306 port.

All of the applications into cluster use internal ports (3306 in mysql case).
External ports (in section ports) you need only for external word
communication.

If you want to have several databases, you need to change docker-compose
something like this:

    
    
    version: '3'
    services:
    hackernews:
        image: prismagraphql/prisma:1.8
        restart: always
        ports:
        - ""${CLIENT_PORT}:${INTERNAL_PORT}""
        environment:
        PRISMA_CONFIG: |
            port: $INTERNAL_PORT
            managementApiSecret: $PRISMA_MANAGEMENT_API_SECRET
            databases:
            default:
                connector: mysql
                host: mysql_first
                port: 3306
                user: root
                password: $SQL_PASSWORD
                migrations: true
            second:
                connector: mysql
                host: mysql_second
                port: 3306
                user: root
                password: $SQL_PASSWORD
                migrations: true
    mysql_first:
        image: mysql:5.7
        restart: always
        environment:
        MYSQL_ROOT_PASSWORD: $SQL_PASSWORD
        ports:
         - 3307:3306
        volumes:
        - ./custom/:/etc/mysql/conf.d/my.cnf
        - mysql:/var/lib/mysql
    
     mysql_second:
        image: mysql:5.7
        restart: always
        environment:
        ports:
         - 3308:3306
        MYSQL_ROOT_PASSWORD: $SQL_PASSWORD
    

[Share](/a/50457267 ""Short permalink to this answer"")

[Improve this answer](/posts/50457267/edit)

Follow

[edited Aug 23, 2018 at 19:16](/posts/50457267/revisions ""show all edits to
this post"")

[![David Birks's user
avatar](https://www.gravatar.com/avatar/bdc0ef1e882cc1ec1ba65f4cda68f85f?s=64&d=identicon&r=PG)](/users/7733616/david-
birks)

[David Birks](/users/7733616/david-birks)

16522 silver badges55 bronze badges

answered May 21, 2018 at 22:17

[!

I am trying to create multiple Prisma database services on a single machine. I
have been unable to create a MySQL database on a port other than 3306 using
Docker Compose.

docker-compose.yml

    
    
    version: '3'
    services:
    hackernews:
        image: prismagraphql/prisma:1.8
        restart: always
        ports:
        - ""${CLIENT_PORT}:${INTERNAL_PORT}""
        environment:
        PRISMA_CONFIG: |
            port: $INTERNAL_PORT
            managementApiSecret: $PRISMA_MANAGEMENT_API_SECRET
            databases:
            default:
                connector: mysql
                host: mysql
                port: $SQL_INTERNAL_PORT
                user: root
                password: $SQL_PASSWORD
                migrations: true
    mysql:
        image: mysql:5.7
        restart: always
        environment:
        MYSQL_ROOT_PASSWORD: $SQL_PASSWORD
        volumes:
        - ./custom/:/etc/mysql/conf.d/my.cnf
        - mysql:/var/lib/mysql
    volumes:
    mysql:
    

docker-compose.override.yml

    
    
    version: '3'
    services:
    mysql:
        expose:
        - ""${SQL_INTERNAL_PORT}""
        ports:
        - ""${SQL_CLIENT_PORT}:${SQL_INTERNAL_PORT}""
    

Error:

    
    
    hackernews_1  | Exception in thread ""main"" java.sql.SQLTransientConnectionException: database - Connection is not available, request timed out after 5008ms.
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.createTimeoutException(HikariPool.java:548)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:145)
    hackernews_1  |     at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:83)
    hackernews_1  |     at slick.jdbc.hikaricp.HikariCPJdbcDataSource.createConnection(HikariCPJdbcDataSource.scala:18)
    hackernews_1  |     at slick.jdbc.

](/questions/60361128/how-to-connect-to-mysql-created-with-docker-to-
another-port-not-port-3306)

[ 0 ](/q/65646462 ""Question score \(upvotes - downvotes\)"") [Cannot connect to
Mysql using Docker](/questions/65646462/cannot-connect-to-mysql-using-docker)

[ 0 ](/q/66231569 ""Question score \(upvotes - downvotes\)"") [Docker MySQL
container not binding to local port correctly](/questions/66231569/docker-
mysql-container-not-binding-to-local-port-correctly)

[ 0 ](/q/66569926 ""Question score \(upvotes - downvotes\)"") [mysql in docker
compose](/questions/66569926/mysql-in-docker-compose)

[ 0 ](/q/68306070 ""Question score \(upvotes - downvotes\)"") [Docker Compose:
can't connect to my MySQL container](/questions/68306070/docker-compose-cant-
connect-to-my-mysql-container)

[ 3 ](/q/71099929 ""Question score \(upvotes - downvotes\)"") [How to expose
mysql port?](/questions/71099929/how-to-expose-mysql-port)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Determine if N is zibbable ](https://puzzling.stackexchange.com/questions/127439/determine-if-n-is-zibbable)
  * [ ""A set of Guatemalas"" in Forster's Maurice? ](https://literature.stackexchange.com/questions/27439/a-set-of-guatemalas-in-forsters-maurice)
  * [ Why not use computers to evaluate strength of players? ](https://chess.stackexchange.com/questions/45918/why-not-use-computers-to-evaluate-strength-of-players)
  * [ Why do certificate CNs not match the hostnames provided in MX records? ](https://serverfault.com/questions/1162610/why-do-certificate-cns-not-match-the-hostnames-provided-in-mx-records)
  * [ What is the expected size of the smallest hitting set? ](https://mathoverflow.net/questions/475208/what-is-the-expected-size-of-the-smallest-hitting-set)
  * [ Are hardware benchmark results copyrighted?

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f50456780%2frun-
mysql-on-port-3307-using-docker-compose) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f50456780%2frun-
mysql-on-port-3307-using-docker-compose) to customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f50456780%2frun-mysql-on-port-3307-using-docker-compose)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f50456780%2frun-mysql-on-port-3307-using-docker-compose)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.

mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    . 37 common frames omitted discovery-app_1    | Caused by: java.net.ConnectException: Connection refused discovery-app_1    |    at java.base/sun.nio.ch.Net.",litemall,services.mysql57.ports.in,PORT,3306,docker-compose,docker/docker-compose.yml,services.mysql57.ports.out,PORT,3306,docker-compose,docker/docker-compose.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.mysql57.ports.in and services.mysql57.ports.out in docker/docker-compose.yml of technology docker-compose.\n2. Determine their types (PORT) and values (3306).\n3. Evaluate whether the value equality indicates a dependency between the two options."",
    ""rationale"": ""The configuration option services.mysql57.ports.in specifies the internal port 3306 within the MySQL container, while services.mysql57.ports.out specifies the external port 3306 exposed by the container. The value equality (3306) suggests that the external port is mapped to the same internal port for simplicity. However, this does not imply a dependency between the two options, as they serve different purposes in Docker Compose."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality of groupId 'com.github.binarywang'. This suggests that both dependencies are related to the same Maven project or module, which could lead to a transitive dependency. The exclusion in weixin-java-pay may affect the inclusion of weixin-java-miniapp, and vice versa.","github.binarywang/weixin-java-miniapp@4.6.3.B

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

## Overview

### Description

微信小程序 Java SDK

### Snippets

Apache MavenGradleGradle (short)Gradle (Kotlin)sbtivygrapeleiningenbuildr

Copy to clipboard

    
    
    <dependency>
        <groupId>com.github.binarywang</groupId>
        <artifactId>weixin-java-miniapp</artifactId>
        <version>4.6.3.B</version>
    </dependency>

### Maven POM File

Copy to clipboard

    
    
    <?xml version=""1.0""?>
    <project
      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd""
      xmlns=""http://maven.apache.org/POM/4.0.0"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.github.binarywang</groupId>
        <artifactId>wx-java</artifactId>
        <version>4.6.3.B</version>
      </parent>
    
      <artifactId>weixin-java-miniapp</artifactId>
      <name>WxJava - MiniApp Java SDK</name>
      <description>微信小程序 Java SDK</description>
    
      <dependencies>
        <dependency>
          <groupId>com.github.binarywang</groupId>
          <artifactId>weixin-java-common</artifactId>
          <version>${project.version}</version>
        </dependency>
    
        <dependency>
          <groupId>org.jodd</groupId>
          <artifactId>jodd-http</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>com.squareup.okhttp3</groupId>
          <artifactId>okhttp</artifactId>
          <scope>provided</scope>
        </dependency>
    
        <dependency>
          <groupId>org.

github.jedis-lock</groupId>
          <artifactId>jedis-lock</artifactId>
          <optional>true</optional>
        </dependency>
        <dependency>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-core</artifactId>
          <version>3.3.3</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
    
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <suiteXmlFiles>
                <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
              </suiteXmlFiles>
            </configuration>
          </plugin>
        </plugins>
      </build>
    
      <profiles>
        <profile>
          <id>native-image</id>
          <activation>
            <activeByDefault>false</activeByDefault>
          </activation>
    
          <build>
            <plugins>
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                  <annotationProcessors>
                    com.github.binarywang.wx.graal.GraalProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor,lombok.launch.AnnotationProcessorHider$ClaimingProcessor
                  </annotationProcessors>
                  <annotationProcessorPaths>
                    <path>
                      <groupId>com.github.binarywang</groupId>
                      <artifactId>weixin-graal</artifactId>
                      <version>${project.version}</version>
                    </path>
                  </annotationProcessorPaths>
                </configuration>
              </plugin>
            </plugins>
          </build>
        </profile>
      </profiles>
    
    </project>
    

![Sonatype Developer For Free](/sonatype-developer-logo.svg)

### Get recommended versions right in your IDE with SCA built for teams

Sonatype Developer Team makes coding faster and safer, and provides real-time
guidance to developers to make your job easier.

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# weixin-java-miniapp

Used in

Loading...

components

pkg:maven/com.github.binarywang/weixin-java-miniapp@Loading...

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

Loading...

Loading...

Loading...

Loading...

Loading...

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# weixin-java-miniapp

Used in 3 components

pkg:maven/com.github.binarywang/weixin-java-miniapp@4.6.3.

[Try Developer Team For Free](https://www.sonatype.com/request-sonatype-
developer-team-
trial/?utm_campaign=Central%20Developer%20Team%20Trial&utm_source=Central&utm_medium=Product&utm_content=central&utm_term=artifact)

OSS Index

Loading...

[View](https://ossindex.sonatype.org/component/pkg:maven/com.github.binarywang/weixin-
java-miniapp@4.6.3.B)

### Metadata

2 days ago

Licenses

  * The Apache License, Version 2.0

12.3 kB

* * *

### Organization

[com.github.binarywang](/namespace/com.github.binarywang)

* * *

### External Resources

[Project URL](https://github.com/Wechat-Group/WxJava/weixin-java-miniapp)

[Source Control](https://github.com/Wechat-Group/WxJava/weixin-java-miniapp)

* * *

### Known Contributors

kakotor007xiaoheHoward LiuBincentLiu MingboEric.TsaiKeungxiongBinary
WangLiuJunGuangJonkWang_WongwithinthefogDaniel
Qianecoolperhuangxiaominggaigeshen

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",litemall,project.dependencies.dependency_weixin-java-miniapp.groupId,NAME,com.github.binarywang,maven,litemall-core/pom.xml,project.dependencies.dependency_weixin-java-pay.exclusions.exclusion_qrcode-utils.groupId,NAME,com.github.binarywang,maven,litemall-wx-api/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_weixin-java-miniapp.groupId and project.dependencies.dependency_weixin-java-pay.exclusions.exclusion_qrcode-utils.groupId. 2. Check their values: com.github.binarywang in both cases. 3. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options have the same value 'com.github.binarywang', but they serve different purposes: one is a dependency and the other is an exclusion for a specific artifact. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options in both package.json files have the same value (js-cookie:2.2.0) which suggests that they might be dependent on each other. This could be due to the fact that both repositories are using the same version of js-cookie, implying a shared dependency.","All special characters that are not allowed in the cookie-name or
cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-
encoding](http://en.wikipedia.org/wiki/Percent-encoding).  
The only character in cookie-name or cookie-value that is allowed and still
encoded is the percent `%` character, it is escaped in order to interpret
percent input as literal.  
Please note that the default encoding/decoding strategy is meant to be
interoperable [only between cookies that are read/written by js-
cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778).
To override the default encoding/decoding strategy you need to use a
converter.

## Cookie Attributes

Cookie attributes defaults can be set globally by setting properties of the
`Cookies.defaults` object or individually for each call to `Cookies.set(...)`
by passing a plain object in the last argument. Per-call attributes override
the default attributes.

### expires

Define when the cookie will be removed. Value can be a
[`Number`](https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be
interpreted as days from time of creation or a
[`Date`](https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted,
the cookie becomes a session cookie.

To create a cookie that expires in less than a day, you can check the [FAQ on
the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-
Questions#expire-cookies-in-less-than-a-day).

**Default:** Cookie is removed when the user closes the browser.

**Examples:**

    
    
    Cookies.set('name',Â 'value',Â {Â expires:Â 365Â });
    
    Cookies.get('name');Â //Â =>Â 'value'
    
    Cookies.remove('name');

### path

A [`String`](https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path
where the cookie is visible.

**ð ð If you're viewing this at <https://github.com/js-cookie/js-
cookie>, you're reading the documentation for the main branch. [View
documentation for the latest release.](https://github.com/js-cookie/js-
cookie/tree/latest#readme) ðð**

## Installation

### NPM

JavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie)
under the name `js-cookie`.

    
    
    npm i js-cookie

The npm package has a `module` field pointing to an ES module variant of the
library, mainly to provide support for ES module aware bundlers, whereas its
`browser` field points to an UMD module for full backward compatibility.

_Not all browsers support ES modules natively yet_. For this reason the npm
package/release provides both the ES and UMD module variant and you may want
to include the ES module along with the UMD fallback to account for this:

### CDN

Alternatively, include js-cookie via [jsDelivr
CDN](https://www.jsdelivr.com/package/npm/js-cookie).

## Basic Usage

Create a cookie, valid across the entire site:

    
    
    Cookies.set('name', 'value')

Create a cookie that expires 7 days from now, valid across the entire site:

    
    
    Cookies.set('name', 'value', { expires: 7 })

Create an expiring cookie, valid to the path of the current page:

    
    
    Cookies.set('name', 'value', { expires: 7, path: '' })

Read cookie:

    
    
    Cookies.get('name') // => 'value'
    Cookies.get('nothing') // => undefined

Read all visible cookies:

    
    
    Cookies.get() // => { name: 'value' }

_Note: It is not possible to read a particular cookie by passing one of the
cookie attributes (which may or may not have been used when writing the cookie
in question):_

    
    
    Cookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!

The cookie with the name `foo` will only be available on `.get()` if it's
visible from where the code is called; the domain and/or path attribute will
not have an effect when reading.

IO](/questions/10771337/adding-a-cookie-value-on-socket-io)

[ 2 ](/q/13462756 ""Question score \(upvotes - downvotes\)"") [cookie node.js
express](/questions/13462756/cookie-node-js-express)

[ 0 ](/q/16467233 ""Question score \(upvotes - downvotes\)"") [Sending cookie to
Node.js](/questions/16467233/sending-cookie-to-node-js)

[ 18 ](/q/19591689 ""Question score \(upvotes - downvotes\)"") [ExpressJS
set/get/use cookies](/questions/19591689/expressjs-set-get-use-cookies)

[ 4 ](/q/36166564 ""Question score \(upvotes - downvotes\)"") [Set Cookie fails
in ExpressJs](/questions/36166564/set-cookie-fails-in-expressjs)

[ 4 ](/q/36469711 ""Question score \(upvotes - downvotes\)"") [Cookies not
getting set in node.js](/questions/36469711/cookies-not-getting-set-in-node-
js)

[ 4 ](/q/45206200 ""Question score \(upvotes - downvotes\)"") [Set persistent
cookie with Express.js](/questions/45206200/set-persistent-cookie-with-
express-js)

[ 0 ](/q/65292935 ""Question score \(upvotes - downvotes\)"") [I can't set
cookie](/questions/65292935/i-cant-set-cookie)

[ 0 ](/q/66307562 ""Question score \(upvotes - downvotes\)"") [Create a cookie
in a node.js script](/questions/66307562/create-a-cookie-in-a-node-js-script)

[ 0 ](/q/66627225 ""Question score \(upvotes - downvotes\)"") [Setting cookies
in Nodejs](/questions/66627225/setting-cookies-in-nodejs)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Parking ticket for parking in a private lot reserved for customers of X, Y, and Z business's ](https://law.stackexchange.

[Code
Climate](https://codeclimate.com/github/js-cookie/js-
cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![jsDelivr
Hits](https://data.jsdelivr.com/v1/package/npm/js-
cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)

A simple, lightweight JavaScript API for handling cookies

  * Works in [all](https://saucelabs.com/u/js-cookie) browsers
  * Accepts any character
  * [Heavily](https://github.com/js-cookie/js-cookie/blob/HEAD/test) tested
  * No dependency
  * Unobtrusive JSON support
  * Supports AMD/CommonJS
  * [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant
  * Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)
  * Enable custom encoding/decoding
  * **~900 bytes** gzipped!

**If you're viewing this at<https://github.com/js-cookie/js-cookie>, you're
reading the documentation for the master branch. [View documentation for the
latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**

## Build Status Matrix

[![Selenium Test Status](https://saucelabs.com/browser-matrix/js-
cookie.svg)](https://saucelabs.com/u/js-cookie)

## Installation

### Direct download

Download the script [here](https://github.com/js-cookie/js-
cookie/blob/latest/src/js.cookie.js) and include it (unless you are packaging
scripts somehow else):

    
    
    <scriptÂ src=""/path/to/js.cookie.js""></script>

Or include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-
cookie):

    
    
    <scriptÂ src=""https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js""></script>

**Do not include the script directly from GitHub
(http://raw.github.com/...).** The file is being served as text/plain and as
such being blocked in Internet Explorer on Windows 7 for instance (because of
the wrong MIME type). Bottom line: GitHub is not a CDN.

### Package Managers

JavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) and
[Bower](http://bower.io/search/?q=js-cookie) under the name `js-cookie`.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f12240274%2fset-
a-cookie-value-in-node-js) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f12240274%2fset-
a-cookie-value-in-node-js) to customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f12240274%2fset-a-cookie-value-in-node-js)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f12240274%2fset-a-cookie-value-in-node-js)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

!",litemall,dependencies.js-cookie,VERSION_NUMBER,js-cookie:2.2.0,nodejs,litemall-admin/package.json,dependencies.js-cookie,VERSION_NUMBER,js-cookie:2.2.0,nodejs,litemall-vue/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: dependencies.js-cookie in litemall-admin/package.json and litemall-vue/package.json.\n2. Determine their types: VERSION_NUMBER.\n3. Compare their values: js-cookie:2.2.0.\n4. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options dependencies.js-cookie in both litemall-admin and litemall-vue have the same type (VERSION_NUMBER) and value (js-cookie:2.2.0). This suggests that they are referring to the same dependency, which is a common practice in Node.js projects where multiple modules or applications share the same dependencies."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Inferring Dependencies,llama3:70b,config2,6.0,FP,False,"The rationale behind this evaluation is that both configuration options point to the same file 'application.yml'. This suggests that they might be used together in the Dockerfile to configure the Spring Boot application. However, without more context, it is unclear whether one option depends on the other or if they are independent.","When first deployed, the properties that are currently in `my-
server/src/main/resources/application.yml` are loaded and used by the
application as expected. All works fine.

However, my problem is that I need these properties to be updatable as needed,
so I need access to the `application.yml` file once on the Docker container.
But at this point, it's not included in the `build/docker/` directory before
running the `buildDocker` task, so won't be copied over or accessible after
first deployment.

So, what I have tried is to copy the Yaml file into the `docker/` build
directory, copy it to an accessible directory
(`/opt/meanwhileinhell/myapp/conf`), and use the `spring.config.location`
property to pass a location of the config to the Jar in my Dockerfile:

    
    
    ENTRYPOINT  [""java"",\
    ...
    ""-jar"", ""/app.jar"",\
    ""--spring.config.location=classpath:${configDirectory}""]
    

Looking at the Command running on the Docker container I can see that this is
as expected:

    
    
    /app.jar --spring.config.location=classpath:/opt/meanwhileinhell/myapp/conf]
    

However, when I update a property in this file and restart the Docker
container, it isn't picking up the changes. File permissions are:

    
    
    -rw-r--r-- 1 root root  618 Sep  5 13:59 application.yml
    

The [documentation](https://docs.spring.io/spring-
boot/docs/current/reference/html/boot-features-external-config.html) states:

> When custom config locations are configured, they are used in addition to
> the default locations. Custom locations are searched before the default
> locations.

I can't seem to figure out what I'm doing wrong or misinterpreting, but
probably more importantly, is this the correct way to externalise the config
for this type of Docker scenario?

Containers should be immutable and all environment configuration
should be externalized.

For spring boot, there is very powerful project that allows you to externalize
configuration. Its called [Spring Cloud
Config](https://spring.io/guides/gs/centralized-configuration/). The config
server allows you to save your environment specific configuration in a git
repository and serve the configuration to applications that need it. You
basically just save the same application.yml in git and point the config
server to the repository location.

Following this approach you can define multiple configuration files for
different environments and keep your docker container immutable.

[Share](/a/46058572 ""Short permalink to this answer"")

Follow

answered Sep 5, 2017 at 15:26

[![yamenk's user
avatar](https://www.gravatar.com/avatar/8f02529297334913bf57f13edee1689c?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/6603816/yamenk)

[yamenk](/users/6603816/yamenk)yamenk

50.5k1010 gold badges100100 silver badges9393 bronze badges

Add a comment  | 

1

[](/posts/76407807/timeline ""Show activity on this post."")

Set `spring.config.additional-location` as ENTRYPOINT (ending with /) on
**Dockerfile** and mount the volume to the host folder where `application.yml`
is

**Dockerfile**

    
    
    RUN mkdir /opt/meanwhileinhell/myapp/conf
      (...)
    ENTRYPOINT [""java"", ""-Dspring.config.additional-location=/opt/meanwhileinhell/myapp/conf/"", ""-jar"", ""/opt/meanwhileinhell/myapp/app.jar""]
    

> When we want to specify a directory location then we must make sure that the
> value of spring.config.location ends with / (for example
> spring.config.location=classpath:/config/) and that the configuration file
> name is the default.

<https://springframework.guru/spring-external-
> configuration-data/>

To change on restarts need that `application.yml` will be located on the host
machine, referenced it with a volume

**docker-compose.yml**

    
    
    ...
    volumes:
         - my-server/src/main/resources:/opt/meanwhileinhell/myapp/conf
    ...
    

Other alternative is as environment on **docker-compose.yml** : ...
environment: -spring.config.additional-
location=/opt/meanwhileinhell/myapp/conf/ volumes: \- my-
server/src/main/resources:/opt/meanwhileinhell/myapp/conf ...

For **Spring < 2.x** use `spring.config.location` instead of
`spring.config.additional-location`

[Share](/a/76407807 ""Short permalink to this answer"")

Follow

[edited Jun 10, 2023 at 15:22](/posts/76407807/revisions ""show all edits to
this post"")

answered Jun 5, 2023 at 15:12

[![pdorgambide's user
avatar](https://www.gravatar.com/avatar/36559d59d3d75e442c83e348acdd0bcc?s=64&d=identicon&r=PG)](/users/1203628/pdorgambide)

[pdorgambide](/users/1203628/pdorgambide)pdorgambide

1,8572121 silver badges3434 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow. [Learn more](/help/gen-ai-policy)

Thanks for contributing an answer to Stack Overflow!

  * Please be sure to _answer the question_. Provide details and share your research!

But _avoid_ …

  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

I need to load a property from a `.yml` file, which contains the path to a
folder where the application can read files from.

I'm using the following code to inject the property:

    
    
    @Value(""${files.upload.baseDir}"")
    private String pathToFileFolder;
    

The `.yml` file for development is located under
`src/main/resources/config/application.yml`, im running the application with
the following command in production, to override the development settings:

    
    
    java -jar app.jar --spring.config.location=/path/to/application-production.yml
    

The Spring Boot documentation says:

> SpringApplication will load properties from application.properties files in
> the following locations and add them to the Spring Environment:
>
>   1. A /config subdirectory of the current directory.
>
>   2. The current directory
>
>   3. A classpath /config package
>
>   4. The classpath root
>
>

As well as:

> You can also use YAML ('.yml') files as an alternative to '.properties'.

The `.yml` file contains:

    
    
    {...}
    files:
          upload:
            baseDir: /Users/Thomas/Code/IdeaProjects/project1/files
    {...}
    

And my `Application` class is annotated with:

    
    
    @SpringBootApplication
    @EnableCaching
    

When I run the application, i get an exception:

    
    
    Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'files.upload.baseDir' in string value ""${files.upload.baseDir}""
    

Do I have to use the `YamlPropertySourceLoader` class or add a special
annotation to enable the support for `.yml` in Spring Boot?

Edit: The `.yml` file contains some other properties, which get successfully
loaded by Spring Boot like `dataSource.XXX`or `hibernate.XXX`.

Each stage can have its own
set of instructions and dependencies, and the final image only includes the
files and dependencies from the last stage. Here’s an example Dockerfile that
uses multi-stage builds to create a slim Spring Boot image:

    
    
    # First stage: build the application  
    FROM maven:3.8.3-jdk-11 AS build  
    COPY . /app  
    WORKDIR /app  
    RUN mvn package -DskipTests  
      
    # Second stage: create a slim image  
    FROM openjdk:11-jre-slim  
    COPY --from=build /app/target/my-application.jar /app.jar  
    ENTRYPOINT [""java"", ""-jar"", ""/app.jar""]

In this example, the first stage uses a Maven base image to build the Spring
Boot application and generate a jar file. The second stage uses an OpenJDK
slim base image, which is a smaller version of the base image that only
includes the Java runtime environment.

The `COPY --from=build` instruction copies the jar file from the first stage
to the second stage, and the `ENTRYPOINT` instruction specifies the command
that should be run when the container is started.

> Using multi-stage builds in this way allows us to create a slim Docker image
> that only includes the required dependencies and files for running the
> Spring Boot application. By doing so, we can reduce the size of the image
> and improve the performance of the application.

# Use environment variables

When Dockerizing a Spring Boot application, it’s important to use environment
variables to configure your application. Using environment variables allows
you to change the configuration of your application without having to rebuild
the Docker image.

Spring Boot applications can use the `application.properties` or
`application.yml` file to specify configuration properties. These properties
can be overridden at runtime using environment variables, which Spring Boot
automatically maps to properties. Here’s an example Dockerfile that sets an
environment variable to configure the active profile for the Spring Boot
application:

    
    
    FROM openjdk:11  
    ENV SPRING_PROFILES_ACTIVE=production  
    COPY target/my-application.jar app.jar  
    ENTRYPOINT [""java"", ""-jar"", ""/app.jar""]

In this example, we’re setting the `SPRING_PROFILES_ACTIVE` environment
variable to `production`, which will activate the `production` profile in the
Spring Boot application.",litemall,COPY.dest,PATH,application.yml,docker,docker/litemall/Dockerfile,COPY.src,PATH,application.yml,docker,docker/litemall/Dockerfile,Others,Others,"{
    ""plan"": ""1. Analyze the Dockerfile to identify the COPY instructions with dest and src paths. 2. Check if both paths point to the same file 'application.yml'. 3. Evaluate whether the values of COPY.dest and COPY.src are identical due to a dependency or coincidence."",
    ""rationale"": ""The configuration options COPY.dest and COPY.src have the same value 'application.yml', but they serve different purposes in the Dockerfile. The dest path specifies the destination in the container, while the src path specifies the source file from the build context. Although they share the same value, it's a coincidence due to the common naming convention for configuration files. Therefore, these options do not depend on each other."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. The groupId io.springfox is common between both configurations, which suggests that they are related. In Maven, dependencyManagement is used to manage the versions of dependencies across a project. If a dependency is managed by the dependencyManagement section, its version will be inherited from the parent pom.xml file.","Application was working with Springfox Swagger 3.0 few days back. Suddenly it
is stopped working. The Jar file which was created before a week is still
working but now when we try to build a new Jar file, which is not working,
even without any code/library changes. I have even referred the below URL but
still facing issue.

[404 error with swagger-ui and spring
webflux](https://stackoverflow.com/questions/59440108/404-error-with-swagger-
ui-and-spring-webflux)

Below given my configuration:

POM file:

    
    
    <properties>
        <java.version>1.8</java.version>
        <springfox.version>3.0.0-SNAPSHOT</springfox.version>
        <spring.version>2.3.1.RELEASE</spring.version>
    </properties>
    <repositories>
        <repository>
            <id>spring-libs-milestone</id>
            <name>Spring Milestone Maven Repository</name>
            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </repository>
    </repositories>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-spring-webflux</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox.version}</version>
        </dependency>
    </dependencies>
    

Config Files:

    
    
    @Configuration
    @EnableSwagger2WebFlux
    public class SwaggerConfiguration implements WebFluxConfigurer {
    
        @Bean
        public Docket createRestApi() {
            return new Docket(DocumentationType.SWAGGER_2)
                    .apiInfo(new ApiInfoBuilder()
                            .description(""My Reactive API"")
                            .

Gradle

    
    
    dependencies {
        implementation ""io.springfox:springfox-data-rest:3.0.0""
    }

#### 3.3.2. Maven

    
    
    <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-data-rest</artifactId>
        <version>3.0.0</version>
    </dependency>

#### 3.3.3. java config

    
    
    //For java config
    @Import({ ... springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration.class, ...})

#### 3.3.4. xml config

Import the bean in your xml configuration by defining a bean of the following
type

    
    
    <bean class=""springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration.class"" />

__ |  for spring boot, this section is not needed. Springfox will autoconfigure itself based on the detection of spring data rest components.   
---|---  
  
### 3.4. Springfox Support for JSR-303

In version greater than 2.3.2, support for bean validation annotations was
added, specifically for @NotNull, @Min, @Max, and @Size.

In order to use it

  * add the `springfox-bean-validators` dependency.

#### 3.4.1. Gradle

    
    
    dependencies {
        implementation ""io.springfox:springfox-bean-validators:3.0.0""
    }

#### 3.4.2. Maven

    
    
    <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-bean-validators</artifactId>
        <version>3.0.0</version>
    </dependency>

  * Import the configuration from the `springfox-bean-validators` module as shown below

#### 3.4.3. java config

    
    
    //For java config
    @Import({ ... springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration.class, ...})

#### 3.4.4. xml config

Import the bean in your xml configuration by defining a bean of the following
type

    
    
    <bean class=""springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration"" />

### 3.5.

# Springfox Reference Documentation

Dilip Krishnan  
Adrian Kelly  
version 3.0.0-SNAPSHOT

Table of Contents

  * 1\. Introduction
    * 1.1. History
    * 1.2. Goals
    * 1.3. What it's not
    * 1.4. Development Environment
      * 1.4.1. Pre-Commit Build
      * 1.4.2. Building reference documentation
      * 1.4.3. Updating the contract tests
      * 1.4.4. CI Environment
    * 1.5. Releasing
      * 1.5.1. Snapshot
      * 1.5.2. Override deploy
      * 1.5.3. Releasing documentation
      * 1.5.4. Contributing
    * 1.6. Support
  * 2\. Getting Started
    * 2.1. Dependencies
      * 2.1.1. Gradle
      * 2.1.2. Maven
      * 2.1.3. Migrating from existing 2.x version
  * 3\. Quick start guides
    * 3.1. Springfox Spring MVC and Spring Boot
    * 3.2. Configuration explained
    * 3.3. Springfox Spring Data Rest
      * 3.3.1. Gradle
      * 3.3.2. Maven
      * 3.3.3. java config
      * 3.3.4. xml config
    * 3.4. Springfox Support for JSR-303
      * 3.4.1. Gradle
      * 3.4.2. Maven
      * 3.4.3. java config
      * 3.4.4. xml config
    * 3.5. Springfox Swagger UI
    * 3.6. Springfox RFC6570 support
    * 3.7. Springfox Spring-Integration Support **incubating**
    * 3.8.

version>
        <pagehelper.version>5.3.2</pagehelper.version>
        <druid.version>1.2.14</druid.version>
        <hutool.version>5.8.9</hutool.version>
        <springfox-swagger.version>3.0.0</springfox-swagger.version>
        <swagger-models.version>1.6.0</swagger-models.version>
        <swagger-annotations.version>1.6.0</swagger-annotations.version>
        <mybatis-generator.version>1.4.1</mybatis-generator.version>
        <mybatis.version>3.5.10</mybatis.version>
        <mysql-connector.version>8.0.29</mysql-connector.version>
        <spring-data-commons.version>2.7.5</spring-data-commons.version>
        <jjwt.version>0.9.1</jjwt.version>
        <aliyun-oss.version>2.5.0</aliyun-oss.version>
        <alipay-sdk.version>4.38.61.ALL</alipay-sdk.version>
        <logstash-logback.version>7.2</logstash-logback.version>
        <minio.version>8.4.5</minio.version>
        <jaxb-api.version>2.3.1</jaxb-api.version>
        <mall-common.version>1.0-SNAPSHOT</mall-common.version>
        <mall-mbg.version>1.0-SNAPSHOT</mall-mbg.version>
        <mall-security.version>1.0-SNAPSHOT</mall-security.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.

### 3.6. Springfox RFC6570 support

__ |  Support has been dropped experimental feature as swagger-ui and the spec itself has better support for this.   
---|---  
  
  * Turn enableUrlTemplating `OFF`; ([see #21](http://springfox.github.io/springfox/docs/current/#springfox-swagger2-with-spring-mvc-and-spring-boot))

### 3.7. Springfox Spring-Integration Support **incubating**

__ |  _Keep in mind this is experimental_!   
---|---  
  
As of Springfox 3.0 we offer experimental support for Spring Integration http
inbound endpoints.

The current implementation produces documentation for your endpoints, as far
as possible automatically, based on static code analysis. Since the ultimate
http responses in spring-integration cannot be determined statically from an
http inbound endpoint, we use spring-restdocs to provide response body
examples.

We consider the support experimental because it has not been tested with a
wide range of spring-integration applications and because we have only started
to evaluate the possibilities we have with spring-restdocs.

Depending on which web technology you choose, you need to include the
appropriate `springfox-spring-integration-webflux` or `springfox-spring-
integration-webmvc` dependency and use its respective tooling to produce
documentation for your http responses, based on [spring-
restdocs](https://spring.io/projects/spring-restdocs).

See the readme for [springfox-spring-integration-
webmvc](https://github.com/springfox/springfox/tree/master/springfox-spring-
integration-webmvc) and [springfox-spring-integration-
webflux](https://github.com/springfox/springfox/tree/master/springfox-spring-
integration-webflux) for details.

### 3.8. Securing swagger-ui

[The user contributed
example](https://github.com/springfox/springfox/issues/2191#issuecomment-359159833)
uses OAuth2 and cookies-based auth in the browser. (Credit:
[@evser](https://github.com/evser))

    
    
           protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .anyRequest().authenticated()
            .and().exceptionHandling().accessDeniedHandler(new AccessDeniedHandlerImpl())
            .and().logout().",litemall,project.dependencies.dependency_springfox-swagger-ui.groupId,NAME,io.springfox,maven,litemall-admin-api/pom.xml,project.dependencyManagement.dependencies.dependency_springfox-swagger2.groupId,NAME,io.springfox,maven,pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: project.dependencies.dependency_springfox-swagger-ui.groupId and project.dependencyManagement.dependencies.dependency_springfox-swagger2.groupId.\n2. Compare the values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_springfox-swagger-ui.groupId and the option project.dependencyManagement.dependencies.dependency_springfox-swagger2.groupId have the same groupId value 'io.springfox'. This suggests that they are part of the same Springfox ecosystem. Since swagger-ui is a component of swagger2, it can be inferred that there is a dependency between these two configuration options."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,"The configuration options project.dependencies.dependency_litemall-admin-api.groupId and project.dependencies.dependency_litemall-db.groupId have the same value org.linlinjava, but they are defined in different dependencies. The dependency litemall-admin-api is not dependent on litemall-db, and vice versa. They are separate dependencies with the same groupId. Therefore, there is no direct dependency between these two configuration options.","We’ll occasionally send you
account related emails.

Already on GitHub? [Sign
in](/login?return_to=%2Flinlinjava%2Flitemall%2Fissues%2Fnew%2Fchoose) to your
account

Jump to bottom

#  Could not resolve dependencies for project org.linlinjava:litemall-
all:jar:0.1.0: The following artifacts could not be resolved:
org.linlinjava:litemall-core:jar:0.1.0, org.linlinjava:litemall-db:jar:0.1.0,
org.linlinjava:litemall-wx-api:jar:0.1.0, org.linlinjava:litemall-admin-
api:jar:0.1.0: Failure to find org.linlinjava:litemall-core:jar:0.1.0 in
http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the
local repository, resolution will not be reattempted until the update interval
of alimaven has elapsed or updates are forced -> #142

Closed

[hemingyang](/hemingyang) opened this issue Mar 19, 2019 * 1 comment

Closed

#  Could not resolve dependencies for project org.linlinjava:litemall-
all:jar:0.1.0: The following artifacts could not be resolved:
org.linlinjava:litemall-core:jar:0.1.0, org.linlinjava:litemall-db:jar:0.1.0,
org.linlinjava:litemall-wx-api:jar:0.1.0, org.linlinjava:litemall-admin-
api:jar:0.1.0: Failure to find org.linlinjava:litemall-core:jar:0.1.0 in
http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the
local repository, resolution will not be reattempted until the update interval
of alimaven has elapsed or updates are forced -> #142

[hemingyang](/hemingyang) opened this issue Mar 19, 2019 * 1 comment

## Comments

[!

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",litemall,project.dependencies.dependency_litemall-admin-api.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,project.dependencies.dependency_litemall-db.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the Maven project structure and analyze the dependencies in the parent POM and child POMs.\n2. Check for groupId equality between configuration options project.dependencies.dependency_litemall-admin-api.groupId and project.dependencies.dependency_litemall-db.groupId.\n3. Evaluate whether the equality of groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_litemall-admin-api.groupId and the option project.dependencies.dependency_litemall-db.groupId located in the same POM file (litemall-all-war/pom.xml) indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same project, but there is no direct dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.packaging with value jar in both litemall-all/pom.xml and litemall-core/pom.xml are likely dependent on each other due to value equality. This is because Maven's packaging mechanism allows for inheritance of packaging configurations from parent POMs to child POMs. If the packaging option is not overridden in the child POM, it will inherit the configuration from the parent POM.","](/questions/17026433/how-to-add-all-dependencies-in-single-jar-in-
maven-and-then-apply-assembly-plugi)

[ 0 ](/q/21240350 ""Question score \(upvotes - downvotes\)"") [Maven assembly
package with only project and dependant jar](/questions/21240350/maven-
assembly-package-with-only-project-and-dependant-jar)

[ 2 ](/q/24807662 ""Question score \(upvotes - downvotes\)"") [Pack dependencies
of manifest-first maven project into jar](/questions/24807662/pack-
dependencies-of-manifest-first-maven-project-into-jar)

[ 2 ](/q/27913653 ""Question score \(upvotes - downvotes\)"") [Packaging a flat
jar, containing some dependencies, with some folders outside of the jar, in
maven](/questions/27913653/packaging-a-flat-jar-containing-some-dependencies-
with-some-folders-outside-of)

[ 2 ](/q/36158965 ""Question score \(upvotes - downvotes\)"") [How to package a
jar and all dependencies within a new jar with maven](/questions/36158965/how-
to-package-a-jar-and-all-dependencies-within-a-new-jar-with-maven)

[ 1 ](/q/52443672 ""Question score \(upvotes - downvotes\)"") [maven-assembly-
plugin not packaging dependencies](/questions/52443672/maven-assembly-plugin-
not-packaging-dependencies)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ 4-color theorem for hypergraphs ](https://mathoverflow.net/questions/475239/4-color-theorem-for-hypergraphs)
  * [ A Comprehensive Masterpiece on History of Science ](https://hsm.stackexchange.com/questions/17719/a-comprehensive-masterpiece-on-history-of-science)
  * [ Are operators unitary on a real quantum computer?

I'd like Maven to package a project alongside its run-time dependencies. I
expect it to create a JAR file with the following manifest:

    
    
    .....
    Main-Class : com.acme.MainClass
    Class-Path : lib/dependency1.jar lib/dependency2.jar
    .....
    

and create the following directory structure:

    
    
    target
    |-- ....
    |-- my-project.jar
    |-- lib
        |-- dependency1.jar
        |-- dependency2.jar
    

Meaning, I want the main JAR to exclude any dependencies and I want all
transitive dependencies to get copied into a ""lib"" sub-directory. Any ideas?

  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")
  * [dependencies](/questions/tagged/dependencies ""show questions tagged 'dependencies'"")
  * [manifest](/questions/tagged/manifest ""show questions tagged 'manifest'"")
  * [maven-assembly-plugin](/questions/tagged/maven-assembly-plugin ""show questions tagged 'maven-assembly-plugin'"")

[Share](/q/3558459 ""Short permalink to this question"")

[Improve this question](/posts/3558459/edit)

Follow

[edited Dec 17, 2014 at 8:36](/posts/3558459/revisions ""show all edits to this
post"")

Gili

asked Aug 24, 2010 at 16:02

[![Gili's user
avatar](https://www.gravatar.com/avatar/ffeccc0bf6020a4c7cfb2f014e02de35?s=64&d=identicon&r=PG)](/users/14731/gili)

[Gili](/users/14731/gili)Gili

88.7k101101 gold badges405405 silver badges711711 bronze badges

Add a comment  | 

##  3 Answers 3

Sorted by:  [ Reset to default ](/questions/3558459/maven-packaging-
dependencies-alongside-project-jar?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

64

[](/posts/3562259/timeline ""Show activity on this post."")

> I've like Maven to package a project with run-time dependencies.

This part is unclear (it's not exactly what you describe just after). My
answer covers what you described.

> I expect it to create a JAR file with the following manifest (...)

Configure the [Maven Jar Plugin](http://maven.apache.org/plugins/maven-jar-
plugin/) to do so (or more precisely, the [Maven
Archiver](http://maven.apache.org/shared/maven-
archiver/examples/manifest.html)):

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
             <artifactId>maven-jar-plugin</artifactId>
             <configuration>
               <archive>
                 <manifest>
                   <addClasspath>true</addClasspath>
                   <classpathPrefix>lib/</classpathPrefix>
                   <mainClass>com.acme.MainClass</mainClass>
                 </manifest>
               </archive>
             </configuration>
          </plugin>
        </plugins>
      </build>
      ...
      <dependencies>
        <dependency>
          <groupId>dependency1</groupId>
          <artifactId>dependency1</artifactId>
          <version>X.Y</version>
        </dependency>
        <dependency>
          <groupId>dependency2</groupId>
          <artifactId>dependency2</artifactId>
          <version>W.Z</version>
        </dependency>
      </dependencies>
      ...
    </project>
    

And this will produce a MANIFEST.MF with the following entries:

    
    
    ...
    Main-Class: fully.qualified.MainClass
    Class-Path: lib/dependency1-X.Y.jar lib/dependency2-W.Z.jar
    ...
    

> and create the following directory structure (...)

This is doable using the [Maven Dependency
Plugin](http://maven.apache.org/plugins/maven-dependency-plugin/) and the
`dependency:copy-dependencies` goal. From the documentation:

>   * [`dependency:copy-dependencies`](http://maven.apache.org/plugins/maven-
> dependency-plugin/copy-dependencies-mojo.html) takes the list of project
> direct dependencies and optionally transitive dependencies and copies them
> to a specified location, stripping the version if desired. This goal can
> also be run from the command line.

I am having a problem with my project that is the project pom file has an
error stating that packaging should not resolve to jar but to pom. I need my
project to generate a target 'jar' and I don't have any child modules, however
this error is generated with another error: `Child module of pom.xml does not
exist` now here goes my pom file:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.itworx.bigdata</groupId>
        <artifactId>MediaSensor</artifactId>
        <version>0.0.1</version>
        <name>MediaSensor</name>
        <description>Complete and Integrated Spark Flow of Big Data</description>
        <repositories>
            <repository>
                <id>cloudera</id>
                <url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>
            </repository>
        </repositories>
        <!-- please stick to the CDH version and this repositry do not use apache repos -->
        <!-- All CDH jars in this link http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cdh_vd_cdh5_maven_repo.html#concept_jhf_dcz_bs_unique_2-->
        <dependencies>
            <!-- following jar is implicitly needed by one of spark ref -->
            <dependency>
                <groupId>jdk.tools</groupId>
                <artifactId>jdk.tools</artifactId>
                <scope>system</scope>
                <version>1.6.0_24</version>
                <systemPath>C:/Program Files/Java/jdk1.7.0_51/lib/tools.jar</systemPath>
            </dependency>
    
            <dependency>
                <groupId>com.itworx.epenta</groupId>
                <artifactId>ePenta</artifactId>
                <scope>system</scope>
                <version>1.

does this only copy the dependencies marked with scope runtime?

- [asgs](/users/282345/asgs ""3,974 reputation"")

Commented Mar 14, 2017 at 19:47

Add a comment  | 

0

[](/posts/3558492/timeline ""Show activity on this post."")

You can use the maven jar plugin, take a look on this page:
<http://maven.apache.org/plugins/maven-jar-plugin/examples/manifest-
customization.html>

[Share](/a/3558492 ""Short permalink to this answer"")

[Improve this answer](/posts/3558492/edit)

Follow

answered Aug 24, 2010 at 16:06

[![Skarab's user
avatar](https://www.gravatar.com/avatar/08ab32adfbfa32a2f52733864c72c0e6?s=64&d=identicon&r=PG)](/users/410823/skarab)

[Skarab](/users/410823/skarab)Skarab

7,1011414 gold badges5050 silver badges8888 bronze badges

3

  * You can also maven assembly plugin: [maven.apache.org/plugins/maven-assembly-plugin](http://maven.apache.org/plugins/maven-assembly-plugin/)

- [Skarab](/users/410823/skarab ""7,101 reputation"")

Commented Aug 24, 2010 at 16:14

  * How do I get the maven-assembly-plugin to store the dependency JAR files alongside (as opposed to inside) my-project.jar?

- [Gili](/users/14731/gili ""88,721 reputation"")

Commented Aug 24, 2010 at 23:39

  * See this page - [maven.apache.org/plugins/maven-assembly-plugin/examples/single/…](http://maven.apache.org/plugins/maven-assembly-plugin/examples/single/filtering-some-distribution-files.html). Personally, I use the maven-ant-run plugin ([wbarczynski.org/wp/wp-content/pom.xml_2.txt](http://wbarczynski.org/wp/wp-content/pom.xml_2.txt)) to copy jars around but it can be done also using ""pure"" maven.",litemall,project.packaging,TYPE,jar,maven,litemall-all/pom.xml,project.packaging,TYPE,jar,maven,litemall-core/pom.xml,Multi-Maven-Modules,Packaging Format,"{
    ""plan"": ""1. Analyze the Maven project structure and identify the relationships between modules.\n2. Check if both configuration options have the same value 'jar' for packaging type.\n3. Evaluate whether the packaging type in one module affects the other module."",
    ""rationale"": ""The configuration option project.packaging with value 'jar' in litemall-all/pom.xml and litemall-core/pom.xml serve the same purpose, which is to specify the packaging type for Maven projects. Since they have the same value, it implies that they are related and might depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Inferring Dependencies,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_mockito-core.scope and project.dependencies.dependency_powermock-api-mockito.scope both have UNKNOWN type and test value, indicating a potential dependency between them. This is because Mockito and PowerMock are often used together for testing purposes, and their scopes being set to test suggests that they are intended to work together.","I am using following dependencies:

  * mockito-core: 2.8.47
  * powermock-api-mockito2: 2.0.2
  * powermock-module-junit4: 2.0.2

And this is my pom:

    
    
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito2</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    

with following properties:

    
    
    <properties>
      <powermock.version>2.0.2</powermock.version>
    </properties>
    

Now when I am running some unit test I get:

    
    
    Caused by: java.lang.NoSuchMethodError: org.mockito.MockitoFramework.getPlugins()Lorg/mockito/plugins/MockitoPlugins;
        at org.powermock.api.mockito.mockmaker.MockMakerLoader.doLoad(MockMakerLoader.java:45)
        at org.powermock.api.mockito.mockmaker.MockMakerLoader.load(MockMakerLoader.java:36)
        at org.powermock.api.mockito.mockmaker.PowerMockMaker.<init>(PowerMockMaker.java:36)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
        at java.lang.Class.newInstance(Class.java:442)
    

I am bit lost in this - still getting same scenario: changing version of one
of dependencies and something is missing :/

I was using this site to choose dependencies versions:
<https://github.com/powermock/powermock/wiki/Mockito-2-Maven> Can someone help
me and tell what is procedure for choosing proper artifacts with versions?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

[ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

![](https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae)

Now available on Stack Overflow for Teams! AI features where you work: search,
IDE, and chat.

[Learn
more](https://stackoverflow.co/teams/ai/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=overflowai-learn-more) [Explore
Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=explore-teams)

  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)

##### Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you
use most.

[ Learn more about Collectives ](/collectives)

**Teams**

Q&A for work

Connect and share knowledge within a single location that is structured and
easy to search.

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Powermock with Mockito - dependencies issue](/questions/61208743/powermock-
with-mockito-dependencies-issue)

[ Ask Question ](/questions/ask)

Asked 4 years, 3 months ago

Modified [4 years, 3 months ago](?lastactivity ""2020-04-15 06:40:00Z"")

Viewed 10k times

1

[](/posts/61208743/timeline ""Show activity on this post."")

Thanks for help :)

  * [junit](/questions/tagged/junit ""show questions tagged 'junit'"")
  * [mockito](/questions/tagged/mockito ""show questions tagged 'mockito'"")
  * [powermock](/questions/tagged/powermock ""show questions tagged 'powermock'"")

[Share](/q/61208743 ""Short permalink to this question"")

[Improve this question](/posts/61208743/edit)

Follow

asked Apr 14, 2020 at 13:20

[![Witt's user
avatar](https://www.gravatar.com/avatar/b8f4ad4cefaaa999a1611ffd559df31b?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/10310031/witt)

[Witt](/users/10310031/witt)Witt

24322 gold badges44 silver badges1212 bronze badges

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/61208743/powermock-with-mockito-
dependencies-issue?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/61222749/timeline ""Show activity on this post."")

when you add any dependencies, do check complied dependencies that will get
added

for ex - if you are adding powermock-api-mockito version - 1.7.4

<https://mvnrepository.com/artifact/org.powermock/powermock-api-
mockito2/2.0.2>

Always choose a stable version and most used version, which you did correctly
, go to above url and see as shown below

[![enter image description
here](https://i.sstatic.net/9MsNK.jpg)](https://i.sstatic.net/9MsNK.jpg)

scroll down on page - you will see that it is automatically adding - below
dependancies

[![enter image description
here](https://i.sstatic.net/rmOiw.jpg)](https://i.sstatic.net/rmOiw.jpg)

Now I think it is easy for you to find out dependencies.",litemall,project.dependencies.dependency_mockito-core.scope,UNKNOWN,test,maven,pom.xml,project.dependencies.dependency_powermock-api-mockito.scope,UNKNOWN,test,maven,pom.xml,Libraries,Dependency Scope,"{
    ""plan"": ""To evaluate the dependencies between project.dependencies.dependency_mockito-core.scope and project.dependencies.dependency_powermock-api-mockito.scope, first check the Maven dependencies in the pom.xml file. Identify the scopes of both dependencies and verify if they have the same value, which is 'test' in this case. Since both dependencies are specified in the same configuration file (pom.xml), it is necessary to analyze their interdependence. Check if one dependency is used by the other or if they are independent modules with separate functionalities."",
    ""rationale"": ""The configuration options project.dependencies.dependency_mockito-core.scope and project.dependencies.dependency_powermock-api-mockito.scope are specified in the same configuration file (pom.xml) and have the same value 'test'. However, this does not create a dependency between these Maven dependencies. Each Maven dependency independently defines its scope, and they do not have any interdependence due to their separate functionalities."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The configuration options seem to be related to the Maven build process, specifically the `maven-resources-plugin`. The `id` values of the `execution` elements in both POM files are identical (`copy-resources`). This suggests that there might be a dependency between these configurations, as they share the same identifier. However, without further analysis, it's unclear how this shared identifier affects their behavior.","[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

/./wagon/index.html ""Wagon"")
  * ASF
  * [How Apache Works](https://www.apache.org/foundation/how-it-works.html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

## Copying project dependencies

Project dependencies are the dependencies declared in your pom. To copy them
with their transitive dependencies, use the `dependency:copy-dependencies`
mojo and configure the plugin like the sample below:

    
    
    <project>
      [...]
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.7.1</version>
            <executions>
              <execution>
                <id>copy-dependencies</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>
                  <overWriteReleases>false</overWriteReleases>
                  <overWriteSnapshots>false</overWriteSnapshots>
                  <overWriteIfNewer>true</overWriteIfNewer>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      [...]
    </project>

### Excluding transitive dependencies

As mentioned, [transitive
dependencies](https://maven.apache.org/guides/introduction/introduction-to-
dependency-mechanism.html) are copied by default. However, they can also be
excluded by setting the `excludeTransitive` property to **true**.

Now that we have a POM, some application sources, and some test sources you
are probably asking...

## How do I compile my application sources?

Change to the directory where `pom.xml` is created by archetype:generate and
execute the following command to compile your application sources:

    
    
    mvn compile

Upon executing this command you should see output like the following:

    
    
    [INFO] Scanning for projects...
    [INFO]
    [INFO] ----------------------< com.mycompany.app:my-app >----------------------
    [INFO] Building my-app 1.0-SNAPSHOT
    [INFO] --------------------------------[ jar ]---------------------------------
    [INFO]
    [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ my-app ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] skip non existing resourceDirectory <dir>/my-app/src/main/resources
    [INFO]
    [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ my-app ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 1 source file to <dir>/my-app/target/classes
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time:  0.899 s
    [INFO] Finished at: 2020-07-12T11:31:54+01:00
    [INFO] ------------------------------------------------------------------------

The first time you execute this (or any other) command, Maven will need to
download all the plugins and related dependencies it needs to fulfill the
command. From a clean installation of Maven, this can take quite a while (in
the output above, it took almost 4 minutes). If you execute the command again,
Maven will now have what it needs, so it won't need to download anything new
and will be able to execute the command much more quickly.

As you can see from the output, the compiled classes were placed in
`${project.basedir}/target/classes`, which is another standard convention
employed by Maven.

Making a JAR file is straight forward enough and can be accomplished by
executing the following command:

    
    
    mvn package

You can now take a look in the `${project.basedir}/target` directory and you
will see the generated JAR file.

Now you'll want to install the artifact you've generated (the JAR file) in
your local repository (`${user.home}/.m2/repository` is the default location).
For more information on repositories you can refer to our [Introduction to
Repositories](../introduction/introduction-to-repositories.html) but let's
move on to installing our artifact! To do so execute the following command:

    
    
    mvn install

Upon executing this command you should see the following output:

    
    
    [INFO] Scanning for projects.
    [INFO]
    [INFO] ----------------------< com.mycompany.app:my-app >----------------------
    [INFO] Building my-app 1.0-SNAPSHOT
    [INFO] --------------------------------[ jar ]---------------------------------
    [INFO]
    [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ my-app ---
    .
    [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ my-app ---
    [INFO] Nothing to compile - all classes are up to date
    [INFO]
    [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ my-app ---
    .
    [INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ my-app ---
    [INFO] Nothing to compile - all classes are up to date
    [INFO]
    [INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ my-app ---
    [INFO]
    [INFO] -------------------------------------------------------
    [INFO]  T E S T S
    [INFO] -------------------------------------------------------
    [INFO] Running com.mycompany.app.AppTest
    [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - in com.mycompany.app.AppTest
    [INFO]
    [INFO] Results:
    [INFO]
    [INFO] Tests run: 1,

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.",litemall,project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.id,ID,copy-resources,maven,litemall-all-war/pom.xml,project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.id,ID,copy-resources,maven,litemall-all/pom.xml,Libraries,Maven Plugins,"{
    ""plan"": ""1. Identify the purpose of the 'id' element in Maven: it uniquely identifies an execution within a plugin. 2. Check if both configurations have the same value for 'id', which is 'copy-resources'. 3. Since the values are equal, evaluate whether the executions with this id depend on each other across different modules (litemall-all-war and litemall-all). 4. If the executions are related or have a similar purpose, consider them as dependent."",
    ""rationale"": ""The 'id' element in Maven is used to uniquely identify an execution within a plugin. Since both configurations have the same value for 'id', which is 'copy-resources', it implies that these executions serve a similar purpose across different modules. Therefore, they depend on each other due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options scripts.dev and scripts.serve have the same value, which is vue-cli-service serve. This suggests that they might be related or dependent on each other, as they share the same command.","You can access the binary directly as `vue-cli-service` in npm
scripts, or as `./node_modules/.bin/vue-cli-service` from the terminal.

This is what you will see in the `package.json` of a project using the default
preset:

    
    
    {
      ""scripts"": {
        ""serve"": ""vue-cli-service serve"",
        ""build"": ""vue-cli-service build""
      }
    }
    

You can invoke these scripts using either npm or Yarn:

    
    
    npm run serve
    # OR
    yarn serve
    

If you have [npx](https://github.com/npm/npx) available (should be bundled
with an up-to-date version of npm), you can also invoke the binary directly
with:

    
    
    npx vue-cli-service serve
    

TIP

You can run scripts with additional features using the GUI with the `vue ui`
command.

Here is the Webpack Analyzer from the GUI in action:

![UI Webpack Analyzer](/ui-analyzer.png)

## vue-cli-service serve #

    
    
    Usage: vue-cli-service serve [options] [entry]
    
    Options:
    
      --open         open browser on server start
      --copy         copy url to clipboard on server start
      --mode         specify env mode (default: development)
      --host         specify host (default: 0.0.0.0)
      --port         specify port (default: 8080)
      --https        use https (default: false)
      --public       specify the public network URL for the HMR client
      --skip-plugins comma-separated list of plugin names to skip for this run
    

\--copy

Copying to clipboard might not work on a few platforms. If copying was
successful, `(copied to clipboard)` is displayed next to the local dev server
URL.

The `vue-cli-service serve` command starts a dev server (based on [webpack-
dev-server](https://github.com/webpack/webpack-dev-server)) that comes with
Hot-Module-Replacement (HMR) working out of the box.

In addition to the command line flags, you can also configure the dev server
using the [devServer](./../config/#devserver) field in `vue.config.js`.

com/vuejs/vue-cli)

  * [Overview](/guide/)
  * [Installation](/guide/installation)
  * Basics

    * [Creating a Project](/guide/creating-a-project)
    * [Plugins and Presets](/guide/plugins-and-presets)
    * [CLI Service](/guide/cli-service)
      * Using the Binary
      * vue-cli-service serve
      * vue-cli-service build
      * vue-cli-service inspect
      * Checking All Available Commands
      * Skipping Plugins
      * Caching and Parallelization
      * Git Hooks
      * Configuration without Ejecting
  * Development

    * [Browser Compatibility](/guide/browser-compatibility)
    * [HTML and Static Assets](/guide/html-and-static-assets)
    * [Working with CSS](/guide/css)
    * [Working with Webpack](/guide/webpack)
    * [Modes and Environment Variables](/guide/mode-and-env)
    * [Build Targets](/guide/build-targets)
    * [Deployment](/guide/deployment)
    * [Troubleshooting](/guide/troubleshooting)

⚠️ Vue CLI is in Maintenance Mode!

For new projects, it is now recommended to use [`create-
vue`](https://github.com/vuejs/create-vue) to scaffold
[Vite](https://vitejs.dev)-based projects. Also refer to the [Vue 3 Tooling
Guide](https://vuejs.org/guide/scaling-up/tooling.html) for the latest
recommendations.

# CLI Service #

## Using the Binary #

Inside a Vue CLI project, `@vue/cli-service` installs a binary named `vue-cli-
service`. You can access the binary directly as `vue-cli-service` in npm
scripts, or as `./node_modules/.bin/vue-cli-service` from the terminal.

In addition to the command line flags, you can also configure the dev server
using the [devServer](./../config/#devserver) field in `vue.config.js`.

`[entry]` in the CLI command is defined as _the entry file_ (default:
`src/main.js` or `src/main.ts` in TypeScript project), not _an additional
entry file_. If you overwrite the entry in the CLI, then the entries from
`config.pages` are no longer considered, which may cause an error.

## vue-cli-service build #

    
    
    Usage: vue-cli-service build [options] [entry|pattern]
    
    Options:
    
      --mode         specify env mode (default: production)
      --dest         specify output directory (default: dist)
      --modern       build app targeting modern browsers with auto fallback
      --target       app | lib | wc | wc-async (default: app)
      --formats      list of output formats for library builds (default: commonjs,umd,umd-min)
      --inline-vue   include the Vue module in the final bundle of library or web component target
      --name         name for lib or web-component mode (default: ""name"" in package.json or entry filename)
      --filename     file name for output, only usable for 'lib' target (default: value of --name),
      --no-clean     do not remove the dist directory contents before building the project
      --report       generate report.html to help analyze bundle content
      --report-json  generate report.json to help analyze bundle content
      --skip-plugins comma-separated list of plugin names to skip for this run
      --watch        watch for changes
    

`vue-cli-service build` produces a production-ready bundle in the `dist/`
directory, with minification for JS/CSS/HTML and auto vendor chunk splitting
for better caching. The chunk manifest is inlined into the HTML.

There are a few useful flags:

  * `--modern` builds your app using [Modern Mode](/guide/browser-compatibility#modern-mode), shipping native ES2015 code to modern browsers that support it, with auto fallback to a legacy bundle.

  * `--target` allows you to build any component(s) inside your project as a library or as web components. See [Build Targets](/guide/build-targets) for more details.

* `--target` allows you to build any component(s) inside your project as a library or as web components. See [Build Targets](/guide/build-targets) for more details.

  * `--report` and `--report-json` will generate reports based on your build stats that can help you analyze the size of the modules included in your bundle.

## vue-cli-service inspect #

    
    
    Usage: vue-cli-service inspect [options] [...paths]
    
    Options:
    
      --mode    specify env mode (default: development)
    

You can use `vue-cli-service inspect` to inspect the webpack config inside a
Vue CLI project. See [Inspecting Webpack Config](/guide/webpack#inspecting-
the-project-s-webpack-config) for more details.

## Checking All Available Commands #

Some CLI plugins will inject additional commands to `vue-cli-service`. For
example, `@vue/cli-plugin-eslint` injects the `vue-cli-service lint` command.
You can see all injected commands by running:

    
    
    npx vue-cli-service help
    

You can also learn about the available options of each command with:

    
    
    npx vue-cli-service help [command]
    

## Skipping Plugins #

You can exclude specific plugins when running a command by passing the name of
the plugin to the `--skip-plugins` option:

    
    
    npx vue-cli-service build --skip-plugins pwa
    

TIP

This option is available for _every_ `vue-cli-service` command, including
custom ones added by other plugins.

You can skip multiple plugins by passing their names as a comma-separated list
or by repeating the argument:

    
    
    npx vue-cli-service build --skip-plugins pwa,apollo --skip-plugins eslint
    

Plugin names are resolved the same way they are during install, as described
[here](/guide/plugins-and-presets#installing-plugins-in-an-existing-project)

    
    
    # these are all equivalent
    npx vue-cli-service build --skip-plugins pwa
    
    npx vue-cli-service build --skip-plugins @vue/pwa
    
    npx vue-cli-service build --skip-plugins @vue/cli-plugin-pwa
    

## Caching and Parallelization #

  * `cache-loader` is enabled for Vue/Babel/TypeScript compilations by default. Files are cached inside `node_modules/.cache` \- if running into compilation issues, always try deleting the cache directory first.

[ Vue CLI](/)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/guide/cli-service)

  * [简体中文](/zh/guide/cli-service)

  * [Русский](/ru/guide/cli-service)

[GitHub ](https://github.com/vuejs/vue-cli)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/guide/cli-service)

  * [简体中文](/zh/guide/cli-service)

  * [Русский](/ru/guide/cli-service)

[GitHub ](https://github.",litemall,scripts.dev,COMMAND,vue-cli-service serve,nodejs,litemall-vue/package.json,scripts.serve,COMMAND,vue-cli-service serve,nodejs,litemall-vue/package.json,Others,Commands,"{
    ""plan"": ""1. Identify the configuration options: scripts.dev and scripts.serve, both of type COMMAND with value vue-cli-service serve in litemall-vue/package.json of technology nodejs.\n2. Analyze their purposes: scripts.dev is used for development mode, while scripts.serve is used for serving the application.\n3. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options scripts.dev and scripts.serve have the same value 'vue-cli-service serve', but they serve different purposes in the development lifecycle of the application. Therefore, they do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration option 'project.build.finalName' in the pom.xml file determines the final name of the Maven project, which is 'litemall'. The configuration option 'services.litemall.container_name' in the docker-compose.yml file sets the container name to 'litemall'. Since both options have the same value, it is likely that the container name depends on the final name of the Maven project.","But with the new industry standard most of the time you will work on apps made
by multiple services that have dependencies between them, frontend, backend,
database, caching, queue, and so on.

##  Project architecture

[![Image description](https://media.dev.to/cdn-
cgi/image/width=800%2Cheight=%2Cfit=scale-
down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-
uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feeofwqcg74xi66tizk3b.png)](https://media.dev.to/cdn-
cgi/image/width=800%2Cheight=%2Cfit=scale-
down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-
uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feeofwqcg74xi66tizk3b.png)

The image above describes the architecture of the project we want to
containerize, as you can see we have four different services

  * **Front:** a single-page app built with [React](https://fr.react.dev/)
  * **Back:** a graphQL server built with [Nestjs](https://nestjs.com/)
  * **Database:** a [MySQL](https://www.mysql.com/fr/) db
  * **Cache:** a [Redis](https://redis.io/) cache

If you want to follow along you have to download the source code
[here](https://github.com/Marius-s-Aricles/docker-compose-
introduction/tree/source).

##  What is docker compose?

Docker Compose is a tool for defining and running multi-container
applications. Compose simplifies the control of your entire application stack,
making it easy to manage services, networks, and volumes in a single,
comprehensible YAML configuration file.

##  How to create a stack?

First, you have to create a Dockerfile for each custom service (service for
which you are responsible for building the image), for our current project, we
have to create a Dockerfile for the front and back services.

dockerfile: files/docker/api/Dockerfile
        ports:
          - ""127.0.0.1:5000:5000""
        networks:
          - stack-network
      ui:
        container_name: ui
        # Files referenced by the ""healthcheck"" or ""command"" directives must be either added
        # (via the ""ADD"" command in the Dockerfile) or attached (via the ""volumes"" directive
        # in the docker-compose.yml file)
        volumes:
          - ""${PWD}/files/src/ui/ui.sh:/opt/ui/ui.sh""
          - ""${PWD}/wait-for-rest.sh:/opt/wait-for-rest.sh""
        # The container will be marked as ""healthy"" only after the token is retrieved
        # and stored in the ""tokenfile"" file in the working folder.
        # Otherwise it will keep polling the file system indefinitely
        healthcheck:
          test: ""while [[ ! -f tokenfile ]]; do sleep 5; done""
          interval: 5s
          timeout: 1m
        depends_on:
          - api
        # The ""command"" directive overrides any ""CMD"" directive in the relevant Dockerfile,
        # when available. Here, only this command is available. It uses a script that polls
        # every 20 seconds during 80 seconds the api service in search of an http-status == 200.
        # When obtained, a token should be retrieved and then that is stored in disk. The
        # container sleeps for 5 minutes before exiting the process
        command: /bin/sh -c ""(/bin/bash /opt/wait-for-rest.sh http://api:5000/token 200 20 80) && /bin/bash /opt/ui/ui.sh || exit 1""
        build:
          context: .
          dockerfile: files/docker/ui/Dockerfile
        networks:
          - stack-network
    networks:
      stack-network:
      
  
---|---  
`

### Deploying the composed services

Refer to the [README](https://github.com/CarolinaFernandez/docker-
tests/blob/master/compose/dependencies/README.md) file for instructions on how
to build the images and run the services defined above. More information can
be found in the [Docker-compose
reference](https://docs.docker.com/compose/reference/up/).

More information can
be found in the [Docker-compose
reference](https://docs.docker.com/compose/reference/up/).

Quickly put, it looks like this:

__

    
    
    1
    2
    3
    4
    5
    6
    7
    8
    

|

    
    
    # Pull images defined in the docker-compose.yml file or in the referenced
    # Dockerfile files
    docker-compose pull
    # Run the services based on the specific docker-compose.yml file: first, build
    # the images as defined in the Dockerfile files and recreate these even if
    # nothing did change from last build. Then, start the containers and do that
    # in daemon/background/detached mode (no output will be shown in the log)
    docker-compose -f docker-compose.yml up -d --build --force-recreate
      
  
---|---  
`

After ~40 seconds, when running `docker ps -a` you will see how the “api”
container transitions to “healthy” and immediately you will be able to fetch
tokens. Just after that, the “ui” container will fetch a token and store it
inside its filesystem; then transition right away to “healthy” and wait for 5
minutes before exiting.

  * __[docker](/blog/tags/#docker)
  * __deployment

Please enable JavaScript to view the [comments powered by
Disqus.](//disqus.com/?ref_noscript)

[ ![Website logo \(a fox\)](/img/fox.png) ](/)

Carolina Fernandez

_Technical guides, publications and snippets for easy deployment and
development_

  * [LinkedIn](https://linkedin.com/in/cfermart)
  * [GitHub](https://github.com/CarolinaFernandez)
  * [Twitter](https://twitter.com/cfermart)
  * [ORCID](https://orcid.org/0000-0003-1865-7177)
  * [Google Scholar](https://scholar.google.es/citations?user=JgfJktkAAAAJ)

(C) Untitled.

Design: [HTML5 UP](http://html5up.net).

Use a Makefile. docker-compose is not designed to build chains of images, it's
designed for running containers.

You might also be interested in [dobi](http://dnephin.github.io/dobi/) which
is a build-automation tool (like make) designed to work with docker images and
containers.

Disclaimer: I'm the author of **dobi**

[Share](/a/37945466 ""Short permalink to this answer"")

[Improve this answer](/posts/37945466/edit)

Follow

[edited Sep 5, 2016 at 21:56](/posts/37945466/revisions ""show all edits to
this post"")

answered Jun 21, 2016 at 13:12

[![dnephin's user
avatar](https://www.gravatar.com/avatar/996ae88559e4c401582326971c77c75a?s=64&d=identicon&r=PG)](/users/444646/dnephin)

[dnephin](/users/444646/dnephin)dnephin

27.5k99 gold badges5656 silver badges4545 bronze badges

0

Add a comment  | 

2

[](/posts/75989056/timeline ""Show activity on this post."")

I would recommend to make your dockerfile a multi stage build:

    
    
    FROM ubuntu as builder
    ...
    
    
    FROM builder as my_target_1
    ...
    CMD my_cmd_1
    
    FROM builder as my_target_2
    ...
    CMD my_cmd_2
    

If your `builder` is very large, but you only need a couple of files from it,
you could also do:

    
    
    FROM ubuntu as builder
    ...
    
    FROM alpine as my_target_1
    COPY --from=builder /path/to/exec /root/exec
    ...
    COM my_cmd_1
    

Then, in your docker compose file, you can do:

    
    
    services:
        my_target_1:
            build:
                dockerfile: path/to/Dockerfile
                target: my_target_1
        my_target_2:
            builder:
                dockerfile: path/to/Dockerfile
                target: my_target_2
    

If you really want the `builder` to also be part of your dockerfile (e.g.

/basic-certificate.cert
    
    volumes:
      db-data: 
      cache-data:
    
    networks:
      public: 
      private: 
        internal: true
    

Enter fullscreen mode Exit fullscreen mode

##  Conclusion

We have come to the end of this article that aimed to show how to containerize
a multi-container app using docker-compose. You can find the final version of
the project here. Don’t hesitate to check the compose documentation there are
a lot of fun things to discover like [working with multiple compose
files](https://docs.docker.com/compose/multiple-compose-files/) or [docker-
compose watch](https://docs.docker.com/compose/file-watch/).

I hope you enjoy this article as much as I enjoyed writing it.

Feel free to reach out to me on [LinkedIn](https://www.linkedin.com/in/marius-
vincent-niemet-928b48182/) or Twitter.

##  Top comments (0)

Subscribe

![pic](https://media.dev.to/cdn-cgi/image/width=256,height=,fit=scale-
down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-
uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png)

Personal Trusted User

[ Create template ](/settings/response-templates)

Templates let you quickly answer FAQs or store snippets for re-use.

Submit Preview [Dismiss](/404.html)

[Code of Conduct](/code-of-conduct) • [Report abuse](/report-abuse)

Are you sure you want to hide this comment? It will become hidden in your
post, but will still be visible via the comment's permalink.

Hide child comments as well

Confirm

For further actions, you may consider blocking this person and/or [reporting
abuse](/report-abuse)

## Read next

[ !",litemall,services.litemall.container_name,NAME,litemall,docker-compose,docker/docker-compose.yml,project.build.finalName,NAME,litemall,maven,litemall-all-war/pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Identify the purpose of each configuration option: services.litemall.container_name is used for container orchestration in Docker Compose, while project.build.finalName is used to specify the final name of the Maven build artifact.\n2. Evaluate whether the values of both options are equal and if they serve the same purpose.\n3. Determine if a dependency exists between the two options."",
    ""rationale"": ""The configuration option services.litemall.container_name and project.build.finalName have the same value 'litemall', but they serve different purposes in different technologies (Docker Compose and Maven). Therefore, they do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Litemall is a simple shopping mall system that implements a complete frontend and backend project based on existing open source projects, such as Spring Boot, MyBatis, MySQL, Maven, Vue, Docker, and Docker Compose.
The architecture of the project consists of four systems, nine modules, and one backend database.

In the litemall project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of litemall is as follows:

litemall/
├── deploy/
│   ├── bin/
│   ├── db/
│   ├── litemall/
│   └── util/
├── docker/
│   ├── bin/
│   ├── db/
│   ├── docker-compose.yml
│   ├── litemall/
│   └── util/
├── litemall-admin/ # management of frontend modules
│   ├── babel.config.js
│   ├── build/
│   ├── jest.config.js
│   ├── jsconfig.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-admin-api/ # background service module of the administration
│   ├── pom.xml
│   └── src/
├── litemall-all/
│   ├── pom.xml
│   └── src/
├── litemall-all-war/
│   ├── pom.xml
│   └── src/
├── litemall-core/ # provides general services
│   ├── pom.xml
│   └── src/
├── litemall-db/ # provides database access services
│   ├── mybatis-generator/
│   ├── pom.xml
│   ├── sql/
│   └── src/
├── litemall-vue/ # frontend module
│   ├── babel.config.js
│   ├── package.json
│   ├── public/
│   ├── src/
│   └── vue.config.js
├── litemall-wx/
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config/
│   ├── lib/
│   ├── pages/
│   ├── project.config.json
│   ├── project.private.config.json
│   ├── sitemap.json
│   ├── static/
│   └── utils/
├── litemall-wx-api/
│   ├── pom.xml
│   └── src/
├── pom.xml
└── renard-wx/
    ├── app.js
    ├── app.json
    ├── app.wxss
    ├── components/
    ├── config/
    ├── images/
    ├── lib/
    ├── pages/
    ├── project.config.json
    ├── sitemap.json
    ├── static/
    └── utils/"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.groupId with value com.macro.mall in mall-common/pom.xml and project.parent_mall-swarm.groupId with value com.macro.mall in mall-portal/pom.xml have identical values. According to Maven's naming conventions, a groupId uniquely identifies a project across all projects and should follow Java package name rules. The identical values suggest that these two projects might be related or dependent on each other.","12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.",mall-swarm,project.groupId,NAME,com.macro.mall,maven,mall-common/pom.xml,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: com.macro.mall in mall-common/pom.xml and com.macro.mall in mall-portal/pom.xml.\n2. Determine if the groupId values are identical across both modules.\n3. If identical, conclude that a dependency exists due to value equality."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as they specify the same group ID, which identifies all modules in the project."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion with value 4.0.0 in both pom.xml files do not have a direct dependency due to their identical values. The value 4.0.0 is a standard version for Maven POM files, and it does not imply any specific relationship between the two projects.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-common/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-portal/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in mall-common/pom.xml and mall-portal/pom.xml, follow these steps: 1) Verify that both POM files have the same model version, which is 4.0.0. 2) Check if the Maven projects are aggregated using a parent POM or modules. If so, ensure that the model version is consistent across all modules."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. The groupId values are identical, indicating a potential hierarchical relationship between the projects. This suggests that project.parent_mall-swarm.groupId might be influencing or dependent on project.dependencyManagement.dependencies.dependency_mall-mbg.groupId, or vice versa.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

For example you would have the Maven compiler plugin configured out of the box
with Java 8 and UTF-8 (that you can of course redefined in your child project)
:

    
    
    <properties>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <resource.delimiter>@</resource.delimiter>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>
    

Additionally, some other plugins potential useful by a Spring Boot project
will also be defined in the super pom and be inherited by your project such as
:

    
    
    <pluginManagement>
      <plugins>
         ...
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <mainClass>${start-class}</mainClass>
            </configuration>
        </plugin>
        ...
      </plugins>
    </pluginManagement>
    

Note that a parent pom may define `dependencies`, directly inherited by the
child projects but not necessary.  
For example the `spring-boot-starter-parent` doesn't define any `dependency`
directly inherited by child projects but instead of define `dependency` in
`<dependencyManagement><dependencies>`.  
It means that children of this parent pom may use the dependencies but they
have to explicitly state that in `dependencies`.  
For example :

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
    

Note that the version is not valued as inherited.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>use</artifactId>
      <version>1.0.0</version>
      <packaging>jar</packaging>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>bom</artifactId>
            <version>1.0.0</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project1</artifactId>
        </dependency>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project2</artifactId>
        </dependency>
      </dependencies>
    </project>
    

Finally, when creating projects that import dependencies, beware of the
following:

  * Do not attempt to import a POM that is defined in a submodule of the current POM. Attempting to do that will result in the build failing since it won't be able to locate the POM.
  * Never declare the POM importing a POM as the parent (or grandparent, etc) of the target POM. There is no way to resolve the circularity and an exception will be thrown.
  * When referring to artifacts whose POMs have transitive dependencies, the project needs to specify versions of those artifacts as managed dependencies. Not doing so results in a build failure since the artifact may not have a version specified. (This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-demo/pom.xml,project.dependencyManagement.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: project.parent_mall-swarm.groupId and project.dependencyManagement.dependencies.dependency_mall-mbg.groupId.\n2. Compare the values to determine if they are equal.\n3. If the values are equal, evaluate whether the modules are part of the same project or have a hierarchical relationship."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. Since both configuration options have the same groupId value 'com.macro.mall', it indicates that they belong to the same project or have a hierarchical relationship, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value equality, as both have the same version number (1.0-SNAPSHOT). This suggests that the mall-gateway and mall-mbg modules are part of a multi-module project, where the parent project manages the versions of its child modules. The usage of ${project.version} in the pom.xml files implies that the versions are inherited from the parent project.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?",mall-swarm,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-gateway/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-mbg/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""To determine the dependency between project.parent_mall-swarm.version in mall-gateway/pom.xml and project.version in mall-mbg/pom.xml, follow these steps: 1) Identify the values of both configuration options, which are version:1.0-SNAPSHOT. 2) Evaluate if the values are equal, which is true in this case. 3) Since Maven uses a hierarchical project structure, and the parent module's version can influence the child modules' versions, a dependency exists between these two configuration options."",
    ""rationale"": ""The project.parent_mall-swarm.version in mall-gateway/pom.xml and project.version in mall-mbg/pom.xml have the same value, which is 1.0-SNAPSHOT. In Maven's hierarchical project structure, the parent module's version can affect the child modules' versions. Therefore, a dependency exists between these two configuration options due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that Maven projects use the `groupId` value to identify dependencies. If two projects share the same `groupId`, it implies a relationship between them. In this case, if the `groupId` value in the `mall-gateway` project's dependency matches the `groupId` value of the `mall-search` project, it suggests that the `mall-gateway` project depends on the `mall-search` project or vice versa.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

One solution to this new requirement is to define dependency management and
versioning at the `app1` and `app2` projects.

So, `app1` POM can include this for version 1.

    
    
    <properties>          
    <report.version>1.0.0</report.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.protectsoft.company</groupId>
          <artifactId>jasper-report-ejb</artifactId>
          <version>${report.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>

  

And `app2` POM includes the following:

    
    
    <properties>          
    <report.version>2.0.0</report.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.protectsoft.company</groupId>
          <artifactId>jasper-report-ejb</artifactId>
          <version>${report.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>

  

`App1` and `App2` are responsible and in control of the context of the sub-
module projects. Furthermore, changes can take place more easily.

## Last But Not Least, the Profile Section

At this point, we have to mention the
[profile](https://maven.apache.org/guides/introduction/introduction-to-
profiles.html) section and its use. A lot of the staff being said above can be
grouped into different profiles. For example, we can have one profile for the
**X** version of our commons library and another profile for the **Y** version
of commons. Another example would be two have different profiles for the
**environments** like **test** environment and a **demo** environment.

We are going to modify the parent root `pom.xml` and add two profiles. One is
versioning for Java EE 7 and the other for Java EE 8.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

So, the QA department wants everyone working in any project to use the JUnit 4
version with the test scope, which defines what is needed only in test phases
and not the normal use of the app). This is done in the `company-root`pom.xml

First, set the desired version for the JUnit in the `properties ` section.

    
    
    <properties>     
        <junit.version>4.12</junit.version>
    </properties>

  

And then, the dependency:

    
    
    <dependencyManagement>
        <dependencies>      
          <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
          </dependency>
        </dependencies>      
    </dependencyManagement>    

  

With the above declaration, everyone will be using JUnit 4.12 with a test
scope.

The declaration of JUnit on child projects is as simple as that.

    
    
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
    </dependency>

  

Now, let's assume the DevOps engineer wants to test everything with the new
JUnit 5 Framework. The only action required for him would be to change the
property version on company-root pom from 4.12 to 5.0 and run the tests.

More info on the Maven dependency mechanism can be found
[here](https://maven.apache.org/guides/introduction/introduction-to-
dependency-mechanism.html).

### Versioning

Let's not forget the versioning numbers and the role they have to play:

![Image title](https://dz2cdn1.dzone.com/storage/temp/11997985-version.png)

Also, let's take a moment for a quick recap:

  * Bug fix: just bug fixes and related stuff.
  * Minor: Improvements, new features, deprecation notices, don't break user code (backward-compatibility). Same API.
  * Major: new features, to complete API changes.

More info for software versioning can be found [here](https://semver.org/)

### A Common Project

In the next step, we want to create a base framework with core functionality
or a library with common utilities for all of our projects to use, extend, or
explore whatever the usage is.",mall-swarm,project.dependencies.dependency_mall-common.groupId,NAME,com.macro.mall,maven,mall-gateway/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""To evaluate the dependency between the configuration options, we need to analyze the Maven project structure and the roles of the groupId in the pom.xml files. Firstly, identify the groupId 'com.macro.mall' in mall-gateway/pom.xml and mall-search/pom.xml. Since both modules belong to the same project, they should have the same groupId to ensure consistency and uniqueness across all modules. Secondly, verify that the groupId is used to define the dependency between the modules. If the groupId is the same, it indicates a dependency between the configuration options."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as both mall-gateway and mall-search are specific modules in the same project and therefore need to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options have identical values (com.macro.mall) which suggests a dependency between the two projects. In Maven, the groupId is used to identify a project uniquely across all projects, and it follows the package name rules. The similarity in values implies that mall-mbg and mall-portal are related projects, with mall-mbg being a submodule of mall-portal.","12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-mbg/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: project.parent_mall-swarm.groupId in mall-mbg/pom.xml and project.groupId in mall-portal/pom.xml.\n2. Compare the values of both groupIds: com.macro.mall.\n3. Evaluate whether the values are equal, indicating a dependency between the two configuration options."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-mbg and mall-portal are specific modules in the same project and therefore need to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,7.0,FP,False,"The configuration options project.parent_mall-swarm.version and project.version have the same value '1.0-SNAPSHOT'. This suggests that they might be related, but it's not a definitive indication of dependency. The actual dependency depends on the Maven project structure and the usage of ${project.version} in the pom.xml files.","Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?",mall-swarm,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-auth/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-monitor/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""To determine the dependency between project.parent_mall-swarm.version in mall-auth/pom.xml and project.version in mall-monitor/pom.xml, follow these steps: 1) Identify the values of both configuration options, which are version:1.0-SNAPSHOT. 2) Evaluate if the values are equal, which is true in this case. 3) Since Maven uses a hierarchical project structure, and parent modules can manage versions for child modules, it's likely that project.parent_mall-swarm.version influences project.version. Therefore, a dependency exists between these configuration options."",
    ""rationale"": ""The 'project.parent_mall-swarm.version' in mall-auth/pom.xml specifies the version of the parent module, which is used to manage versions for child modules. The 'project.version' in mall-monitor/pom.xml defines the version of the module itself. Since both have the same value (1.0-SNAPSHOT), it's likely that the parent module's version influences the child module's version, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The groupId values are identical, which suggests a possible dependency between the two projects. The Maven naming convention guidelines recommend using a hierarchical structure for groupIds, with sub-projects appending their identifiers to the parent project's groupId. In this case, the identical values may indicate that mall-admin and mall-search are related projects or modules within a larger project.","By this question, interviewer wants to know about your basic knowledge on Maven and pom.xml file. I find recently one nice blog post on it with real life example. Just sharing the link here. Hope it will help others. [Difference between groupId and artifactId in pom.xml](https://industechie.com/index.php/2020/11/26/what-is-the-difference-between-groupid-and-artifactid-in-maven/)

- [Aritra](/users/1936953/aritra ""3 reputation"")

Commented Nov 26, 2020 at 20:11

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/39185798/what-is-the-difference-
between-artifactid-and-groupid-in-pom-xml?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

44

[](/posts/39185833/timeline ""Show activity on this post."")

From maven.apache.org, [Naming
Conventions](https://maven.apache.org/guides/mini/guide-naming-
conventions.html):

> `artifactId` is the name of the jar without version. If you created it then
> you can choose whatever name you want with lowercase letters and no strange
> symbols. If it's a third party jar you have to take the name of the jar as
> it's distributed. eg. `maven`, `commons-math`
>
> `groupId` will identify your project uniquely across all projects, so we
> need to enforce a naming schema. It has to follow the package name rules,
> what means that has to be at least as a domain name you control, and you can
> create as many subgroups as you want. Look at More information about package
> names. eg. `org.apache.maven`, `org.apache.commons`

[Share](/a/39185833 ""Short permalink to this answer"")

[Improve this answer](/posts/39185833/edit)

Follow

answered Aug 27, 2016 at 21:17

[!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

You can check this in google repo (url:
<https://maven.google.com/web/index.html?q=activity-
compose#androidx.activity:activity-compose:1.7.1>) screenshot below,

[![enter image description
here](https://i.sstatic.net/yfsxZ.jpg)](https://i.sstatic.net/yfsxZ.jpg)

The link of actual artifact:
<https://dl.google.com/android/maven2/androidx/activity/activity-
compose/1.7.1/activity-compose-1.7.1.aar>

[Share](/a/76159152 ""Short permalink to this answer"")

[Improve this answer](/posts/76159152/edit)

Follow

answered May 2, 2023 at 21:59

[![Uddhav P. Gautam's user
avatar](https://i.sstatic.net/06tSZ.jpg?s=64)](/users/7232295/uddhav-p-gautam)

[Uddhav P. Gautam](/users/7232295/uddhav-p-gautam)Uddhav P. Gautam

7,58133 gold badges5050 silver badges6767 bronze badges

Add a comment  | 

0

[](/posts/58443001/timeline ""Show activity on this post."")

The main difference between groupId and artifactId in Maven is that the
groupId specifies the id of the project group while the artifactId specifies
the id of the project.

It is required to use third party libraries when developing a project. The
programmer can download and add these third-party libraries to the project,
but it is difficult to update them later. Maven provides a solution to this
issue. It helps to include all the dependencies required for the project.
Moreover, the programmer can specify the required dependencies in the POM.XML
file. It has the configuration information to build the project. Furthermore,
this file consists of several XML elements, and two of them are groupId and
artifactId. example groupId : com.test.java (similar to package name)
artifactId : javaproject(project or module name)

[Share](/a/58443001 ""Short permalink to this answer"")

[Improve this answer](/posts/58443001/edit)

Follow

answered Oct 18, 2019 at 2:06

[!

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.",mall-swarm,project.groupId,NAME,com.macro.mall,maven,mall-admin/pom.xml,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""Evaluate the groupId values in both pom.xml files. Since they have the same value 'com.macro.mall', it is likely that they are related and part of the same project. Check if mall-admin and mall-search are modules within the same project, and if so, ensure that their groupIds match to maintain consistency."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. Since both configuration options have the same value, it indicates that they are part of the same project, and therefore, their groupIds need to be the same to establish a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Exclusive Dependencies,llama3:70b,config2,8.0,FP,False,"The dependency between the configuration options services.mall-admin.environment.TZ and services.mall-portal.environment.TZ exists due to their identical values 'Asia/Shanghai'. This suggests that both services are configured to use the same timezone, which may be a requirement for the application to function correctly. The value-equality implies a logical connection between these two configuration options.","7 +22,7 @@ services:  
|  |  \- /mydata/app/mall-search/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- elasticsearch:es #可以用es这个域名访问elasticsearch服务  
|  |  \- mysql:db #可以用db这个域名访问mysql服务  
Expand All | @@ -36,7 +36,7 @@ services:  
|  |  \- /mydata/app/mall-portal/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- redis:redis #可以用redis这个域名访问redis服务  
|  |  \- mongo:mongo #可以用mongo这个域名访问mongo服务  
Expand All | @@ -52,7 +52,7 @@ services:  
|  |  \- /mydata/app/mall-auth/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- nacos-registry:nacos-registry #可以用nacos-registry这个域名访问nacos服务  
|  |  mall-gateway:  
Expand All | @@ -64,7 +64,

[Unified Diff
View](https://github.githubassets.com/assets/unified-6de447b07fd7.svg)

Unified

![Split Diff
View](https://github.githubassets.com/assets/split-b930d4a1df45.svg)

Split

Hide whitespace

Apply and reload

##  There are no files selected for viewing

14 changes: 7 additions & 7 deletions  14  document/docker/docker-compose-
app.yml

Show comments

[ View file ](/macrozheng/mall-
swarm/blob/86a283521fd60e6d8679baa99e091aa0260e11e9/document/docker/docker-
compose-app.yml) Edit file  Delete file

[ Open in desktop ](https://desktop.github.com)

This file contains bidirectional Unicode text that may be interpreted or
compiled differently than what appears below. To review, open the file in an
editor that reveals hidden Unicode characters. [Learn more about bidirectional
Unicode characters](https://github.co/hiddenchars)

[ Show hidden characters ]({{ revealButtonHref }})

Original file line number | Diff line number | Diff line change  
---|---|---  
Expand Up | @@ -9,7 +9,7 @@ services:  
|  |  \- /mydata/app/mall-admin/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- mysql:db #可以用db这个域名访问mysql服务  
|  |  \- nacos-registry:nacos-registry #可以用nacos-registry这个域名访问nacos服务  
Expand All | @@ -22,7 +22,

7 +64,7 @@ services:  
|  |  \- /mydata/app/mall-gateway/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- redis:redis #可以用redis这个域名访问redis服务  
|  |  \- nacos-registry:nacos-registry #可以用nacos-registry这个域名访问nacos服务  
Expand All | @@ -77,6 +77,6 @@ services:  
|  |  \- /mydata/app/mall-monitor/logs:/var/logs  
|  |  \- /etc/localtime:/etc/localtime  
|  |  environment:  
|  |  \- 'TZ=""Asia/Shanghai""'  
|  |  \- TZ=Asia/Shanghai  
|  |  external_links:  
|  |  \- nacos-registry:nacos-registry #可以用nacos-registry这个域名访问nacos服务  
|  |  \- nacos-registry:nacos-registry #可以用nacos-registry这个域名访问nacos服务  
  
Toggle all file notes Toggle all file annotations

Add this suggestion to a batch that can be applied as a single commit. This
suggestion is invalid because no changes were made to the code. Suggestions
cannot be applied while the pull request is closed. Suggestions cannot be
applied while viewing a subset of changes. Only one suggestion per line can be
applied in a batch. Add this suggestion to a batch that can be applied as a
single commit. Applying suggestions on deleted lines is not supported. You
must change the existing code in this line in order to create a valid
suggestion. Outdated suggestions cannot be applied. This suggestion has been
applied or marked resolved. Suggestions cannot be applied from pending
reviews. Suggestions cannot be applied on multi-line comments. Suggestions
cannot be applied while the pull request is queued to merge. Suggestion cannot
be applied right now. Please check back later.

Some commits from the old base branch may be removed from the timeline, and
old review comments may become outdated.

Loading Change base

from [zhangfugui727:master](/zhangfugui727/mall-swarm/tree/master
""zhangfugui727/mall-swarm:master"")

[ Conversation 2 ](/macrozheng/mall-swarm/pull/101) [ Commits 1
](/macrozheng/mall-swarm/pull/101/commits) [ Checks 0 ](/macrozheng/mall-
swarm/pull/101/checks) [ Files changed ](/macrozheng/mall-
swarm/pull/101/files)

Open

#  修复docker-compose部署时时区设置不生效的问题  #101

Changes from **all commits**

Commits

[ Show all changes  1 commit  ](/macrozheng/mall-swarm/pull/101/files)

Select commit

[ `86a2835` 修复docker-compose部署时时区设置不生效的问题  zhangfugui727 Jan 14, 2022
](/macrozheng/mall-
swarm/pull/101/commits/86a283521fd60e6d8679baa99e091aa0260e11e9)

**File filter**

### Filter by extension

Filter by extension .yml  (1)  All 1 file type selected

* * *

Viewed files

[ Clear filters ](/macrozheng/mall-swarm/pull/101/files)

**Conversations**

Failed to load comments.  Retry

Loading

**Jump to**

Jump to file

Failed to load files.  Retry

Loading

#####  Diff view

![Unified Diff
View](https://github.githubassets.com/assets/unified-6de447b07fd7.svg)

Unified

![Split Diff
View](https://github.githubassets.com/assets/split-b930d4a1df45.svg)

Split

Hide whitespace

Apply and reload

Show whitespace

#####  Diff view

![Unified Diff
View](https://github.githubassets.com/assets/unified-6de447b07fd7.svg)

Unified

!

""html-webpack-plugin"": ""^5.1.0"",
        ""is-file-esm"": ""^1.0.0"",
        ""launch-editor-middleware"": ""^2.2.1"",
        ""lodash.defaultsdeep"": ""^4.6.1"",
        ""lodash.mapvalues"": ""^4.6.0"",
        ""mini-css-extract-plugin"": ""^2.5.3"",
        ""minimist"": ""^1.2.5"",
        ""module-alias"": ""^2.2.2"",
        ""portfinder"": ""^1.0.26"",
        ""postcss"": ""^8.2.6"",
        ""postcss-loader"": ""^6.1.1"",
        ""progress-webpack-plugin"": ""^1.0.12"",
        ""ssri"": ""^8.0.1"",
        ""terser-webpack-plugin"": ""^5.1.1"",
        ""thread-loader"": ""^3.0.0"",
        ""vue-loader"": ""^17.0.0"",
        ""vue-style-loader"": ""^4.1.3"",
        ""webpack"": ""^5.54.0"",
        ""webpack-bundle-analyzer"": ""^4.4.0"",
        ""webpack-chain"": ""^6.5.1"",
        ""webpack-dev-server"": ""^4.7.3"",
        ""webpack-merge"": ""^5.7.3"",
        ""webpack-virtual-modules"": ""^0.4.2"",
        ""whatwg-fetch"": ""^3.6.2""
      },
      ""bin"": {
        ""vue-cli-service"": ""bin/vue-cli-service.js""
      },
      ""engines"": {
        ""node"": ""^12.0.0 || >= 14.0.0""
      },
      ""peerDependencies"": {
        ""vue-template-compiler"": ""^2.0.0"",
        ""webpack-sources"": ""*""
      },
      ""peerDependenciesMeta"": {
        ""cache-loader"": {
          ""optional"": true
        },
        ""less-loader"": {
          ""optional"": true
        },",mall-swarm,services.mall-admin.environment.TZ,ENVIRONMENT,"""Asia/Shanghai""",docker-compose,document/docker/docker-compose-app.yml,services.mall-portal.environment.TZ,ENVIRONMENT,"""Asia/Shanghai""",docker-compose,document/docker/docker-compose-app.yml,Independent Components,Different Services,"{
    ""plan"": ""1. Identify the configuration options: services.mall-admin.environment.TZ and services.mall-portal.environment.TZ, both of type ENVIRONMENT with value 'Asia/Shanghai' in docker-compose-app.yml of technology docker-compose.\n2. Analyze the purpose of the TZ environment variable, which typically sets the timezone for a service.\n3. Evaluate whether the value equality ('Asia/Shanghai') indicates a dependency between the two services."",
    ""rationale"": ""The configuration options services.mall-admin.environment.TZ and services.mall-portal.environment.TZ have the same value 'Asia/Shanghai', but this does not necessarily imply a dependency between the two services. The TZ environment variable is typically used to set the timezone for a service, which is an independent setting for each service. There is no indication that one service relies on the other's timezone configuration."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion with value 4.0.0 in both mall-gateway/pom.xml and mall-monitor/pom.xml do not depend on each other due to their value equality. The value 4.0.0 is a standard version for Maven POM files, and it does not create any implicit dependency between the two projects.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-gateway/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-monitor/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in mall-gateway/pom.xml and mall-monitor/pom.xml, follow these steps: 1) Verify that both POM files have the same model version, which is 4.0.0. 2) Since Maven exclusively supports model version 4.0.0, ensure that this value is consistent across all modules to maintain compatibility."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required for all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creating a dependency based on value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.version with value 1.0-SNAPSHOT in both mall-search/pom.xml and pom.xml may indicate a dependency between the two projects. Since they share the same version number, it is possible that they are related or dependent on each other. This could be due to a common parent POM or a deliberate versioning scheme used across multiple projects.","Snapshot simply means depending on your configuration Maven will check latest
changes on a special dependency. Snapshot is unstable because it is under
development but if on a special project needs to has a latest changes you must
configure your dependency version to snapshot version. This scenario occurs in
big organizations with multiple products that these products related to each
other very closely.

[Share](/a/56912101 ""Short permalink to this answer"")

[Improve this answer](/posts/56912101/edit)

Follow

answered Jul 6, 2019 at 7:30

[![Mahdi Soltani's user
avatar](https://i.sstatic.net/lkHpe.jpg?s=64)](/users/4253500/mahdi-soltani)

[Mahdi Soltani](/users/4253500/mahdi-soltani)Mahdi Soltani

3122 bronze badges

Add a comment  | 

2

[](/posts/75375946/timeline ""Show activity on this post."")

The SNAPSHOT value refers to the 'latest' code along a development branch and
provides no guarantee the code is stable or unchanging. Conversely, the code
in a 'release' version (any version value without the suffix SNAPSHOT) is
unchanging.

In other words, a SNAPSHOT version is the 'development' version before the
final 'release' version. The SNAPSHOT is ""older"" than its release.

During the release process, a version of x.y-SNAPSHOT changes to x.y. The
release process also increments the development version to x.(y+1)-SNAPSHOT.
For example, version 1.0-SNAPSHOT is released as version 1.0, and the new
development version is version 1.1-SNAPSHOT.

[Share](/a/75375946 ""Short permalink to this answer"")

[Improve this answer](/posts/75375946/edit)

Follow

answered Feb 7, 2023 at 15:58

[![SM. Hosseini's user
avatar](https://i.sstatic.net/wZe3B.jpg?s=64)](/users/8423371/sm-hosseini)

[SM. Hosseini](/users/8423371/sm-hosseini)SM.

First in general you can't use properties in versions:

ProjectA/pom.xml

    
    
      <groupId>com.org</groupId>
      <artifactId>projectA</artifactId>
      <packaging>pom</packaging>
      <version>1.0.0-SNAPSHOT</version>
    

Second you shouldn't need to use relative path in your childs: core/pom.xml

    
    
    <parent>
      <artifactId>projectA</artifactId>
      <groupId>com.org</groupId>
      <version>1.0.0-SNAPSHOT</version>
    </parent>
    <artifactId>core</artifactId>
    

This brings me to the point if you have a persistence/pom.xml

core com.org 1.0.0-SNAPSHOT

Done use things like `<relativePath>../../</relativePath>` this is usually an
indicator that your structure is wrong.

BUT: [Starting with Maven 3.2.1 you can use special
properties](http://maven.apache.org/docs/3.2.1/release-notes.html) to define
the versions you like. [The following placeholders are allowed in
versions:](https://jira.codehaus.org/browse/MNG-5576)

    
    
    ${revision}, ${changelist}, and ${sha1}
    

This means if you like you can use them but only with Maven 3.2.1 so you need
to change it to things like this:

ProjectA/pom.xml

    
    
      <groupId>com.org</groupId>
      <artifactId>projectA</artifactId>
      <packaging>pom</packaging>
      <version>${revision}</version>
    

and in core:

    
    
    <parent>
      <artifactId>projectA</artifactId>
      <groupId>com.org</groupId>
      <version>${revision}</version>
    </parent>
    <artifactId>core</artifactId>
    

But this means you need to call maven everytime like this:

    
    
    mvn -Drevision=1.0.0-SNAPSHOT clean package
    

which will work. You have to be carefull if you use your project within
Eclipse etc. Apart from the above i can not recommend to use it this way.

Below is the sample gitlab-ci.yml file to implement these changes,

    
    
    stages: - build - test - update_dependencies - deploy variables: MAVEN_CLI_OPTS: ""-s .m2/settings.xml --batch-mode"" MAVEN_OPTS: ""-Dmaven.repo.local=.m2/repository"" maven_build: stage: build script: - mvn $MAVEN_CLI_OPTS clean compile maven_test: stage: test script: - mvn $MAVEN_CLI_OPTS test update_dependencies: stage: update_dependencies script: - sed -i 's/SNAPSHOT/RELEASE/g' pom.xml - mvn $MAVEN_CLI_OPTS clean install only: - /release-*/ # Only deploy on branches that start with release (adjust as needed) maven_deploy: stage: deploy script: - mvn $MAVEN_CLI_OPTS deploy only: - /release-*/ # Only deploy on branches that start with release (adjust as needed)

Now, the other way of implementing the same is by using Maven commands.

Below are the usages of Maven version commands to manipulate the dependency
versions in your Maven projects:

1.This command is used with the Maven Versions Plugin to display a list of
dependencies in your project and indicate if newer versions are available in
the remote repositories.

**_mvn versions:display-dependency-updates_**

2\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to their latest non-SNAPSHOT (release) versions.

**_mvn versions:use-releases_**

3\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to the next non-SNAPSHOT (release) versions.

**_mvn versions:use-next-releases_**

4\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to the latest non-SNAPSHOT (release) versions available
in the remote repositories.

**_mvn versions:use-latest-releases_**

Let me know if this helps!!

For any support connect with me at [topmate](https://topmate.io/pooja_bolla).

**_mvn versions:use-latest-releases_**

Let me know if this helps!!

For any support connect with me at [topmate](https://topmate.io/pooja_bolla).

_Originally published at_[
_https://www.inkedintutions.com_](https://www.inkedintutions.com/2023/09/how-
to-handle-maven-dependency-versions.html) _on September 10, 2023._

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&user=TechIntutions&userId=9c7f3259aec2&source=-----faee36a338ec
---------------------clap_footer-----------)

\--

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&user=TechIntutions&userId=9c7f3259aec2&source=-----faee36a338ec
---------------------clap_footer-----------)

\--

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&source=--------------------------bookmark_footer-----------)

[![TechIntutions](https://miro.medium.com/v2/resize:fill:144:144/1*dmbNkD5D-u45r44go_cf0g.png)](/?source=post_page
-----faee36a338ec--------------------------------)

Follow

[](https://medium.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-search/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.version in mall-search/pom.xml and pom.xml with values version:1.0-SNAPSHOT.\n2. Evaluate whether these versions are identical across both modules.\n3. If identical, establish a dependency based on value equality."",
    ""rationale"": ""The 'project.version' in a Maven project specifies the version of the artifact being built. Since the versions are identical (1.0-SNAPSHOT) across both modules, it is essential to maintain consistency for proper artifact management and deployment. Therefore, the project.version depends on each other due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The equality of groupId values suggests a dependency between the two projects, as they share a common namespace and may be part of a larger project structure.","By this question, interviewer wants to know about your basic knowledge on Maven and pom.xml file. I find recently one nice blog post on it with real life example. Just sharing the link here. Hope it will help others. [Difference between groupId and artifactId in pom.xml](https://industechie.com/index.php/2020/11/26/what-is-the-difference-between-groupid-and-artifactid-in-maven/)

- [Aritra](/users/1936953/aritra ""3 reputation"")

Commented Nov 26, 2020 at 20:11

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/39185798/what-is-the-difference-
between-artifactid-and-groupid-in-pom-xml?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

44

[](/posts/39185833/timeline ""Show activity on this post."")

From maven.apache.org, [Naming
Conventions](https://maven.apache.org/guides/mini/guide-naming-
conventions.html):

> `artifactId` is the name of the jar without version. If you created it then
> you can choose whatever name you want with lowercase letters and no strange
> symbols. If it's a third party jar you have to take the name of the jar as
> it's distributed. eg. `maven`, `commons-math`
>
> `groupId` will identify your project uniquely across all projects, so we
> need to enforce a naming schema. It has to follow the package name rules,
> what means that has to be at least as a domain name you control, and you can
> create as many subgroups as you want. Look at More information about package
> names. eg. `org.apache.maven`, `org.apache.commons`

[Share](/a/39185833 ""Short permalink to this answer"")

[Improve this answer](/posts/39185833/edit)

Follow

answered Aug 27, 2016 at 21:17

[!

You can check this in google repo (url:
<https://maven.google.com/web/index.html?q=activity-
compose#androidx.activity:activity-compose:1.7.1>) screenshot below,

[![enter image description
here](https://i.sstatic.net/yfsxZ.jpg)](https://i.sstatic.net/yfsxZ.jpg)

The link of actual artifact:
<https://dl.google.com/android/maven2/androidx/activity/activity-
compose/1.7.1/activity-compose-1.7.1.aar>

[Share](/a/76159152 ""Short permalink to this answer"")

[Improve this answer](/posts/76159152/edit)

Follow

answered May 2, 2023 at 21:59

[![Uddhav P. Gautam's user
avatar](https://i.sstatic.net/06tSZ.jpg?s=64)](/users/7232295/uddhav-p-gautam)

[Uddhav P. Gautam](/users/7232295/uddhav-p-gautam)Uddhav P. Gautam

7,58133 gold badges5050 silver badges6767 bronze badges

Add a comment  | 

0

[](/posts/58443001/timeline ""Show activity on this post."")

The main difference between groupId and artifactId in Maven is that the
groupId specifies the id of the project group while the artifactId specifies
the id of the project.

It is required to use third party libraries when developing a project. The
programmer can download and add these third-party libraries to the project,
but it is difficult to update them later. Maven provides a solution to this
issue. It helps to include all the dependencies required for the project.
Moreover, the programmer can specify the required dependencies in the POM.XML
file. It has the configuration information to build the project. Furthermore,
this file consists of several XML elements, and two of them are groupId and
artifactId. example groupId : com.test.java (similar to package name)
artifactId : javaproject(project or module name)

[Share](/a/58443001 ""Short permalink to this answer"")

[Improve this answer](/posts/58443001/edit)

Follow

answered Oct 18, 2019 at 2:06

[!

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.",mall-swarm,project.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: com.macro.mall in mall-portal/pom.xml and com.macro.mall in mall-search/pom.xml.\n2. Evaluate whether the groupId values are identical across both modules.\n3. If identical, conclude that a dependency exists due to value equality."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as they share the same groupId, which means they belong to the same project and are likely to be related modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration options spring.redis.password in both mall-admin and mall-portal projects have the same value, which is None. This suggests that they might be dependent on each other, as changing one could potentially affect the other.","|   
`spring.data.redis.lettuce.pool.enabled` | Whether to enable the pool. Enabled automatically if ""commons-pool2"" is available. With Jedis, pooling is implicitly enabled in sentinel mode and this setting only applies to single node setup. |   
`spring.data.redis.lettuce.pool.max-active` | Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit. | `8`  
`spring.data.redis.lettuce.pool.max-idle` | Maximum number of ""idle"" connections in the pool. Use a negative value to indicate an unlimited number of idle connections. | `8`  
`spring.data.redis.lettuce.pool.max-wait` | Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely. | `-1ms`  
`spring.data.redis.lettuce.pool.min-idle` | Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if both it and time between eviction runs are positive. | `0`  
`spring.data.redis.lettuce.pool.time-between-eviction-runs` | Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed. |   
`spring.data.redis.lettuce.shutdown-timeout` | Shutdown timeout. | `100ms`  
`spring.data.redis.password` | Login password of the redis server. |   
`spring.data.redis.port` | Redis server port. | `6379`  
`spring.data.redis.repositories.enabled` | Whether to enable Redis repositories. | `true`  
`spring.data.redis.sentinel.master` | Name of the Redis server. |   
`spring.data.redis.sentinel.nodes` | Comma-separated list of ""host:port"" pairs. |   
`spring.data.redis.sentinel.password` | Password for authenticating with sentinel(s). |   
`spring.data.redis.sentinel.username` | Login username for authenticating with sentinel(s). |   
`spring.data.redis.ssl.bundle` | SSL bundle name. |   
`spring.data.redis.ssl.enabled` | Whether to enable SSL support. Enabled automatically if ""bundle"" is provided unless specified otherwise.

<dependency>
        <groupId>com.redis.testcontainers</groupId>
        <artifactId>testcontainers-redis-junit-jupiter</artifactId>
        <version>1.4.6</version>
        <scope>test</scope>
    </dependency>

## 4\. Spring Boot Configuration

**Spring boot autoconfiguration configures the  _StringRedisTemplate_ and
_RedisTemplate_  instances** that we can directly inject and use to perform
operations on Redis database.

> Once configured, _RedisTemplate_ and _StringRedisTemplate_ are thread-safe
> and can be reused across multiple instances.

### 4.1. Connection Properties

By default, autoconfiguration tried to connect to a Redis server at
`localhost:6379`. We can provide the custom connection details in the
properties file.

    
    
    spring.data.redis.database=0
    spring.data.redis.host=localhost
    spring.data.redis.port=6379
    spring.data.redis.username=user
    spring.data.redis.password=secret

There are a lot of other properties we can configure. The [complete list of
configuration properties](https://docs.spring.io/spring-
boot/redirect.html#data-properties) is available in the Spring Boot
documentation.

Using the above connection properties, Spring boot automatically creates an
instance of _RedisConnectionFactory_. The ___RedisConnectionFactory___
provides the core building block for Redis communication, as it handles the
communication with the Redis backend. It also automatically translates the
underlying library exceptions to [Spring DAO
exceptions](https://docs.spring.io/spring-framework/reference/data-
access/dao.html#dao-exceptions).

### 4.2. **_RedisTemplate_**

 _RedisTemplate_ provides a higher-level abstraction for interacting with
Redis. While _RedisConnection_ provides lower-level methods that handle binary
values (byte arrays), the _RedisTemplate_ handles serialization and connection
management, relieving users from dealing with such details.

Just set the `password` on
[LettuceConnectionFactory](http://docs.spring.io/spring-
data/redis/docs/current/api/org/springframework/data/redis/connection/lettuce/LettuceConnectionFactory.html#setPassword-
java.lang.String-) or [JedisConnectionFactory](http://docs.spring.io/spring-
data/redis/docs/current/api/org/springframework/data/redis/connection/jedis/JedisConnectionFactory.html#setPassword-
java.lang.String-), depending on which driver you're using. If you use Spring
Boot, set `spring.data.redis.password=…` in your application configuration
(see [Common application properties](http://docs.spring.io/spring-
boot/docs/current/reference/html/common-application-properties.html).

If you have access to configuration file of redis you can find the password by
searching : `requirepass`

[Share](/a/40013971 ""Short permalink to this answer"")

[Improve this answer](/posts/40013971/edit)

Follow

[edited Aug 21, 2023 at 8:04](/posts/40013971/revisions ""show all edits to
this post"")

[![aniran mohammadpour's user
avatar](https://i.sstatic.net/IY5ou.jpg?s=64)](/users/14349416/aniran-
mohammadpour)

[aniran mohammadpour](/users/14349416/aniran-mohammadpour)

15122 silver badges1313 bronze badges

answered Oct 13, 2016 at 6:40

[![mp911de's user
avatar](https://www.gravatar.com/avatar/c5f6e8dffbb19acf405198c8fb917337?s=64&d=identicon&r=PG)](/users/2067527/mp911de)

[mp911de](/users/2067527/mp911de)mp911de

18k22 gold badges5757 silver badges9797 bronze badges

0

Add a comment  | 

0

[](/posts/71153160/timeline ""Show activity on this post."")

With the latest version of `Jedis` client, setting the password to the
`JedisConnectionFactory` is deprecated. Therefore you should set the `Redis`
authentication password to the `RedisStandaloneConfiguration`,
`RedisSentinelConfiguration` or `RedisClusterConfiguration`.

|   
`spring.data.mongodb.gridfs.bucket` | GridFS bucket name. |   
`spring.data.mongodb.gridfs.database` | GridFS database name. |   
`spring.data.mongodb.host` | Mongo server host. Cannot be set with URI. |   
`spring.data.mongodb.password` | Login password of the mongo server. Cannot be set with URI. |   
`spring.data.mongodb.port` | Mongo server port. Cannot be set with URI. |   
`spring.data.mongodb.replica-set-name` | Required replica set name for the cluster. Cannot be set with URI. |   
`spring.data.mongodb.repositories.type` | Type of Mongo repositories to enable. | `auto`  
`spring.data.mongodb.ssl.bundle` | SSL bundle name. |   
`spring.data.mongodb.ssl.enabled` | Whether to enable SSL support. Enabled automatically if ""bundle"" is provided unless specified otherwise. |   
`spring.data.mongodb.uri` | Mongo database URI. Overrides host, port, username, and password. | `mongodb://localhost/test`  
`spring.data.mongodb.username` | Login user of the mongo server. Cannot be set with URI. |   
`spring.data.mongodb.uuid-representation` | Representation to use when converting a UUID to a BSON binary value. | `java-legacy`  
`spring.data.neo4j.database` | Database name to use. By default, the server decides the default database to use. |   
`spring.data.neo4j.repositories.type` | Type of Neo4j repositories to enable. | `auto`  
`spring.data.r2dbc.repositories.enabled` | Whether to enable R2DBC repositories. | `true`  
`spring.data.redis.client-name` | Client name to be set on connections with CLIENT SETNAME. |   
`spring.data.redis.client-type` | Type of client to use. By default, auto-detected according to the classpath. |   
`spring.data.redis.cluster.max-redirects` | Maximum number of redirects to follow when executing commands across the cluster. |   
`spring.data.redis.cluster.nodes` | Comma-separated list of ""host:port"" pairs to bootstrap from. This represents an ""initial"" list of cluster nodes and is required to have at least one entry. |   
`spring.data.redis.connect-timeout` | Connection timeout.

Skip to content

[ ![HowToDoInJava](https://howtodoinjava.com/wp-
content/uploads/2023/12/HowToDoInJava-logo.png) ](https://howtodoinjava.com/)

Menu

Menu

  * [Java](https://howtodoinjava.com/series/java-tutorial/)
  * [Spring Boot](https://howtodoinjava.com/series/spring-boot/)
  * [Hibernate](https://howtodoinjava.com/series/hibernate-tutorials/)
  * [JUnit](https://howtodoinjava.com/series/junit/)
  * [Interview](https://howtodoinjava.com/series/interview-guides/)

# Spring Boot Data Redis with Lettuce and Jedis

[Lokesh Gupta](https://howtodoinjava.com/author/lokeshgupta1981/)

May 29, 2023

[Spring Data](https://howtodoinjava.com/spring-data/)

[Redis](https://howtodoinjava.com/tag/redis/), [Spring
Boot](https://howtodoinjava.com/tag/spring-boot/), [Spring Data
JPA](https://howtodoinjava.com/tag/spring-data-jpa/)

This article explores the fundamentals of [Spring Data
Redis](https://docs.spring.io/spring-data/data-redis/reference/). We will
discover how straightforward it is to connect with Redis using Spring auto-
configuration and learn how to write custom configurations and modify Spring
Data Redis' default settings.

## 1\. Introduction to Redis

[Redis](https://redis.io/about/) is an **open-source, in-memory data structure
store used as a database, cache, and message broker**. It is a key-value
store, with keys and values as strings, lists, sets, hashes, or sorted sets.

Developers often use Redis as a cache in front of a persistent database, (such
as MySQL) for frequently accessed data to reduce the load. Because Redis
stores data in memory, it can respond to requests quickly. Redis also provides
other advanced features such as Lua scripting, transactions, pub/sub
messaging, and geospatial indexing.

## 2\. Redis Setup

We recommend installing and running Redis on your machine to follow along with
this article.",mall-swarm,spring.redis.password,PASSWORD,,spring,mall-admin/src/main/resources/application.yml,spring.redis.password,PASSWORD,,spring,mall-portal/src/main/resources/application.yml,Generic Names,Names,"{
    ""plan"": ""1. Analyze the configuration options: spring.redis.password in mall-admin/src/main/resources/application.yml and spring.redis.password in mall-portal/src/main/resources/application.yml.\n2. Check if they are used in different environments or modules.\n3. Evaluate if the similarity in their values ('nan') indicates a dependency between them."",
    ""rationale"": ""The configuration options spring.redis.password in mall-admin/src/main/resources/application.yml and spring.redis.password in mall-portal/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'nan'. Typically, each module or environment has its own Redis connection. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration option spring.mvc.pathmatch.matching-strategy with value ant_path_matcher in mall-auth and mall-portal applications indicates that they share the same path matching strategy. This implies that if one application changes its path matching strategy, the other application will also be affected, as they rely on the same mechanism.","It was
> previously only supporting the `AntPathMatcher` strategy, but it now also
> offers `PathPatternParser`. Spring Boot now provides a configuration
> property to choose and opt in the new strategy:
    
    
    spring:
      mvc:
        pathmatch:
          matching-strategy: ""path-pattern-parser""
    

> For more details on why you should consider this new implementation, see the
> [dedicated blog post](https://spring.io/blog/2020/06/30/url-matching-with-
> pathpattern-in-spring-mvc).

[Share](/a/70679859 ""Short permalink to this answer"")

[Improve this answer](/posts/70679859/edit)

Follow

answered Jan 12, 2022 at 10:22

[![Alex Veleshko's user
avatar](https://i.sstatic.net/4VsW2.jpg?s=64)](/users/17695211/alex-veleshko)

[Alex Veleshko](/users/17695211/alex-veleshko)Alex Veleshko

1,23155 silver badges2222 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow. [Learn more](/help/gen-ai-policy)

Thanks for contributing an answer to Stack Overflow!

  * Please be sure to _answer the question_. Provide details and share your research!

But _avoid_ …

  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

](/questions/2334787/how-to-match-a-spring-requestmapping-having-a-
pathvariable-containing)

[ 8 ](/q/6917627 ""Question score \(upvotes - downvotes\)"") [Spring mvc:mapping
path rules](/questions/6917627/spring-mvcmapping-path-rules)

[ 0 ](/q/10812492 ""Question score \(upvotes - downvotes\)"") [Spring MVC
navigation path](/questions/10812492/spring-mvc-navigation-path)

[ 41 ](/q/34160419 ""Question score \(upvotes - downvotes\)"") [Spring Boot
classpath](/questions/34160419/spring-boot-classpath)

[ 25 ](/q/34728814 ""Question score \(upvotes - downvotes\)"") [Spring Boot with
Two MVC Configurations](/questions/34728814/spring-boot-with-two-mvc-
configurations)

[ 0 ](/q/47537157 ""Question score \(upvotes - downvotes\)"") [Replace url
premeters to path based prameter](/questions/47537157/replace-url-premeters-
to-path-based-prameter)

[ 0 ](/q/47839324 ""Question score \(upvotes - downvotes\)"") [Make paths in
Spring Boot](/questions/47839324/make-paths-in-spring-boot)

[ 0 ](/q/57758710 ""Question score \(upvotes - downvotes\)"") [Spring Boot
route/path configuration](/questions/57758710/spring-boot-route-path-
configuration)

[ 2 ](/q/72861813 ""Question score \(upvotes - downvotes\)"") [Spring Boot
Optional Path Variables](/questions/72861813/spring-boot-optional-path-
variables)

[ 2 ](/q/73955946 ""Question score \(upvotes - downvotes\)"") [spring mvc path
match matching-strategy](/questions/73955946/spring-mvc-path-match-matching-
strategy)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Aligning equation at the \middle| of a \left . \middle . \right triple ](https://tex.stackexchange.

[ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

![](https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae)

Now available on Stack Overflow for Teams! AI features where you work: search,
IDE, and chat.

[Learn
more](https://stackoverflow.co/teams/ai/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=overflowai-learn-more) [Explore
Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=explore-teams)

  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)

##### Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you
use most.

[ Learn more about Collectives ](/collectives)

**Teams**

Q&A for work

Connect and share knowledge within a single location that is structured and
easy to search.

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Spring Boot mvc path match strategy](/questions/70658985/spring-boot-mvc-
path-match-strategy)

[ Ask Question ](/questions/ask)

Asked 2 years, 6 months ago

Modified [2 years, 6 months ago](?lastactivity ""2022-01-13 12:32:19Z"")

Viewed 22k times

5

[](/posts/70658985/timeline ""Show activity on this post."")

How actually works next property in Spring Boot if we declare it explicitly?

jar:5.2.7.RELEASE]         at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f70658985%2fspring-
boot-mvc-path-match-strategy) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f70658985%2fspring-
boot-mvc-path-match-strategy) to customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f70658985%2fspring-boot-mvc-path-match-strategy)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f70658985%2fspring-boot-mvc-path-match-strategy)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

!",mall-swarm,spring.mvc.pathmatch.matching-strategy,PATH,ant_path_matcher,spring,mall-auth/src/main/resources/application.yml,spring.mvc.pathmatch.matching-strategy,PATH,ant_path_matcher,spring,mall-portal/src/main/resources/application.yml,Others,URL Handling,"{
    ""plan"": ""1. Analyze the configuration options: spring.mvc.pathmatch.matching-strategy in mall-auth/src/main/resources/application.yml and mall-portal/src/main/resources/application.yml.\n2. Identify the values of both options: ant_path_matcher.\n3. Evaluate whether the similarity in values indicates a dependency between the two options, considering the context and purpose of each module (mall-auth and mall-portal).\n4. Determine if the dependency exists based on value-equality."",
    ""rationale"": ""The configuration options spring.mvc.pathmatch.matching-strategy in mall-auth/src/main/resources/application.yml and mall-portal/src/main/resources/application.yml have the same value ant_path_matcher, but they are used in different modules (mall-auth and mall-portal) with distinct purposes. Typically, each module has its own MVC path matching strategy. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The configuration option project.modelVersion with value 4.0.0 in both mall-auth/pom.xml and mall-gateway/pom.xml does not necessarily imply a dependency between them. The model version is a standard Maven POM element, and its value can be set independently in each project. However, if there is a parent-child relationship or a common parent project that defines the model version, then the configuration options may depend on each other.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

The Correct answer should be the combination of the answers by @Toumi and
@Boj. Also have a look at
<https://cwiki.apache.org/confluence/display/MAVEN/POM+Model+Version+5.0.0>
for more background of this.

[Share](/a/46438174 ""Short permalink to this answer"")

[Improve this answer](/posts/46438174/edit)

Follow

answered Sep 27, 2017 at 1:37

[![Asanke's user
avatar](https://i.sstatic.net/NrPNs.jpg?s=64)](/users/2935910/asanke)

[Asanke](/users/2935910/asanke)Asanke

59122 gold badges1111 silver badges3232 bronze badges

1

  * Well, this should have been a comment.

- [nbro](/users/3924118/nbro ""15,849 reputation"")

Commented Apr 5, 2022 at 10:20

Add a comment  | 

4

[](/posts/59064455/timeline ""Show activity on this post."")

**modelVersion** \- containing the model version of the POM. Maven 1.x used a
model which contained a 3.0.0 element as an immediate child of the root. Maven
2.x / 3.x has used a 4.0.0 element.

**version** \- containing the version of the project. If this attribute is
missing then the parent element must be present and the version will be
inherited from the parent project.

[Share](/a/59064455 ""Short permalink to this answer"")

[Improve this answer](/posts/59064455/edit)

Follow

[edited Nov 27, 2019 at 8:37](/posts/59064455/revisions ""show all edits to
this post"")

answered Nov 27, 2019 at 6:42

[!",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-auth/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-gateway/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""1. Check the Maven project files (pom.xml) in both mall-auth and mall-gateway modules.\n2. Verify that the project.modelVersion configuration option is set to 4.0.0 in both modules.\n3. Since Maven exclusively supports model version 4.0.0, and it's required for compatibility across all modules, a dependency exists based on value equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven currently only supports the model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,7.0,FN,True,"The configuration options project.dependencies.dependency_mall-mbg.groupId and project.dependencyManagement.dependencies.dependency_mall-mbg.groupId have the same value 'com.macro.mall'. This suggests that they might be related, but it's not a direct dependency. The dependencyManagement section in Maven is used to manage dependencies across the project, while the dependencies section defines the dependencies for a specific module. If the parent pom.xml has a dependencyManagement section with the com.macro.mall groupId, and the mall-portal/pom.xml inherits from this parent, then there might be an indirect dependency between these configuration options.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

After working with Maven for a while, I am thrilled by the many features that
Maven brings into the build architecture, particularly the dependency
management. However, I have run into one issue again and again - how Maven
resolves dependencies between multi-module projects. I am wondering if this is
the big flaw of the current Maven implementation and/or if there is any
satisfactory workaround.

Let's say I have a multi-module Maven project. The Parent pom contains three
modules -- moduleA (jar), moduleB (jar), and moduleC(war). B depends on A and
C depends on B. Simple enough? Now that I want to run the `mvn dependency:go-
offline` at the parent project, which is supposed to resolve all the
dependencies and bring them into the local .m2 directory. It fails because
Maven complains that it cannot solve dependency for moduleA when it is acting
on moduleB. Because all these modules belong to one groupId, I even try to use
`-DexcludeGroupIds=x.y.z` to exclude these module dependencies, but it still
fails at the same point.

I understand why Maven is complaining - moduleA is not built yet and thus
there is no moduleA:jar artifact in my local or internal repository when go-
offline goal is executed. But IMHO the plugin should treat these inter-module
dependencies differently. In this case, it should simply ignore it. One might
argues that I can simply do `mvn clean install`, which will install
moduleA:jar into the local repository. After that, running `mvn dependency:go-
offline` will work for sure. But that workaround defeats the purpose of this
go-offline goal. This plugin allows us to resolve and pull dependencies into
our local repository without building the whole project. I used
`dependency:copy-dependencies` goal in another case and it has the same issue.

I also ran into similar issue in other scenarios: [""mvn clean generate-source""
could not resolve
dependencies](https://stackoverflow.com/questions/12942782/mvn-clean-generate-
source-could-not-resolve-dependencies). When I ran `mvn clean compile`,
everything works fine, but when I ran `mvn clean generate-source`, it fails
because Maven cannot resolve inter-module dependency.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) to customize your
list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.",mall-swarm,project.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.dependencyManagement.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_mall-mbg.groupId in mall-portal/pom.xml and project.dependencyManagement.dependencies.dependency_mall-mbg.groupId in pom.xml.\n2. Evaluate the values of both configuration options: com.macro.mall.\n3. Compare the values to determine if they are equal.\n4. If the values are equal, evaluate whether one option depends on the other due to their usage in different Maven modules."",
    ""rationale"": ""The configuration options project.dependencies.dependency_mall-mbg.groupId and project.dependencyManagement.dependencies.dependency_mall-mbg.groupId have the same value com.macro.mall. This indicates that they are related to the same Maven dependency. The dependencyManagement section is used to manage dependencies across multiple modules, while the dependencies section is used to specify dependencies for a specific module. Therefore, the configuration option in the dependencyManagement section depends on the configuration option in the dependencies section."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options have identical values (com.macro.mall) which suggests a dependency between the two projects. In Maven, the groupId is used to identify a project uniquely across all projects, and it follows the package name rules. The similarity in values implies that mall-gateway and mall-monitor are related projects, possibly with a parent-child relationship.","12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-gateway/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-monitor/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: project.parent_mall-swarm.groupId in mall-gateway/pom.xml and project.groupId in mall-monitor/pom.xml.\n2. Compare the values of both groupIds: com.macro.mall.\n3. Evaluate if the values are equal, indicating a dependency between the two configuration options."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as they specify the same groupId, which is used to identify all modules in the project."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Port Mapping,llama3:70b,config2,7.0,FP,False,"The configuration options services.mall-auth.ports.in and services.mall-auth.ports.out have the same value 8401, which suggests a possible connection between them. In docker-compose, ports are used to expose container services to the host machine or other containers. The 'in' port might be used for incoming traffic, while the 'out' port might be used for outgoing traffic. Given their identical values, it is plausible that they are related, but without more information, we cannot conclude a definitive dependency.","in docker-compose.yml,

What is the difference between in following ports notations?

    
    
    ports:
       - ""5000:5000""
    

resp:

    
    
    ports:
       - ""8080""
    

or no ports at all.

For example in following docker-compose.yml, the mongodb service must be
exposing a port to communicate with node service, but no port is specified

    
    
    services:
    
      node:
        build:
          context: .
          dockerfile: node.dockerfile
        ports:
          - ""3000:3000""
        networks:
          - nodeapp-network
        depends_on: 
          - mongodb
    
      mongodb:
        image: mongo
        networks:
          - nodeapp-network
    
    networks:
      nodeapp-network:
        driver: bridge
    

_source:<https://github.com/DanWahlin/NodeExpressMongoDBDockerApp>_

However in these docker-compose.yml, there are ports awlays specified with
either `27017:27017` or `8080` notation.

    
    
    services:
        nginx:
          container_name: nginx
          image: ${DOCKER_ACCT}/nginx
          build: 
            context: .
            dockerfile: .docker/nginx.${APP_ENV}.dockerfile
          links:
            - node1:node1
            - node2:node2
            - node3:node3
          ports:
            - ""80:80""
            - ""443:443""
          networks:
            - codewithdan-network
    
        node1:
          container_name: node-codewithdan-1
          image: ${DOCKER_ACCT}/node-codewithdan
          build: 
            context: .
            dockerfile: .docker/node-codewithdan.${APP_ENV}.dockerfile
          ports:
          - ""8080""
          volumes:
            - .:/var/www/codewithdan
          working_dir: /var/www/codewithdan
          env_file:
            - ./.docker/env/app.${APP_ENV}.env
          depends_on:
            - mongo
            - redis
          networks:
            - codewithdan-network
    
        node2:
          container_name: node-codewithdan-2
          image: ${DOCKER_ACCT}/node-codewithdan
          build: 
            context: .

dockerfile: .docker/node-codewithdan.${APP_ENV}.dockerfile
          ports:
          - ""8080""
          volumes:
            - .:/var/www/codewithdan
          working_dir: /var/www/codewithdan
          env_file:
            - ./.docker/env/app.${APP_ENV}.env
          depends_on:
            - mongo
            - redis
          networks:
            - codewithdan-network
    
        node3:
          container_name: node-codewithdan-3
          image: ${DOCKER_ACCT}/node-codewithdan
          build: 
            context: .
            dockerfile: .docker/node-codewithdan.${APP_ENV}.dockerfile
          ports:
          - ""8080""
          volumes:
            - .:/var/www/codewithdan
          working_dir: /var/www/codewithdan
          env_file:
            - ./.docker/env/app.${APP_ENV}.env
          depends_on:
            - mongo
            - redis
          networks:
            - codewithdan-network
    
        mongo:
          container_name: mongo
          image: ${DOCKER_ACCT}/mongo
          build:
            context: .
            dockerfile: .docker/mongo.dockerfile
          ports:
          - ""27017:27017""
          env_file:
            - ./.docker/env/mongo.${APP_ENV}.env
          networks:
            - codewithdan-network
    
        redis:
          container_name: redis
          image: ${DOCKER_ACCT}/redis
          build: 
            context: .
            dockerfile: .docker/redis.${APP_ENV}.dockerfile
          ports:
            - ""6379""
          networks:
            - codewithdan-network
    
    networks:
        codewithdan-network:
          driver: bridge
    

_source:<https://github.com/DanWahlin/CodeWithDanDockerServices>_

Can you explain the difference?

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [docker-network](/questions/tagged/docker-network ""show questions tagged 'docker-network'"")

[Share](/q/52481836 ""Short permalink to this question"")

Follow

asked Sep 24, 2018 at 14:42

[!

](https://meta.stackoverflow.com/questions/431331/what-does-a-new-user-need-in-a-homepage-experience-on-stack-overflow)

  * [Feedback requested: How do you use tag hover descriptions for curating and do...](https://meta.stackoverflow.com/questions/431273/feedback-requested-how-do-you-use-tag-hover-descriptions-for-curating-and-do-yo ""Feedback requested: How do you use tag hover descriptions for curating and do you use the RSS feed feature?"")

  * [Staging Ground Reviewer Motivation](https://meta.stackoverflow.com/questions/431399/staging-ground-reviewer-motivation)

#### Related

[ 9 ](/q/29564268 ""Question score \(upvotes - downvotes\)"") [Understanding
ports and links in docker compose](/questions/29564268/understanding-ports-
and-links-in-docker-compose)

[ 3 ](/q/37770718 ""Question score \(upvotes - downvotes\)"") [How do I
configure docker compose to expose ports correctly?](/questions/37770718/how-
do-i-configure-docker-compose-to-expose-ports-correctly)

[ 990 ](/q/40801772 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ports and expose in docker-
compose?](/questions/40801772/what-is-the-difference-between-ports-and-expose-
in-docker-compose)

[ 1 ](/q/41683032 ""Question score \(upvotes - downvotes\)"") [Is second value
required when mapping ports in docker-compose file?](/questions/41683032/is-
second-value-required-when-mapping-ports-in-docker-compose-file)

[ 29 ](/q/44206827 ""Question score \(upvotes - downvotes\)"") [Why do ports
need to be specified twice separated by a colon?

](/questions/40801772/what-is-the-difference-between-ports-and-expose-
in-docker-compose)

[ 2216 ](/q/17157721 ""Question score \(upvotes - downvotes\)"") [How to get a
Docker container's IP address from the host](/questions/17157721/how-to-get-a-
docker-containers-ip-address-from-the-host)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ My 20 amp breaker trips ](https://diy.stackexchange.com/questions/306257/my-20-amp-breaker-trips)
  * [ Pros and cons of ESPRIT versus MUSIC ](https://dsp.stackexchange.com/questions/94978/pros-and-cons-of-esprit-versus-music)
  * [ A SF novel where a very poor girl finds a ""talking book"" meant for daughters of extremely rich people ](https://scifi.stackexchange.com/questions/291281/a-sf-novel-where-a-very-poor-girl-finds-a-talking-book-meant-for-daughters-of)
  * [ Seinfeldisms in O.R ](https://or.stackexchange.com/questions/12439/seinfeldisms-in-o-r)
  * [ Reference to formal approach to homotopy analysis method ](https://mathoverflow.net/questions/478010/reference-to-formal-approach-to-homotopy-analysis-method)
  * [ Do eternal ordinances such as the festival of unleavened bread pose a biblical contradiction? ](https://hermeneutics.stackexchange.com/questions/97608/do-eternal-ordinances-such-as-the-festival-of-unleavened-bread-pose-a-biblical-c)
  * [ A strange Lipschitz function ](https://mathoverflow.net/questions/477987/a-strange-lipschitz-function)
  * [ What is this 3 terminal white + grey surface mount device?

In your `compose.yaml` file, add the `include` top-level attribute along with the path to the `infra.yaml` file.
    
        include:
       - infra.yaml
    services:
      web:
        build: .
        ports:
          - ""8000:5000""
        develop:
          watch:
            - action: sync
              path: .
              target: /code

  4. Run `docker compose up` to build the app with the updated Compose files, and run it. You should see the `Hello world` message in your browser.

This is a simplified example, but it demonstrates the basic principle of
`include` and how it can make it easier to modularize complex applications
into sub-Compose files. For more information on `include` and working with
multiple Compose files, see [Working with multiple Compose
files](https://docs.docker.com/compose/multiple-compose-files/).

## Step 8: Experiment with some other commands

  * If you want to run your services in the background, you can pass the `-d` flag (for ""detached"" mode) to `docker compose up` and use `docker compose ps` to see what is currently running:
    
        $ docker compose up -d
    
    Starting composetest_redis_1...
    Starting composetest_web_1...
    
    $ docker compose ps
    
           Name                      Command               State           Ports         
    -------------------------------------------------------------------------------------
    composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              
    composetest_web_1     flask run                        Up      0.0.0.0:8000->5000/tcp
    

  * Run `docker compose --help` to see other available commands.

  * If you started Compose with `docker compose up -d`, stop your services once you've finished with them:
    
        $ docker compose stop
    

  * You can bring everything down, removing the containers entirely, with the `docker compose down` command.",mall-swarm,services.mall-auth.ports.in,PORT,8401,docker-compose,document/docker/docker-compose-app.yml,services.mall-auth.ports.out,PORT,8401,docker-compose,document/docker/docker-compose-app.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.mall-auth.ports.in and services.mall-auth.ports.out in docker-compose-app.yml.\n2. Check their types (PORT) and values (8401).\n3. Evaluate if the value equality indicates a dependency between the two options."",
    ""rationale"": ""The configuration option services.mall-auth.ports.in specifies the internal port within the container, while services.mall-auth.ports.out specifies the external port on the host. The value equality (8401) suggests that the service is configured to expose and use the same port, but this does not necessarily imply a dependency between the two options."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration option `project.dependencies.dependency_mall-mbg.groupId` of type NAME with value `com.macro.mall` in `mall-portal/pom.xml` does not directly depend on the configuration option `project.groupId` of type NAME with value `com.macro.mall` in `mall-search/pom.xml`. However, since both POM files share the same group ID, it is possible that they might have a common parent POM file that defines this group ID. If that's the case, then the configuration options are indirectly related through their inheritance from the parent POM.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

After working with Maven for a while, I am thrilled by the many features that
Maven brings into the build architecture, particularly the dependency
management. However, I have run into one issue again and again - how Maven
resolves dependencies between multi-module projects. I am wondering if this is
the big flaw of the current Maven implementation and/or if there is any
satisfactory workaround.

Let's say I have a multi-module Maven project. The Parent pom contains three
modules -- moduleA (jar), moduleB (jar), and moduleC(war). B depends on A and
C depends on B. Simple enough? Now that I want to run the `mvn dependency:go-
offline` at the parent project, which is supposed to resolve all the
dependencies and bring them into the local .m2 directory. It fails because
Maven complains that it cannot solve dependency for moduleA when it is acting
on moduleB. Because all these modules belong to one groupId, I even try to use
`-DexcludeGroupIds=x.y.z` to exclude these module dependencies, but it still
fails at the same point.

I understand why Maven is complaining - moduleA is not built yet and thus
there is no moduleA:jar artifact in my local or internal repository when go-
offline goal is executed. But IMHO the plugin should treat these inter-module
dependencies differently. In this case, it should simply ignore it. One might
argues that I can simply do `mvn clean install`, which will install
moduleA:jar into the local repository. After that, running `mvn dependency:go-
offline` will work for sure. But that workaround defeats the purpose of this
go-offline goal. This plugin allows us to resolve and pull dependencies into
our local repository without building the whole project. I used
`dependency:copy-dependencies` goal in another case and it has the same issue.

I also ran into similar issue in other scenarios: [""mvn clean generate-source""
could not resolve
dependencies](https://stackoverflow.com/questions/12942782/mvn-clean-generate-
source-could-not-resolve-dependencies). When I ran `mvn clean compile`,
everything works fine, but when I ran `mvn clean generate-source`, it fails
because Maven cannot resolve inter-module dependency.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) to customize your
list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.",mall-swarm,project.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_mall-mbg.groupId in mall-portal/pom.xml and project.groupId in mall-search/pom.xml.\n2. Determine the type of both configuration options as NAME.\n3. Evaluate the values of both configuration options, which are com.macro.mall.\n4. Since the values are equal, conclude that a dependency exists between the two configuration options."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-mbg is a specific module in the mall project and therefore needs to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inferring Dependencies,llama3:70b,config2,8.0,FN,True,"The configuration options do not directly depend on each other due to value equality. The project.dependencyManagement.dependencies.dependency_mall-mbg.artifactId specifies a dependency for the project, whereas project.modules.module defines a module within the project. Although they share the same value 'mall-mbg', it is coincidental and does not imply a direct dependency between them.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

](/questions/36766693/dependencies-vs-
dependenciesmanagement)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/46220108 ""Question score \(upvotes - downvotes\)"") [How Maven looks
for dependencies](/questions/46220108/how-maven-looks-for-dependencies)

[ 0 ](/q/60994565 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency management tag in pom.xml?](/questions/60994565/what-is-
the-purpose-of-dependency-management-tag-in-pom-xml)

[ 0 ](/q/63437884 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency maven-model?](/questions/63437884/what-is-the-purpose-
of-dependency-maven-model)

[ 0 ](/q/65819063 ""Question score \(upvotes - downvotes\)"") [What's the
difference between the maven-dependency-plugin and
dependencyManagement](/questions/65819063/whats-the-difference-between-the-
maven-dependency-plugin-and-dependencymanageme)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Mutual Life Insurance Company of New York -- What is it now? How can I reach them? ](https://money.stackexchange.com/questions/163388/mutual-life-insurance-company-of-new-york-what-is-it-now-how-can-i-reach-the)
  * [ Objects proven finiteness yet no algorithm discovered? ](https://mathoverflow.net/questions/475211/objects-proven-finiteness-yet-no-algorithm-discovered)
  * [ Are there any philosophers that clearly define the word ""consciousness"" in their arguments?",mall-swarm,project.dependencyManagement.dependencies.dependency_mall-mbg.artifactId,NAME,mall-mbg,maven,pom.xml,project.modules.module,NAME,mall-mbg,maven,pom.xml,Multi-Maven-Modules,Module as Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencyManagement.dependencies.dependency_mall-mbg.artifactId and project.modules.module.\n2. Analyze their types (NAME) and values (mall-mbg).\n3. Check if they are used in the same Maven project (pom.xml).\n4. Evaluate if the artifactId of a dependency is related to a module name in the same project."",
    ""rationale"": ""The 'artifactId' in Maven's dependency management defines the unique identifier of an artifact, whereas the 'module' specifies a sub-project within a multi-module Maven project. As both options have the same value 'mall-mbg', it implies that the dependency is related to a module with the same name in the same project."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inferring Dependencies,llama3:70b,config2,8.0,FP,False,"The configuration option 'project.build.plugins.plugin_spring-boot-maven-plugin.groupId' with value 'org.springframework.boot' in mall-gateway/pom.xml and the configuration option 'project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId' with value 'org.springframework.boot' in mall-portal/pom.xml share the same groupId. This suggests that both projects are using Spring Boot, which might imply a dependency between them.","[DEBUG] Could not find metadata org.springframework.integration:spring-integration-bom:4.2.0.BUILD-SNAPSHOT/maven-metadata.xml in local (C:\Users\DK\.m2Custom\repo)
    [DEBUG] Skipped remote request for org.springframework.integration:spring-integration-bom:4.2.0.BUILD-SNAPSHOT/maven-metadata.xml, locally cached metadata up-to-date.
    [DEBUG] Could not find metadata org.springframework.boot:spring-boot-dependencies:1.3.0.BUILD-SNAPSHOT/maven-metadata.xml in local (C:\Users\DK\.m2Custom\repo)
    [DEBUG] Skipped remote request for org.springframework.boot:spring-boot-dependencies:1.3.0.BUILD-SNAPSHOT/maven-metadata.xml, locally cached metadata up-to-date.
    [DEBUG] Extension realms for project org.springframework.boot:spring-boot-dependencies:pom:1.3.0.BUILD-SNAPSHOT: (none)
    [DEBUG] Looking up lifecyle mappings for packaging pom from ClassRealm[plexus.core, parent: null]
    [DEBUG] Resolving plugin prefix spring-boot from [org.apache.maven.plugins, org.codehaus.mojo]
    [DEBUG] Could not find metadata org.springframework.boot:spring-boot-maven-plugin:1.3.0.BUILD-SNAPSHOT/maven-metadata.xml in local (C:\Users\DK\.m2Custom\repo)
    [DEBUG] Could not find metadata org.springframework.boot:spring-boot-maven-plugin:1.3.0.BUILD-SNAPSHOT/maven-metadata.xml in local (C:\Users\DK\.m2Custom\repo)
    [WARNING] The POM for org.springframework.boot:spring-boot-maven-plugin:jar:1.3.0.BUILD-SNAPSHOT is missing, no dependency information available
    [WARNING] Failed to retrieve plugin descriptor for org.springframework.boot:spring-boot-maven-plugin:1.3.0.BUILD-SNAPSHOT: Plugin org.springframework.boot:spring-boot-maven-plugin:1.3.0.BUILD-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.springframework.boot:spring-boot-maven-plugin:jar:1.3.0.

The `build-info` goal generates such file
with the coordinates of the project and the build time. It also allows you to
add an arbitrary number of additional properties, as shown in the following
example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<executions>
    					<execution>
    						<goals>
    							<goal>build-info</goal>
    						</goals>
    						<configuration>
    							<additionalProperties>
    								<encoding.source>UTF-8</encoding.source>
    								<encoding.reporting>UTF-8</encoding.reporting>
    								<java.source>${maven.compiler.source}</java.source>
    								<java.target>${maven.compiler.target}</java.target>
    							</additionalProperties>
    						</configuration>
    					</execution>
    				</executions>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will generate a `build-info.properties` at the expected
location with four additional keys. Note that `maven.compiler.source` and
`maven.compiler.target` are expected to be regular properties available in the
project. They will be interpolated as you would expect.

### 9.1. `spring-boot:build-info`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Generate a `build-info.properties` file based the content of the current
`MavenProject`.

#### 9.1.1. Optional parameters

Name | Type | Default  
---|---|---  
additionalProperties | `Map` |   
outputFile | `File` | `${project.build.outputDirectory}/META-INF/build-info.properties`  
time | `String` |   
  
#### 9.1.2. Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

3.0.BUILD-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.springframework.boot:spring-boot-maven-plugin:jar:1.3.0.BUILD-SNAPSHOT
    org.apache.maven.plugin.PluginResolutionException: Plugin org.springframework.boot:spring-boot-maven-plugin:1.3.0.BUILD-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.springframework.boot:spring-boot-maven-plugin:jar:1.3.0.BUILD-SNAPSHOT
    	at org.apache.maven.plugin.internal.DefaultPluginDependenciesResolver.resolve(DefaultPluginDependenciesResolver.java:133)
    	at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getPluginDescriptor(DefaultMavenPluginManager.java:150)
    	at org.apache.maven.plugin.DefaultBuildPluginManager.loadPlugin(DefaultBuildPluginManager.java:81)
    	at org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver.resolveFromProject(DefaultPluginPrefixResolver.java:138)
    	at org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver.resolveFromProject(DefaultPluginPrefixResolver.java:125)
    	at org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver.resolve(DefaultPluginPrefixResolver.java:85)
    	at org.apache.maven.lifecycle.internal.MojoDescriptorCreator.findPluginForPrefix(MojoDescriptorCreator.java:260)
    	at org.apache.maven.lifecycle.internal.MojoDescriptorCreator.getMojoDescriptor(MojoDescriptorCreator.java:220)
    	at org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator.calculateTaskSegments(DefaultLifecycleTaskSegmentCalculator.java:103)
    	at org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator.calculateTaskSegments(DefaultLifecycleTaskSegmentCalculator.java:83)
    	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:85)
    	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)
    	at org.apache.maven.DefaultMaven.

Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

Name | `additionalProperties`  
---|---  
Type | `java.util.Map`  
Default value |   
User property |   
Since |   
  
##### `outputFile`

The location of the generated build-info.properties.

Name | `outputFile`  
---|---  
Type | `java.io.File`  
Default value | `${project.build.outputDirectory}/META-INF/build-info.properties`  
User property |   
Since |   
  
##### `time`

The value used for the `build.time` property in a form suitable for
`Instant#parse(CharSequence)`. Defaults to `session.request.startTime`. To
disable the `build.time` property entirely, use `'off'`.

Name | `time`  
---|---  
Type | `java.lang.String`  
Default value |   
User property |   
Since | `2.2.0`  
  
## 10\. Help Information

The `help` goal is a standard goal that displays information on the
capabilities of the plugin.

### 10.1. `spring-boot:help`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Display help information on spring-boot-maven-plugin. Call `mvn spring-
boot:help -Ddetail=true -Dgoal=<goal-name>` to display parameter details.

#### 10.1.1. Optional parameters

Name | Type | Default  
---|---|---  
detail | `boolean` | `false`  
goal | `String` |   
indentSize | `int` | `2`  
lineLength | `int` | `80`  
  
#### 10.1.2. Parameter details

##### `detail`

If `true`, display all settable properties for each goal.

Name | `detail`  
---|---  
Type | `boolean`  
Default value | `false`  
User property | `detail`  
Since |   
  
##### `goal`

The name of the goal for which to show help. If unspecified, all goals will be
displayed.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",mall-swarm,project.build.plugins.plugin_spring-boot-maven-plugin.groupId,NAME,org.springframework.boot,maven,mall-gateway/pom.xml,project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId,NAME,org.springframework.boot,maven,mall-portal/pom.xml,Others,Others,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their groupId values and the context in which they are used. Since both options have the same groupId value 'org.springframework.boot', it indicates that they are part of the same Spring Boot ecosystem. However, we need to examine the specific modules and projects in which these options are used to determine if there is a dependency between them."",
    ""rationale"": ""The equality of the groupId values 'org.springframework.boot' suggests that both configuration options are related to the Spring Boot framework. However, the fact that they are used in different modules (mall-gateway and mall-portal) and have different artifactIds (spring-boot-maven-plugin and spring-boot-starter-data-mongodb) implies that there is no direct dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options `project.version` and `project.parent_mall-swarm.version` have the same value `1.0-SNAPSHOT`. This suggests that the version of the `mall-demo` module is managed by its parent project `mall-monitor`, which defines the version for all its child modules.","To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is increasing Average Product(AP) always implying increasing Marginal Product(MP) in microeconomics? ](https://economics.stackexchange.com/questions/58818/is-increasing-average-productap-always-implying-increasing-marginal-productmp)
  * [ How could double damage be explained in-universe?",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-demo/pom.xml,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-monitor/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.version in mall-demo/pom.xml and project.parent_mall-swarm.version in mall-monitor/pom.xml.\n2. Determine their types: both are VERSION_NUMBER.\n3. Compare their values: both have value version:1.0-SNAPSHOT.\n4. Evaluate if a dependency exists based on value equality."",
    ""rationale"": ""The 'project.version' and 'project.parent_mall-swarm.version' in Maven projects specify the version of the project and its parent, respectively. Since they share the same value (1.0-SNAPSHOT), it implies that the versions are managed centrally, and a change in one would affect the other. Therefore, a dependency exists between these configuration options due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options have the same value 'version:1.0-SNAPSHOT', which suggests a possible dependency between them. Since Maven uses a hierarchical project structure, it's likely that mall-portal is a parent module of mall-gateway, and they share the same version number. This would mean that the version number in the child module (mall-gateway) depends on the version number in the parent module (mall-portal).","Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-dependencies</artifactId>
                    <version>${spring.boot.dependencies.version}</version>
                    <scope>import</scope>
                    <type>pom</type>
                  </dependency>
                  <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>${spring.cloud-version}</version>
                    <type>pom</type>
                    <scope>import</scope>
                  </dependency>
                </dependencies>
              </dependencyManagement>
    

> And dependencies you want to be available for each child will come in
> ""dependencies"" tag
    
    
          <dependencies>
            <dependency>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.18.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 2 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-gateway/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-portal/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.parent_mall-swarm.version in mall-gateway/pom.xml and project.version in mall-portal/pom.xml.\n2. Determine their types: VERSION_NUMBER.\n3. Compare their values: version:1.0-SNAPSHOT.\n4. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The 'project.parent_mall-swarm.version' and 'project.version' in Maven projects specify the version of the parent project and the current project, respectively. Since they share the same value '1.0-SNAPSHOT', it implies a dependency between them, ensuring consistency across modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,7.0,FP,False,"The configuration options project.version and project.parent_mall-swarm.version have identical values (1.0-SNAPSHOT). This suggests a potential dependency between the two, as they might be referencing the same version number. However, without further analysis of the Maven project structure and dependencies, it's uncertain whether this is a genuine dependency or just a coincidence.","Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ ""Des fini ton plat""? ](https://french.stackexchange.com/questions/54834/des-fini-ton-plat)
  * [ Teaching students how to check the validity of their proofs ](https://matheducators.stackexchange.com/questions/27972/teaching-students-how-to-check-the-validity-of-their-proofs)
  * [ Mass driver - reducing required length using loop? ](https://space.stackexchange.com/questions/66472/mass-driver-reducing-required-length-using-loop)
  * [ Wording clarification for remastered powerful shove feat ](https://rpg.stackexchange.com/questions/212744/wording-clarification-for-remastered-powerful-shove-feat)
  * [ Why not use computers to evaluate strength of players?",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-admin/pom.xml,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-demo/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.version in mall-admin/pom.xml and project.parent_mall-swarm.version in mall-demo/pom.xml.\n2. Determine their types: both are VERSION_NUMBER.\n3. Compare their values: both have value version:1.0-SNAPSHOT.\n4. Evaluate whether they depend on each other due to value equality."",
    ""rationale"": ""The 'project.version' and 'project.parent_mall-swarm.version' in Maven projects specify the version of the project and its parent, respectively. Since both have the same value '1.0-SNAPSHOT', it establishes a dependency based on value equality, ensuring consistency across modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Port Mapping,llama3:70b,config2,8.0,FP,False,"The dependency between services.redis.ports.in and services.redis.ports.out exists due to their identical values (6379) and their roles in configuring Redis ports. The 'in' port is likely used for incoming connections, while the 'out' port is used for outgoing connections. Given that they share the same value, it's probable that they are configured together to enable communication between the Redis service and other services or clients.","**docker-compose.yml**

    
    
    version: '3.7'
    
    services:
      redis_1:
        image: 'redis:6.0.6'
        ports:
          - '6371:6379'
      redis_2:
        image: 'redis:6.0.6'
        ports:
          - '6372:6379'
    

In your host machine:

    
    
    docker compose up
    
    
    
    redis-cli -p 6371 ping
    redis-cli -p 6372 ping
    

[Share](/a/76279121 ""Short permalink to this answer"")

[Improve this answer](/posts/76279121/edit)

Follow

answered May 18, 2023 at 8:42

[![Gayan Weerakutti's user
avatar](https://i.sstatic.net/WR7iJ.jpg?s=64)](/users/3647002/gayan-
weerakutti)

[Gayan Weerakutti](/users/3647002/gayan-weerakutti)Gayan Weerakutti

13.2k44 gold badges7373 silver badges7373 bronze badges

Add a comment  | 

0

[](/posts/72147912/timeline ""Show activity on this post."")

Found many articles, questions, github-issues about not being able to connect
from Windows host to redis running as a docker container on wsl2, with many
suggested fixes involving IP mappings. However, with recent (2022-ish)
versions of wsl2 and redis image I had a similar issue but the fix was simple.
I was using `docker-compose` and skeleton setup was

    
    
    services:
      redis:
        image: redis:7.0
        ports:
          - ""6379:6379""
        volumes:
          - redis-data:/data
    

but, as copy and paste from a non-WSL docker environment, I also had

    
    
        network_mode: host
    

and that was preventing me from connecting from the Windows host to the
container running under WSL. As soon as I removed that line, docker created a
default network for the service and I could connect (using `127.0.0.1:6379`).

](/questions/42376867/how-to-
connect-to-a-redis-container-using-docker-compose)

[ 1 ](/q/43039501 ""Question score \(upvotes - downvotes\)"") [connection
refused when trying to connect redis using docker compose
file](/questions/43039501/connection-refused-when-trying-to-connect-redis-
using-docker-compose-file)

[ 1 ](/q/46006260 ""Question score \(upvotes - downvotes\)"") [Docker Compose:
Cannot connect to Redis](/questions/46006260/docker-compose-cannot-connect-to-
redis)

[ 1 ](/q/48709862 ""Question score \(upvotes - downvotes\)"") [Why docker-
compose do not use port binding as expected?](/questions/48709862/why-docker-
compose-do-not-use-port-binding-as-expected)

[ 1 ](/q/50278066 ""Question score \(upvotes - downvotes\)"") [Redis and docker-
compose connect 127.0.0.1:6379](/questions/50278066/redis-and-docker-compose-
connect-127-0-0-16379)

[ 3 ](/q/53222660 ""Question score \(upvotes - downvotes\)"") [Redis server
refused to connect while using docker image](/questions/53222660/redis-server-
refused-to-connect-while-using-docker-image)

[ 2 ](/q/53583036 ""Question score \(upvotes - downvotes\)"") [Unable to connect
to Redis from Docker](/questions/53583036/unable-to-connect-to-redis-from-
docker)

[ 0 ](/q/59854159 ""Question score \(upvotes - downvotes\)"") [Cannot start
Redis service when I running on docker](/questions/59854159/cannot-start-
redis-service-when-i-running-on-docker)

[ 4 ](/q/62672325 ""Question score \(upvotes - downvotes\)"") [Why do I not get
connection to port of the Redis Docker component?

Using the default Redis port 6379 works fine. After changing the
Redis port to `6380` Redis Commander cannot connect to Redis anymore.

Error:

    
    
    setUpConnection Redis error Error: connect ECONNREFUSED 172.19.0.2:6380
    

This is the `docker-compose.yml` file:

    
    
    version: '3.7'
    services:
      redis:
        container_name: redis
        hostname: redis
        image: sameersbn/redis:4.0.9-2
        ports:
          - ""6380:6379""
        expose:
          - ""6380""
        volumes:
          - type: volume
            source: redis-data
            target: /data
        restart: always
      redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        environment:
          - REDIS_HOSTS=local:redis:6380
        ports:
          - ""8082:8081""
    volumes:
      redis-data: {}
    

I can connect to Redis on port `6380` using the following Node code:

    
    
    import redis from 'redis'
    
    const config = {
      host: '127.0.0.1',
      port: 6380,
      no_ready_check: true
    }
    
    const client = redis.createClient(config.port, config.host)
    
    client.set('expireName', 'nidkil', (err, reply) => {
      if (err) {
        console.error('Error occurred:', err)
      } else {
        console.log('Response:', reply)
      }
    })
    

If I change the port back to `6379` in the `docker-compose.yml` then Redis
Commander can connect.

Any suggestions how I can make Redis Commander connect to Redis on port
`6380`?

Here are some instructions to make this work properly.

## Install Official Docker not Distro repo.

    
    
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    systemctl enable docker ; systemctl start docker; systemctl status docker
    

Refer to [Install using the convenience
script](https://docs.docker.com/install/linux/docker-ce/centos/#install-using-
the-convenience-script)

## Connect to Redis container from host

    
    
    mkdir -p /etc/redis/
    chown -R 1000:1000 /etc/redis
    sudo docker run -d --name redis -p 6379:6379 --restart unless-stopped -v /etc/redis/:/data redis redis-server /data
    

NOTE: The important part that is key to your solution is to have port expose
(-p 6379:6379) to your docker host and route to container port. Refer to
[Redis Docker Documentation](https://hub.docker.com/_/redis/)

## Install ""redis-tools"" in your docker host. Centos install redis via epel
release.

[Share](/a/51996242 ""Short permalink to this answer"")

[Improve this answer](/posts/51996242/edit)

Follow

answered Aug 24, 2018 at 1:18

[![Randy Lerma's user
avatar](https://www.gravatar.com/avatar/4936cfabe3dc4e5335fa2eacc2fbf227?s=64&d=identicon&r=PG)](/users/10267364/randy-
lerma)

[Randy Lerma](/users/10267364/randy-lerma)Randy Lerma

6911 silver badge11 bronze badge

Add a comment  | 

4

[](/posts/62446567/timeline ""Show activity on this post."")

create Redis container using below command

    
    
    sudo docker run -d --name redis-test -p 6379:6379  -v /redis/redis.conf:/redis.conf redis redis-server /redis.conf --appendonly yes --requirepass ""redis""
    

you can access the Redis in the same machine using `Redis-CLI` and if you are
using other machines use `host machine IP`. if you are accessing Redis
container in the same host another docker container uses the `private IP` of
the machine.

**

The default setting is `bind 127.0.0.1` and this setting will cause `redis` to
only listen on loopback interface, and it will be only accessible from inside
the container. (for security)

To run redis with custom configuration file:

    
    
    sudo docker run -d --name redis-test -p 6379:6379 \
         -v /path/to/redisconf/redis.conf:/redis.conf \
         redis redis-server /redis.conf
    

Now to verify on docker host with `redis-tools` installed:

    
    
    redis-cli                           
    127.0.0.1:6379> 
    127.0.0.1:6379> set farhad likes:stackoverflow
    OK
    127.0.0.1:6379> get farhad
    ""likes:stackoverflow""
    127.0.0.1:6379> 
    

You can also connnect to your `redis` container from an external host via:

    
    
    redis-cli -h 'IP-address-of-dockerhost-running-redis-container'
    

[Share](/a/41374703 ""Short permalink to this answer"")

[Improve this answer](/posts/41374703/edit)

Follow

[edited Jan 9 at 20:39](/posts/41374703/revisions ""show all edits to this
post"")

[![Alexis Wilke's user
avatar](https://www.gravatar.com/avatar/185aae2d842026d2eefa7528b00b394b?s=64&d=identicon&r=PG)](/users/212378/alexis-
wilke)

[Alexis Wilke](/users/212378/alexis-wilke)

20.2k1111 gold badges101101 silver badges169169 bronze badges

answered Dec 29, 2016 at 7:01

[![Farhad Farahi's user
avatar](https://i.sstatic.net/dROn5.jpg?s=64)](/users/5867722/farhad-farahi)

[Farhad Farahi](/users/5867722/farhad-farahi)Farhad Farahi

38.1k77 gold badges7878 silver badges7474 bronze badges

7

  * Thank you for your help, didn't quite get me there.",mall-swarm,services.redis.ports.in,PORT,6379,docker-compose,document/docker/docker-compose-env.yml,services.redis.ports.out,PORT,6379,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.redis.ports.in (type PORT, value 6379) and services.redis.ports.out (type PORT, value 6379). 2. Analyze their roles in Docker Compose: 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. 3. Evaluate if the values are equal and if one configuration option relies on the other."",
    ""rationale"": ""The configuration options services.redis.ports.in and services.redis.ports.out have the same value (6379). In Docker Compose, this typically means that the internal port within the Redis container is mapped to the same external port on the host. This setup does not imply a dependency between the two configuration options, as they are simply defining the port mapping for the Redis service."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration option services.mysql.environment.MYSQL_ROOT_PASSWORD in docker-compose-env.yml sets the root password for the MySQL database. The configuration option spring.datasource.username in application.yml sets the username for the Spring application's database connection. Since both values are set to 'root', it is likely that the MYSQL_ROOT_PASSWORD value is used to configure the database username in the Spring application. Therefore, there is a dependency between the two configuration options.","**links** â Here we are setting a link with app_db service. So we can use
**database** when defining IP address for the database connection on our
spring boot application. Then it will connect with the database running with
this docker-compose.

**environment** â In this section, we are setting the MySQL database name,
MySQL username and password for the application and root password.

All done, Now letâs change our **application.properties** to support this
database and application server setup.

    
    
    spring.datasource.url=jdbc:mysql://app_db:3306/java_to_dev_app_db
    spring.datasource.username=java_to_dev
    spring.datasource.password=nE5kMc7JCGNqwDQM
    spring.jpa.hibernate.ddl-auto=update
    spring.datasource.initialization-mode=always
    

**Here as you can see we are using that link value we used in docker-compose
definition for host/IP address**. additionally, password and DB has changed
accordingly.

**Better Solution** : Use a **separate application.properties** file for
docker-compose based deployments and set that **via profiles**.

#### Using Depends On to Build Communication Between Services

**The docker-compose documentation specifies thatÂ`links`Â is deprecated and
should be replaced withÂ `depends_on`.**

So here Iâm setting the same docker-compose setup with using depends_on
flag.

Just add the following to the docker-compose.yml

    
    
    version: ""3.7""
    services:
      api_service:
        build: .
        restart: always
        ports:
          - 8080:8080
        depends_on:
          - mysql_db
        command: sh -c './wait-for mysql_db:3306 -- npm start'
      mysql_db:
        image: ""mysql:8.0""
        restart: always
        ports:
          - 3307:3306
        environment:
          MYSQL_DATABASE: java_to_dev_app_db
          MYSQL_USER: java_to_dev
          MYSQL_PASSWORD: nE5kMc7JCGNqwDQM
          MYSQL_ROOT_PASSWORD: nE5kMc7JCGNqwDQN
    

Here we are using depends_on to set dependent services to api_service. So
internally docker-compose will start dependency services first and it will
start dependent services in the end.

I'm trying to set up a Spring Boot application that depends on a MySQL
database called _teste_ in docker-compose. After issuing `docker-compose up`,
I'm getting:

    
    
    Caused by: java.net.ConnectException: Connection refused (Connection refused)
    

I'm running on Linux Mint, my docker-compose version is 1.23.2, my Docker
version is 18.09.0.

application.properties

    
    
    # JPA PROPS
    spring.jpa.show-sql=true
    spring.jpa.properties.hibernate.format_sql=true
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
    spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
    
    spring.datasource.url=jdbc:mysql://db:3306/teste?useSSL=false&serverTimezone=UTC
    spring.datasource.username=rafael
    spring.datasource.password=password
    
    spring.database.driverClassName =com.mysql.cj.jdbc.Driver
    

docker-compose.yml

    
    
    version: '3.5'
    services:
      db:
        image: mysql:latest
        environment:
          - MYSQL_ROOT_PASSWORD=rootpass
          - MYSQL_DATABASE=teste      
          - MYSQL_USER=rafael
          - MYSQL_PASSWORD=password
        ports:
          - 3306:3306
      web:
        image: spring-mysql
        depends_on:
          - db
        links:
          - db
        ports:
          - 8080:8080
        environment:
          - DATABASE_HOST=db
          - DATABASE_USER=rafael
          - DATABASE_NAME=teste
          - DATABASE_PORT=3306
    

and the Dockerfile

    
    
    FROM openjdk:8
    ADD target/app.jar app.jar
    EXPOSE 8080
    ENTRYPOINT [""java"", ""-jar"", ""app.

To eliminate that issue should spring-app container make wait using **`healthcheck`** and **`depends_on`** properties on compose file.

  3. All two containers should be in the same docker network.

Perfect sample compose file that includes those solutions.

    
    
    version: '3'
    services:
      mysql:
        container_name: mysql
        image: mysql:5.7
        healthcheck:
          test: [ ""CMD"", ""mysqladmin"", ""ping"", ""-h"", ""localhost"" ]
          interval: 10s
          timeout: 5s
          retries: 5
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: http_logger
          MYSQL_USER: supun
          MYSQL_PASSWORD: password
        ports:
          - ""3307:3306""
        networks:
          - logger-network
        volumes:
          - mysql-data:/var/lib/mysql
    
      http-logger:
        image: http-logger:v1.8.0
        container_name: http-logger
        ports:
          - ""8080:8080""
        build: .
        depends_on:
          mysql :
            condition: service_healthy
        networks:
          - logger-network
        environment:
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: http_logger
          MYSQL_USER: supun
          MYSQL_PASSWORD: password
    
    networks:
      logger-network:
        driver: bridge
    
    volumes:
      mysql-data:
    

Here is perfectly working spring boot + MySQL volume + docker-compose example.
<https://github.com/supunUOM/spring_mysql_docker_volume>

[Share](/a/78204280 ""Short permalink to this answer"")

Follow

answered Mar 22 at 5:53

[![Supun Sandaruwan's user
avatar](https://lh5.googleusercontent.com/-iBJ1nXhbxg4/AAAAAAAAAAI/AAAAAAAABhE/70v5Fg51h3U/photo.jpg?sz=64)](/users/10827515/supun-
sandaruwan)

[Supun Sandaruwan](/users/10827515/supun-sandaruwan)Supun Sandaruwan

2,2402424 silver badges2222 bronze badges

Add a comment  | 

0

[](/posts/78386620/timeline ""Show activity on this post."")

So
internally docker-compose will start dependency services first and it will
start dependent services in the end. So basically here it will start the DB
first and finally, the application will be started.

Additionally, we have a small change on database connection properties, Here
you should add the service name for the host or IP on that database
connection.

    
    
    spring.datasource.url=jdbc:mysql://mysql_db:3306/java_to_dev_app_db
    spring.datasource.username=java_to_dev
    spring.datasource.password=nE5kMc7JCGNqwDQM
    spring.jpa.hibernate.ddl-auto=update
    spring.datasource.initialization-mode=always
    

### Running Spring Boot Application and MySQL Database Using Docker Compose

Now we have our docker-compose setup for this application. So first create a
jar build for this application using the following command,

Navigate to application root folder and execute,

    
    
    $ ./gradlew clean build
    

Now there should be a newly created jar file with all the necessary files to
run this application on **build/libs** folder.

create the build with docker compose to build docker image using built jar
file.

    
    
    $ docker-compose build
    

use the following command to run the whole setup using docker compose.

    
    
    $ docker-compose up
    

Then It will capture the docker-compose.yml and start running using the
instructions given in that file.

sample output:

![docker compose up spring boot mysql
output](/content/images/2021/01/08/docker-compose-up-mysql-
output-1024x487.png)

docker compose up spring boot mysql output

## Conclusion

Thanks for reading our latest article on Docker Compose Spring Boot with MySQL
with practical usage. Hope you got a good understanding of how we can use
docker, and docker-compose with spring boot application development and
deployment.

If you are looking for spring boot based practical application development
tutorials, just check ourÂ [article series](/list-of-articles/)Â and comment
on whatever new things you need to see on our website.

MYSQL_ROOT_PASSWORD do not work](/questions/40149880/docker-mysql-root-
password-do-not-work)

[ 9 ](/q/45711618 ""Question score \(upvotes - downvotes\)"") [Docker-compose
mysql does not seem to recognize environment variable
MYSQL_RANDOM_ROOT_PASSWORD](/questions/45711618/docker-compose-mysql-does-not-
seem-to-recognize-environment-variable-mysql-rando)

[ 10 ](/q/51367541 ""Question score \(upvotes - downvotes\)"") [Can't login as
root into MySQL container](/questions/51367541/cant-login-as-root-into-mysql-
container)

[ 3 ](/q/56247365 ""Question score \(upvotes - downvotes\)"") [Docker-compose
not reading environment variables
(MYSQL_DATABASE_PASSWORD)](/questions/56247365/docker-compose-not-reading-
environment-variables-mysql-database-password)

[ 108 ](/q/59838692 ""Question score \(upvotes - downvotes\)"")
[MYSQL_ROOT_PASSWORD is set but getting ""Access denied for user
'root'@'localhost' (using password: YES)"" in docker
container](/questions/59838692/mysql-root-password-is-set-but-getting-access-
denied-for-user-rootlocalhost)

[ 2 ](/q/63852254 ""Question score \(upvotes - downvotes\)"") [Docker Compose -
MySQL - MYSQL_ROOT_PASSWORD](/questions/63852254/docker-compose-mysql-mysql-
root-password)

[ 0 ](/q/69137818 ""Question score \(upvotes - downvotes\)"") [MySQL Docker
Compose password not working](/questions/69137818/mysql-docker-compose-
password-not-working)

[ 1 ](/q/70678655 ""Question score \(upvotes - downvotes\)"") [Docker : MySQL
password is not set despite setting environement variable (-e
MYSQL_ROOT_PASSWORD)](/questions/70678655/docker-mysql-password-is-not-set-
despite-setting-environement-variable-e-mys)

[ 1 ](/q/72089140 ""Question score \(upvotes - downvotes\)"") [Docker mysql root
or user won't login, just access denied.",mall-swarm,services.mysql.environment.MYSQL_ROOT_PASSWORD,PASSWORD,root,docker-compose,document/docker/docker-compose-env.yml,spring.datasource.username,USERNAME,root,spring,mall-admin/src/main/resources/application.yml,Datasource,Datasource,"{
    ""plan"": ""1. Analyze the configuration files docker-compose-env.yml and application.yml.\n2. Identify the technologies used in each file: docker-compose and spring respectively.\n3. Evaluate the purpose of each configuration option: MYSQL_ROOT_PASSWORD for MySQL root password and datasource username for Spring datasource.\n4. Determine if the value equality between 'root' is coincidental or indicative of a dependency."",
    ""rationale"": ""The configuration options services.mysql.environment.MYSQL_ROOT_PASSWORD in docker-compose-env.yml and spring.datasource.username in application.yml have the same value 'root', but they serve different purposes in different technologies. The MYSQL_ROOT_PASSWORD is used to set the root password for MySQL, whereas the datasource username is used to configure the Spring datasource. Given their distinct uses, it is unlikely that they depend on each other."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration option project.groupId with value com.macro.mall in mall-auth/pom.xml and project.dependencies.dependency_mall-common.groupId with value com.macro.mall in mall-gateway/pom.xml have identical values. According to Maven's naming conventions, the groupId should follow a domain name schema, which is the case here. This suggests that these configuration options are related and might be dependent on each other.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

html ""The POM"")
      * [Profiles](././guides/introduction/introduction-to-profiles.html ""Profiles"")
      * [Standard Directory Layout](././guides/introduction/introduction-to-the-standard-directory-layout.html ""Standard Directory Layout"")
      * [Dependency Mechanism](././guides/introduction/introduction-to-dependency-mechanism.html ""Dependency Mechanism"")
    * [Getting Help](././users/getting-help.html ""Getting Help"")
    * [Running Maven](././run-maven/index.html ""Running Maven"")
    * [Plugins Validation](././guides/plugins/validation/index.html ""Plugins Validation"")
    * [Configuring Plugins](././guides/mini/guide-configuring-plugins.html ""Configuring Plugins"")
    * [Creating a site](././guides/mini/guide-site.html ""Creating a site"")
    * [Archetypes](././guides/introduction/introduction-to-archetypes.html ""Archetypes"")
    * [Repositories](././guides/introduction/introduction-to-repositories.html ""Repositories"")
    * [Guides](././guides/mini/index.html ""Guides"")
    * [Settings Reference](././settings.html ""Settings Reference"")
    * [POM Reference](././pom.html ""POM Reference"")
    * [FAQ](././general.html ""FAQ"")
  * [Plugin Developer Centre](././plugin-developers/index.html ""Plugin Developer Centre"")
  * [Maven Repository Centre](././repositories/index.html ""Maven Repository Centre"")
  * [Maven Developer Centre](././developers/index.html ""Maven Developer Centre"")
  * [Books and Resources](././articles.html ""Books and Resources"")
  * [Security](././security.html ""Security"")
  * Community
  * [Community Overview](././community.html ""Community Overview"")
  * [Project Roles](././project-roles.html ""Project Roles"")
  * [How to Contribute](././guides/development/guide-helping.html ""How to Contribute"")
  * [Getting Help](././users/getting-help.html ""Getting Help"")
  * [Issue Management](././issue-management.html ""Issue Management"")
  * [Getting Maven Source](././scm.",mall-swarm,project.groupId,NAME,com.macro.mall,maven,mall-auth/pom.xml,project.dependencies.dependency_mall-common.groupId,NAME,com.macro.mall,maven,mall-gateway/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: com.macro.mall in mall-auth/pom.xml and com.macro.mall in mall-gateway/pom.xml.\n2. Check if the values are identical across both modules.\n3. If they are identical, conclude that a dependency exists due to value equality."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-auth and mall-gateway are specific modules in the same project and therefore need to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that Maven dependencies with identical groupIds can imply a dependency relationship between them. In this case, if both projects use the same groupId 'org.springframework.boot' for their respective dependencies, it could suggest that they are related and dependent on each other.","apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

If you wish to override the Spring Security
version, you can do so by providing a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring-security.version>6.3.1</spring-security.version>
    </properties>

Since Spring Security makes breaking changes only in major releases, you can
safely use a newer version of Spring Security with Spring Boot. However, at
times, you may need to update the version of Spring Framework as well. You can
do so by adding a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring.version>6.1.9</spring.version>
    </properties>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

### Maven Without Spring Boot

When you use Spring Security without Spring Boot, the preferred way is to use
Spring Security's BOM to ensure that a consistent version of Spring Security
is used throughout the entire project. The following example shows how to do
so:

pom.xml

    
    
    <dependencyManagement>
    	<dependencies>
    		<!-- ... other dependency elements ... -->
    		<dependency>
    			<groupId>org.springframework.security</groupId>
    			<artifactId>spring-security-bom</artifactId>
    			<version>{spring-security-version}</version>
    			<type>pom</type>
    			<scope>import</scope>
    		</dependency>
    	</dependencies>
    </dependencyManagement>

A minimal Spring Security Maven set of dependencies typically looks like the
following example:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-web</artifactId>
    	</dependency>
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-config</artifactId>
    	</dependency>
    </dependencies>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.

com/tags/spring-security)

  * [Spring Security](index.html)
  * [Getting Spring Security](getting-spring-security.html)

# Getting Spring Security

This section describes how to get the Spring Security binaries. See [Source
Code](community.html#community-source) for how to obtain the source code.

## Release Numbering

Spring Security versions are formatted as MAJOR.MINOR.PATCH such that:

  * MAJOR versions may contain breaking changes. Typically, these are done to provide improved security to match modern security practices.

  * MINOR versions contain enhancements but are considered passive updates.

  * PATCH level should be perfectly compatible, forwards and backwards, with the possible exception of changes that fix bugs.

## Usage with Maven

As most open source projects, Spring Security deploys its dependencies as
Maven artifacts. The topics in this section describe how to consume Spring
Security when using Maven.

### Spring Boot with Maven

Spring Boot provides a `spring-boot-starter-security` starter that aggregates
Spring Security-related dependencies. The simplest and preferred way to use
the starter is to use [Spring
Initializr](https://docs.spring.io/initializr/docs/current/reference/html/) by
using an IDE integration in
([Eclipse](https://joshlong.com/jl/blogPost/tech_tip_geting_started_with_spring_boot.html)
or [IntelliJ](https://www.jetbrains.com/help/idea/spring-
boot.html#d1489567e2), [NetBeans](https://github.com/AlexFalappa/nb-
springboot/wiki/Quick-Tour)) or through
[start.spring.io](https://start.spring.io). Alternatively, you can manually
add the starter, as the following example shows:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-security</artifactId>
    	</dependency>
    </dependencies>

Since Spring Boot provides a Maven BOM to manage dependency versions, you do
not need to specify a version.",mall-swarm,project.dependencies.dependency_spring-boot-starter-security.groupId,NAME,org.springframework.boot,maven,mall-auth/pom.xml,project.dependencies.dependency_spring-boot-starter-amqp.groupId,NAME,org.springframework.boot,maven,mall-portal/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their groupId values and the context in which they are used. Since both options have the same groupId value 'org.springframework.boot', it indicates that they are part of the same Spring Boot ecosystem. However, this does not necessarily mean that there is a direct dependency between them."",
    ""rationale"": ""The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values. They can be used independently in different modules or projects."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall-swarm is a microservice mall system that uses core technologies such as Spring Cloud, Spring Boo, MyBatis, Elasticsearch, Docker, and Kubernetes. 

In the mall-swarm, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall-swarm, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall-swarm is as follows:

mall-swarm/
├── config/ # Configuration stored in the configuration center
│   ├── admin/
│   ├── demo/
│   ├── gateway/
│   ├── portal/
│   └── search/
├── mall-admin/ # Backend management system service
│   ├── pom.xml
│   └── src/
├── mall-auth/ # Unified authentication center based on Spring Security Oauth2
│   ├── pom.xml
│   └── src/
├── mall-common/ # Utility classes and common code module
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Microservices remote call testing service
│   ├── pom.xml
│   └── src/
├── mall-gateway/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # database operation code module generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-monitor/ # Microservices API gateway service based on Spring Cloud Gateway
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Mobile mall system service
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system service based on Elasticsearch
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,7.0,FP,False,"The rationale behind this evaluation is that identical configuration options with the same type and value may indicate a dependency or synchronization between the two configurations. In this case, both configurations are related to logging levels for the com.macro.mall package, which suggests a potential connection.","Starting with Spring Boot 2.0.x this works again. Tested with Spring Boot
v2.0.9.RELEASE. E.g. enable connection pool debug log:

    
    
    LOGGING_LEVEL_COM_ZAXXER=DEBUG java -jar myApp.jar
    

or Spring framework debug log:

    
    
    LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=DEBUG java -jar myApp.jar
    

or both:

    
    
    LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=DEBUG LOGGING_LEVEL_COM_ZAXXER=DEBUG java -jar myApp.jar
    

See [""Application Poperties"" in Spring Boot Reference
Documentation](https://docs.spring.io/spring-
boot/docs/current/reference/html/appendix-application-properties.html#common-
application-properties) for more application properties.

[Share](/a/56856097 ""Short permalink to this answer"")

[Improve this answer](/posts/56856097/edit)

Follow

[edited Oct 22, 2019 at 12:42](/posts/56856097/revisions ""show all edits to
this post"")

answered Jul 2, 2019 at 15:49

[![t0r0X's user
avatar](https://www.gravatar.com/avatar/fb86bc783e1c8cbf3544083563987cef?s=64&d=identicon&r=PG)](/users/265954/t0r0x)

[t0r0X](/users/265954/t0r0x)t0r0X

4,50311 gold badge4141 silver badges3636 bronze badges

1

  * 2

Updated link: [docs.spring.io/spring-
boot/docs/current/reference/html/…](https://docs.spring.io/spring-
boot/docs/current/reference/html/appendix-application-properties.html#common-
application-properties)

- [Brent Bradburn](/users/86967/brent-bradburn ""53,943 reputation"")

Commented Oct 21, 2019 at 21:08

Add a comment  | 

5

[](/posts/34300100/timeline ""Show activity on this post."")

I would anyway suggest you to use Spring profiles:

  1. Create 2 properties files:

`application-local.properties` and `application-remote.properties`

(profile names can be different obviously)

  2.

Have a look at Spring Boot's
[LoggingApplicationListener](https://github.com/spring-projects/spring-
boot/blob/abe3d3852761430c9f5f1368d82509d0c19ac4d9/spring-boot-project/spring-
boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java#L340-L346).  
If you'd debug it and set a breakpoint in the highlighted code block, you'd
see that the log level definition for a class `com.acme.mypackage.MyClass`
becomes `com.acme.mypackage.myclass`.  
So **a log level definition for a class looks exactly like a log level
definition for a package.**

This is related to Spring's [Relaxed Binding](https://docs.spring.io/spring-
boot/docs/current/reference/html/spring-boot-features.html#boot-features-
external-config-relaxed-binding), which proposes an upper case notation for
environment variables. Thus the typical camel case notation of a class is not
visible for the LoggingApplicationListener: The environment variable for
`MyClass` has to be defined as `MYCLASS` and will be available as `myclass` in
Spring's Environment _(this example ignores the fully-qualified name of the
class)_.

Once the camel case notation of the class is lost, during runtime there's no
chance to recover the original class name. Thus log definitions in environment
variables don't work for classes but only for packages.

## Is there an alternative?

Yes, you can set the `SPRING_APPLICATION_JSON` environment variable. Its value
describes the desired property in JSON style:

    
    
    SPRING_APPLICATION_JSON={""logging"":{""level"":{""com"":{""acme"":{""package"":{""Class"":""DEBUG""}}}}}}
    

Read more in [Spring's docs](https://docs.spring.io/spring-
boot/docs/2.1.13.RELEASE/reference/html/boot-features-external-
config.html#boot-features-external-config-application-json) (search for
""_SPRING_APPLICATION_JSON_ "" there).

I also tried to set logging level via environment variable but as already
mentioned it is not possible by using environment variable with upper case
name, eg. `LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=DEBUG`. I also didn't want to do
it via `application.properties` or `_JAVA_OPTIONS`.

After digging into class
`org.springframework.boot.logging.LoggingApplicationListener` I've checked
that spring boot tries to set logging level `DEBUG` to `ORG_SPRINGFRAMEWORK`
package which is not real package name. So conclusion is that you can use
environment variable to set logging level but it needs to be in the form: `
LOGGING_LEVEL_org.springframework=DEBUG ` or `
logging.level.org.springframework=DEBUG `

Tested on spring boot 1.5.3

[Share](/a/45914116 ""Short permalink to this answer"")

[Improve this answer](/posts/45914116/edit)

Follow

answered Aug 28, 2017 at 7:46

[![pepuch's user
avatar](https://www.gravatar.com/avatar/1cdd1e1e6ce6221286582df6a8eeef66?s=64&d=identicon&r=PG)](/users/2069368/pepuch)

[pepuch](/users/2069368/pepuch)pepuch

6,42688 gold badges5252 silver badges8585 bronze badges

2

  * 1

I tried this with Spring Boot 1.3.8 on AWS, but it did not work unfortunately.

- [Wim Deblauwe](/users/40064/wim-deblauwe ""26,321 reputation"")

Commented Apr 5, 2018 at 19:18

  * This worked for me with SpringBoot 2.5.3

- [Linden X. Quan](/users/8820559/linden-x-quan ""764 reputation"")

Commented Dec 7, 2022 at 1:07

Add a comment  | 

12

[](/posts/34317326/timeline ""Show activity on this post."")

Yes, you can control logging level using environment variable. Here is how I
have implemented for my Spring Boot application, deployed on Cloud Foundry
platform.

[Share](/a/57623996 ""Short permalink to this answer"")

[Improve this answer](/posts/57623996/edit)

Follow

[edited Jan 9 at 11:25](/posts/57623996/revisions ""show all edits to this
post"")

answered Aug 23, 2019 at 10:03

[![Peter Wippermann's user
avatar](https://i.sstatic.net/Vldld.jpg?s=64)](/users/193705/peter-wippermann)

[Peter Wippermann](/users/193705/peter-wippermann)Peter Wippermann

4,40355 gold badges3838 silver badges4848 bronze badges

3

  * 1

This was killing me on Spring Boot 2.1.2, nothing in the documentation
mentions this limitation. Currently our hack is to redeploy special .jars with
debug logging enabled in `application.properties` if we want to debug
individual classes. Thanks for the detailed analysis

- [xref](/users/1107232/xref ""1,737 reputation"")

Commented Feb 18, 2020 at 19:59

  * 4

This is also acknowledged now in the documentation: [docs.spring.io/spring-
boot/docs/2.1.9.RELEASE/reference/html/…](https://docs.spring.io/spring-
boot/docs/2.1.9.RELEASE/reference/html/boot-features-logging.html#boot-
features-custom-log-levels) saying ""The above approach will only work for
package level logging. Since relaxed binding always converts environment
variables to lowercase, it’s not possible to configure logging for an
individual class in this way. If you need to configure logging for a class,
you can use the SPRING_APPLICATION_JSON variable.""

- [Dario Seidl](/users/401712/dario-seidl ""4,520 reputation"")

Commented Jun 1, 2021 at 16:45

  * Thanks, this also applies to Quarkus.... strange.

- [WesternGun](/users/4537090/westerngun ""12,214 reputation"")

Commented Jul 20, 2023 at 13:10

Add a comment  | 

28

[](/posts/45914116/timeline ""Show activity on this post."")

[Peter's user
avatar](https://i.sstatic.net/Fhlut.jpg?s=64)](/users/1623598/peter)

[Peter](/users/1623598/peter)Peter

1,55211 gold badge2222 silver badges4141 bronze badges

Add a comment  | 

1

[](/posts/74959604/timeline ""Show activity on this post."")

Setting the log level via environment variables for a **package** will work,
while setting the log level for a single **class** won't work. This is
mentioned in the reference doc for [Spring Boot 2/Log
levels](https://docs.spring.io/spring-
boot/docs/2.7.7/reference/html/features.html#features.logging.log-levels) and
[Spring Boot 2/Log levels](https://docs.spring.io/spring-
boot/docs/3.0.1/reference/html/features.html#features.logging.log-levels) .

The log level can be set by using the `SPRING_APPLICATION_JSON` environment
variable, eg.

`SPRING_APPLICATION_JSON='{""logging.level.org.hibernate.SQL"":""DEBUG"",""logging.level.org.hibernate.type.descriptor.sql.BasicBinder"":""TRACE""}'`

[Share](/a/74959604 ""Short permalink to this answer"")

[Improve this answer](/posts/74959604/edit)

Follow

answered Dec 30, 2022 at 8:33

[![Daniele's user
avatar](https://www.gravatar.com/avatar/b5772cd098fe7c457af4c4269d3a884e?s=64&d=identicon&r=PG)](/users/5264558/daniele)

[Daniele](/users/5264558/daniele)Daniele

2,78711 gold badge1414 silver badges2121 bronze badges

Add a comment  | 

0

[](/posts/34335351/timeline ""Show activity on this post."")

Here's an example using [Logback](http://logback.qos.ch/manual/index.html)
with [Janino](http://logback.qos.ch/setup.html#janino) to conditionally
include different logging configs via [properties or environmental
variables](https://docs.spring.io/spring-
boot/docs/current/reference/html/boot-features-external-config.html). The
base config, logback.",mall,logging.level.com.macro.mall,UNKNOWN,debug,spring,mall-portal/src/main/resources/application-dev.yml,logging.level.com.macro.mall,UNKNOWN,debug,spring,mall-search/src/main/resources/application-dev.yml,Others,Logging Level,"{
    ""plan"": ""1. Identify the configuration options: logging.level.com.macro.mall in mall-portal/src/main/resources/application-dev.yml and logging.level.com.macro.mall in mall-search/src/main/resources/application-dev.yml.\n2. Analyze their values: both are set to 'debug'.\n3. Evaluate whether they inherently depend on each other due to value-equality."",
    ""rationale"": ""The configuration options logging.level.com.macro.mall in mall-portal/src/main/resources/application-dev.yml and logging.level.com.macro.mall in mall-search/src/main/resources/application-dev.yml have the same value 'debug', but they are used in different modules (mall-portal and mall-search) and likely define log levels for specific components or packages. Therefore, there is no inherent dependency between them based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value equality, which suggests a deliberate design choice to establish a hierarchical project structure with inheritance. The identical groupId values imply that mall-portal and mall-security might be subprojects of a common parent project, inheriting properties from this parent project.","* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

How is placeholder `${project.version}` resolved for managed properties from
parent pom? I've expected that it is resolved globally, so when the parent pom
has version 2, `${project.version}` would also be resolved to version 2.

In parent pom I have:

    
    
    <groupId>my.group</groupId>
    <artifactId>parent</artifactId>
    <version>2</version>
    <packaging>pom</packaging>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>my.group</groupId>
                <artifactId>dep</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>     
    

In child I use

    
    
    <parent>
        <groupId>my.group</groupId>
        <artifactId>parent</artifactId>
        <version>2</version>
    </parent>
    <version>1</version>
    <artifactId>child</artifactId>
    

But the artifact `my.group.dep.1.jar` is used, instead of
`my.group.dep.2.jar`. So the placeholder is resolved to the version of the
project **using** the managed dependency, and not those of the project
**defining** the dependency.

Is that expected behaviour? I'm using **maven 3.0.4.**

  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")
  * [build-dependencies](/questions/tagged/build-dependencies ""show questions tagged 'build-dependencies'"")

[Share](/q/16895555 ""Short permalink to this question"")

[Improve this question](/posts/16895555/edit)

Follow

[edited Apr 11, 2014 at 10:29](/posts/16895555/revisions ""show all edits to
this post"")

[![Aritz's user
avatar](https://i.sstatic.net/55Hvn.jpg?s=64)](/users/1199132/aritz)

[Aritz](/users/1199132/aritz)

31.4k1616 gold badges142142 silver badges222222 bronze badges

asked Jun 3, 2013 at 11:21

[!

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.",mall,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-security/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: project.parent_mall.groupId in mall-portal/pom.xml and project.groupId in mall-security/pom.xml.\n2. Compare the values of both groupId configurations: com.macro.mall.\n3. Evaluate if the values are equal, indicating a dependency between the two configuration options."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as they specify the same group ID, which is necessary for identifying and relating modules within a project."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Port Mapping,llama3:70b,config2,8.0,FP,False,"The configuration options services.mysql.ports.in and services.mysql.ports.out have the same value (3306), which suggests a connection between them. In docker-compose, ports.in and ports.out are used to configure container ports for incoming and outgoing traffic, respectively. Given their identical values, it is reasonable to assume that they depend on each other, as one might be used to expose the port for the other.","mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    . 37 common frames omitted discovery-app_1    | Caused by: java.net.ConnectException: Connection refused discovery-app_1    |    at java.base/sun.nio.ch.Net.

reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) ~[na:na]     at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source) ~[na:na]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     . 58 common frames omitted Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method) ~[na:na]     at java.base/java.net.AbstractPlainSocketImpl.

jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1040)
    hackernews_1  |     at org.mariadb.jdbc.internal.util.Utils.retrieveProxy(Utils.java:490)
    hackernews_1  |     at org.mariadb.jdbc.MariaDbConnection.newConnection(MariaDbConnection.java:144)
    hackernews_1  |     at org.mariadb.jdbc.Driver.connect(Driver.java:90)
    hackernews_1  |     at slick.jdbc.DriverDataSource.getConnection(DriverDataSource.scala:101)
    hackernews_1  |     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:341)
    hackernews_1  |     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:193)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:430)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.access$500(HikariPool.java:64)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:570)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:563)
    hackernews_1  |     at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    

docker ps

    
    
    CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                                  PORTS                              NAMES
    ab721996469d        mysql:5.7                  ""docker-entrypoint.s…""   42 minutes ago      Up 55 seconds                           3306/tcp, 0.0.0.0:3307->3307/tcp   two_mysql_1
    7aab98e2b8d7        prismagraphql/prisma:1.

slingacademy.com/article/multicolumn-indices-in-
mysql-8-a-practical-guide/) [ Handling Redundant MySQL Indices
](https://www.slingacademy.com/article/mysql-how-to-deal-with-redundant-and-
duplicate-indices/) [ Clean Unused MySQL 8 Indices
](https://www.slingacademy.com/article/mysql-8-how-to-clean-unused-indices-in-
a-database/) [ MySQL Table Repair Guide
](https://www.slingacademy.com/article/mysql-8-find-replace-table-corruption/)
[ MySQL 8 Table Partitioning Guide
](https://www.slingacademy.com/article/table-partitioning-in-
mysql-8-a-practical-guide/) [ MySQL 8 UNION Operator Guide
](https://www.slingacademy.com/article/using-union-operator-in-mysql-8-the-
complete-guide/) [ Cursor-based Pagination in MySQL
](https://www.slingacademy.com/article/how-to-implement-cursor-based-
pagination-in-mysql-3-examples/) [ MySQL 8 Subqueries Tutorial
](https://www.slingacademy.com/article/execute-subqueries-mysql-8-practical-
guide/) [ MySQL: IS NULL & IS NOT NULL Ops
](https://www.slingacademy.com/article/mysql-is-null-and-is-not-null-
operators-explained-with-examples/) [ MySQL 8 BETWEEN Operator Guide
](https://www.slingacademy.com/article/using-between-operator-in-
mysql-8-a-practical-guide/) [ MySQL Date Range Selection
](https://www.slingacademy.com/article/mysql-selecting-rows-between-dates-
times/) [ MySQL: IN and NOT IN Explained
](https://www.slingacademy.com/article/mysql-in-and-not-in-operators-
explained-with-examples/) [ Mastering MySQL 8 CHECK Constraint
](https://www.slingacademy.com/article/understanding-check-constraint-in-
mysql-8-a-practical-guide/) [ MySQL 8: One-to-Many Guide
](https://www.slingacademy.com/article/one-to-many-relationship-in-
mysql-8-a-practical-guide/) [ FOREIGN KEY in MySQL 8 Guide
](https://www.slingacademy.

ms = 540000 enable.auto.commit = true exclude.internal.topics = true fetch.max.bytes = 52428800 fetch.max.wait.ms = 500 fetch.min.bytes = 1 group.id = WorkUnitApp heartbeat.interval.ms = 3000 interceptor.classes = null key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer max.partition.fetch.bytes = 1048576 max.poll.interval.ms = 300000 max.poll.records = 500 metadata.max.age.ms = 300000 metric.reporters = [] metrics.num.samples = 2 metrics.sample.window.ms = 30000 partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor] receive.buffer.bytes = 65536 reconnect.backoff.ms = 50 request.timeout.ms = 305000 retry.backoff.ms = 100 sasl.kerberos.kinit.cmd = /usr/bin/kinit sasl.kerberos.min.time.before.relogin = 60000 sasl.kerberos.service.name = null sasl.kerberos.ticket.renew.jitter = 0.05 sasl.kerberos.ticket.renew.window.factor = 0.8 sasl.mechanism = GSSAPI security.protocol = PLAINTEXT send.buffer.bytes = 131072 session.timeout.ms = 10000 ssl.cipher.suites = null ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1] ssl.endpoint.identification.algorithm = null ssl.key.password = null ssl.keymanager.algorithm = SunX509 ssl.keystore.location = null ssl.keystore.password = null ssl.keystore.type = JKS ssl.protocol = TLS ssl.provider = null ssl.secure.random.implementation = null ssl.trustmanager.algorithm = PKIX ssl.truststore.location = null ssl.truststore.password = null ssl.truststore.",mall,services.mysql.ports.in,PORT,3306,docker-compose,document/docker/docker-compose-env.yml,services.mysql.ports.out,PORT,3306,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.mysql.ports.in and services.mysql.ports.out in docker-compose-env.yml of technology docker-compose.\n2. Check their types (PORT) and values (3306).\n3. Evaluate whether the value equality indicates a dependency between the two options."",
    ""rationale"": ""The configuration option services.mysql.ports.in specifies the internal port 3306 within the MySQL container, while services.mysql.ports.out specifies the external port 3306 exposed by the container. The value equality (3306) indicates that the external port is mapped to the same internal port for simplicity. This setup does not imply a dependency between the two options, as they are simply configured to use the same port number."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.parent_mall.version in mall-portal/pom.xml and project.version in mall-security/pom.xml have the same value, which is version:1.0-SNAPSHOT. This suggests that they might be related, but it's not a direct dependency. The dependency exists because of Maven's inheritance mechanism, where a submodule inherits the version from its parent module. If mall-security is a submodule of mall-portal, then project.version in mall-security/pom.xml will inherit the value from project.parent_mall.version in mall-portal/pom.xml.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall,project.parent_mall.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-portal/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-security/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.parent_mall.version in mall-portal/pom.xml and project.version in mall-security/pom.xml.\n2. Check their types: both are VERSION_NUMBER.\n3. Compare their values: both have value version:1.0-SNAPSHOT.\n4. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The 'project.parent_mall.version' and 'project.version' in Maven projects specify the version of the project or its parent. Since they share the same value, it is necessary for them to be consistent across related modules to ensure compatibility. Therefore, a dependency exists between these configuration options based on value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration options spring.datasource.username in both files have the same value 'root'. This suggests that they might be referencing the same database or datasource, and therefore, changes to one might affect the other.","time-between-eviction-runs-millis`  
`spring.datasource.tomcat.url`  
`spring.datasource.tomcat.use-disposable-connection-facade`  
`spring.datasource.tomcat.use-equals`  
`spring.datasource.tomcat.use-lock`  
`spring.datasource.tomcat.use-statement-facade`  
`spring.datasource.tomcat.username`  
`spring.datasource.tomcat.validation-interval`  
`spring.datasource.tomcat.validation-query`  
`spring.datasource.tomcat.validation-query-timeout`  
`spring.datasource.tomcat.validator-class-name`  
| Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource |   
`spring.datasource.type` | Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath. |   
`spring.datasource.url` | JDBC URL of the database. |   
`spring.datasource.username` | Login username of the database. |   
`spring.datasource.xa.data-source-class-name` | XA datasource fully qualified name. |   
`spring.datasource.xa.properties.*` | Properties to pass to the XA data source. |   
`spring.elasticsearch.connection-timeout` | Connection timeout used when communicating with Elasticsearch. | `1s`  
`spring.elasticsearch.password` | Password for authentication with Elasticsearch. |   
`spring.elasticsearch.path-prefix` | Prefix added to the path of every request sent to Elasticsearch. |   
`spring.elasticsearch.restclient.sniffer.delay-after-failure` | Delay of a sniff execution scheduled after a failure. | `1m`  
`spring.elasticsearch.restclient.sniffer.interval` | Interval between consecutive ordinary sniff executions. | `5m`  
`spring.elasticsearch.restclient.ssl.bundle` | SSL bundle name. |   
`spring.elasticsearch.socket-keep-alive` | Whether to enable socket keep alive between client and Elasticsearch. | `false`  
`spring.elasticsearch.socket-timeout` | Socket timeout used when communicating with Elasticsearch. | `30s`  
`spring.elasticsearch.uris` | Comma-separated list of the Elasticsearch instances to use. | `[http://localhost:9200]`  
`spring.elasticsearch.username` | Username for authentication with Elasticsearch.

# Here '1stDB' is the database name
    spring.datasource.url=jdbc:mysql://localhost/A
    spring.datasource.username=root
    spring.datasource.password=root
    spring.datasource.driver-class-name=com.mysql.jdbc.Driver
     
     
    # Here '2ndDB' is the database name
    spring.second-datasourcee.url=jdbc:mysql://localhost/B
    spring.second-datasource.username=root
    spring.second-datasource.password=root
    spring.second-datasource.driver-class-name=com.mysql.jdbc.Driver
    
    
    
    @Bean
    @Primary
    @ConfigurationProperties(prefix = ""spring.datasource"")
    public DataSource firstDataSource() {
        return DataSourceBuilder.create().build();
    }
     
    @Bean
    @ConfigurationProperties(prefix = ""spring.second-datasource"")
    public DataSource secondDataSource() {
       return DataSourceBuilder.create().build();
    }
    

[Share](/a/50577229 ""Short permalink to this answer"")

[Improve this answer](/posts/50577229/edit)

Follow

[edited Nov 30, 2022 at 9:55](/posts/50577229/revisions ""show all edits to
this post"")

[![Toni's user
avatar](https://graph.facebook.com/2270515379631452/picture?type=large)](/users/10231374/toni)

[Toni](/users/10231374/toni)

4,75733 gold badges1515 silver badges4747 bronze badges

answered May 29, 2018 at 5:57

[![Raju Ranjan's user
avatar](https://www.gravatar.com/avatar/124f9fa100ca3a895dd36cbead66c57d?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/9185844/raju-ranjan)

[Raju Ranjan](/users/9185844/raju-ranjan)Raju Ranjan

7111 silver badge22 bronze badges

2

  * Not working for me. And saying this: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.

> _**declaring a data source in Spring Boot application.properties**_
    
    
    spring.datasource.company.url=jdbc:mysql://localhost/company_db?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
    spring.datasource.company.username=root
    spring.datasource.company.password=root
    spring.datasource.company.platform=mysql
    
    
    spring.datasource.employee.url=jdbc:mysql://localhost/employee_db?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
    spring.datasource.employee.username=root
    spring.datasource.employee.password=root
    spring.datasource.employee.platform=mysql
    

* * *

> use multiple data sources, we need to declare multiple beans with different
> mappings within Spring's application context. using a configuration class

* * *
    
    
    @Configuration
    @EnableJpaRepositories(basePackages = ""com.example.multiple.datasources.entity.company"",
            entityManagerFactoryRef = ""companyEntityManagerFactory"",
            transactionManagerRef = ""companyTransactionManager"")
    public class CompanyDataSourceConfiguration {
    
        @Bean
        @ConfigurationProperties(""spring.datasource.company"")
        public DataSourceProperties companyDataSourceProperties() {
            return new DataSourceProperties();
        }
    
        @Bean
        @ConfigurationProperties(""spring.datasource.company.configuration"")
        public DataSource companyDataSource() {
            return companyDataSourceProperties().initializeDataSourceBuilder()
                    .type(HikariDataSource.class).build();
        }
    
        @Bean(name = ""companyEntityManagerFactory"")
        public LocalContainerEntityManagerFactoryBean companyEntityManagerFactory(EntityManagerFactoryBuilder builder) {
            return builder.dataSource(companyDataSource()).packages(Company.class).build();
        }
    
        @Bean
        public PlatformTransactionManager companyTransactionManager(
                final @Qualifier(""companyEntityManagerFactory"") LocalContainerEntityManagerFactoryBean companyEntityManagerFactory
        ) {
            return new JpaTransactionManager(companyEntityManagerFactory.getObject());
    
        }
    
    
    }
    

* * *

> we need to declare one of the datasources as @Primary. This is because
> EntityManagerFactoryBuilder is declared in JpaBaseConfiguration and this
> class need a single data source injected.

oracleucp.max-statements`  
`spring.datasource.oracleucp.min-pool-size`  
`spring.datasource.oracleucp.network-protocol`  
`spring.datasource.oracleucp.o-n-s-configuration`  
`spring.datasource.oracleucp.pdb-roles`  
`spring.datasource.oracleucp.port-number`  
`spring.datasource.oracleucp.property-cycle`  
`spring.datasource.oracleucp.query-timeout`  
`spring.datasource.oracleucp.read-only-instance-allowed`  
`spring.datasource.oracleucp.role-name`  
`spring.datasource.oracleucp.s-q-l-for-validate-connection`  
`spring.datasource.oracleucp.seconds-to-trust-idle-connection`  
`spring.datasource.oracleucp.server-name`  
`spring.datasource.oracleucp.sharding-mode`  
`spring.datasource.oracleucp.time-to-live-connection-timeout`  
`spring.datasource.oracleucp.timeout-check-interval`  
`spring.datasource.oracleucp.u-r-l`  
`spring.datasource.oracleucp.user`  
`spring.datasource.oracleucp.validate-connection-on-borrow`  
| Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource |   
`spring.datasource.password` | Login password of the database. |   
`spring.datasource.tomcat.abandon-when-percentage-full`  
`spring.datasource.tomcat.access-to-underlying-connection-allowed`  
`spring.datasource.tomcat.alternate-username-allowed`  
`spring.datasource.tomcat.commit-on-return`  
`spring.datasource.tomcat.connection-properties`  
`spring.datasource.tomcat.data-source-j-n-d-i`  
`spring.datasource.tomcat.db-properties`  
`spring.datasource.tomcat.default-auto-commit`  
`spring.datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.

Defaults to ""false"", meaning a page number of 0 in the request equals the first page. | `false`  
`spring.data.web.pageable.page-parameter` | Page index parameter name. | `page`  
`spring.data.web.pageable.prefix` | General prefix to be prepended to the page number and page size parameters. |   
`spring.data.web.pageable.qualifier-delimiter` | Delimiter to be used between the qualifier and the actual page number and size properties. | `_`  
`spring.data.web.pageable.size-parameter` | Page size parameter name. | `size`  
`spring.data.web.sort.sort-parameter` | Sort parameter name. | `sort`  
`spring.datasource.dbcp2.abandoned-usage-tracking`  
`spring.datasource.dbcp2.access-to-underlying-connection-allowed`  
`spring.datasource.dbcp2.auto-commit-on-return`  
`spring.datasource.dbcp2.cache-state`  
`spring.datasource.dbcp2.clear-statement-pool-on-return`  
`spring.datasource.dbcp2.connection-factory-class-name`  
`spring.datasource.dbcp2.connection-init-sqls`  
`spring.datasource.dbcp2.default-auto-commit`  
`spring.datasource.dbcp2.default-catalog`  
`spring.datasource.dbcp2.default-read-only`  
`spring.datasource.dbcp2.default-schema`  
`spring.datasource.dbcp2.default-transaction-isolation`  
`spring.datasource.dbcp2.disconnection-sql-codes`  
`spring.datasource.dbcp2.driver`  
`spring.datasource.dbcp2.driver-class-name`  
`spring.datasource.dbcp2.duration-between-eviction-runs`  
`spring.datasource.dbcp2.eviction-policy-class-name`  
`spring.datasource.dbcp2.fast-fail-validation`  
`spring.datasource.dbcp2.initial-size`  
`spring.datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.",mall,spring.datasource.username,USERNAME,root,spring,mall-admin/src/main/resources/application-dev.yml,spring.datasource.username,USERNAME,root,spring,mall-search/src/main/resources/application-dev.yml,Datasource,Datasource,"{
    ""plan"": ""1. Identify the modules: mall-admin and mall-search. 2. Determine their respective datasources. 3. Evaluate whether they share a common datasource or have separate ones. 4. Check for any explicit dependencies between the modules."",
    ""rationale"": ""The configuration options spring.datasource.username in mall-admin/src/main/resources/application-dev.yml and mall-search/src/main/resources/application-dev.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value equality, as both groupId values are identical (com.macro.mall). This suggests that mall-admin is a child project of mall-common, and the groupId in mall-admin inherits from the parent project. The packaging type 'pom' in the parent project further supports this dependency.","* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.",mall,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-admin/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-common/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the parent POM in mall-common/pom.xml with groupId com.macro.mall.\n2. Verify that the child POM in mall-admin/pom.xml has a parent element referencing the parent POM.\n3. Check if the groupId in the child POM is the same as the parent POM."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-admin is a specific module in the mall project and therefore needs to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The configuration options have the same name, type, and value ('debug'). This suggests that they might be related or dependent on each other. However, without more context about the specific technologies and frameworks used in the project, it is difficult to determine the exact nature of this dependency.","5. **debug** :

> detailed information on the flow through the system. Expect these to be
> written to logs only.

  6. **trace** :

> more detailed information. Expect these to be written to logs only.

Apache commons-logging ""best practices"" for enterprise usage makes a
distinction between **debug** and **info** based on what kind of boundaries
they cross.

Boundaries include:

  * External Boundaries - Expected Exceptions.

  * External Boundaries - Unexpected Exceptions.

  * Internal Boundaries. 

  * Significant Internal Boundaries. 

(See [commons-logging guide](https://commons.apache.org/proper/commons-
logging/guide.html#Best_Practices_Enterprise) for more info on this.)

[Share](/a/36656073 ""Short permalink to this answer"")

[Improve this answer](/posts/36656073/edit)

Follow

answered Apr 15, 2016 at 20:14

[![Pacerier's user
avatar](https://www.gravatar.com/avatar/77f196f4d3b4b89fc179071f3aa21e1e?s=64&d=identicon&r=PG)](/users/632951/pacerier)

[Pacerier](/users/632951/pacerier)Pacerier

88.6k109109 gold badges380380 silver badges640640 bronze badges

0

Add a comment  | 

29

[](/posts/14210533/timeline ""Show activity on this post."")

I'd recommend adopting Syslog severity levels: `DEBUG, INFO, NOTICE, WARNING,
ERROR, CRITICAL, ALERT, EMERGENCY`.  
See <http://en.wikipedia.org/wiki/Syslog#Severity_levels>

They should provide enough fine-grained severity levels for most use-cases and
are recognized by existing log-parsers. While you have of course the freedom
to only implement a subset, e.g. `DEBUG, ERROR, EMERGENCY` depending on your
app's requirements.

Let's standardize on something that's been around for ages instead of coming
up with our own standard for every different app we make. Once you start
aggregating logs and are trying to detect patterns across different ones it
really helps.

>
> **Error**
>
> Logs that highlight when the current flow of execution is stopped due to a
> failure. These should indicate a failure in the current activity, **not an
> application-wide failure**.
>
> **Warning**
>
> Logs that highlight an **abnormal or unexpected** event in the application
> flow, but do not otherwise cause the application execution to stop.
>
> **Information**
>
> Logs that track the general flow of the application. These logs should have
> **long-term value**.
>
> **Debug**
>
> Logs that are used for interactive investigation during development. These
> logs should primarily contain information useful for debugging and have **no
> long-term value**.
>
> **Trace**
>
> Logs that contain the most detailed messages. These messages may contain
> **sensitive application data**. These messages are disabled by default and
> should **never be enabled in a production environment**.

[Share](/a/73388312 ""Short permalink to this answer"")

[Improve this answer](/posts/73388312/edit)

Follow

[edited Feb 17, 2023 at 23:27](/posts/73388312/revisions ""show all edits to
this post"")

answered Aug 17, 2022 at 12:14

[![marsze's user
avatar](https://i.sstatic.net/BLBtT.png?s=64)](/users/2060966/marsze)

[marsze](/users/2060966/marsze)marsze

16.6k55 gold badges5353 silver badges6464 bronze badges

Add a comment  | 

8

[](/posts/72660859/timeline ""Show activity on this post."")

From <https://sematext.com/blog/slf4j-tutorial/>:

>   * **TRACE** – log events with this level are the most fine-grained and are
> usually not needed unless you need to have the full visibility of what is
> happening in your application and inside the third-party libraries that you
> use. You can expect the TRACE logging level to be very verbose.
>   * **DEBUG** – less granular compared to the TRACE level, but still more
> than you will need in everyday use.

**debug** :

> Debug-level messages [, i.e. messages logged for the sake of _de-bugging_)].
>
>      * ""_Opening config file ..._ ""

  9. **trace1** -> **trace6** :

> Trace messages [, i.e. messages logged for the sake of _tracing_].
>
>      * ""_proxy: FTP: control connection complete_ ""
>      * ""_proxy: CONNECT: sending the CONNECT request to the remote proxy_ ""
>      * ""_openssl: Handshake: start_ ""
>      * ""_read from buffered SSL brigade, mode 0, 17 bytes_ ""
>      * ""_map lookup FAILED:`map=rewritemap` `key=keyname`_""
>      * ""_cache lookup FAILED, forcing new map lookup_ ""

  10. **trace7** -> **trace8** :

> Trace messages, dumping large amounts of data
>
>      * ""_`| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |`_ ""
>      * ""_`| 0000: 02 23 44 30 13 40 ac 34 df 3d bf 9a 19 49 39 15 |`_ ""

* * *

Apache commons-logging: [_§_](https://commons.apache.org/proper/commons-
logging/guide.html#Message_PrioritiesLevels)

  1. **fatal** :

> Severe errors that cause premature termination. Expect these to be
> immediately visible on a status console.

  2. **error** :

> Other runtime errors or unexpected conditions. Expect these to be
> immediately visible on a status console.

  3. **warn** :

> Use of deprecated APIs, poor use of API, 'almost' errors, other runtime
> situations that are undesirable or unexpected, but not necessarily ""wrong"".
> Expect these to be immediately visible on a status console.

  4. **info** :

> Interesting runtime events (startup/shutdown). Expect these to be
> immediately visible on a console, so be conservative and keep to a minimum.

  5. **debug** :

> detailed information on the flow through the system. Expect these to be
> written to logs only.

  6.

[Jay Cincotta's user
avatar](https://www.gravatar.com/avatar/9c8105278b6066258cce53e7efaeaa40?s=64&d=identicon&r=PG)](/users/26553/jay-
cincotta)

[Jay Cincotta](/users/26553/jay-cincotta)Jay Cincotta

4,35633 gold badges2222 silver badges1717 bronze badges

5

  * 49

About Debug <-> Trace: Note that at least in Java-land, the order of priority
is ""debug > trace"". That's the convention all logging frameworks I know use
(SLF4J, Logback, log4j, Apache Commons Logging, Log4Net, NLog). So Debug <
Trace seems unusual to me.

- [sleske](/users/43681/sleske ""83,019 reputation"")

Commented Feb 23, 2015 at 18:03

  * 1

Why a developer requires debug logs when he is debugging the code itself using
integrated development environment(IDE)? He can check what is going wrong by
stepping over each peace of code. Isn't it?

- [RBT](/users/465053/rbt ""25,405 reputation"")

Commented Feb 9, 2017 at 8:01

  * 13

I just did a survey of 7 logging frameworks across several languages. Of the
three that include a ""trace"" severity level, _all_ of them have it as being
less severe than debug. i.e., trace < debug; I have no real-world cases where
the opposite is true. @RBT It's not always possible to break into a debugger.
E.g., webservers must serve requests in a finite amount of time, or exist in
multithreaded and/or server environments that might be difficult to
instrument, or the bug might be rare enough that a debugger isn't an option.
Or you don't know what you're looking for.

- [Thanatos](/users/101999/thanatos ""43,758 reputation"")

Commented Feb 18, 2017 at 8:33

  * To avoid undesirable noise, one should be able to change the debug level.

version>2.7.0</spring-boot.version>
        <spring-cloud.version>2021.0.3</spring-cloud.version>
        <spring-cloud-alibaba.version>2021.0.1.0</spring-cloud-alibaba.version>
        <spring-cloud-starter-oauth2.version>2.2.5.RELEASE</spring-cloud-starter-oauth2.version>
        <pagehelper-starter.version>1.4.2</pagehelper-starter.version>
        <pagehelper.version>5.3.0</pagehelper.version>
        <druid.version>1.2.9</druid.version>
        <hutool.version>5.8.0</hutool.version>
        <mybatis-generator.version>1.4.1</mybatis-generator.version>
        <mybatis.version>3.5.9</mybatis.version>
        <mysql-connector.version>8.0.29</mysql-connector.version>
        <spring-data-commons.version>2.7.0</spring-data-commons.version>
        <jjwt.version>0.9.1</jjwt.version>
        <aliyun-oss.version>2.5.0</aliyun-oss.version>
        <alipay-sdk.version>4.38.61.ALL</alipay-sdk.version>
        <logstash-logback.version>5.3</logstash-logback.version>
        <admin-starter-server.version>2.7.0</admin-starter-server.version>
        <minio.version>8.4.1</minio.version>
        <knife4j.version>3.0.3</knife4j.version>
        <nimbus-jose-jwt.version>9.23</nimbus-jose-jwt.version>
        <mall-common.version>1.0-SNAPSHOT</mall-common.version>
        <mall-mbg.version>1.0-SNAPSHOT</mall-mbg.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.",mall,logging.level.com.macro.mall,UNKNOWN,debug,spring,mall-admin/src/main/resources/application-dev.yml,logging.level.com.macro.mall,UNKNOWN,debug,spring,mall-demo/src/main/resources/application.yml,Others,Logging Level,"{
    ""plan"": ""1. Identify the configuration options: logging.level.com.macro.mall in mall-admin/src/main/resources/application-dev.yml and logging.level.com.macro.mall in mall-demo/src/main/resources/application.yml.\n2. Determine their types: both are of type UNKNOWN.\n3. Evaluate their values: both have the value 'debug'.\n4. Analyze the context: both options are used in different modules (admin and demo) with potentially separate logging configurations.\n5. Decide whether a dependency exists based on value-equality."",
    ""rationale"": ""The configuration options logging.level.com.macro.mall in mall-admin/src/main/resources/application-dev.yml and logging.level.com.macro.mall in mall-demo/src/main/resources/application.yml have the same value 'debug', but they are used in different modules with separate logging configurations. It is likely that each module defines its own logging level independently, without relying on the other. Therefore, there is no dependency between these options based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.groupId in both pom.xml files have the same value, com.macro.mall. This suggests a possible dependency between the two projects, where mall-admin is a submodule of the parent project mall-mbg.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

`com` means this project belongs to a company, and `org` means this project
belongs to a social organization. These are alright, but for those strange
domain like xxx.tv, xxx.uk, xxx.cn, it does not make sense to name the groupId
started with ""tv."",""cn."", the groupId should deliver the basic information of
the project rather than the domain.

[Share](/a/52921676 ""Short permalink to this answer"")

[Improve this answer](/posts/52921676/edit)

Follow

[edited Oct 22, 2018 at 2:46](/posts/52921676/revisions ""show all edits to
this post"")

[![Stephen Rauch's user
avatar](https://i.sstatic.net/13Fpq.png?s=64)](/users/7311767/stephen-rauch)

[Stephen Rauch](/users/7311767/stephen-rauch)♦

49.3k3131 gold badges113113 silver badges139139 bronze badges

answered Oct 22, 2018 at 2:28

[![Tommy.Tang's user
avatar](https://i.sstatic.net/N0Tpf.jpg?s=64)](/users/10538298/tommy-tang)

[Tommy.Tang](/users/10538298/tommy-tang)Tommy.Tang

15777 bronze badges

5

  * 7

This convention is preventing developers using maven due to that you must
possess a domain before deploying your artifacts to the central maven
repository. It is ridiculous. Possessing a domain could be a pretty cost year
by year.

- [Tommy.Tang](/users/10538298/tommy-tang ""157 reputation"")

Commented Oct 28, 2018 at 3:54

  * 10

A good practice is to derive package names from the repository URL. If you're
using GitHub, your account is called `myuser` and your repository is called
`myrepo`, then simply use the package name `com.github.myuser.myrepo`. That's
free and still unique.",mall,project.groupId,NAME,com.macro.mall,maven,mall-admin/pom.xml,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-mbg/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""To evaluate the dependency between project.groupId in mall-admin/pom.xml and project.parent_mall.groupId in mall-mbg/pom.xml, first identify the groupId values in both configurations. Since both values are 'com.macro.mall', it indicates a potential dependency. Next, analyze the context of the groupId configuration option, which is used to uniquely identify a project across all projects. Given that mall-admin and mall-mbg are likely modules within the same project, they should share the same groupId to maintain consistency and uniqueness."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. As both configurations have the same value 'com.macro.mall', it implies that they belong to the same project and therefore depend on each other to ensure consistency and uniqueness."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that when multiple dependencies share the same groupId, it's often a sign of a related or dependent configuration. In this case, both swagger-annotations and swagger-models have the same groupId (io.swagger), which suggests that they might be related or dependent on each other.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Because in the doc:[maven.apache.org/guides/introduction/…](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management#A%20second) while explaining the second use of the `<dependencyManagement>` it looks like it will be inherited by default. At one line they are saying that:""When maven is run on project B, version 1.0 of artifacts a, b, c, and d will be used regardless of the version specified in their pom"" even though ""b"" is not used in the project B

- [chirag soni](/users/11421611/chirag-soni ""1,006 reputation"")

Commented Jun 24, 2019 at 4:03

  * Try it out yourself

- [Andrejs](/users/2786733/andrejs ""11,491 reputation"")

Commented Jun 24, 2019 at 6:31

  * And as someone already asked but remained unanswered, why not to simply use properties from the parent pom without dependencyManagement section in the parent?

- [Andrey M. Stepanov](/users/2566304/andrey-m-stepanov ""460 reputation"")

Commented Aug 8, 2020 at 15:10

  * 1

@Andrey M. Stepanov - good question. For a single dependency, it's not only
the version that you may want to manage centrally, but also the <scope>,
<exclusions> and other artifact attributes. It's cleaner to use
<dependencyManagement> then, instead of 3-4 properties per artifact.

- [Andrejs](/users/2786733/andrejs ""11,491 reputation"")

Commented Dec 17, 2021 at 10:49

 |  Show **2** more comments

82

[](/posts/36228674/timeline ""Show activity on this post."")

The [documentation](http://maven.apache.org/guides/introduction/introduction-
to-dependency-mechanism.html#Dependency_Management) on the Maven site is
horrible. What dependencyManagement does is simply move your dependency
definitions (version, exclusions, etc) up to the parent pom, then in the child
poms you just have to put the groupId and artifactId.

version>
        <pagehelper.version>5.3.2</pagehelper.version>
        <druid.version>1.2.14</druid.version>
        <hutool.version>5.8.9</hutool.version>
        <springfox-swagger.version>3.0.0</springfox-swagger.version>
        <swagger-models.version>1.6.0</swagger-models.version>
        <swagger-annotations.version>1.6.0</swagger-annotations.version>
        <mybatis-generator.version>1.4.1</mybatis-generator.version>
        <mybatis.version>3.5.10</mybatis.version>
        <mysql-connector.version>8.0.29</mysql-connector.version>
        <spring-data-commons.version>2.7.5</spring-data-commons.version>
        <jjwt.version>0.9.1</jjwt.version>
        <aliyun-oss.version>2.5.0</aliyun-oss.version>
        <alipay-sdk.version>4.38.61.ALL</alipay-sdk.version>
        <logstash-logback.version>7.2</logstash-logback.version>
        <minio.version>8.4.5</minio.version>
        <jaxb-api.version>2.3.1</jaxb-api.version>
        <mall-common.version>1.0-SNAPSHOT</mall-common.version>
        <mall-mbg.version>1.0-SNAPSHOT</mall-mbg.version>
        <mall-security.version>1.0-SNAPSHOT</mall-security.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.",mall,project.dependencyManagement.dependencies.dependency_swagger-annotations.groupId,NAME,io.swagger,maven,pom.xml,project.dependencyManagement.dependencies.dependency_swagger-models.groupId,NAME,io.swagger,maven,pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values of both configuration options: project.dependencyManagement.dependencies.dependency_swagger-annotations.groupId and project.dependencyManagement.dependencies.dependency_swagger-models.groupId.\n2. Compare the values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_swagger-annotations.groupId and the option project.dependencyManagement.dependencies.dependency_swagger-models.groupId have the same groupId value 'io.swagger'. This indicates that they are part of the same Swagger ecosystem, and it is likely that swagger-annotations depends on swagger-models or vice versa."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration options spring.datasource.druid.stat-view-servlet.login-password in both application-dev.yml and application-prod.yml files have the same value 'druid'. This suggests that the login password for the Druid stat view servlet is consistent across different environments (dev and prod). Therefore, a change to this configuration option in one environment would likely require a corresponding change in the other environment to maintain consistency.","The meaning of each configuration is already listed in the code.

Next, open the StatViewServlet configuration, as follows.

    
    
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
    11
    12
    13
    14
    

|

    
    
    # 启用内置的监控页面
    spring.datasource.druid.stat-view-servlet.enabled=true
    # 内置监控页面的地址
    spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
    # 开启 Reset All 功能
    spring.datasource.druid.stat-view-servlet.reset-enable=true
    # 设置登录用户名
    spring.datasource.druid.stat-view-servlet.login-username=javaboy
    # 设置登录密码
    spring.datasource.druid.stat-view-servlet.login-password=123
    # 白名单（如果allow没有配置或者为空，则允许所有访问）
    spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
    # 黑名单（deny 优先于 allow，如果在 deny 列表中，就算在 allow 列表中，也会被拒绝）
    spring.datasource.druid.stat-view-servlet.deny=
      
  
---|---  
  
Just configure the page address and configure the black and white list.

**Note that the reset-enable property will be displayed even if it is set to
false, the reset button will just not be reset by clicking it.**

Okay, that's it.

## 3\. Testing

Next, we start the Spring Boot project for testing.

After the Spring Boot project starts successfully, first visit the following
link.

  * `http://localhost:8080/druid/login.html`

At this point we will see the login authentication page as follows.

![druid login](https://cdn.jsdelivr.net/gh/springcloud-community/image-
bucket/2022/02/15/655aae32e30746bf83279193a8f5d11e.png)

Enter the username/password we configured earlier (javaboy/123) to log in, and
after successful login, you can see the following page.

!

It takes around 10
minutes or more. Can anyone please help me with this?

Log images: [log image](https://i.sstatic.net/7sCMP.png)

Project config:

    
    
    spring:
      datasource:
        druid:
          url: jdbc:oracle:thin:@192.168.1.10:1521:prod
          initial-size: 10
          max-active: 20
          min-idle: 1
          max-wait: 60000
          pool-prepared-statements: true
          max-pool-prepared-statement-per-connection-size: 20
          validation-query: SELECT 1 FROM DUAL
          test-on-borrow: false
          test-on-return: false
          test-while-idle: true
          time-between-eviction-runs-millis: 60000
          min-evictable-idle-time-millis: 30000
          remove-abandoned: true       
          remove-abandoned-timeout: 60 
          web-stat-filter:
            enabled: true
            url-pattern: /*
            #exclusions: *.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
            session-stat-enable: false
            session-stat-max-count: 1000
            profile-enable: true
            principal-session-name: admin
            principal-cookie-name: admin
          stat-view-servlet:
            enabled: true
            url-pattern: /druid/*
            reset-enable: true
            login-username: user1
            login-password: user1
          driver-class-name: oracle.jdbc.driver.OracleDriver
        username: user1
        password: user1
    

Please help to take a look, I have not yet found a solution

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [spring](/questions/tagged/spring ""show questions tagged 'spring'"")
  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")

[Share](/q/76728087 ""Short permalink to this question"")

[Improve this question](/posts/76728087/edit)

Follow

[edited Jul 20, 2023 at 8:51](/posts/76728087/revisions ""show all edits to
this post"")

[!

Next, we configure WebStatFilter in `application.properties`, which is used to
collect data from web-jdbc association monitoring.

    
    
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
    11
    12
    13
    14
    15
    16
    17
    

|

    
    
    # 启用 WebStatFilter
    spring.datasource.druid.web-stat-filter.enabled=true
    # 配置拦截规则
    spring.datasource.druid.web-stat-filter.url-pattern=/*
    # 排除一些不必要的 url，这些 URL 不会涉及到 SQL 查询
    spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
    # 开启 session 统计功能
    spring.datasource.druid.web-stat-filter.session-stat-enable=true
    # 缺省 sessionStatMaxCount 是 1000 个，我们可以按需要进行配置
    spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
    # 配置 principalSessionName，使得 druid 能够知道当前的 session 的用户是谁
    # 根据需要，这个参数的值是 user 信息保存在 session 中的 sessionName
    #spring.datasource.druid.web-stat-filter.principal-session-name=
    # 下面这个配置的作用和上面配置的作用类似，这个是通过 Cookie 来识别用户
    #spring.datasource.druid.web-stat-filter.principal-cookie-name=
    # 开启 profile 后就能够监控单个 URL 地址调用列表
    #spring.datasource.druid.web-stat-filter.profile-enable=
      
  
---|---  
  
We configure the first five on it, and the last three can be configured
without. The meaning of each configuration is already listed in the code.

Next, open the StatViewServlet configuration, as follows.

oracleucp.max-statements`  
`spring.datasource.oracleucp.min-pool-size`  
`spring.datasource.oracleucp.network-protocol`  
`spring.datasource.oracleucp.o-n-s-configuration`  
`spring.datasource.oracleucp.pdb-roles`  
`spring.datasource.oracleucp.port-number`  
`spring.datasource.oracleucp.property-cycle`  
`spring.datasource.oracleucp.query-timeout`  
`spring.datasource.oracleucp.read-only-instance-allowed`  
`spring.datasource.oracleucp.role-name`  
`spring.datasource.oracleucp.s-q-l-for-validate-connection`  
`spring.datasource.oracleucp.seconds-to-trust-idle-connection`  
`spring.datasource.oracleucp.server-name`  
`spring.datasource.oracleucp.sharding-mode`  
`spring.datasource.oracleucp.time-to-live-connection-timeout`  
`spring.datasource.oracleucp.timeout-check-interval`  
`spring.datasource.oracleucp.u-r-l`  
`spring.datasource.oracleucp.user`  
`spring.datasource.oracleucp.validate-connection-on-borrow`  
| Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource |   
`spring.datasource.password` | Login password of the database. |   
`spring.datasource.tomcat.abandon-when-percentage-full`  
`spring.datasource.tomcat.access-to-underlying-connection-allowed`  
`spring.datasource.tomcat.alternate-username-allowed`  
`spring.datasource.tomcat.commit-on-return`  
`spring.datasource.tomcat.connection-properties`  
`spring.datasource.tomcat.data-source-j-n-d-i`  
`spring.datasource.tomcat.db-properties`  
`spring.datasource.tomcat.default-auto-commit`  
`spring.datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.

datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.dbcp2.log-expired-connections`  
`spring.datasource.dbcp2.login-timeout`  
`spring.datasource.dbcp2.max-idle`  
`spring.datasource.dbcp2.max-open-prepared-statements`  
`spring.datasource.dbcp2.max-total`  
`spring.datasource.dbcp2.min-idle`  
`spring.datasource.dbcp2.num-tests-per-eviction-run`  
`spring.datasource.dbcp2.password`  
`spring.datasource.dbcp2.pool-prepared-statements`  
`spring.datasource.dbcp2.remove-abandoned-on-borrow`  
`spring.datasource.dbcp2.remove-abandoned-on-maintenance`  
`spring.datasource.dbcp2.rollback-on-return`  
`spring.datasource.dbcp2.test-on-borrow`  
`spring.datasource.dbcp2.test-on-create`  
`spring.datasource.dbcp2.test-on-return`  
`spring.datasource.dbcp2.test-while-idle`  
`spring.datasource.dbcp2.url`  
`spring.datasource.dbcp2.username`  
`spring.datasource.dbcp2.validation-query`  
| Commons DBCP2 specific settings bound to an instance of DBCP2's BasicDataSource |   
`spring.datasource.driver-class-name` | Fully qualified name of the JDBC driver. Auto-detected based on the URL by default. |   
`spring.datasource.embedded-database-connection` | Connection details for an embedded database. Defaults to the most suitable embedded database that is available on the classpath. |   
`spring.datasource.generate-unique-name` | Whether to generate a random datasource name.",mall,spring.datasource.druid.stat-view-servlet.login-password,VERSION_NUMBER,druid,spring,mall-admin/src/main/resources/application-dev.yml,spring.datasource.druid.stat-view-servlet.login-password,VERSION_NUMBER,druid,spring,mall-admin/src/main/resources/application-prod.yml,Datasource,Datasource,"{
    ""plan"": ""1. Identify the configuration options: spring.datasource.druid.stat-view-servlet.login-password in mall-admin/src/main/resources/application-dev.yml and spring.datasource.druid.stat-view-servlet.login-password in mall-admin/src/main/resources/application-prod.yml.\n2. Determine their types: VERSION_NUMBER.\n3. Compare their values: 'druid'.\n4. Evaluate whether the similarity in values indicates a dependency between them."",
    ""rationale"": ""The configuration options spring.datasource.druid.stat-view-servlet.login-password in application-dev.yml and application-prod.yml are used in different environments (development and production), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Exclusive Dependencies,llama3:70b,config2,8.0,FP,False,"The dependency exists because both configuration options have the same value, which suggests that they are referencing the same volume mapping in the docker-compose file. This implies that if one option changes, the other will also be affected.","Title: docker-compose for Detached mode
Post Body:
I have following docker command to run container
docker run -d --name test -v /etc/hadoop/conf:/etc/hadoop/conf -v /usr/lib/python2.7/dist-packages/hdinsight_common:/usr/lib/python2.7/dist-packages/hdinsight_common -v /etc/hive/conf/:/etc/hive/conf/ -v /etc/tez/conf/:/etc/tez/conf/ -v /usr/hdp/2.4.2.0-258/sqoop/lib/:/usr/hdp/2.4.2.0-258/sqoop/lib/ -i -t hdinsight /bin/bash 
This was to complicated so I was trying to create docker-compose file like this
version: '2' services:   hdinsight:     image: hdinsight     container_name: ABC     volumes:      - /etc/hadoop/conf:/etc/hadoop/conf      - /usr/lib/python2.7/dist-packages/hdinsight_common:/usr/lib/python2.7/dist-packages/hdinsight_common      - /etc/hive/conf/:/etc/hive/conf/      - /etc/tez/conf/:/etc/tez/conf/      - /usr/hdp/2.4.2.0-258/sqoop/lib/:/usr/hdp/2.4.2.0-258/sqoop/lib/     entrypoint:      - bash     labels:      - 'HDInsight client VM' 
But I am not sure where to pass -d, -i & -t flages from my original docker run command
I was running docker-compose like this
docker-compose -f docker-compose.yml run hdinsight 
can anyone point me to right direction here ?

stackexchange.com/questions/401060/we-spent-a-sprint-addressing-your-requests-here-s-how-it-went)

#### Related

[ 0 ](/q/1070299 ""Question score \(upvotes - downvotes\)"") [Many docker
volumes of driver type local - but no container](/questions/1070299/many-
docker-volumes-of-driver-type-local-but-no-container)

[ 3 ](/q/1103560 ""Question score \(upvotes - downvotes\)"") [Subdirectories of
docker mount not mounted correctly with docker-
compose](/questions/1103560/subdirectories-of-docker-mount-not-mounted-
correctly-with-docker-compose)

[ 5 ](/q/1307828 ""Question score \(upvotes - downvotes\)"") [Docker containers
on multiple hosts with docker-compose](/questions/1307828/docker-containers-
on-multiple-hosts-with-docker-compose)

[ 1 ](/q/1498920 ""Question score \(upvotes - downvotes\)"") [Mounting docker
into container shows executable but errors with: /usr/bin/docker: No such file
or directory](/questions/1498920/mounting-docker-into-container-shows-
executable-but-errors-with-usr-bin-docker)

[ 0 ](/q/1525546 ""Question score \(upvotes - downvotes\)"") [unable to run
""docker-compose up"" after replaced Docker Desktop for Windows by Docker
Toolbox](/questions/1525546/unable-to-run-docker-compose-up-after-replaced-
docker-desktop-for-windows-by-d)

[ 4 ](/q/1607837 ""Question score \(upvotes - downvotes\)"") [“volumes 'type' is
a required property” error with docker-compose](/questions/1607837/volumes-
type-is-a-required-property-error-with-docker-compose)

[ 1 ](/q/1623912 ""Question score \(upvotes - downvotes\)"") [ROS in docker-
compose leads to ""bash: line 0: cd: MYPROJECT: No such file or
directory""](/questions/1623912/ros-in-docker-compose-leads-to-bash-line-0-cd-
myproject-no-such-file-or-dir)

####  [ Hot Network Questions ](https://stackexchange.

/docker-compose.yml', service 'image' must be a mapping not a
string](/questions/67058138/error-in-file-docker-compose-yml-service-image-
must-be-a-mapping-not-a-s)

[ 0 ](/q/73900374 ""Question score \(upvotes - downvotes\)"") [When running
""docker-compose up"" I get the following message ""services must be a
mapping""](/questions/73900374/when-running-docker-compose-up-i-get-the-
following-message-services-must-be-a)

[ 0 ](/q/74315648 ""Question score \(upvotes - downvotes\)"") [service.volumes
must be mapping in docker](/questions/74315648/service-volumes-must-be-
mapping-in-docker)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What is the Maximum Theoretical Angle a Grand Piano Could be Held At? ](https://math.stackexchange.com/questions/4947201/what-is-the-maximum-theoretical-angle-a-grand-piano-could-be-held-at)
  * [ Why are maximum age restrictions so rare? ](https://politics.stackexchange.com/questions/88356/why-are-maximum-age-restrictions-so-rare)
  * [ Can your boss take vouchers from you, offered from suppliers? ](https://workplace.stackexchange.com/questions/198469/can-your-boss-take-vouchers-from-you-offered-from-suppliers)
  * [ I think standard deviation of y is related to size of x. How do I create a model for this / test this? ](https://stats.stackexchange.com/questions/651262/i-think-standard-deviation-of-y-is-related-to-size-of-x-how-do-i-create-a-model)
  * [ Standard negative binomial regression when counts are mainly zeros? ](https://stats.stackexchange.com/questions/651155/standard-negative-binomial-regression-when-counts-are-mainly-zeros)
  * [ He is ill/well/highly reputed of ](https://ell.stackexchange.com/questions/354985/he-is-ill-well-highly-reputed-of)
  * [ Why does ""They be naked"" use the base form of ""be""?

/docker-compose.yml', volume must be a mapping not a
string](/questions/41334488/error-in-file-docker-compose-yml-volume-must-be-a-
mapping-not-a-string)

[ 42 ](/q/43452448 ""Question score \(upvotes - downvotes\)"") ['./docker-
compose.yml', service must be a mapping, not a
NoneType](/questions/43452448/docker-compose-yml-service-must-be-a-mapping-
not-a-nonetype)

[ 0 ](/q/45072339 ""Question score \(upvotes - downvotes\)"") [ERROR: In file
'./docker-compose.yml', volume must be a mapping, not an
array](/questions/45072339/error-in-file-docker-compose-yml-volume-must-be-a-
mapping-not-an-array)

[ 6 ](/q/49937772 ""Question score \(upvotes - downvotes\)"") [Docker volume
must be a mapping, not a string](/questions/49937772/docker-volume-must-be-a-
mapping-not-a-string)

[ 5 ](/q/59602982 ""Question score \(upvotes - downvotes\)"") [docker-compose -
service 'volumes' must be a mapping not an array](/questions/59602982/docker-
compose-service-volumes-must-be-a-mapping-not-an-array)

[ 2 ](/q/61566082 ""Question score \(upvotes - downvotes\)"") [In file
'./docker-compose.yml', volume must be a mapping, not an
array](/questions/61566082/in-file-docker-compose-yml-volume-must-be-a-
mapping-not-an-array)

[ 0 ](/q/66874096 ""Question score \(upvotes - downvotes\)"") [ERROR: The
Compose file './docker-compose.yml' is invalid because:
services.jenkins.volumes contains an invalid type, it should be an
array](/questions/66874096/error-the-compose-file-docker-compose-yml-is-
invalid-because-services-jenk)

[ 1 ](/q/67058138 ""Question score \(upvotes - downvotes\)"") [ERROR: In file
'./docker-compose.yml',

Title: docker-compose build download few pom dependencies each time
Post Body:
I am using Heroku Java Docker Image and docker-compose to run dropwizard java based web service locally.
When I run docker-compose build web command to build code, It goes to download few dependencies each time. So build process turnaround time
increased.
My project docker file is only single line : FROM heroku/java
Here are build log:
[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.",mall,services.mall-admin.volumes,UNKNOWN,/etc/localtime:/etc/localtime,docker-compose,document/docker/docker-compose-app.yml,services.mall-search.volumes,UNKNOWN,/etc/localtime:/etc/localtime,docker-compose,document/docker/docker-compose-app.yml,Independent Components,Different Services,"{
    ""plan"": ""1. Identify the configuration options: services.mall-admin.volumes and services.mall-search.volumes in docker-compose-app.yml of technology docker-compose.\n2. Analyze their types (UNKNOWN) and values (/etc/localtime:/etc/localtime).\n3. Check for value equality between the two options.\n4. Evaluate whether the value equality indicates a dependency between the configuration options."",
    ""rationale"": ""The configuration options services.mall-admin.volumes and services.mall-search.volumes in docker-compose-app.yml have the same type (UNKNOWN) and value (/etc/localtime:/etc/localtime). This value equality suggests that both services, mall-admin and mall-search, are using the same volume mapping. However, this similarity does not necessarily imply a dependency between the two configuration options, as they can independently use the same volume mapping without relying on each other."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration options minio.bucketName and project.parent_mall.artifactId have the same value 'mall', which suggests a potential dependency between them. In a Maven-based project, the artifactId is used to identify the project, and in a Spring-based application, the bucket name is used to configure the MinIO storage. Given that both values are equal, it is possible that the MinIO bucket name is dependent on the Maven project's artifactId.","I
will use `play.min.io` to this documentation which is open source and for demo
the other projects.

    
    
    1
    2
    3
    4
    5
    6
    7
    8
    

|

    
    
    server.port=8080
    spring.servlet.multipart.max-file-size=2MB
    
    # Minio
    minio.bucket.name=minio-example-demo
    minio.access.key=minioadmin
    minio.access.secret=minioadmin
    minio.url=https://play.min.io
      
  
---|---  
  
**Upload Some Image on Minio**

I will create folder inside the `minio-example-demo` bucket is `myfolder` and
upload some images.

![/images/minio1.png](/svg/loading.min.svg)

### Implementation

**Bean Configuration**

Create bean configuration that can be used for dependency injection on
`com.piinalpin.minio.config.MinioConfiguration` like following below.

    
    
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21
    22
    

|

    
    
    @Configuration
    public class MinioConfiguration {
    
        @Value(""${minio.access.key}"")
        private String accessKey;
    
        @Value(""${minio.access.secret}"")
        private String secretKey;
    
        @Value(""${minio.url}"")
        private String minioUrl;
    
        @Bean
        @Primary
        public MinioClient minioClient() {
            return new MinioClient.Builder()
                    .credentials(accessKey, secretKey)
                    .endpoint(minioUrl)
                    .build();
        }
    
    }
      
  
---|---  
  
**Data Transfer Object**

Create a dto class to construct object even for request or response
`com.piinalpin.minio.http.dto.FileDto` like following below.

](http://www.mkyong.com/spring3/spring-el-hello-world-example/) I am
using eclipse. When I created the project, I could not find any way to write a
`@Value` annotation.

I know it seems stupid, but I am not able to solve this problem at all. Can
you please help?

    
    
    ...
    import org.springframework.beans.factory.annotation.*;
    import org.springframework.beans.factory.InitializingBean;
    import org.springframework.stereotype.Component;
    
    @Component (""newSession"")
    public class Session implements DisposableBean, InitializingBean {
    
        @Value (""3232"")
        private int id;
    ...
    

pom.xml:

    
    
    ...
    <properties>
        <spring.version>3.0.5.RELEASE</spring.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
            <version>2.5.6</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!-- Spring 3 dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
    
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
    </dependencies>
    ....
    

Apologies for the bad indentation (lots of copy-paste) and the silly question.

properties` or `application.yml` to include MinIO
connection details:

    
    
    minio.url=http://localhost:9000  
    minio.access.name=yourAccessKey  
    minio.access.secret=yourSecretKey  
    minio.bucket.name=yourBucketName

## Step 3: Create a MinIO Configuration Class

In your Spring Boot application, create a configuration class that sets up a
`MinioClient` bean:

    
    
    @Configuration  
    public class MinioConfig {  
        @Value(""${minio.url}"")  
        private String url;  
          
        @Value(""${minio.access.name}"")  
        private String accessKey;  
          
        @Value(""${minio.access.secret}"")  
        private String accessSecret;  
      
        @Bean  
        public MinioClient minioClient() {  
            return MinioClient.builder()  
                    .endpoint(url)  
                    .credentials(accessKey, accessSecret)  
                    .build();  
        }  
    }

## Step 4: Utilizing MinIO in Your Application

With the `MinioClient` bean configured, you can now inject it into your
services to perform operations like uploading, downloading, and listing
objects in MinIO:

    
    
    @Service  
    public class StorageService {  
      
        @Autowired  
        private MinioClient minioClient;  
      
        public void uploadFile(String bucketName, String objectName, InputStream inputStream, String contentType) {  
            try {  
                boolean found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());  
                if (!found) {  
                    minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());  
                }  
                minioClient.putObject(  
                    PutObjectArgs.builder().bucket(bucketName).object(objectName).stream(  
                            inputStream, inputStream.available(), -1)  
                            .contentType(contentType)  
                            .build());  
            } catch (Exception e) {  
                throw new RuntimeException(""Error occurred: "" + e.getMessage());  
            }  
        }  
    }

# Conclusion

Integrating MinIO with Spring Boot opens a realm of possibilities for
developers to leverage efficient, scalable, and S3-compatible object storage
in their applications.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

**Original Answer:**

The `@org.springframework.beans.factory.annotation.Value` annotation can be
found in the spring-beans jar. Adding the following dependency to your pom
should fix the problem:

    
    
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${spring.version}</version>
    </dependency>
    

**Update:**

I believe the problem is simply a classpath issue. The dependency
`org.springframework:spring:2.5.6`, also has the package
`org.springframework.beans.factory.annotation`, but without the `Value`
annotation class. My presumption is that the eclipse classpath is mucked up.
If you update the classpath (i.e. mvn eclipse:eclipse) your problem should be
resolved.

Also do you need the old Spring dependency? If not then it is probably best to
remove it.

As an aside, @BalajiV is absolutely correct you don't need an explicit
dependency to `spring-beans` as it will be pulled in transiently via the
`spring-context` dependency. Have to admit that personally if I have a compile
time dependency to a class from a specific jar (in this case the `Value`
class) then I always explicitly define a dependency to that jar in my pom
instead of relying on another 3rd party dependency to provide it for me. I
know it is unlikely to happen but if in a future release of `spring-context`
they remove the dependency to `spring-beans` then my module would no longer
work when I upgraded to the newer version.

[Share](/a/16955967 ""Short permalink to this answer"")

[Improve this answer](/posts/16955967/edit)

Follow

[edited Sep 3, 2013 at 14:04](/posts/16955967/revisions ""show all edits to
this post"")

answered Jun 6, 2013 at 7:18

[![DB5's user
avatar](https://i.sstatic.net/l2ths.jpg?s=64)](/users/1570834/db5)

[DB5](/users/1570834/db5)DB5

13.9k77 gold badges6666 silver badges7272 bronze badges

3

  * Yes, 2.5.6 is the bothering package.",mall,minio.bucketName,UNKNOWN,mall,spring,mall-admin/src/main/resources/application-dev.yml,project.parent_mall.artifactId,NAME,mall,maven,mall-mbg/pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Identify the configuration options: minio.bucketName in application-dev.yml (Spring) and project.parent.mall.artifactId in pom.xml (Maven). 2. Analyze their values: 'mall' in both cases. 3. Evaluate if the identical value indicates a dependency."",
    ""rationale"": ""The configuration option minio.bucketName specifies the name of the MinIO bucket, whereas project.parent.mall.artifactId defines the artifact ID of the Maven parent project. Although they share the same value 'mall', it is coincidental and does not imply a dependency between the two configurations."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Port Mapping,llama3:70b,config2,8.0,FP,False,"The configuration options services.minio.ports.in and services.minio.ports.out having the same value 9001 suggests a possible dependency between them. In docker-compose, the 'in' port is typically used for incoming traffic, while the 'out' port is used for outgoing traffic. Given that MinIO uses Nginx as a reverse proxy, it's likely that these ports are configured to enable communication between the MinIO service and the Nginx proxy.","when I run a MinIO container the console ip is picked randomly, here are my
configs :

docker-compose

    
    
    services:
      minio:
        container_name: my-minio
        image: bitnami/minio:latest
        ports:
          - ""9000:9000""
        environment:
          MINIO_ROOT_USER: a-good-username
          MINIO_ROOT_PASSWORD: a-good-password
          MINIO_DEFAULT_BUCKETS: my-bucket
    
    
    
    $ docker logs my-minio --follow
    [...]
    minio 08:39:51.67 INFO  ==> ** Starting MinIO **
    API: http://localhost:9000 
    Finished loading IAM sub-system (took 0.0s of 0.0s to load data).
    
    Console: http://172.18.0.10:9001 http://127.0.0.1:9001 
    

I can access it with rclone :

    
    
    [minio-local]
    type = s3
    provider = Minio
    access_key_id = a-good-username
    secret_access_key = a-good-password
    endpoint = http://172.18.0.10:9000
    

I'd like to have the ip address `http://172.18.0.10` configurable and fixed,
is this possible? I've seen similar topics for example with the
`MINIO_SERVER_URL: 127.0.0.1` env var, but no success on my side

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [minio](/questions/tagged/minio ""show questions tagged 'minio'"")

[Share](/q/74066778 ""Short permalink to this question"")

[Improve this question](/posts/74066778/edit)

Follow

asked Oct 14, 2022 at 8:57

[!

**For those who are looking for s3 with minio object server integration test.
Specially for JAVA implementation.**

_**docker-compose file:**_

    
    
    version: '3.7'
    services:
      minio-service:
        image: quay.io/minio/minio
        command: minio server /data
        ports:
          - ""9000:9000""
        environment:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    

_**The actual IntegrationTest class:**_

    
    
    import com.amazonaws.auth.AWSStaticCredentialsProvider;
    import com.amazonaws.auth.BasicAWSCredentials;
    import com.amazonaws.client.builder.AwsClientBuilder;
    import com.amazonaws.regions.Regions;
    import com.amazonaws.services.s3.AmazonS3;
    import com.amazonaws.services.s3.AmazonS3ClientBuilder;
    import com.amazonaws.services.s3.model.S3Object;
    import org.junit.jupiter.api.

Note that
Docker Compose pulls the MinIO Docker image, so there is no need to explicitly
download MinIO binary. Then run one of the below commands

### GNU/Linux and macOS

    
    
    docker-compose pull
    docker-compose up

or

    
    
    docker stack deploy --compose-file docker-compose.yaml minio

### Windows

    
    
    docker-compose.exe pull
    docker-compose.exe up

or

    
    
    docker stack deploy --compose-file docker-compose.yaml minio

Distributed instances are now accessible on the host using the Minio CLI on
port 9000 and the Minio Web Console on port 9001. Proceed to access the Web
browser at <http://127.0.0.1:9001/>. Here 4 MinIO server instances are reverse
proxied through Nginx load balancing.

### Notes

  * By default the Docker Compose file uses the Docker image for latest MinIO server release. You can change the image tag to pull a specific [MinIO Docker image](https://hub.docker.com/r/minio/minio/).

  * There are 4 minio distributed instances created by default. You can add more MinIO services (up to total 16) to your MinIO Compose deployment. To add a service

    * Replicate a service definition and change the name of the new service appropriately.
    * Update the command section in each service.
    * Add a new MinIO server instance to the upstream directive in the Nginx configuration file.

Read more about distributed MinIO
[here](https://min.io/docs/minio/container/operations/install-deploy-
manage/deploy-minio-single-node-multi-drive.html).

### Explore Further

  * [Overview of Docker Compose](https://docs.docker.com/compose/overview/)
  * [MinIO Docker Quickstart Guide](https://min.io/docs/minio/container/index.html#quickstart-for-containers)
  * [MinIO Erasure Code QuickStart Guide](https://min.io/docs/minio/container/operations/concepts/erasure-coding.html)

## Footer

[ ](https://github.com ""GitHub"") (C) 2024 GitHub, Inc.

[Docker
Pulls](https://camo.githubusercontent.com/d1b542148045f449d475aedcc841b126c405076f9b58ef82122edc5d9527c8d5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6d696e696f2f6d696e696f2e7376673f6d61784167653d363034383030)](https://hub.docker.com/r/minio/minio/)

Docker Compose allows defining and running single host, multi-container Docker
applications.

With Compose, you use a Compose file to configure MinIO services. Then, using
a single command, you can create and launch all the Distributed MinIO
instances from your configuration. Distributed MinIO instances will be
deployed in multiple containers on the same host. This is a great way to set
up development, testing, and staging environments, based on Distributed MinIO.

## 1\. Prerequisites

  * Familiarity with [Docker Compose](https://docs.docker.com/compose/overview/).
  * Docker installed on your machine. Download the relevant installer from [here](https://www.docker.com/community-edition#/download).

## 2\. Run Distributed MinIO on Docker Compose

To deploy Distributed MinIO on Docker Compose, please download [docker-
compose.yaml](https://github.com/minio/minio/blob/master/docs/orchestration/docker-
compose/docker-compose.yaml?raw=true) and
[nginx.conf](https://github.com/minio/minio/blob/master/docs/orchestration/docker-
compose/nginx.conf?raw=true) to your current working directory. Note that
Docker Compose pulls the MinIO Docker image, so there is no need to explicitly
download MinIO binary.

##

Not the answer you're looking for? Browse other questions tagged

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [minio](/questions/tagged/minio ""show questions tagged 'minio'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 187 ](/q/39493490 ""Question score \(upvotes - downvotes\)"") [Provide static
IP to docker containers via docker-compose](/questions/39493490/provide-
static-ip-to-docker-containers-via-docker-compose)

[ 15 ](/q/46461977 ""Question score \(upvotes - downvotes\)"") [Docker-Compose
v3 - static ip](/questions/46461977/docker-compose-v3-static-ip)

[ 8 ](/q/55402610 ""Question score \(upvotes - downvotes\)"") [Configuring Minio
server for use with Testcontainers](/questions/55402610/configuring-minio-
server-for-use-with-testcontainers)

[ 5 ](/q/55423376 ""Question score \(upvotes - downvotes\)"") [How to make
Minio-client (from host) talk with Minio-server(docker
container)?",mall,services.minio.ports.in,PORT,9001,docker-compose,document/docker/docker-compose-env.yml,services.minio.ports.out,PORT,9001,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.minio.ports.in and services.minio.ports.out in docker-compose-env.yml of technology docker-compose.\n2. Check their types (PORT) and values (9001).\n3. Evaluate if the value equality indicates a dependency between the two options."",
    ""rationale"": ""The configuration option services.minio.ports.in specifies the internal port within the MinIO container, while services.minio.ports.out specifies the external port on the host. The value equality (9001) suggests that the same port is used for both internal and external access to the MinIO service. This setup implies a dependency between the two options, as changing one would require updating the other to maintain consistency."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration options spring.datasource.username and spring.datasource.password are related as they are used together to configure a datasource in the Spring Boot application. The value equality of 'root' for both username and password suggests a dependency between them, implying that if one is configured, the other should also be configured with a corresponding value.","time-between-eviction-runs-millis`  
`spring.datasource.tomcat.url`  
`spring.datasource.tomcat.use-disposable-connection-facade`  
`spring.datasource.tomcat.use-equals`  
`spring.datasource.tomcat.use-lock`  
`spring.datasource.tomcat.use-statement-facade`  
`spring.datasource.tomcat.username`  
`spring.datasource.tomcat.validation-interval`  
`spring.datasource.tomcat.validation-query`  
`spring.datasource.tomcat.validation-query-timeout`  
`spring.datasource.tomcat.validator-class-name`  
| Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource |   
`spring.datasource.type` | Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath. |   
`spring.datasource.url` | JDBC URL of the database. |   
`spring.datasource.username` | Login username of the database. |   
`spring.datasource.xa.data-source-class-name` | XA datasource fully qualified name. |   
`spring.datasource.xa.properties.*` | Properties to pass to the XA data source. |   
`spring.elasticsearch.connection-timeout` | Connection timeout used when communicating with Elasticsearch. | `1s`  
`spring.elasticsearch.password` | Password for authentication with Elasticsearch. |   
`spring.elasticsearch.path-prefix` | Prefix added to the path of every request sent to Elasticsearch. |   
`spring.elasticsearch.restclient.sniffer.delay-after-failure` | Delay of a sniff execution scheduled after a failure. | `1m`  
`spring.elasticsearch.restclient.sniffer.interval` | Interval between consecutive ordinary sniff executions. | `5m`  
`spring.elasticsearch.restclient.ssl.bundle` | SSL bundle name. |   
`spring.elasticsearch.socket-keep-alive` | Whether to enable socket keep alive between client and Elasticsearch. | `false`  
`spring.elasticsearch.socket-timeout` | Socket timeout used when communicating with Elasticsearch. | `30s`  
`spring.elasticsearch.uris` | Comma-separated list of the Elasticsearch instances to use. | `[http://localhost:9200]`  
`spring.elasticsearch.username` | Username for authentication with Elasticsearch.

oracleucp.max-statements`  
`spring.datasource.oracleucp.min-pool-size`  
`spring.datasource.oracleucp.network-protocol`  
`spring.datasource.oracleucp.o-n-s-configuration`  
`spring.datasource.oracleucp.pdb-roles`  
`spring.datasource.oracleucp.port-number`  
`spring.datasource.oracleucp.property-cycle`  
`spring.datasource.oracleucp.query-timeout`  
`spring.datasource.oracleucp.read-only-instance-allowed`  
`spring.datasource.oracleucp.role-name`  
`spring.datasource.oracleucp.s-q-l-for-validate-connection`  
`spring.datasource.oracleucp.seconds-to-trust-idle-connection`  
`spring.datasource.oracleucp.server-name`  
`spring.datasource.oracleucp.sharding-mode`  
`spring.datasource.oracleucp.time-to-live-connection-timeout`  
`spring.datasource.oracleucp.timeout-check-interval`  
`spring.datasource.oracleucp.u-r-l`  
`spring.datasource.oracleucp.user`  
`spring.datasource.oracleucp.validate-connection-on-borrow`  
| Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource |   
`spring.datasource.password` | Login password of the database. |   
`spring.datasource.tomcat.abandon-when-percentage-full`  
`spring.datasource.tomcat.access-to-underlying-connection-allowed`  
`spring.datasource.tomcat.alternate-username-allowed`  
`spring.datasource.tomcat.commit-on-return`  
`spring.datasource.tomcat.connection-properties`  
`spring.datasource.tomcat.data-source-j-n-d-i`  
`spring.datasource.tomcat.db-properties`  
`spring.datasource.tomcat.default-auto-commit`  
`spring.datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.

datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.dbcp2.log-expired-connections`  
`spring.datasource.dbcp2.login-timeout`  
`spring.datasource.dbcp2.max-idle`  
`spring.datasource.dbcp2.max-open-prepared-statements`  
`spring.datasource.dbcp2.max-total`  
`spring.datasource.dbcp2.min-idle`  
`spring.datasource.dbcp2.num-tests-per-eviction-run`  
`spring.datasource.dbcp2.password`  
`spring.datasource.dbcp2.pool-prepared-statements`  
`spring.datasource.dbcp2.remove-abandoned-on-borrow`  
`spring.datasource.dbcp2.remove-abandoned-on-maintenance`  
`spring.datasource.dbcp2.rollback-on-return`  
`spring.datasource.dbcp2.test-on-borrow`  
`spring.datasource.dbcp2.test-on-create`  
`spring.datasource.dbcp2.test-on-return`  
`spring.datasource.dbcp2.test-while-idle`  
`spring.datasource.dbcp2.url`  
`spring.datasource.dbcp2.username`  
`spring.datasource.dbcp2.validation-query`  
| Commons DBCP2 specific settings bound to an instance of DBCP2's BasicDataSource |   
`spring.datasource.driver-class-name` | Fully qualified name of the JDBC driver. Auto-detected based on the URL by default. |   
`spring.datasource.embedded-database-connection` | Connection details for an embedded database. Defaults to the most suitable embedded database that is available on the classpath. |   
`spring.datasource.generate-unique-name` | Whether to generate a random datasource name.

Defaults to ""false"", meaning a page number of 0 in the request equals the first page. | `false`  
`spring.data.web.pageable.page-parameter` | Page index parameter name. | `page`  
`spring.data.web.pageable.prefix` | General prefix to be prepended to the page number and page size parameters. |   
`spring.data.web.pageable.qualifier-delimiter` | Delimiter to be used between the qualifier and the actual page number and size properties. | `_`  
`spring.data.web.pageable.size-parameter` | Page size parameter name. | `size`  
`spring.data.web.sort.sort-parameter` | Sort parameter name. | `sort`  
`spring.datasource.dbcp2.abandoned-usage-tracking`  
`spring.datasource.dbcp2.access-to-underlying-connection-allowed`  
`spring.datasource.dbcp2.auto-commit-on-return`  
`spring.datasource.dbcp2.cache-state`  
`spring.datasource.dbcp2.clear-statement-pool-on-return`  
`spring.datasource.dbcp2.connection-factory-class-name`  
`spring.datasource.dbcp2.connection-init-sqls`  
`spring.datasource.dbcp2.default-auto-commit`  
`spring.datasource.dbcp2.default-catalog`  
`spring.datasource.dbcp2.default-read-only`  
`spring.datasource.dbcp2.default-schema`  
`spring.datasource.dbcp2.default-transaction-isolation`  
`spring.datasource.dbcp2.disconnection-sql-codes`  
`spring.datasource.dbcp2.driver`  
`spring.datasource.dbcp2.driver-class-name`  
`spring.datasource.dbcp2.duration-between-eviction-runs`  
`spring.datasource.dbcp2.eviction-policy-class-name`  
`spring.datasource.dbcp2.fast-fail-validation`  
`spring.datasource.dbcp2.initial-size`  
`spring.datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.

> We often do not need to specify the `driver-class-name`, since Spring Boot
> can deduce it for the most databases from the connection url.
    
    
    # H2 DB
    spring.datasource.url=jdbc:h2:file:C:/temp/test
    spring.datasource.username=sa
    spring.datasource.password=
    spring.datasource.driverClassName=org.h2.Driver
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    
    # MySQL
    spring.datasource.url=jdbc:mysql://localhost:3306/test
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driver-class-name=com.mysql.jdbc.Driver
    spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
    
    # Oracle
    spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
    spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
    
    # SQL Server
    spring.datasource.url=jdbc:sqlserver://localhost;databaseName=springbootdb
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
    spring.jpa.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect

### 2.3. Java Configuration

The recommended way to create a _DataSource_ bean is using
**_DataSourceBuilder_** class within a class annotated with the
_@Configuration_ annotation.

Given is an example bean for H2 DB. Please configure other beans as necessary.

    
    
    @Configuration
    public class JpaConfig {
    
        @Bean
        public DataSource dataSource()
        {
            DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
            dataSourceBuilder.driverClassName(""org.h2.Driver"");
            dataSourceBuilder.url(""jdbc:h2:file:C:/temp/test"");
            dataSourceBuilder.username(""sa"");
            dataSourceBuilder.password("""");
            return dataSourceBuilder.build();
        }
    
        //...
    }

### 2.4. JNDI DataSource

Suppose we deploy our Spring Boot application to an application server. In
that case, we might want to configure and manage the _DataSource_ using the
Application Server's built-in features and access it using JNDI.",mall,spring.datasource.password,PASSWORD,root,spring,mall-search/src/main/resources/application-dev.yml,spring.datasource.username,USERNAME,root,spring,mall-search/src/main/resources/application-dev.yml,Datasource,Datasource,"{
    ""plan"": ""1. Analyze the configuration files (application-dev.yml) in the mall-search project. 2. Identify the configuration options spring.datasource.password and spring.datasource.username with values 'root'. 3. Evaluate whether these options are used together to configure a single datasource or if they are independent configurations for different datasources."",
    ""rationale"": ""The configuration options spring.datasource.password and spring.datasource.username in mall-search/src/main/resources/application-dev.yml have the same value 'root', but this does not inherently indicate a dependency between them. Typically, these options are used together to configure a single datasource, and their identical values suggest that they might be related."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Port Mapping,llama3:70b,config2,8.0,FP,False,"The configuration options services.elasticsearch.ports.in and services.elasticsearch.ports.out do not directly depend on each other due to value-equality. The 'in' option specifies the container port, while the 'out' option specifies the host port. However, in this case, the Kibana service is trying to connect to Elasticsearch at a specific port (9699), which means that the port mapping in the Elasticsearch service must be correct for Kibana to work.","I'm in the process of attempting to containerize our development environment
with docker. This includes a mix of Google Appengine projects as well as
services that are being eventually hosted in Google Compute engine within a
containerized vm.

Our current development environment bootstrapping scripts bring up
elasticsearch and nginx within boot2docker and the other applications run on
localhost:{product port} within the dev_appserver appengine sandbox. This
process is proving hard to manage and maintain as it takes a lot of insight
into how our applications communicate.

I'm getting an error with docker-compose that is detecting a circular
dependency between containers.

> Circular import between cs and vbc and aa and sr.

As this configuration is only for development environments (mac osx), does
anyone have an suggestions or ideas on a different approach to take when
linking all of the product suites dependencies together.

A portion of docker-compose.yml:

    
    
    elasticsearch:
      build: ./compute/containers/elasticsearch/elasticsearch
      ports:
        - ""9200:9200""
      environment:
        - PROJECT_ID=localhost
    nginx:
      build: ./compute/containers/elasticsearch/nginx
      links:
        - elasticsearch:localhost
      ports:
        - ""9201:9201""
    cs:
      build: ./CS
      command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8080 --admin_port=9080 --storage_path=/data/
      ports:
        - ""8080:8080""
        - ""9080:9080"" 
      volumes:
       - /Users/source/CS/src:/src
       - /Users/source/CS/data:/data 
    aa:
      build: ./AA
      command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.

[ Discuss the Elastic Stack ](/)

#  [Mapping ElasticSearch Port with ports: 92xx:9200 in Docker](/t/mapping-
elasticsearch-port-with-ports-92xx-9200-in-docker/133359)

[ Elastic Stack ](/c/elastic-stack/kibana/7) [ Kibana ](/c/elastic-
stack/kibana/7)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  May 25, 2018, 7:36pm
1

Is it possible to map the default port for an ElasticSearch docker container
from 9200 to 92XX (i.e. 9222) or some other port using -

elasticsearch:  
image:
[docker.elastic.co/elasticsearch/elasticsearch:6.2.4](http://docker.elastic.co/elasticsearch/elasticsearch:6.2.4)  
...  
ports:

  * 92xx:9200

When I attempt to do this and connect using Kibana, Kibana will only connect
if configured on port 9200, i.e. ->  
ELASTICSEARCH_URL=http://elasticsearch:9200

and  
ELASTICSEARCH_URL=http://elasticsearch:96xx  
does not work.

docker container exec -i kibana curl elasticsearch:9200/_cat/health  
returns a valid connection, even though the port should be remapped to 96xx.

docker container exec -i kibana curl elasticsearch:92xx/_cat/health  
returns invalid connection data.

I have used docker container stop and rm to remove all prior container
instances.

[jen-huang](https://discuss.elastic.co/u/jen-huang) (Jen Huang)  May 25, 2018,
8:14pm  2

By default, Elasticsearch docker reserves the ports 9200 and 9300. [Example
base Docker Compose file showing both
ports.](https://github.com/deviantony/docker-elk/blob/master/docker-
compose.yml)

To change the ports (to 9299 and 9399, for example), add:

    
    
        ports:
          - ""9299:9200""
          - ""9399:9300""
    

which maps custom outside port to regular ES inside port.

If you want to see more, the networking api is no longer experimental:
<https://github.com/docker/compose/blob/master/docs/networking.md>

This is your docker-compose file in v2 without unnecessary links:

    
    
    version: '2'
    
    services:
      elasticsearch:
        build: ./compute/containers/elasticsearch/elasticsearch
        ports:
          - ""9200:9200""
        environment:
          - PROJECT_ID=localhost
      nginx:
        build: ./compute/containers/elasticsearch/nginx
        ports:
          - ""9201:9201""
      cs:
        build: ./CS
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8080 --admin_port=9080 --storage_path=/data/
        ports:
          - ""8080:8080""
          - ""9080:9080"" 
        volumes:
         - /Users/source/CS/src:/src
         - /Users/source/CS/data:/data 
      aa:
        build: ./AA
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8081 --admin_port=9081 --storage_path=/data/
        ports:
          - ""8081:8081""
          - ""9081:9081"" 
        volumes:
         - /Users/source/AA/src:/src
         - /Users/source/AA/data:/data 
      vbc:
        image: google/cloud-sdk
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8082 --admin_port=9082 --storage_path=/data/
        ports:
          - ""8082:8082""
          - ""9082:9082"" 
        volumes:
         - /Users/source/VBC/src:/src
         - /Users/source/VBC/data:/data    
      sr:
        build: ./SR
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.

I have
edited my post as well.

So for your Elasticsearch service, it should be:

    
    
    ports:
        - ""9699:9200""
    

The rest of the configuration looks good.

(More about `ports` and `expose`: <https://stackoverflow.com/a/40801773>)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
6:54pm  8

I am getting errors when I try the following yml:

    
    
    version: ""3""
    
    volumes:
    elasticsearch-test-vol:
    
    networks:
    elasticsearch-test-net:
    
    services:
    
    elasticsearch-test-624-service:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
        container_name: elasticsearch-test-624
        restart: always
        networks:
            - elasticsearch-test-net
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - ""ES_JAVA_OPTS=-Xms512m -Xmx512m""
            - xpack.security.enabled=true
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
        - ""9699:9200""
        expose:
        - ""9699""
        volumes:
        - elasticsearch-test-vol:/usr/share/elasticsearch/data
    
    kibana-test-624-service:
        image: docker.elastic.co/kibana/kibana:6.2.4
        container_name: kibana-test-624
        hostname: kibana
        restart: always
        networks:
        - elasticsearch-test-net
        environment:
        - SERVER_NAME=kibana.localhost
        - ELASTICSEARCH_URL=http://elasticsearch-test-624:9699
        - ELASTICSEARCH_USERNAME=elastic
        - ELASTICSEARCH_HOST=elasticsearch-test-624
        - ELASTICSEARCH_PORT=9699
        - ELASTIC_PWD=changeme
        - KIBANA_PWD=changeme
        - xpack.security.enabled=true
        ports:
        - ""5699:5601""
        expose:
        - ""5699""
        depends_on:
        - elasticsearch-test-624-service
    

The error messages are as follows:  
Kibana console:

    
    
    Login is currently disabled.

Administrators should consult the Kibana logs for more details.
    

Logs to stdout:

    
    
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""Unable to revive connection: http://elasticsearch-test-624:9699/""}
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""No living connections""}
    
    $ docker-compose ps
         Name                   Command           State           Ports         
    --------------------------------------------------------------------------------
    elasticsearch-test-624   /usr/local/bin/docker-   Up      0.0.0.0:9699->9200/tcp
                         entr ...                         , 9300/tcp, 9699/tcp  
    kibana-test-624          /bin/bash                Up      0.0.0.0:5699->5601/tcp
                         /usr/local/bin/k ...             , 5699/tcp

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
7:00pm  9

As a point of reference, the identical YML with the default port mapping to
9200:9200 works without errors reported... I am explicitly trying to get the
port mappings working in this case.",mall,services.elasticsearch.ports.in,PORT,9200,docker-compose,document/docker/docker-compose-env.yml,services.elasticsearch.ports.out,PORT,9200,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
    ""plan"": ""1. Analyze the docker-compose file (docker-compose-env.yml) to identify the services and their port configurations.\n2. Identify the configuration options: services.elasticsearch.ports.in with value 9200 and services.elasticsearch.ports.out with value 9200.\n3. Evaluate if the values of these configuration options are equal, indicating a potential dependency."",
    ""rationale"": ""The configuration option services.elasticsearch.ports.in specifies the internal port within the Elasticsearch container, while services.elasticsearch.ports.out specifies the external port on the host. Since both ports have the same value (9200), it implies that the service is accessible on the same port internally and externally. This setup does not necessarily indicate a dependency between the two configuration options, as they are simply defining the port mapping for the Elasticsearch service."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. The groupId 'com.macro.mall' is used in both configuration options, which suggests a potential inheritance relationship between them. In Maven, the dependencyManagement section defined in a parent POM can be inherited by child projects, allowing for centralized management of dependencies. If the parent POM defines the groupId 'com.macro.mall' in its dependencyManagement section, it is likely that the child project will inherit this configuration.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

It is a normal
multiproject pom.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>bom</artifactId>
      </parent>
    
      <groupId>com.test</groupId>
      <artifactId>parent</artifactId>
      <version>1.0.0</version>
      <packaging>pom</packaging>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.12</version>
          </dependency>
          <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <modules>
        <module>project1</module>
        <module>project2</module>
      </modules>
    </project>
    

Next are the actual project POMs.

For example you would have the Maven compiler plugin configured out of the box
with Java 8 and UTF-8 (that you can of course redefined in your child project)
:

    
    
    <properties>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <resource.delimiter>@</resource.delimiter>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>
    

Additionally, some other plugins potential useful by a Spring Boot project
will also be defined in the super pom and be inherited by your project such as
:

    
    
    <pluginManagement>
      <plugins>
         ...
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <mainClass>${start-class}</mainClass>
            </configuration>
        </plugin>
        ...
      </plugins>
    </pluginManagement>
    

Note that a parent pom may define `dependencies`, directly inherited by the
child projects but not necessary.  
For example the `spring-boot-starter-parent` doesn't define any `dependency`
directly inherited by child projects but instead of define `dependency` in
`<dependencyManagement><dependencies>`.  
It means that children of this parent pom may use the dependencies but they
have to explicitly state that in `dependencies`.  
For example :

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
    

Note that the version is not valued as inherited.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>use</artifactId>
      <version>1.0.0</version>
      <packaging>jar</packaging>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>bom</artifactId>
            <version>1.0.0</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project1</artifactId>
        </dependency>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project2</artifactId>
        </dependency>
      </dependencies>
    </project>
    

Finally, when creating projects that import dependencies, beware of the
following:

  * Do not attempt to import a POM that is defined in a submodule of the current POM. Attempting to do that will result in the build failing since it won't be able to locate the POM.
  * Never declare the POM importing a POM as the parent (or grandparent, etc) of the target POM. There is no way to resolve the circularity and an exception will be thrown.
  * When referring to artifacts whose POMs have transitive dependencies, the project needs to specify versions of those artifacts as managed dependencies. Not doing so results in a build failure since the artifact may not have a version specified. (This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced.

It defines the versions of all the
artifacts that will be created in the library. Other projects that wish to use
the library should import this POM into the dependencyManagement section of
their POM.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>pom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
     
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     
      <modules>
        <module>parent</module>
      </modules>
    </project>
    

The parent subproject has the BOM POM as its parent. It is a normal
multiproject pom.",mall,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-common/pom.xml,project.dependencyManagement.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Check if both configuration options have the same groupId value (com.macro.mall). 2. Verify that mall-common is a module in the mall project and mall-mbg is a dependency in the mall project. 3. If both conditions are true, then the configuration options depend on each other."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-common is a specific module in the mall project and mall-mbg is a dependency in the same project, and therefore needs to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inferring Dependencies,llama3:70b,config2,8.0,FN,True,"The configuration option project.artifactId with value 'mall-search' in mall-search/pom.xml and the configuration option project.modules.module with value 'mall-search' in pom.xml do not inherently depend on each other due to their distinct purposes. The artifactId represents the unique identifier of a Maven project, while the modules.module specifies a sub-module within a multi-module Maven project. Although they share the same value, it is coincidental and does not imply a dependency.","](/questions/2511908/how-can-i-make-one-
maven-module-depend-on-another)

[ 3 ](/q/4570229 ""Question score \(upvotes - downvotes\)"") [maven share
dependencies among different modules](/questions/4570229/maven-share-
dependencies-among-different-modules)

[ 3 ](/q/12252116 ""Question score \(upvotes - downvotes\)"") [how to write
Maven dependency on sub-module of a package](/questions/12252116/how-to-write-
maven-dependency-on-sub-module-of-a-package)

[ 1 ](/q/12585868 ""Question score \(upvotes - downvotes\)"") [Add jar-with-
dependencies artifact from other Maven module](/questions/12585868/add-jar-
with-dependencies-artifact-from-other-maven-module)

[ 0 ](/q/12816334 ""Question score \(upvotes - downvotes\)"") [Maven module
Dependency](/questions/12816334/maven-module-dependency)

[ 4 ](/q/18660066 ""Question score \(upvotes - downvotes\)"") [Sharing
dependencies between maven modules](/questions/18660066/sharing-dependencies-
between-maven-modules)

[ 1 ](/q/39172232 ""Question score \(upvotes - downvotes\)"") [How to add
runtime dependency on another module?](/questions/39172232/how-to-add-runtime-
dependency-on-another-module)

[ 0 ](/q/41262872 ""Question score \(upvotes - downvotes\)"") [How to build a
jar from a module of maven with dependencies from other
module?](/questions/41262872/how-to-build-a-jar-from-a-module-of-maven-with-
dependencies-from-other-module)

[ 0 ](/q/42578174 ""Question score \(upvotes - downvotes\)"") [Maven dependency
as module](/questions/42578174/maven-dependency-as-module)

[ 0 ](/q/59092288 ""Question score \(upvotes - downvotes\)"") [Use parent module
as dependency](/questions/59092288/use-parent-module-as-dependency)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Can I cause a star to go supernova by altering the four fundamental forces?

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/2612512 ""Question score \(upvotes - downvotes\)"") [Build Issue with
multi module project](/questions/2612512/build-issue-with-multi-module-
project?noredirect=1)

[ 1 ](/q/52125850 ""Question score \(upvotes - downvotes\)"") [How to configure
multi module spring application](/questions/52125850/how-to-configure-multi-
module-spring-application?noredirect=1)

[ 0 ](/q/38833397 ""Question score \(upvotes - downvotes\)"") [List maven
external dependencies - excluding submodules in current
project](/questions/38833397/list-maven-external-dependencies-excluding-
submodules-in-current-project?noredirect=1)

[ 1 ](/q/70762169 ""Question score \(upvotes - downvotes\)"") [Dependency
injection on multi-Maven project with Spring and
JavaFX](/questions/70762169/dependency-injection-on-multi-maven-project-with-
spring-and-javafx?noredirect=1)

#### Related

[ 15 ](/q/2511908 ""Question score \(upvotes - downvotes\)"") [How can I make
one Maven module depend on another?

](/questions/15631436/missing-
artifactid-in-pom-and-error-in-find-parent)

[ 7 ](/q/26503589 ""Question score \(upvotes - downvotes\)"") [Duplicate
artifactId in child pom](/questions/26503589/duplicate-artifactid-in-child-
pom)

[ 5 ](/q/26858565 ""Question score \(upvotes - downvotes\)"") [Unable to resolve
${project.version} in child pom.xml from parent
pom.xml](/questions/26858565/unable-to-resolve-project-version-in-child-pom-
xml-from-parent-pom-xml)

[ 1 ](/q/30732384 ""Question score \(upvotes - downvotes\)"") [maven dependency
management from parent pom overrides
${project.version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 45 ](/q/38594036 ""Question score \(upvotes - downvotes\)"") [difference of
artifactId and name in maven POM](/questions/38594036/difference-of-
artifactid-and-name-in-maven-pom)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 3 ](/q/45946539 ""Question score \(upvotes - downvotes\)"") [Artifactory/JFrog
is producing the wrong parent artifactId in generated
POM](/questions/45946539/artifactory-jfrog-is-producing-the-wrong-parent-
artifactid-in-generated-pom)

[ 0 ](/q/61676718 ""Question score \(upvotes - downvotes\)"") [POM parent
artifact id same to original artifact is](/questions/61676718/pom-parent-
artifact-id-same-to-original-artifact-is)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Do spells taken by the Magic Initiate feat require material components that cost gold?

](/questions/2879256/maven-unofficial-artifact-naming-
scheme)

[ 22 ](/q/3150003 ""Question score \(upvotes - downvotes\)"") [Naming convention
for Maven Artifacts](/questions/3150003/naming-convention-for-maven-artifacts)

[ 21 ](/q/5214075 ""Question score \(upvotes - downvotes\)"") [Maven groupId and
package name in java source](/questions/5214075/maven-groupid-and-package-
name-in-java-source)

[ 0 ](/q/16162902 ""Question score \(upvotes - downvotes\)"") [How to know
(pragmatically) correct maven artifact-id group-id for a jar
name](/questions/16162902/how-to-know-pragmatically-correct-maven-artifact-id-
group-id-for-a-jar-name)

[ 8 ](/q/25610544 ""Question score \(upvotes - downvotes\)"") [Applying maven
groupId naming convention](/questions/25610544/applying-maven-groupid-naming-
convention)

[ 0 ](/q/30810006 ""Question score \(upvotes - downvotes\)"") [Maven GroupID and
ArtifactID for J2EE Utility Project](/questions/30810006/maven-groupid-and-
artifactid-for-j2ee-utility-project)

[ 16 ](/q/35139738 ""Question score \(upvotes - downvotes\)"") [Sensible group
Id for individual project?](/questions/35139738/sensible-group-id-for-
individual-project)

[ 52 ](/q/39185798 ""Question score \(upvotes - downvotes\)"") [What is the
difference between artifactId and groupId in
pom.xml?](/questions/39185798/what-is-the-difference-between-artifactid-and-
groupid-in-pom-xml)

[ 1 ](/q/58448007 ""Question score \(upvotes - downvotes\)"") [Allways append
the artifact id to the group id?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall,project.artifactId,NAME,mall-search,maven,mall-search/pom.xml,project.modules.module,NAME,mall-search,maven,pom.xml,Multi-Maven-Modules,Project Aggregation,"{
    ""plan"": ""1. Identify the configuration options: project.artifactId with value mall-search in mall-search/pom.xml and project.modules.module with value mall-search in pom.xml.\n2. Analyze their roles in the Maven project: project.artifactId specifies the artifact ID of the project, while project.modules.module defines a module within a multi-module project.\n3. Evaluate whether the identical values indicate a dependency."",
    ""rationale"": ""The configuration option project.artifactId with value mall-search specifies the unique identifier of the artifact produced by the Maven project. The configuration option project.modules.module with the same value mall-search defines a module within a multi-module project. Since they share the same value, it indicates that the module is indeed the artifact being produced. Therefore, there exists a dependency between these two configuration options due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The groupId 'com.macro.mall' is a reversed domain name, which is a common convention in Maven projects. The fact that both configuration options have the same value suggests a dependency between them, as they might be part of the same project or organization.","12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.",mall,project.groupId,NAME,com.macro.mall,maven,mall-demo/pom.xml,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-mbg/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the groupId in both pom.xml files: com.macro.mall in mall-demo/pom.xml and com.macro.mall in mall-mbg/pom.xml.\n2. Compare the values of the groupId configuration options.\n3. Since they have the same value, evaluate whether one depends on the other."",
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as mall-demo and mall-mbg are specific modules in the macro.mall project and therefore need to specify the same groupId used in the project to identify all modules."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The configuration options project.modelVersion in both POM files have the same value, which suggests that they might not be directly dependent on each other. However, Maven projects can have complex relationships through inheritance and aggregation, which could lead to indirect dependencies between configuration options.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",mall,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-admin/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-mbg/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in mall-admin/pom.xml and mall-mbg/pom.xml, follow these steps: 1) Verify that both POM files have the same model version, which is 4.0.0. 2) Check if the Maven projects are aggregated using a parent POM or modules. If so, ensure that the model version is consistent across all modules."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options project.parent_mall.version and project.version have the same value (version:1.0-SNAPSHOT) in both POM files. This suggests that there may be a dependency between the two projects, as they share the same version number.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",mall,project.parent_mall.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-admin/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-portal/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.parent_mall.version in mall-admin/pom.xml and project.version in mall-portal/pom.xml.\n2. Determine their types: VERSION_NUMBER.\n3. Compare their values: version:1.0-SNAPSHOT.\n4. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The 'project.parent_mall.version' and 'project.version' in Maven projects specify the version of the project being built. Since they have the same value, 'version:1.0-SNAPSHOT', it is likely that they are related and should be consistent across modules to ensure compatibility."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Resource Sharing,llama3:70b,config2,6.0,FP,False,"The configuration options spring.datasource.druid.min-idle in both mall-admin and mall-search have the same value (10). This could imply that the minimum idle connections for Druid datasource are intentionally set to be the same across both applications. However, without further context or information about the system architecture and design, it is uncertain whether this similarity is a coincidence or an actual dependency.","## Setting up Hikari Connection Pool

Firstly, let’s see how to configure Hikari Connection Pool in Spring Boot. The
good news is that **Hikari is the default Connection Pool for Spring Boot 2
applications** so you don’t need to add any extra dependency to your project.

As a matter of fact, if you try adding **com.zaxxer:HikariCP** to your
project, Eclipse will report that you are overriding the default
implementation available in Spring Boot 2 starters:

![Hikari connection pool spring boot](http://www.masterspringboot.com/wp-
content/uploads/2021/11/hikari_pool1.png)

## Configuring Hikari Pool

To configure **Hikari Connection Pool** you can use the
**application.properties** file. Here is a sample configuration:

    
    
    spring.datasource.hikari.connectionTimeout=40000 
    spring.datasource.hikari.idleTimeout=600000 
    spring.datasource.hikari.maxLifetime=1200000

Here is a list of most common properties you can include:

**spring.datasource.hikari.autoCommit** : This property controls the default
auto-commit behavior of connections returned from the pool. It is a boolean
value. Default: true

**spring.datasource.hikari.connectionTimeout** : This property controls the
maximum number of milliseconds that a client will wait for a connection from
the pool. If this time exceeds without a connection becoming available, a
SQLException will be thrown. Default: 30000 (30 seconds)

**spring.datasource.hikari.idleTimeout** : This property controls the maximum
amount of time that a connection is allowed to sit idle in the pool.. A value
of 0 means that idle connections are never removed from the pool. The minimum
allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)

**spring.datasource.hikari.keepaliveTime** : This property controls how
frequently HikariCP will attempt to keep a connection alive, in order to
prevent it from being timed out by the database or network infrastructure.
This value must be less than the maxLifetime value. A “keepalive” will only
occur on an idle connection. The minimum allowed value is 30000ms (30
seconds), but a value in the range of minutes is most desirable.

oracleucp.max-statements`  
`spring.datasource.oracleucp.min-pool-size`  
`spring.datasource.oracleucp.network-protocol`  
`spring.datasource.oracleucp.o-n-s-configuration`  
`spring.datasource.oracleucp.pdb-roles`  
`spring.datasource.oracleucp.port-number`  
`spring.datasource.oracleucp.property-cycle`  
`spring.datasource.oracleucp.query-timeout`  
`spring.datasource.oracleucp.read-only-instance-allowed`  
`spring.datasource.oracleucp.role-name`  
`spring.datasource.oracleucp.s-q-l-for-validate-connection`  
`spring.datasource.oracleucp.seconds-to-trust-idle-connection`  
`spring.datasource.oracleucp.server-name`  
`spring.datasource.oracleucp.sharding-mode`  
`spring.datasource.oracleucp.time-to-live-connection-timeout`  
`spring.datasource.oracleucp.timeout-check-interval`  
`spring.datasource.oracleucp.u-r-l`  
`spring.datasource.oracleucp.user`  
`spring.datasource.oracleucp.validate-connection-on-borrow`  
| Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource |   
`spring.datasource.password` | Login password of the database. |   
`spring.datasource.tomcat.abandon-when-percentage-full`  
`spring.datasource.tomcat.access-to-underlying-connection-allowed`  
`spring.datasource.tomcat.alternate-username-allowed`  
`spring.datasource.tomcat.commit-on-return`  
`spring.datasource.tomcat.connection-properties`  
`spring.datasource.tomcat.data-source-j-n-d-i`  
`spring.datasource.tomcat.db-properties`  
`spring.datasource.tomcat.default-auto-commit`  
`spring.datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.

DBCP2

To use Commons DBCP2 in a Spring Boot application, include the DBCP2
dependency:

    
    
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-dbcp2</artifactId>
    </dependency>

Further, we can use the below properties to [customize a DBCP2 connection
pool](https://docs.spring.io/spring-boot/redirect.html#appendix.application-
properties.data).

    
    
    spring.datasource.dbcp2.initial-size = 50
    spring.datasource.dbcp2.max-idle = 50
    spring.datasource.dbcp2.default-query-timeout = 10000
    spring.datasource.dbcp2.default-auto-commit = true
    
    # Refer other properties in documentation

### 3.3. Customizing Default Values

Tomcat Pooling is a connection pool provided by Apache Tomcat. To use Tomcat
Pooling in a Spring Boot application, include the Tomcat JDBC dependency.

    
    
    <dependency>
        <groupId>org.apache.tomcat</groupId>
        <artifactId>tomcat-jdbc</artifactId>
    </dependency>

Further, we can use the below properties to [customize a Tomcat connection
pool](https://docs.spring.io/spring-boot/redirect.html#appendix.application-
properties.data).

    
    
    spring.datasource.tomcat.initial-size=5
    spring.datasource.tomcat.max-active=10
    
    # Refer other properties in documentation

## 4\. Configuring Multiple DataSources with Spring Boot

To configure multiple data sources, create as many bean definitions as you
want but mark one of the `_DataSource_` instances as **_@Primary_**.

Remember that **if we create our own _DataSource_ bean then auto-configuration
backs off**. In this case, we are responsible for providing configurations for
all datasource beans.

*`,
`spring.datasource.tomcat.*`, and `spring.datasource.dbcp2.*`).

    
    
    spring.datasource.hikari.connection-timeout=30000
    spring.datasource.hikari.maximum-pool-size=10
    spring.datasource.hikari.minimum-idle=5
    spring.datasource.hikari.idle-timeout=600000
    spring.datasource.hikari.max-lifetime=1800000
    spring.datasource.hikari.pool-name=collection-pool
    
    # Other Properties
    
    #spring.datasource.hikari.allow-pool-suspension
    #spring.datasource.hikari.auto-commit
    #spring.datasource.hikari.catalog
    #spring.datasource.hikari.connection-init-sql
    #spring.datasource.hikari.connection-test-query
    #spring.datasource.hikari.data-source-class-name
    #spring.datasource.hikari.data-source-j-n-d-i
    #spring.datasource.hikari.data-source-properties
    #spring.datasource.hikari.driver-class-name
    #spring.datasource.hikari.exception-override-class-name
    #spring.datasource.hikari.health-check-properties
    #spring.datasource.hikari.initialization-fail-timeout
    #spring.datasource.hikari.isolate-internal-queries
    #spring.datasource.hikari.jdbc-url
    #spring.datasource.hikari.keepalive-time
    #spring.datasource.hikari.leak-detection-threshold
    #spring.datasource.hikari.login-timeout
    #spring.datasource.hikari.metrics-tracker-factory
    #spring.datasource.hikari.password
    #spring.datasource.hikari.read-only
    #spring.datasource.hikari.register-mbeans
    #spring.datasource.hikari.scheduled-executor
    #spring.datasource.hikari.schema
    #spring.datasource.hikari.transaction-isolation
    #spring.datasource.hikari.username
    #spring.datasource.hikari.validation-timeout

### 3.2.

datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.tomcat.driver-class-name`  
`spring.datasource.tomcat.fair-queue`  
`spring.datasource.tomcat.ignore-exception-on-pre-load`  
`spring.datasource.tomcat.init-s-q-l`  
`spring.datasource.tomcat.initial-size`  
`spring.datasource.tomcat.jdbc-interceptors`  
`spring.datasource.tomcat.jmx-enabled`  
`spring.datasource.tomcat.log-abandoned`  
`spring.datasource.tomcat.log-validation-errors`  
`spring.datasource.tomcat.login-timeout`  
`spring.datasource.tomcat.max-active`  
`spring.datasource.tomcat.max-age`  
`spring.datasource.tomcat.max-idle`  
`spring.datasource.tomcat.max-wait`  
`spring.datasource.tomcat.min-evictable-idle-time-millis`  
`spring.datasource.tomcat.min-idle`  
`spring.datasource.tomcat.name`  
`spring.datasource.tomcat.num-tests-per-eviction-run`  
`spring.datasource.tomcat.password`  
`spring.datasource.tomcat.propagate-interrupt-state`  
`spring.datasource.tomcat.remove-abandoned`  
`spring.datasource.tomcat.remove-abandoned-timeout`  
`spring.datasource.tomcat.rollback-on-return`  
`spring.datasource.tomcat.suspect-timeout`  
`spring.datasource.tomcat.test-on-borrow`  
`spring.datasource.tomcat.test-on-connect`  
`spring.datasource.tomcat.test-on-return`  
`spring.datasource.tomcat.test-while-idle`  
`spring.datasource.tomcat.time-between-eviction-runs-millis`  
`spring.datasource.tomcat.url`  
`spring.datasource.tomcat.use-disposable-connection-facade`  
`spring.datasource.tomcat.",mall,spring.datasource.druid.min-idle,VERSION_NUMBER,10,spring,mall-admin/src/main/resources/application-prod.yml,spring.datasource.druid.min-idle,VERSION_NUMBER,10,spring,mall-search/src/main/resources/application-prod.yml,Datasource,Datasource,"{
    ""plan"": ""1. Identify the configuration options: spring.datasource.druid.min-idle in mall-admin/src/main/resources/application-prod.yml and spring.datasource.druid.min-idle in mall-search/src/main/resources/application-prod.yml.\n2. Determine their types: VERSION_NUMBER.\n3. Compare their values: 10.\n4. Evaluate whether the similarity in values indicates a dependency between them."",
    ""rationale"": ""The configuration options spring.datasource.druid.min-idle in mall-admin/src/main/resources/application-prod.yml and spring.datasource.druid.min-idle in mall-search/src/main/resources/application-prod.yml have the same value 10, but they are used in different modules (admin and search) of a project. Typically, each module has its own datasource configuration. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Ambiguous Option Values,llama3:70b,config2,6.0,FP,False,"The configuration options 'services.mall-portal.container_name' in docker-compose and 'project.name' in Maven have the same value 'mall-portal'. This suggests that there might be a dependency between the two, as they share a common identifier. However, without further analysis, it is unclear whether this similarity is coincidental or indicative of an actual dependency.","](/questions/37683508/how-
does-service-discovery-work-with-modern-docker-docker-compose)

[ 1 ](/q/44098503 ""Question score \(upvotes - downvotes\)"") [docker double
service names](/questions/44098503/docker-double-service-names)

[ 4 ](/q/44412367 ""Question score \(upvotes - downvotes\)"") [Docker composed
services can't communicate by service name](/questions/44412367/docker-
composed-services-cant-communicate-by-service-name)

[ 4 ](/q/49591334 ""Question score \(upvotes - downvotes\)"") [Docker container
hostname with docker-compose](/questions/49591334/docker-container-hostname-
with-docker-compose)

[ 3 ](/q/56135964 ""Question score \(upvotes - downvotes\)"") [how does docker-
compose map my service names into IP addresses?](/questions/56135964/how-does-
docker-compose-map-my-service-names-into-ip-addresses)

[ 7 ](/q/58538636 ""Question score \(upvotes - downvotes\)"") [Docker compose -
Name or service not known when calling service from another
container](/questions/58538636/docker-compose-name-or-service-not-known-when-
calling-service-from-another-con)

[ 1 ](/q/60184441 ""Question score \(upvotes - downvotes\)"") [what is the
difference between hostname and servicename?](/questions/60184441/what-is-the-
difference-between-hostname-and-servicename)

[ 1 ](/q/62121158 ""Question score \(upvotes - downvotes\)"") [Name a service in
docker compose to be used as a hostname](/questions/62121158/name-a-service-
in-docker-compose-to-be-used-as-a-hostname)

[ 0 ](/q/74150622 ""Question score \(upvotes - downvotes\)"") [Why containers
are called services in docker compose?](/questions/74150622/why-containers-
are-called-services-in-docker-compose)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Wait, ASCII was 128 characters all along?

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

](/questions/35067889/how-to-
define-docker-image-name-from-within-docker-compose-yml)

[ 3 ](/q/42291409 ""Question score \(upvotes - downvotes\)"") [Docker compose
and hostname](/questions/42291409/docker-compose-and-hostname)

[ 1 ](/q/44331120 ""Question score \(upvotes - downvotes\)"") [docker-compose
replica hostname](/questions/44331120/docker-compose-replica-hostname)

[ 4 ](/q/49591334 ""Question score \(upvotes - downvotes\)"") [Docker container
hostname with docker-compose](/questions/49591334/docker-container-hostname-
with-docker-compose)

[ 11 ](/q/50539700 ""Question score \(upvotes - downvotes\)"") [docker-compose
ip/hostname for the host machine](/questions/50539700/docker-compose-ip-
hostname-for-the-host-machine)

[ 1 ](/q/50816991 ""Question score \(upvotes - downvotes\)"") [Docker hostname
alternative names](/questions/50816991/docker-hostname-alternative-names)

[ 0 ](/q/53581126 ""Question score \(upvotes - downvotes\)"") [Understanding
Hostname of Containers in docker-
compose.yml](/questions/53581126/understanding-hostname-of-containers-in-
docker-compose-yml)

[ 6 ](/q/54067367 ""Question score \(upvotes - downvotes\)"") [How to provide
container name in docker-compose.yml?](/questions/54067367/how-to-provide-
container-name-in-docker-compose-yml)

[ 1 ](/q/58464250 ""Question score \(upvotes - downvotes\)"") [hostname
attribute in docker-compose](/questions/58464250/hostname-attribute-in-docker-
compose)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Verbs for to punish ](https://german.stackexchange.com/questions/77602/verbs-for-to-punish)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers?

* Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

Draft saved

Draft discarded

### Sign up or [log
in](/users/login?ssrc=question_page&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f55522620%2fdocker-
compose-yml-container-name-and-hostname%23new-answer)

Sign up using Google

Sign up using Email and Password

Submit

### Post as a guest

Name

Email

Required, but never shown

### Post as a guest

Name

Email

Required, but never shown

Post Your Answer  Discard

By clicking “Post Your Answer”, you agree to our [terms of
service](https://stackoverflow.com/legal/terms-of-service/public) and
acknowledge you have read our [privacy
policy](https://stackoverflow.com/legal/privacy-policy).

##

Not the answer you're looking for? Browse other questions tagged

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 264 ](/q/29924843 ""Question score \(upvotes - downvotes\)"") [How do I set
hostname in docker-compose?

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",mall,services.mall-portal.container_name,NAME,mall-portal,docker-compose,document/docker/docker-compose-app.yml,project.name,NAME,mall-portal,maven,mall-portal/pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Identify the technologies involved: docker-compose and Maven.\n2. Analyze the purpose of each configuration option: services.mall-portal.container_name is for container orchestration, while project.name is for Maven project management.\n3. Evaluate whether the value-equality implies a dependency between the options."",
    ""rationale"": ""The configuration options services.mall-portal.container_name and project.name refer to the same name 'mall-portal', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for container orchestration, and the other is for Maven project management. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}","Mall is a simple e-commerce system built developed with modern and popular technologies, such as Spring Boot, MyBatis, Maven, Docker, and Docker Compose.

In the mall, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
While all module inherits these predefined configurations from the parent module, in mall, each module overwrites some of these configurations, such as the groupID.

The project structure of the first two levels of mall is as follows:

mall/
├── mall-admin/ # Backend mall management system API
│   ├── pom.xml
│   └── src/
├── mall-common/ # utility classes and common code
│   ├── pom.xml
│   └── src/
├── mall-demo/ # Test code for framework setup
│   ├── pom.xml
│   └── src/
├── mall-mbg/ # Database operation code generated by MyBatis Generator
│   ├── pom.xml
│   └── src/
├── mall-portal/ # Frontend mall system API
│   ├── pom.xml
│   └── src/
├── mall-search/ # Product search system based on Elasticsearch
│   ├── pom.xml
│   └── src/
├── mall-security/ Common module encapsulating Spring Security
│   ├── pom.xml
│   └── src/
└── pom.xml"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The configuration options share the same groupId value (org.springframework.boot), which suggests a potential dependency between them. However, without further context about the project's architecture and the roles of spring-boot-starter-mail and spring-boot-starter-web dependencies, we cannot conclusively determine the direction or existence of this dependency.","Here is a FULL file as an example: (this is the ROOT build.gradle) (If you
code a monolith, you'll only have a root build.gradle, if you write multiple
""gradle modules"", you'll have a root and subproject build.gradle files) (if
you have no idea what i'm talking about see link to docs.gradle.org at bottom)

(you can remove the dependencies, but i prefer to give a full working)

    
    
    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'java'
    }
    
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
        implementation 'org.springframework.boot:spring-boot-starter-integration'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-web-services'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'com.h2database:h2'
        implementation 'mysql:mysql-connector-java'
    
    
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.batch:spring-batch-test'
        testImplementation 'org.springframework.integration:spring-integration-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }
    
    test {
        useJUnitPlatform()
    }
    
    
    allprojects {
    
        /* custom task to show dependencies.  run ""gradle printAllDependencies"" from commandline.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

I follow the instructions
[here](https://plugins.gradle.org/plugin/org.springframework.boot) for the
latest `spring.framework.boot` plugin.

My `build.gradle` has

    
    
    plugins {
      id 'java-library'
      id 'eclipse'
      id 'io.spring.dependency-management' version '1.0.11.RELEASE'
      id 'org.springframework.boot' version '2.6.2'
      id 'org.springframework.boot.experimental.thin-launcher' version '1.0.23.RELEASE'
    }
    

but gradle tasks have the error

    
    
    > Could not resolve all dependencies for configuration ':detachedConfiguration1'.
       > Could not find org.springframework.boot:spring-boot-dependencies:2.6.2.
    

_UPDATE_ I neglected to add the final lines of the error description, which
were in fact important to answer it.

    
    
     Searched in the following locations:
       - https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
       - https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
    

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [gradle](/questions/tagged/gradle ""show questions tagged 'gradle'"")

[Share](/q/70624098 ""Short permalink to this question"")

[Improve this question](/posts/70624098/edit)

Follow

[edited Jan 11, 2022 at 15:18](/posts/70624098/revisions ""show all edits to
this post"")

rupweb

asked Jan 7, 2022 at 16:10

[!

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 22 ](/q/44266687 ""Question score \(upvotes - downvotes\)"") [How to print out
all dependencies in a Gradle multi-project build?](/questions/44266687/how-to-
print-out-all-dependencies-in-a-gradle-multi-project-build?noredirect=1)

#### Related

[ 1 ](/q/37349111 ""Question score \(upvotes - downvotes\)"") [Spring boot
dependencies error gradle](/questions/37349111/spring-boot-dependencies-error-
gradle)

[ 24 ](/q/49651374 ""Question score \(upvotes - downvotes\)"") [Cannot resolve
external dependency org.springframework.boot:spring-boot-starter: because no
repositories are defined](/questions/49651374/cannot-resolve-external-
dependency-org-springframework-bootspring-boot-starter)

[ 8 ](/q/56783015 ""Question score \(upvotes - downvotes\)"") [could not resolve
plugin artifact
'org.springframework.boot:org.springframework.boot.gradle.plugin:2.1.6.RELEASE'](/questions/56783015/could-
not-resolve-plugin-artifact-org-springframework-bootorg-springframework)

[ 10 ](/q/57534450 ""Question score \(upvotes - downvotes\)"") [Plugin [id:
'org.springframework.boot', version: '2.1.7.

springframework.boot', version: '2.1.7.RELEASE'] was not found in any of
the following sources](/questions/57534450/plugin-id-org-springframework-boot-
version-2-1-7-release-was-not-found)

[ 0 ](/q/61537415 ""Question score \(upvotes - downvotes\)"") [Dependency
'org.springframework.boot:spring-boot-starter-security:2.2.6.RELEASE' not
found](/questions/61537415/dependency-org-springframework-bootspring-boot-
starter-security2-2-6-release)

[ 3 ](/q/68867312 ""Question score \(upvotes - downvotes\)"") [Getting Project
'org.springframework.boot:spring-boot-starter-parent:2.6.0-SNAPSHOT' not
found](/questions/68867312/getting-project-org-springframework-bootspring-
boot-starter-parent2-6-0-snaps)

[ 1 ](/q/71865018 ""Question score \(upvotes - downvotes\)"")
[java.lang.ClassNotFoundException error for upgrading spring boot to 2.6.6
from 2.2.5_release](/questions/71865018/java-lang-classnotfoundexception-
error-for-upgrading-spring-boot-to-2-6-6-from-2)

[ 0 ](/q/72163389 ""Question score \(upvotes - downvotes\)"") [Error upgrading
spring boot version to 2.6.6](/questions/72163389/error-upgrading-spring-boot-
version-to-2-6-6)

[ 3 ](/q/72359609 ""Question score \(upvotes - downvotes\)"") [getting Spring
Boot [2.7.0] is not compatible with this Spring Cloud release train
error](/questions/72359609/getting-spring-boot-2-7-0-is-not-compatible-with-
this-spring-cloud-release-tra)

[ 1 ](/q/73065110 ""Question score \(upvotes - downvotes\)"") [Missing spring-
boot-buildpack-platform](/questions/73065110/missing-spring-boot-buildpack-
platform)

####  [ Hot Network Questions ](https://stackexchange.",music-website,project.dependencies.dependency_spring-boot-starter-mail.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.dependencies.dependency_spring-boot-starter-web.exclusions.exclusion_spring-boot-starter-logging.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-mail.groupId and project.dependencies.dependency_spring-boot-starter-web.exclusions.exclusion_spring-boot-starter-logging.groupId.\n2. Analyze their values: org.springframework.boot in music-server/pom.xml of technology Maven.\n3. Evaluate if the groupId values indicate a dependency between the configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-mail.groupId and project.dependencies.dependency_spring-boot-starter-web.exclusions.exclusion_spring-boot-starter-logging.groupId have the same value 'org.springframework.boot', which indicates that they are part of the same Spring Boot ecosystem. However, there is no direct dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_spring-boot-starter-data-redis.groupId and project.parent.spring-boot-starter-parent.groupId have the same value org.springframework.boot. This suggests that they are related, as both dependencies belong to the Spring Boot ecosystem. However, a direct dependency between them is not explicitly defined in the provided Maven configuration. Nevertheless, it can be inferred that spring-boot-starter-data-redis depends on spring-boot-starter-parent due to their shared groupId and the hierarchical nature of Maven dependencies.","apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

I got that same error. My pom like bellow

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.thusitha</groupId>
    <artifactId>department-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>department-service</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

So I have to changed my pom like this.

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
    
        <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/61287791 ""Short permalink to this answer"")

[Improve this answer](/posts/61287791/edit)

Follow

answered Apr 18, 2020 at 10:40

[!",music-website,project.dependencies.dependency_spring-boot-starter-data-redis.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.parent_spring-boot-starter-parent.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: project.dependencies.dependency_spring-boot-starter-data-redis.groupId and project.parent_spring-boot-starter-parent.groupId. 2. Compare the values to determine if they are equal. 3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The equality of the groupId values 'org.springframework.boot' in both configuration options indicates that they are part of the same Spring Boot ecosystem. The project.dependencies.dependency_spring-boot-starter-data-redis.groupId depends on the project.parent_spring-boot-starter-parent.groupId because the data Redis starter is a module that inherits from the spring-boot-starter-parent, which provides common dependencies and configurations for Spring Boot projects."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The configuration options spring.datasource.username in both files have the same value 'root'. This implies that the username for the datasource is consistent across different environments (dev and prod). Therefore, a change in one file would likely require a corresponding change in the other file to maintain consistency.","time-between-eviction-runs-millis`  
`spring.datasource.tomcat.url`  
`spring.datasource.tomcat.use-disposable-connection-facade`  
`spring.datasource.tomcat.use-equals`  
`spring.datasource.tomcat.use-lock`  
`spring.datasource.tomcat.use-statement-facade`  
`spring.datasource.tomcat.username`  
`spring.datasource.tomcat.validation-interval`  
`spring.datasource.tomcat.validation-query`  
`spring.datasource.tomcat.validation-query-timeout`  
`spring.datasource.tomcat.validator-class-name`  
| Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource |   
`spring.datasource.type` | Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath. |   
`spring.datasource.url` | JDBC URL of the database. |   
`spring.datasource.username` | Login username of the database. |   
`spring.datasource.xa.data-source-class-name` | XA datasource fully qualified name. |   
`spring.datasource.xa.properties.*` | Properties to pass to the XA data source. |   
`spring.elasticsearch.connection-timeout` | Connection timeout used when communicating with Elasticsearch. | `1s`  
`spring.elasticsearch.password` | Password for authentication with Elasticsearch. |   
`spring.elasticsearch.path-prefix` | Prefix added to the path of every request sent to Elasticsearch. |   
`spring.elasticsearch.restclient.sniffer.delay-after-failure` | Delay of a sniff execution scheduled after a failure. | `1m`  
`spring.elasticsearch.restclient.sniffer.interval` | Interval between consecutive ordinary sniff executions. | `5m`  
`spring.elasticsearch.restclient.ssl.bundle` | SSL bundle name. |   
`spring.elasticsearch.socket-keep-alive` | Whether to enable socket keep alive between client and Elasticsearch. | `false`  
`spring.elasticsearch.socket-timeout` | Socket timeout used when communicating with Elasticsearch. | `30s`  
`spring.elasticsearch.uris` | Comma-separated list of the Elasticsearch instances to use. | `[http://localhost:9200]`  
`spring.elasticsearch.username` | Username for authentication with Elasticsearch.

oracleucp.max-statements`  
`spring.datasource.oracleucp.min-pool-size`  
`spring.datasource.oracleucp.network-protocol`  
`spring.datasource.oracleucp.o-n-s-configuration`  
`spring.datasource.oracleucp.pdb-roles`  
`spring.datasource.oracleucp.port-number`  
`spring.datasource.oracleucp.property-cycle`  
`spring.datasource.oracleucp.query-timeout`  
`spring.datasource.oracleucp.read-only-instance-allowed`  
`spring.datasource.oracleucp.role-name`  
`spring.datasource.oracleucp.s-q-l-for-validate-connection`  
`spring.datasource.oracleucp.seconds-to-trust-idle-connection`  
`spring.datasource.oracleucp.server-name`  
`spring.datasource.oracleucp.sharding-mode`  
`spring.datasource.oracleucp.time-to-live-connection-timeout`  
`spring.datasource.oracleucp.timeout-check-interval`  
`spring.datasource.oracleucp.u-r-l`  
`spring.datasource.oracleucp.user`  
`spring.datasource.oracleucp.validate-connection-on-borrow`  
| Oracle UCP specific settings bound to an instance of Oracle UCP's PoolDataSource |   
`spring.datasource.password` | Login password of the database. |   
`spring.datasource.tomcat.abandon-when-percentage-full`  
`spring.datasource.tomcat.access-to-underlying-connection-allowed`  
`spring.datasource.tomcat.alternate-username-allowed`  
`spring.datasource.tomcat.commit-on-return`  
`spring.datasource.tomcat.connection-properties`  
`spring.datasource.tomcat.data-source-j-n-d-i`  
`spring.datasource.tomcat.db-properties`  
`spring.datasource.tomcat.default-auto-commit`  
`spring.datasource.tomcat.default-catalog`  
`spring.datasource.tomcat.default-read-only`  
`spring.datasource.tomcat.default-transaction-isolation`  
`spring.datasource.

Defaults to ""false"", meaning a page number of 0 in the request equals the first page. | `false`  
`spring.data.web.pageable.page-parameter` | Page index parameter name. | `page`  
`spring.data.web.pageable.prefix` | General prefix to be prepended to the page number and page size parameters. |   
`spring.data.web.pageable.qualifier-delimiter` | Delimiter to be used between the qualifier and the actual page number and size properties. | `_`  
`spring.data.web.pageable.size-parameter` | Page size parameter name. | `size`  
`spring.data.web.sort.sort-parameter` | Sort parameter name. | `sort`  
`spring.datasource.dbcp2.abandoned-usage-tracking`  
`spring.datasource.dbcp2.access-to-underlying-connection-allowed`  
`spring.datasource.dbcp2.auto-commit-on-return`  
`spring.datasource.dbcp2.cache-state`  
`spring.datasource.dbcp2.clear-statement-pool-on-return`  
`spring.datasource.dbcp2.connection-factory-class-name`  
`spring.datasource.dbcp2.connection-init-sqls`  
`spring.datasource.dbcp2.default-auto-commit`  
`spring.datasource.dbcp2.default-catalog`  
`spring.datasource.dbcp2.default-read-only`  
`spring.datasource.dbcp2.default-schema`  
`spring.datasource.dbcp2.default-transaction-isolation`  
`spring.datasource.dbcp2.disconnection-sql-codes`  
`spring.datasource.dbcp2.driver`  
`spring.datasource.dbcp2.driver-class-name`  
`spring.datasource.dbcp2.duration-between-eviction-runs`  
`spring.datasource.dbcp2.eviction-policy-class-name`  
`spring.datasource.dbcp2.fast-fail-validation`  
`spring.datasource.dbcp2.initial-size`  
`spring.datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.

datasource.dbcp2.jmx-name`  
`spring.datasource.dbcp2.lifo`  
`spring.datasource.dbcp2.log-abandoned`  
`spring.datasource.dbcp2.log-expired-connections`  
`spring.datasource.dbcp2.login-timeout`  
`spring.datasource.dbcp2.max-idle`  
`spring.datasource.dbcp2.max-open-prepared-statements`  
`spring.datasource.dbcp2.max-total`  
`spring.datasource.dbcp2.min-idle`  
`spring.datasource.dbcp2.num-tests-per-eviction-run`  
`spring.datasource.dbcp2.password`  
`spring.datasource.dbcp2.pool-prepared-statements`  
`spring.datasource.dbcp2.remove-abandoned-on-borrow`  
`spring.datasource.dbcp2.remove-abandoned-on-maintenance`  
`spring.datasource.dbcp2.rollback-on-return`  
`spring.datasource.dbcp2.test-on-borrow`  
`spring.datasource.dbcp2.test-on-create`  
`spring.datasource.dbcp2.test-on-return`  
`spring.datasource.dbcp2.test-while-idle`  
`spring.datasource.dbcp2.url`  
`spring.datasource.dbcp2.username`  
`spring.datasource.dbcp2.validation-query`  
| Commons DBCP2 specific settings bound to an instance of DBCP2's BasicDataSource |   
`spring.datasource.driver-class-name` | Fully qualified name of the JDBC driver. Auto-detected based on the URL by default. |   
`spring.datasource.embedded-database-connection` | Connection details for an embedded database. Defaults to the most suitable embedded database that is available on the classpath. |   
`spring.datasource.generate-unique-name` | Whether to generate a random datasource name.

> We often do not need to specify the `driver-class-name`, since Spring Boot
> can deduce it for the most databases from the connection url.
    
    
    # H2 DB
    spring.datasource.url=jdbc:h2:file:C:/temp/test
    spring.datasource.username=sa
    spring.datasource.password=
    spring.datasource.driverClassName=org.h2.Driver
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    
    # MySQL
    spring.datasource.url=jdbc:mysql://localhost:3306/test
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driver-class-name=com.mysql.jdbc.Driver
    spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
    
    # Oracle
    spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
    spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
    
    # SQL Server
    spring.datasource.url=jdbc:sqlserver://localhost;databaseName=springbootdb
    spring.datasource.username=dbuser
    spring.datasource.password=dbpass
    spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
    spring.jpa.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect

### 2.3. Java Configuration

The recommended way to create a _DataSource_ bean is using
**_DataSourceBuilder_** class within a class annotated with the
_@Configuration_ annotation.

Given is an example bean for H2 DB. Please configure other beans as necessary.

    
    
    @Configuration
    public class JpaConfig {
    
        @Bean
        public DataSource dataSource()
        {
            DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
            dataSourceBuilder.driverClassName(""org.h2.Driver"");
            dataSourceBuilder.url(""jdbc:h2:file:C:/temp/test"");
            dataSourceBuilder.username(""sa"");
            dataSourceBuilder.password("""");
            return dataSourceBuilder.build();
        }
    
        //...
    }

### 2.4. JNDI DataSource

Suppose we deploy our Spring Boot application to an application server. In
that case, we might want to configure and manage the _DataSource_ using the
Application Server's built-in features and access it using JNDI.",music-website,spring.datasource.username,USERNAME,root,spring,music-server/src/main/resources/application-dev.properties,spring.datasource.username,USERNAME,root,spring,music-server/src/main/resources/application-prod.properties,Datasource,Datasource,"{
    ""plan"": ""1. Identify the configuration options: spring.datasource.username in application-dev.properties and application-prod.properties.\n2. Analyze their values: both are 'root'.\n3. Evaluate whether they inherently depend on each other due to value-equality."",
    ""rationale"": ""The configuration options spring.datasource.username in application-dev.properties and application-prod.properties do not inherently depend on each other despite having the same value 'root'. Typically, each environment (development and production) has its own datasource, and the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,10.0,FP,False,"The dependency exists because both configuration options have the same value and type, indicating that they are referencing the same version of the @vue/eslint-config-typescript package. This means that if one option is updated, the other will also be affected.","So when used alongside other
sharable configs, this config should be placed at the end of the `extends`
array.

An example `.eslintrc.cjs`:

    
    
    /* eslint-env node */
    require(""@rushstack/eslint-patch/modern-module-resolution"")
    
    module.exports = {
      extends: [
        'eslint:recommended',
        'plugin:vue/vue3-essential',
        '@vue/eslint-config-typescript'
      ]
    }

### `@vue/eslint-config-typescript/recommended`

This is extended from the `@typescript-eslint/recommended` ruleset, which is
an **_opinionated_** ruleset. See the [original
documentation](https://github.com/typescript-eslint/typescript-
eslint/tree/master/packages/eslint-plugin/src/configs#recommended) for more
information.

Some of its rules, however, might conflict with `prettier`. So when used
alongside other sharable configs, this config should be placed after all other
configs except for the one from `@vue/eslint-config-prettier` or `eslint-
plugin-prettier` in the `extends` array.

An example `.eslintrc.cjs`:

    
    
    /* eslint-env node */
    require(""@rushstack/eslint-patch/modern-module-resolution"")
    
    module.exports = {
      extends: [
        'plugin:vue/vue3-essential',
        '@vue/eslint-config-typescript/recommended',
        '@vue/eslint-config-prettier'
      ]
    }

### With Other Community Configs

Work-In-Progress.

~~If you are following the[`standard`](https://standardjs.com/) or
[`airbnb`](https://github.com/airbnb/javascript/) style guides, don't manually
extend from this package.

Could not resolve dependency:
           npm ERR! peer eslint-plugin-vue@""^7.0.0"" from @vue/[[email protected]](/cdn-cgi/l/email-protection)
           npm ERR! node_modules/@vue/eslint-config-standard
           npm ERR!   dev @vue/eslint-config-standard@""^6.1.0"" from the root project
           npm ERR! 
           npm ERR! Conflicting peer dependency: [[email protected]](/cdn-cgi/l/email-protection)
           npm ERR! node_modules/eslint-plugin-vue
           npm ERR!   peer eslint-plugin-vue@""^7.0.0"" from @vue/[[email protected]](/cdn-cgi/l/email-protection)
           npm ERR!   node_modules/@vue/eslint-config-standard
           npm ERR!     dev @vue/eslint-config-standard@""^6.1.0"" from the root project
    

I tried running `npm install --legacy-peer-deps --save`, but this did not fix
the issue.

  * [vue.js](/questions/tagged/vue.js ""show questions tagged 'vue.js'"")
  * [heroku](/questions/tagged/heroku ""show questions tagged 'heroku'"")
  * [eslint](/questions/tagged/eslint ""show questions tagged 'eslint'"")
  * [peer-dependencies](/questions/tagged/peer-dependencies ""show questions tagged 'peer-dependencies'"")
  * [eslint-plugin-vue](/questions/tagged/eslint-plugin-vue ""show questions tagged 'eslint-plugin-vue'"")

[Share](/q/74075945 ""Short permalink to this question"")

[Improve this question](/posts/74075945/edit)

Follow

[edited Oct 15, 2022 at 0:54](/posts/74075945/revisions ""show all edits to
this post"")

mushvamp

asked Oct 15, 2022 at 0:52

[!

Thus, it only makes sense to add one of these
configs to your file. As you have already done, one should follow the
recommendation from the [typescript-eslint documentation](https://typescript-
eslint.io/packages/typescript-eslint/#config) by using`tseslint.config` and
`@ts-check`, and including eslint's and typescript-eslint's recommended
configuration objects:

    
        // @ts-check
    
    import eslint from '@eslint/js';
    import tseslint from 'typescript-eslint';
    import pluginVue from 'eslint-plugin-vue';
    
    export default tseslint.config(
      eslint.configs.recommended,
      ...tseslint.configs.recommended,
      ...pluginVue.configs['flat/recommended']
    );
    

  3. **Custom Parser for Typescript:** Currently, we're utilizing the `vue-eslint-parser` that comes bundled with `eslint-plugin-vue`. By default, it only parses JavaScript within Vue files. The [documentation](https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser) states

> If you're already using another parser, such as `""parser"": ""@typescript-
> eslint/parser""`, it's essential to relocate it into `parserOptions` to
> prevent collision with the `vue-eslint-parser` used by this plugin's
> configuration...

As you've already done, we need to use the `languageOptions` property in the
flat format, as described in the
[documentation](https://eslint.org/docs/latest/use/configure/configuration-
files#configuration-file), to tailor the parser for TypeScript. Lastly, to
avoid conflicts with Prettier, make sure to include `eslint-config-prettier`
as the final element in the configuration, as suggested by the documentation.

](/questions/74237042/how-to-correctly-configure-the-parser-plugins-
with-eslints-new-flat-config)

[ 803 ](/q/34764287 ""Question score \(upvotes - downvotes\)"") [Turning off
eslint rule for a specific file](/questions/34764287/turning-off-eslint-rule-
for-a-specific-file)

[ 0 ](/q/77009304 ""Question score \(upvotes - downvotes\)"") [Error: Plugin
""@typescript-eslint"" was conflicted between "".eslintrc.js »
plugin:@typescript-eslint/recommended-type-check](/questions/77009304/error-
plugin-typescript-eslint-was-conflicted-between-eslintrc-js-plugin)

[ 378 ](/q/55198502 ""Question score \(upvotes - downvotes\)"") [Using eslint
with typescript - Unable to resolve path to module](/questions/55198502/using-
eslint-with-typescript-unable-to-resolve-path-to-module)

[ 381 ](/q/58510287 ""Question score \(upvotes - downvotes\)"")
[""parserOptions.project"" has been set for @typescript-
eslint/parser](/questions/58510287/parseroptions-project-has-been-set-for-
typescript-eslint-parser)

[ 3 ](/q/70524215 ""Question score \(upvotes - downvotes\)"") [@typescript-
eslint/naming-convention workaround for Vue
components](/questions/70524215/typescript-eslint-naming-convention-
workaround-for-vue-components)

[ 764 ](/q/32308370 ""Question score \(upvotes - downvotes\)"") [What is the
syntax for Typescript arrow functions with
generics?](/questions/32308370/what-is-the-syntax-for-typescript-arrow-
functions-with-generics)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Why are there two cables connected to this GFCI outlet? ](https://diy.stackexchange.com/questions/303567/why-are-there-two-cables-connected-to-this-gfci-outlet)
  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines?

vue.js](/questions/60494700/critical-dependency-the-request-of-a-dependency-
is-an-expression-vue-js)

[ 4 ](/q/64076870 ""Question score \(upvotes - downvotes\)"") [Peer dependency
missing Vue 3](/questions/64076870/peer-dependency-missing-vue-3)

[ 1 ](/q/65734948 ""Question score \(upvotes - downvotes\)"") [ESLint plugins
need Vue and Vuetify but I want to have them only as peer-
dependencies](/questions/65734948/eslint-plugins-need-vue-and-vuetify-but-i-
want-to-have-them-only-as-peer-depende)

[ 7 ](/q/65783437 ""Question score \(upvotes - downvotes\)"") [NPM: npm peer
dependency conflict](/questions/65783437/npm-npm-peer-dependency-conflict)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is the 't' in 'witch' considered a silent t? ](https://english.stackexchange.com/questions/624325/is-the-t-in-witch-considered-a-silent-t)
  * [ Mutual Life Insurance Company of New York -- What is it now? How can I reach them? ](https://money.stackexchange.com/questions/163388/mutual-life-insurance-company-of-new-york-what-is-it-now-how-can-i-reach-the)
  * [ Purpose of Green/Orange switch on old flash unit ](https://photo.stackexchange.com/questions/135298/purpose-of-green-orange-switch-on-old-flash-unit)
  * [ Determine if N is zibbable ](https://puzzling.stackexchange.com/questions/127439/determine-if-n-is-zibbable)
  * [ Do spells taken by the Magic Initiate feat require material components that cost gold? ](https://rpg.stackexchange.com/questions/212737/do-spells-taken-by-the-magic-initiate-feat-require-material-components-that-cost)
  * [ Citing specific R functions in publications? ](https://academia.stackexchange.com/questions/212287/citing-specific-r-functions-in-publications)
  * [ Command to disable all tcolorboxes without deleting / commenting out them in source code?",music-website,devDependencies.@vue/eslint-config-typescript,VERSION_NUMBER,@vue/eslint-config-typescript:^9.1.0,nodejs,music-client/package.json,devDependencies.@vue/eslint-config-typescript,VERSION_NUMBER,@vue/eslint-config-typescript:^9.1.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: devDependencies.@vue/eslint-config-typescript in music-client/package.json and music-manage/package.json.\n2. Check the type of both configurations: VERSION_NUMBER.\n3. Compare the values of both configurations: ^9.1.0.\n4. Evaluate if the values are equal, indicating a dependency."",
    ""rationale"": ""The 'devDependencies.@vue/eslint-config-typescript' in a Node.js project specifies the version of the ESLint configuration for TypeScript being used. Since both configurations have the same value '^9.1.0', it is necessary to maintain consistency across modules to ensure compatibility. Therefore, the devDependencies.@vue/eslint-config-typescript needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Inferring Dependencies,llama3:70b,config2,6.0,FP,False,"The configuration options include.include/src/**/*.ts in music-client/tsconfig.json and music-manage/tsconfig.json have the same value 'src/**/*.ts'. This suggests that they might be dependent on each other, as they are using the same pattern to include TypeScript files. However, without more information about the context and usage of these configurations, it is difficult to conclude a definitive dependency.","In your tsconfig.json, set `""baseUrl"": "".""` and append every single folder to your paths, like:

    
    
    ""baseUrl"": ""."",
    ""paths"": {
        ""controllers/*"": [ ""./src/controllers/*"" ],
        ""helpers/*"": [ ""./src/helpers/*"" ],
        ""utils/*"": [ ""./src/utils/*"" ],
        ""components/*"": [ ""./src/components/*"" ],
        ""interfaces/*"": [ ""./src/interfaces/*"" ],
        ""middlewares/*"": [ ""./src/middlewares/*"" ],
        ""models/*"": [ ""./src/models/*"" ],
        ""routes/*"": [ ""./src/routes/*"" ],
        ""services/*"": [ ""./src/services/*"" ],
        ""validations/*"": [ ""./src/validations/*"" ]
    }

Finally, just run the following: npm run dev  
---  
  
👍 11 Alonso-Pablo, michal-arktrade, RamziNaili, timfayz, henrynext,
happybanxlala, cappscr, realmarcos, AndresCalle9, kennyrafael, and mbcod3
reacted with thumbs up emoji

All reactions

  * 👍 11 reactions

Sorry, something went wrong.

[![@kimlimjustin](https://avatars.githubusercontent.com/u/61906684?s=80&u=f83450f4c951c5fbc5cf5df5368203ea56308d18&v=4)](/kimlimjustin)

Copy link

Author

###

**[kimlimjustin](/kimlimjustin) ** commented Jul 14, 2021

> Good to know I'm not alone! Thought this was a problem with CRA-TypeScript.
> I did find (someone else's solution which I scoured upon) that deleting
> node-modules and then running ""yarn"" or ""npm install"" to reinstall them will
> fix it. A huge pain though, especially with large projects on a slower/older
> computer..

Actually reopening vscode will fix this, but it's really really annoying tho,
that's why I opened this issue.

[Leroy Dunn's user
avatar](https://lh4.googleusercontent.com/-oZXx01UorEM/AAAAAAAAAAI/AAAAAAAAAO8/LQoDU110PfQ/photo.jpg?sz=64)](/users/5771199/leroy-
dunn)

[Leroy Dunn](/users/5771199/leroy-dunn)Leroy Dunn

37944 silver badges88 bronze badges

Add a comment  | 

1

[](/posts/57648634/timeline ""Show activity on this post."")

_Note: My answer is for if you are using Mocha as your test tool._

The relevant information is hidden on a few pages.

Firstly, on mocha's [homepage](https://mochajs.org/):

> \--require , -r Require a module before loading the user interface or test
> files.
>
> This is useful for: Compilers such as ... TypeScript via ts-node (using
> --require ts-node/register)

Hence, you should install **ts-node** via `npm install ts-node --save-dev`.

* * *

Secondly, on mocha's [wiki](https://github.com/mochajs/mocha/wiki/compilers-
deprecation).

I won't quote it, but you have to run:

> $ mocha --require ts-node/register ""test/**/*.ts""

So your package.json might look like this:

    
    
      ""scripts"": {
        ""pretest"": ""npx tsc"",
        ""test"": ""mocha './test/**/*.ts' --require ts-node/register --recursive""
      },
    

and your tsconfig.json like this:

    
    
      ""include"": [
        ""./src""
      ]
    

You don't need to include your `/tests` folder into the transpile process. And
since you're running directly on the .ts test & source files, no sourcemap is
needed; your line numbers and callstack remain usable.

[Share](/a/57648634 ""Short permalink to this answer"")

Follow

answered Aug 25, 2019 at 18:22

[!

[![@divmgl](https://avatars.githubusercontent.com/u/5452298?s=80&u=645993204be8696c085ecf0d228c3062efe2ed65&v=4)](/divmgl)

Copy link

###

**[divmgl](/divmgl) ** commented Jan 27, 2024 •

edited

Loading

The `**/*` or `src/**/*` fixes do not work in my project. Creating a new file,
renaming a file or deleting a file will crash the TypeScript `--watch` server
and require me to restart it:

    
    
    [6:18:16 AM] File change detected. Starting incremental compilation...
    
    error TS6053: File '/Users/dimiguel/dev/packages/app/src/posthog.ts' not found.
      The file is in the program because:
        Matched by include pattern '**/*' in '/Users/dimiguel/dev/packages/app/tsconfig.json'
    
      packages/app/tsconfig.json:13:15
        13   ""include"": [""**/*""],
                         ~~~~~~
        File is matched by include pattern specified here.
    
    [6:18:19 AM] Found 1 error. Watching for file changes.
    

This is causing other issues, such as new files not being detected inside of a
project. Would really appreciate a fix for this as I'm having to constantly
restart my TypeScript server and all related tasks for new files, file renames
and deleted files.  
---  
  
All reactions

Sorry, something went wrong.

[![@divmgl](https://avatars.githubusercontent.com/u/5452298?s=80&u=645993204be8696c085ecf0d228c3062efe2ed65&v=4)](/divmgl)

Copy link

###

**[divmgl](/divmgl) ** commented Jan 27, 2024 •

edited

Loading

Hey all, I found a temporary workaround that solves this problem without
needing to change your includes or restart the TypeScript server.

Deleted a ts file in /src/routes/my.ts. Found this
thread. Restarted TS server and now the message is gone. Will try to create a
new issue if it happens again and add steps to reproduce. Steps might have
been:

  1. delete my.ts
  2. see errors about missing references in problems panel
  3. delete import statements
  4. see remaining error (this one) from tsconfig.json

  
---  
  
👍 2 Griffin-Sullivan and shubhamprasanna reacted with thumbs up emoji

All reactions

  * 👍 2 reactions

Sorry, something went wrong.

[Sign up for free](/join?source=comment-repo) **to join this conversation on
GitHub**. Already have an account? [Sign in to
comment](/login?return_to=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FTypeScript%2Fissues%2F43838)

Assignees

[ ![@sandersn](https://avatars.githubusercontent.com/u/293473?s=40&v=4)
](/sandersn) [ sandersn ](/sandersn)

Labels

[ Bug ](/microsoft/TypeScript/labels/Bug) A bug in TypeScript [ Needs More
Info ](/microsoft/TypeScript/labels/Needs%20More%20Info) The issue still
hasn't been fully clarified [ Rescheduled
](/microsoft/TypeScript/labels/Rescheduled) This issue was previously
scheduled to an earlier milestone

Projects

[ Rolling Work Tracking ](/microsoft/TypeScript/projects/5#card-70105539)

  

Done

Milestone

[ **TypeScript 5.5.0** ](/microsoft/TypeScript/milestone/179 ""TypeScript
5.5.0"")

Development

No branches or pull requests

71 participants

[ ![@anandvc](https://avatars.githubusercontent.com/u/74711?s=52&v=4)
](/anandvc) [
![@r4hulp](https://avatars.githubusercontent.com/u/292704?s=52&v=4) ](/r4hulp)
[ ![@sandersn](https://avatars.githubusercontent.com/u/293473?s=52&v=4)
](/sandersn) [
!

Title: docker-compose for Detached mode
Post Body:
I have following docker command to run container
docker run -d --name test -v /etc/hadoop/conf:/etc/hadoop/conf -v /usr/lib/python2.7/dist-packages/hdinsight_common:/usr/lib/python2.7/dist-packages/hdinsight_common -v /etc/hive/conf/:/etc/hive/conf/ -v /etc/tez/conf/:/etc/tez/conf/ -v /usr/hdp/2.4.2.0-258/sqoop/lib/:/usr/hdp/2.4.2.0-258/sqoop/lib/ -i -t hdinsight /bin/bash 
This was to complicated so I was trying to create docker-compose file like this
version: '2' services:   hdinsight:     image: hdinsight     container_name: ABC     volumes:      - /etc/hadoop/conf:/etc/hadoop/conf      - /usr/lib/python2.7/dist-packages/hdinsight_common:/usr/lib/python2.7/dist-packages/hdinsight_common      - /etc/hive/conf/:/etc/hive/conf/      - /etc/tez/conf/:/etc/tez/conf/      - /usr/hdp/2.4.2.0-258/sqoop/lib/:/usr/hdp/2.4.2.0-258/sqoop/lib/     entrypoint:      - bash     labels:      - 'HDInsight client VM' 
But I am not sure where to pass -d, -i & -t flages from my original docker run command
I was running docker-compose like this
docker-compose -f docker-compose.yml run hdinsight 
can anyone point me to right direction here ?",music-website,include.include/src/**/*.ts,PATH,src/**/*.ts,tsconfig,music-client/tsconfig.json,include.include/src/**/*.ts,PATH,src/**/*.ts,tsconfig,music-manage/tsconfig.json,Others,Others,"{ 
 ""plan"": ""1. Analyze the configuration options include.include/src/**/*.ts in music-client/tsconfig.json and music-manage/tsconfig.json.\n2. Identify the type of configuration option as PATH and the value as src/**/*.ts.\n3. Evaluate whether the configuration options are used in different environments or modules.\n4. Determine if the similarity in values indicates a dependency between them."", 
 ""rationale"": ""The configuration options include.include/src/**/*.ts in music-client/tsconfig.json and music-manage/tsconfig.json have the same value src/**/*.ts, but they are likely defined independently for their specific modules (music-client and music-manage) and use their own tsconfig settings. Therefore, there is no dependency between these options based on value-equality."", 
 ""isDependency"": false 
}","Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,10.0,FP,False,"The configuration options devDependencies.@vue/cli-plugin-babel in music-client/package.json and music-manage/package.json have the same value @vue/cli-plugin-babel:~5.0.0, which indicates that they are dependent on each other due to value equality.","9.0](/package/@vue/cli-plugin-babel/v/3.9.0)

40

    * 5 years ago

  * [4.0.0-alpha.2](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.2)

0

    * 5 years ago

  * [3.8.0](/package/@vue/cli-plugin-babel/v/3.8.0)

1,779

    * 5 years ago

  * [4.0.0-alpha.1](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.1)

0

    * 5 years ago

  * [4.0.0-alpha.0](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.0)

0

    * 5 years ago

  * [3.7.0](/package/@vue/cli-plugin-babel/v/3.7.0)

735

    * 5 years ago

  * [3.6.0](/package/@vue/cli-plugin-babel/v/3.6.0)

1,238

    * 5 years ago

  * [3.5.5](/package/@vue/cli-plugin-babel/v/3.5.5)

228

    * 5 years ago

  * [3.5.4](/package/@vue/cli-plugin-babel/v/3.5.4)

2

    * 5 years ago

  * [3.5.3](/package/@vue/cli-plugin-babel/v/3.5.3)

2,323

    * 5 years ago

  * [3.5.1](/package/@vue/cli-plugin-babel/v/3.5.1)

262

    * 5 years ago

  * [3.5.0](/package/@vue/cli-plugin-babel/v/3.5.0)

60

    * 5 years ago

  * [3.4.1](/package/@vue/cli-plugin-babel/v/3.4.1)

430

    * 5 years ago

  * [3.4.0](/package/@vue/cli-plugin-babel/v/3.4.0)

653

    * 5 years ago

  * [3.3.

0.0-rc.1](/package/@vue/cli-plugin-babel/v/4.0.0-rc.1)

3

    * 5 years ago

  * [3.11.0](/package/@vue/cli-plugin-babel/v/3.11.0)

2,005

    * 5 years ago

  * [4.0.0-rc.0](/package/@vue/cli-plugin-babel/v/4.0.0-rc.0)

4

    * 5 years ago

  * [4.0.0-beta.3](/package/@vue/cli-plugin-babel/v/4.0.0-beta.3)

9

    * 5 years ago

  * [3.10.0](/package/@vue/cli-plugin-babel/v/3.10.0)

552

    * 5 years ago

  * [4.0.0-beta.2](/package/@vue/cli-plugin-babel/v/4.0.0-beta.2)

3

    * 5 years ago

  * [4.0.0-beta.1](/package/@vue/cli-plugin-babel/v/4.0.0-beta.1)

3

    * 5 years ago

  * [4.0.0-beta.0](/package/@vue/cli-plugin-babel/v/4.0.0-beta.0)

0

    * 5 years ago

  * [4.0.0-alpha.5](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.5)

0

    * 5 years ago

  * [4.0.0-alpha.4](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.4)

0

    * 5 years ago

  * [3.9.2](/package/@vue/cli-plugin-babel/v/3.9.2)

2,755

    * 5 years ago

  * [4.0.0-alpha.3](/package/@vue/cli-plugin-babel/v/4.0.0-alpha.3)

0

    * 5 years ago

  * [3.9.0](/package/@vue/cli-plugin-babel/v/3.9.0)

40

    * 5 years ago

  * [4.0.

0.0-beta.6](/package/@vue/cli-plugin-babel/v/5.0.0-beta.6)

238

    * 3 years ago

  * [5.0.0-beta.5](/package/@vue/cli-plugin-babel/v/5.0.0-beta.5)

1

    * 3 years ago

  * [5.0.0-beta.4](/package/@vue/cli-plugin-babel/v/5.0.0-beta.4)

8

    * 3 years ago

  * [5.0.0-beta.3](/package/@vue/cli-plugin-babel/v/5.0.0-beta.3)

303

    * 3 years ago

  * [5.0.0-beta.2](/package/@vue/cli-plugin-babel/v/5.0.0-beta.2)

1,895

    * 3 years ago

  * [5.0.0-beta.1](/package/@vue/cli-plugin-babel/v/5.0.0-beta.1)

10

    * 3 years ago

  * [4.5.13](/package/@vue/cli-plugin-babel/v/4.5.13)

21,886

    * 3 years ago

  * [5.0.0-beta.0](/package/@vue/cli-plugin-babel/v/5.0.0-beta.0)

11

    * 3 years ago

  * [5.0.0-alpha.8](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.8)

32

    * 3 years ago

  * [4.5.12](/package/@vue/cli-plugin-babel/v/4.5.12)

5,093

    * 3 years ago

  * [5.0.0-alpha.7](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.7)

44

    * 3 years ago

  * [5.0.0-alpha.6](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.6)

1

    * 3 years ago

  * [5.0.0-alpha.5](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.

0.0-alpha.6)

1

    * 3 years ago

  * [5.0.0-alpha.5](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.5)

2

    * 3 years ago

  * [5.0.0-alpha.4](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.4)

3

    * 3 years ago

  * [4.5.11](/package/@vue/cli-plugin-babel/v/4.5.11)

4,531

    * 3 years ago

  * [5.0.0-alpha.3](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.3)

0

    * 3 years ago

  * [5.0.0-alpha.2](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.2)

8

    * 4 years ago

  * [5.0.0-alpha.1](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.1)

1

    * 4 years ago

  * [4.5.10](/package/@vue/cli-plugin-babel/v/4.5.10)

1,550

    * 4 years ago

  * [5.0.0-alpha.0](/package/@vue/cli-plugin-babel/v/5.0.0-alpha.0)

0

    * 4 years ago

  * [4.5.9](/package/@vue/cli-plugin-babel/v/4.5.9)

3,799

    * 4 years ago

  * [4.5.8](/package/@vue/cli-plugin-babel/v/4.5.8)

4,054

    * 4 years ago

  * [4.5.7](/package/@vue/cli-plugin-babel/v/4.5.7)

680

    * 4 years ago

  * [4.5.6](/package/@vue/cli-plugin-babel/v/4.5.6)

1,420

    * 4 years ago

  * [4.5.5](/package/@vue/cli-plugin-babel/v/4.5.

0.0-beta.5)

1

    * 6 years ago

  * [3.0.0-beta.4](/package/@vue/cli-plugin-babel/v/3.0.0-beta.4)

0

    * 6 years ago

  * [3.0.0-beta.3](/package/@vue/cli-plugin-babel/v/3.0.0-beta.3)

2

    * 6 years ago

  * [3.0.0-beta.2](/package/@vue/cli-plugin-babel/v/3.0.0-beta.2)

1

    * 6 years ago

  * [3.0.0-beta.1](/package/@vue/cli-plugin-babel/v/3.0.0-beta.1)

7

    * 6 years ago

  * [3.0.0-alpha.13](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.13)

0

    * 6 years ago

  * [3.0.0-alpha.12](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.12)

0

    * 6 years ago

  * [3.0.0-alpha.11](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.11)

1

    * 6 years ago

  * [3.0.0-alpha.10](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.10)

0

    * 6 years ago

  * [3.0.0-alpha.9](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.9)

1

    * 6 years ago

  * [3.0.0-alpha.8](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.8)

0

    * 6 years ago

  * [3.0.0-alpha.7](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.7)

0

    * 6 years ago

  * [3.0.0-alpha.6](/package/@vue/cli-plugin-babel/v/3.0.0-alpha.6)

0

    * 6 years ago

  * [3.0.0-alpha.",music-website,devDependencies.@vue/cli-plugin-babel,VERSION_NUMBER,@vue/cli-plugin-babel:~5.0.0,nodejs,music-client/package.json,devDependencies.@vue/cli-plugin-babel,VERSION_NUMBER,@vue/cli-plugin-babel:~5.0.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: devDependencies.@vue/cli-plugin-babel in music-client/package.json and music-manage/package.json.\n2. Check the values of these options: ~5.0.0 in both files.\n3. Evaluate whether the values are equal, considering the ~ symbol as a range (e.g., >= 5.0.0 < 6.0.0).\n4. If the values are equal or within the same range, conclude that a dependency exists."",
    ""rationale"": ""The devDependencies.@vue/cli-plugin-babel configuration option in both music-client and music-manage specifies the version of the @vue/cli-plugin-babel package used during development. Since the values ~5.0.0 are equal, it implies that both projects rely on the same range of versions for this package, creating a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,9.0,FP,False,"The configuration options dependencies.core-js in music-client/package.json and music-manage/package.json have the same value, which is core-js:^3.8.3. This suggests that both projects rely on the same version of core-js, implying a dependency between them.","[![@luistrcastro](https://avatars.githubusercontent.com/u/64997284?s=80&u=d831784dba29e9ba29e661fc79419b4f19355590&v=4)](/luistrcastro)

Copy link

###

**[luistrcastro](/luistrcastro) ** commented Dec 16, 2020

I didn't need to add ""import 'core-js'"" in my main.js file, just the first
instruction already solve the problem. Thank you very much.  
---  
  
👍 1 zecka reacted with thumbs up emoji

All reactions

  * 👍 1 reaction

Sorry, something went wrong.

[![@falconair](https://avatars.githubusercontent.com/u/365542?s=80&v=4)](/falconair)

Copy link

###

**[falconair](/falconair) ** commented Feb 27, 2021

I'm still having this issue. I'm not a web or node developer so I'm picking up
a project from 3 years ago. It used to build and serve web pages. My
packages.json file shows Vue dependency of version 2.5.16. When I do `vue
serve`, I get this error:

    
    
    These dependencies were not found:
    
    * core-js/fn/regexp/escape in ./node_modules/babel-polyfill/lib/index.js
    * core-js/library/fn/array/from in ./node_modules/babel-runtime/core-js/array/from.js
    * core-js/library/fn/get-iterator in ./node_modules/babel-runtime/core-js/get-iterator.js
    * core-js/library/fn/is-iterable in ./node_modules/babel-runtime/core-js/is-iterable.js
    * core-js/library/fn/json/stringify in ./node_modules/babel-runtime/core-js/json/stringify.js
    * core-js/library/fn/number/is-nan in ./node_modules/babel-runtime/core-js/number/is-nan.js
    * core-js/library/fn/object/assign in ./node_modules/babel-runtime/core-js/object/assign.js
    * core-js/library/fn/object/create in ./node_modules/babel-runtime/core-js/object/create.js
    * core-js/library/fn/object/define-property in .

Please, upgrade to core-js@3 or at least to actual version of core-js@2.
    [2/4] 🚚  Fetching packages...
    [----------------------------------------------------------------------------------------------------------------------------------------------------------] 0/601internal/modules/cjs/loader.js:584
        throw err;
        ^
    
    Error: Cannot find module '/Users/amarnr1989/AwesomeProject121/node_modules/react-native/package.json'
        at Function.Module._resolveFilename (internal/modules/cjs/loader.js:582:15)
        at Function.Module._load (internal/modules/cjs/loader.js:508:25)
        at Module.require (internal/modules/cjs/loader.js:637:17)
        at require (internal/modules/cjs/helpers.js:22:18)
        at checkNodeVersion (/usr/local/lib/node_modules/react-native-cli/index.js:306:21)
        at run (/usr/local/lib/node_modules/react-native-cli/index.js:300:3)
        at createProject (/usr/local/lib/node_modules/react-native-cli/index.js:249:3)
        at init (/usr/local/lib/node_modules/react-native-cli/index.js:200:5)
        at Object.<anonymous> (/usr/local/lib/node_modules/react-native-cli/index.js:153:7)
        at Module._compile (internal/modules/cjs/loader.js:701:30)
    

Please Suggest

  * [react-native](/questions/tagged/react-native ""show questions tagged 'react-native'"")
  * [npm-install](/questions/tagged/npm-install ""show questions tagged 'npm-install'"")

[Share](/q/55606841 ""Short permalink to this question"")

[Improve this question](/posts/55606841/edit)

Follow

asked Apr 10, 2019 at 7:19

[![Amar's user
avatar](https://www.gravatar.com/avatar/42355368618cd3917ef194664b2c3c05?s=64&d=identicon&r=PG)](/users/1427454/amar)

[Amar](/users/1427454/amar)Amar

69511 gold badge66 silver badges99 bronze badges

3

  * You don't need to do anything with core-js, just follow React Native Get Started guide for ""React Native CLI Quickstart"".

I included core-js in my
main.js, still get the same error. Any ideas?  
---  
  
All reactions

Sorry, something went wrong.

[![@grtjn](https://avatars.githubusercontent.com/u/611397?s=80&v=4)](/grtjn)

Copy link

Contributor Author

###

**[grtjn](/grtjn) ** commented Feb 27, 2021

Can you print the full contents of your package.json file? Most importantly
the dependencies bits? I'd also be interested to see the output of `npm
outdated`. I suspect there is some mismatch between babel, and core-js. It
might be necessary to be more accurate about which versions to pick.  
---  
  
All reactions

Sorry, something went wrong.

[![@grtjn](https://avatars.githubusercontent.com/u/611397?s=80&v=4)](/grtjn)

Copy link

Contributor Author

###

**[grtjn](/grtjn) ** commented Feb 27, 2021

Various comments related to babel and core-js can be found here. There might
be useful hints in there too: [vuejs/vue-
cli#3678](https://github.com/vuejs/vue-cli/issues/3678)  
---  
  
All reactions

Sorry, something went wrong.

[![@grtjn](https://avatars.githubusercontent.com/u/611397?s=80&v=4)](/grtjn)

Copy link

Contributor Author

###

**[grtjn](/grtjn) ** commented Feb 27, 2021

One useful hint might be to make sure core-js v2 is installed, and not core-js
v3. This can be done with `npm install --save corejs@2`  
---  
  
👍 1 falconair reacted with thumbs up emoji

All reactions

  * 👍 1 reaction

Sorry, something went wrong.

[![@falconair](https://avatars.githubusercontent.com/u/365542?s=80&v=4)](/falconair)

Copy link

###

**[falconair](/falconair) ** commented Feb 27, 2021

> One useful hint might be to make sure core-js v2 is installed, and not core-
> js v3.

2, 3])); // => new Set([1, 2, 3])

_You can load only required features_ :

    
    
    import 'core-js/actual/promise';
    import 'core-js/actual/set';
    import 'core-js/actual/iterator';
    import 'core-js/actual/array/from';
    import 'core-js/actual/array/flat-map';
    import 'core-js/actual/structured-clone';
    
    Promise.resolve(42).then(it => console.log(it)); // => 42
    
    Array.from(new Set([1, 2, 3]).union(new Set([3, 4, 5]))); // => [1, 2, 3, 4, 5]
    
    [1, 2].flatMap(it => [it, it]); // => [1, 1, 2, 2]
    
    (function * (i) { while (true) yield i++; })(1)
      .drop(1).take(5)
      .filter(it => it % 2)
      .map(it => it ** 2)
      .toArray(); // => [9, 25]
    
    structuredClone(new Set([1, 2, 3])); // => new Set([1, 2, 3])

_Or use it without global namespace pollution_ :

    
    
    import Promise from 'core-js-pure/actual/promise';
    import Set from 'core-js-pure/actual/set';
    import Iterator from 'core-js-pure/actual/iterator';
    import from from 'core-js-pure/actual/array/from';
    import flatMap from 'core-js-pure/actual/array/flat-map';
    import structuredClone from 'core-js-pure/actual/structured-clone';
    
    Promise.resolve(42).then(it => console.log(it)); // => 42
    
    from(new Set([1, 2, 3]).union(new Set([3, 4, 5]))); // => [1, 2, 3, 4, 5]
    
    flatMap([1, 2], it => [it, it]); // => [1, 1, 2, 2]
    
    Iterator.from(function * (i) { while (true) yield i++; }(1))
      .

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f55606841%2fhow-
to-update-core-js-to-core-js3-dependency) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f55606841%2fhow-
to-update-core-js-to-core-js3-dependency) to customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f55606841%2fhow-to-update-core-js-to-core-js3-dependency)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f55606841%2fhow-to-update-core-js-to-core-js3-dependency)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.",music-website,dependencies.core-js,VERSION_NUMBER,core-js:^3.8.3,nodejs,music-client/package.json,dependencies.core-js,VERSION_NUMBER,core-js:^3.8.3,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Compare the values of both configuration options: dependencies.core-js in music-client/package.json and music-manage/package.json.\n2. Check if the values are identical, i.e., core-js:^3.8.3.\n3. If the values are identical, evaluate whether the dependency is due to a shared library or module."",
    ""rationale"": ""The configuration options dependencies.core-js in both package.json files have the same value, core-js:^3.8.3. This suggests that both projects, music-client and music-manage, depend on the same version of the core-js library. Therefore, there is a dependency between these configuration options due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options devDependencies.@vue/cli-plugin-router in music-client/package.json and music-manage/package.json have the same value @vue/cli-plugin-router:~5.0.0, which indicates that they are dependent on each other due to value equality.","Plugins vs. Mixins](/questions/50474317/vue-js-components-vs-
plugins-vs-mixins)

[ 0 ](/q/50623477 ""Question score \(upvotes - downvotes\)"") [Plugins in Vue's
Single File Components](/questions/50623477/plugins-in-vues-single-file-
components)

[ 6 ](/q/51267203 ""Question score \(upvotes - downvotes\)"") [Using Vue CLI -
How do I update, remove and view all available
plugins](/questions/51267203/using-vue-cli-how-do-i-update-remove-and-view-
all-available-plugins)

[ 0 ](/q/53624982 ""Question score \(upvotes - downvotes\)"") [Vue.js
differences](/questions/53624982/vue-js-differences)

[ 25 ](/q/54248678 ""Question score \(upvotes - downvotes\)"") [Which are the
differences between vue-cli and vue-cli-service?](/questions/54248678/which-
are-the-differences-between-vue-cli-and-vue-cli-service)

[ 7 ](/q/58328991 ""Question score \(upvotes - downvotes\)"") [Vue CLI 3
vue.config.js vs webpack.config.js for plugins](/questions/58328991/vue-
cli-3-vue-config-js-vs-webpack-config-js-for-plugins)

[ 5 ](/q/59363866 ""Question score \(upvotes - downvotes\)"") [Difference
between @vue/cli-plugin-unit-jest and vue-
jest?](/questions/59363866/difference-between-vue-cli-plugin-unit-jest-and-
vue-jest)

[ 8 ](/q/70685948 ""Question score \(upvotes - downvotes\)"") [Do I need the
@vitejs/plugin-vue dependency?](/questions/70685948/do-i-need-the-vitejs-
plugin-vue-dependency)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Wikipedia states that the relativistic Doppler effect is the same whether it is the source or the receiver that is stationary. Can this be true?

com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/guide/plugins-and-presets)

  * [简体中文](/zh/guide/plugins-and-presets)

  * [Русский](/ru/guide/plugins-and-presets)

[GitHub ](https://github.com/vuejs/vue-cli)

  * [Overview](/guide/)
  * [Installation](/guide/installation)
  * Basics

    * [Creating a Project](/guide/creating-a-project)
    * [Plugins and Presets](/guide/plugins-and-presets)
      * Plugins
        * Installing Plugins in an Existing Project
        * Project local plugin
      * Presets
        * Preset Plugin Versioning
        * Allowing Plugin Prompts
        * Remote Presets
        * Local Filesystem Preset
    * [CLI Service](/guide/cli-service)
  * Development

    * [Browser Compatibility](/guide/browser-compatibility)
    * [HTML and Static Assets](/guide/html-and-static-assets)
    * [Working with CSS](/guide/css)
    * [Working with Webpack](/guide/webpack)
    * [Modes and Environment Variables](/guide/mode-and-env)
    * [Build Targets](/guide/build-targets)
    * [Deployment](/guide/deployment)
    * [Troubleshooting](/guide/troubleshooting)

⚠️ Vue CLI is in Maintenance Mode!

For new projects, it is now recommended to use [`create-
vue`](https://github.com/vuejs/create-vue) to scaffold
[Vite](https://vitejs.dev)-based projects. Also refer to the [Vue 3 Tooling
Guide](https://vuejs.org/guide/scaling-up/tooling.html) for the latest
recommendations.

# Plugins and Presets #

## Plugins #

Vue CLI uses a plugin-based architecture. If you inspect a newly created
project's `package.json`, you will find dependencies that start with
`@vue/cli-plugin-`. Plugins can modify the internal webpack configuration and
inject commands to `vue-cli-service`. Most of the features listed during the
project creation process are implemented as plugins.

The plugin based architecture makes Vue CLI flexible and extensible. If you
are interested in developing a plugin, check out the [Plugin Development
Guide](/dev-guide/plugin-dev).

com/vuejs/vue-cli)

  * [Plugin Development Guide](/dev-guide/plugin-dev)
    * Getting started
    * Naming and discoverability
    * Generator
      * Creating new templates
      * Editing existing templates
      * Filename edge cases
      * Extending package
      * Changing main file
    * Service Plugin
      * Modifying webpack config
      * Add a new cli-service command
      * Modifying existing cli-service command
      * Specifying Mode for Commands
    * Prompts
    * Installing plugin locally
    * UI Integration
      * Augment the task in the UI
      * Display a configuration screen
      * Display prompts
      * Logo
    * Publish Plugin to npm
  * API reference

    * [Plugin API](/dev-guide/plugin-api)
    * [Generator API](/dev-guide/generator-api)
  * UI Development

    * [UI Plugin Info](/dev-guide/ui-info)
    * [UI Plugin API](/dev-guide/ui-api)
    * [UI Localization](/dev-guide/ui-localization)

⚠️ Vue CLI is in Maintenance Mode!

For new projects, it is now recommended to use [`create-
vue`](https://github.com/vuejs/create-vue) to scaffold
[Vite](https://vitejs.dev)-based projects. Also refer to the [Vue 3 Tooling
Guide](https://vuejs.org/guide/scaling-up/tooling.html) for the latest
recommendations.

# Plugin Development Guide #

## Getting started #

A CLI plugin is an npm package that can add additional features to the project
using Vue CLI. These features can include:

  * changing project webpack config - for example, you can add a new webpack resolve rule for a certain file extension, if your plugin is supposed to work with this type of files. Say, `@vue/cli-plugin-typescript` adds such rule to resolve `.ts` and `.tsx` extensions;
  * adding new vue-cli-service command - for example, `@vue/cli-plugin-unit-jest` adds a new command `test:unit` that allows developer to run unit tests;
  * extending `package.json` \- a useful option when your plugin adds some dependencies to the project and you need to add them to package dependencies section;
  * creating new files in the project and/or modifying old ones.

[ Vue CLI](/)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/dev-guide/plugin-dev)

  * [简体中文](/zh/dev-guide/plugin-dev)

  * [Русский](/ru/dev-guide/plugin-dev)

[GitHub ](https://github.com/vuejs/vue-cli)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/dev-guide/plugin-dev)

  * [简体中文](/zh/dev-guide/plugin-dev)

  * [Русский](/ru/dev-guide/plugin-dev)

[GitHub ](https://github.

[ Vue CLI](/)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/guide/plugins-and-presets)

  * [简体中文](/zh/guide/plugins-and-presets)

  * [Русский](/ru/guide/plugins-and-presets)

[GitHub ](https://github.com/vuejs/vue-cli)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.",music-website,devDependencies.@vue/cli-plugin-router,VERSION_NUMBER,@vue/cli-plugin-router:~5.0.0,nodejs,music-client/package.json,devDependencies.@vue/cli-plugin-router,VERSION_NUMBER,@vue/cli-plugin-router:~5.0.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: devDependencies.@vue/cli-plugin-router in music-client/package.json and music-manage/package.json.\n2. Check the type of both configuration options: VERSION_NUMBER.\n3. Compare the values of both configuration options: ~5.0.0.\n4. Evaluate whether the values are equal, considering the tilde (~) as a range specifier."",
    ""rationale"": ""The 'devDependencies.@vue/cli-plugin-router' in a Node.js project specifies the version of the Vue CLI plugin router being used. Since both configuration options have the same value '~5.0.0', which is a range specifier, it implies that both projects can use the same compatible version of the plugin. Therefore, the devDependencies.@vue/cli-plugin-router needs to be consistent across both projects, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. Since both groupId values are 'org.springframework.boot', it implies that they are part of the same Spring Boot project and are likely to be used together in the music-server application.","## 2\. Redis Setup

We recommend installing and running Redis on your machine to follow along with
this article. One Redis instance suffices for basic testing; however, for
advanced features like clustering or sentinel mode, two or three instances may
be required.

Find more information about Linux and MacOS downloads[
here](https://redis.io/docs/getting-started/). Please note that Redis does not
officially support Windows, but we can find a port of the[ server
here](https://github.com/MicrosoftArchive/redis).

  * In development environment, we can also run Redis using[ Docker](https://hub.docker.com/_/redis/) as an alternative option.
  * In test environment, we can consider using [Testcontainers](https://howtodoinjava.com/spring-boot/testcontainers-with-junit-and-spring-boot/).

## 3\. Maven

There are two **supported connectors** available to connect Redis from a
Spring Boot application:

  * _[Lettuce](https://github.com/redis/lettuce)_
  *  _[Jedis](https://github.com/redis/jedis)_

To configure and connect using _Lettuce_ , we need to include [_spring-boot-
starter-data-
redis_](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-data-redis) dependency in the project's _pom.xml_ file. Lettuce
Java Redis client, which is **included by default in Spring Boot** , thereby
eliminating the need to add any additional dependencies.

    
    
    <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

For Jedis, we need to include one additional client's library in dependencies.

    
    
    <dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>4.3.2</version>
    </dependency>

For unit testing, include the latest version of [testcontainers-redis-junit-
jupiter](https://mvnrepository.com/artifact/com.redis.testcontainers/junit-
jupiter) which adds support for running Testcontainer for Redis server.

I am new to spring boot and just started exploring it .I came across this
issue where intellij ide shows this error in pom.xml .I fail to understand as
to why this is happening.

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.5.3</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.example</groupId>
        <artifactId>Spring-boot-tutorial</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>Spring-boot-tutorial</name>
        <description>Demo project for Spring Boot</description>
        <properties>
            <java.version>1.8</java.version>
        </properties>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <scope>runtime</scope>
                <optional>true</optional>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>2.5.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 7 ](/q/32871844 ""Question score \(upvotes - downvotes\)"") [spring boot :
error when add spring-boot-starter-data-jpa
dependency](/questions/32871844/spring-boot-error-when-add-spring-boot-
starter-data-jpa-dependency)

[ 1 ](/q/33997031 ""Question score \(upvotes - downvotes\)"") [Spring data JPA -
No qualifying bean found for dependency](/questions/33997031/spring-data-jpa-
no-qualifying-bean-found-for-dependency)

[ 0 ](/q/36802350 ""Question score \(upvotes - downvotes\)"") [Issue with
building Springboot in Maven2](/questions/36802350/issue-with-building-
springboot-in-maven2)

[ 5 ](/q/41446501 ""Question score \(upvotes - downvotes\)"") [Dependency not
found in Spring Boot project](/questions/41446501/dependency-not-found-in-
spring-boot-project)

[ 2 ](/q/41991014 ""Question score \(upvotes - downvotes\)"") [Spring Data JPA
dependency error](/questions/41991014/spring-data-jpa-dependency-error)

[ 0 ](/q/43503808 ""Question score \(upvotes - downvotes\)"") [Failed to inject
the dependency](/questions/43503808/failed-to-inject-the-dependency)

[ 2 ](/q/46316652 ""Question score \(upvotes - downvotes\)"") [spring-boot-
starter-data-jpa dependency error](/questions/46316652/spring-boot-starter-
data-jpa-dependency-error)

[ 2 ](/q/52003118 ""Question score \(upvotes - downvotes\)"") [Not able to add
JPA dependency into spring-boot project](/questions/52003118/not-able-to-add-
jpa-dependency-into-spring-boot-project)

[ 12 ](/q/61909247 ""Question score \(upvotes - downvotes\)"") [Dependency
'org.springframework.

With that in place, you can declare the Spring Data
modules you would like to use without a version in the `<dependencies />`
block, as follows:

Declaring a dependency to a Spring Data module such as JPA

    
    
    <dependencies>
      <dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-jpa</artifactId>
      </dependency>
    <dependencies>

## Dependency Management with Spring Boot

Spring Boot selects a recent version of the Spring Data modules for you. If
you still want to upgrade to a newer version, set the `spring-data-
bom.version` property to the train version and iteration you would like to
use.

See Spring Boot's [documentation](https://docs.spring.io/spring-
boot/docs/current/reference/html/dependency-versions.html#appendix.dependency-
versions.properties) (search for ""Spring Data Bom"") for more details.

## Spring Framework

The current version of Spring Data modules require Spring Framework 6.1.9 or
better. The modules might also work with an older bugfix version of that minor
version. However, using the most recent version within that generation is
highly recommended.

  * [Spring Data Commons](index.html)
    * [ 3.4.0-SNAPSHOT ](3.4-SNAPSHOT/index.html)
    * [ 3.3.3-SNAPSHOT ](3.3-SNAPSHOT/index.html)
    * [ 3.3.2current ](index.html)
    * [ 3.2.9-SNAPSHOT ](3.2-SNAPSHOT/index.html)
    * [ 3.2.8 ](3.2/index.html)
  * [Spring Data JPA](./index.html)
    * [ 3.4.0-SNAPSHOT ](./3.4-SNAPSHOT/index.html)
    * [ 3.3.3-SNAPSHOT ](./3.3-SNAPSHOT/index.html)
    * [ 3.3.2current ](./index.html)
    * [ 3.2.9-SNAPSHOT ](./3.2-SNAPSHOT/index.html)
    * [ 3.2.8 ](./3.2/index.html)

  * Related Spring Documentation 
    * [ Spring Framework ](https://docs.",music-website,project.dependencies.dependency_spring-boot-starter-data-redis.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.dependencies.dependency_spring-boot-starter-mail.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values of both configuration options: project.dependencies.dependency_spring-boot-starter-data-redis.groupId and project.dependencies.dependency_spring-boot-starter-mail.groupId. 2. Check if they have the same value, which is org.springframework.boot in this case. 3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The equality of the groupId values indicates that both dependencies are part of the same Spring Boot ecosystem. However, there is no direct dependency between these two configuration options based on their groupId values alone."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The dependency exists because both configurations have the same version number (~4.5.5) for the typescript package, which means they rely on the same version of TypeScript to function correctly. This value-equality implies a dependency between the two configurations.","Other answers made great sense, but I'm gonna add that a peerDep's type
declaration package should also be placed in `dependencies` instead of
`peerDependencies`.

Assume that `b` is a plugin of `a`. And `c` uses `a` and `b`.

Why shouldn't `@types/a` be placed in `b`'s `peerDependencies`?

If `b`'s `package.json` is like:

    
    
    {
      ""peerDependencies"": {
        ""a"": ""1.5.x""
        ""@types/a"": ""1.4.x""
      }
    }
    

`c` may use only interfaces defined in `@types/[[email protected]](/cdn-
cgi/l/email-protection)` but `c` is forced to install `@types/[[email
protected]](/cdn-cgi/l/email-protection)`.

Furthermore, `c` may be a regular javascript package rather than typescript
package, but `c` is also forced to install `@types/[[email protected]](/cdn-
cgi/l/email-protection)`.

So, the correct `package.json` of `b` should be like:

    
    
    {
      ""peerDependencies"": {
        ""a"": ""1.5.x""
      },
      ""dependencies"": {
        ""@types/a"": ""1.4.x""
      }
    }
    

[Share](/a/72525600 ""Short permalink to this answer"")

Follow

[edited Sep 20, 2022 at 18:10](/posts/72525600/revisions ""show all edits to
this post"")

answered Jun 7, 2022 at 3:28

[![Zim's user
avatar](https://www.gravatar.com/avatar/78f0fa4ac1ca5eb09da399cab82e5b41?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/8578634/zim)

[Zim](/users/8578634/zim)Zim

2,47811 gold badge1212 silver badges66 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow. [Learn more](/help/gen-ai-policy)

Thanks for contributing an answer to Stack Overflow!

  * Please be sure to _answer the question_.

I use TypeScript 2 in my project. I'd like to use some js library, but also
typings for that library. I can install types with simple `npm install
@types/some-library`. I'm not sure if I should `--save` or `--save-dev` them.
It seems to me that even DefinetelyTyped GitHub readme kind of mentions both
versions, but never explains them. I would think that @types should be in
`devDependencies`, as types are needed for development and aren't used in
runtime, but I saw many times @types in just `dependencies`. I'm confused.

How should I decide whether @types/* goes into `dependencies` or
`devDependencies`? Are there actually some more or less official instructions?

  * [typescript](/questions/tagged/typescript ""show questions tagged 'typescript'"")
  * [npm](/questions/tagged/npm ""show questions tagged 'npm'"")
  * [typescript-typings](/questions/tagged/typescript-typings ""show questions tagged 'typescript-typings'"")
  * [package.json](/questions/tagged/package.json ""show questions tagged 'package.json'"")

[Share](/q/45176661 ""Short permalink to this question"")

Follow

asked Jul 18, 2017 at 20:40

[![kamyl's user
avatar](https://www.gravatar.com/avatar/e86aa5e5eeb7d8a01d5934d8f9b8f6bc?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4530649/kamyl)

[kamyl](/users/4530649/kamyl)kamyl

6,26644 gold badges2424 silver badges2929 bronze badges

3

  * Are you generating a bundle or is this a package that will be used by others? As I see it you only need to make the distinction between `dependencies` and `devDependencies` in the latter case.

- [Valentin](/users/1333383/valentin ""2,830 reputation"")

Commented Sep 13, 2017 at 18:06

  * 1

I make some game in js/ts from scratch. I bundle everything with webpack.

html)
    * [Timers](timers.html)
    * [TLS/SSL](tls.html)
    * [Trace events](tracing.html)
    * [TTY](tty.html)
    * [UDP/datagram](dgram.html)
    * [URL](url.html)
    * [Utilities](util.html)
    * [V8](v8.html)
    * [VM](vm.html)
    * [WASI](wasi.html)
    * [Web Crypto API](webcrypto.html)
    * [Web Streams API](webstreams.html)
    * [Worker threads](worker_threads.html)
    * [Zlib](zlib.html)

* * *

    * [Code repository and issue tracker](https://github.com/nodejs/node)

  * Options 

    * [View on single page](all.html)
    * [View as JSON](typescript.json)
    * [Edit on GitHub](https://github.com/nodejs/node/edit/main/doc/api/typescript.md)

* * *

Table of contents

  * Modules: TypeScript
    * Enabling
    * Full TypeScript support
    * Type stripping
      * Determining module system
      * TypeScript features
      * Importing types without `type` keyword
      * Non-file forms of input
      * Source maps
      * Type stripping in dependencies

## Modules: TypeScript#

History Version| Changes  
---|---  
v22.7.0 | Added `--experimental-transform-types` flag.  
  
[Stability: 1](documentation.html#stability-index).0 - Early development

### Enabling#

There are two ways to enable runtime TypeScript support in Node.js:

  1. For full support of all of TypeScript's syntax and features, including using any version of TypeScript, use a third-party package.

  2. For lightweight support, you can use the built-in support for type stripping.

### Full TypeScript support#

To use TypeScript with full support for all TypeScript features, including
`tsconfig.json`, you can use a third-party package. These instructions use
[`tsx`](https://tsx.is/) as an example but there are many other similar
libraries available.

  1. Install the package as a development dependency using whatever package manager you're using for your project.

When running, if the dependency is missing, you get an error (mentioned by [@nextgentech](https://stackoverflow.com/users/1997767/nextgentech)) This explains it nicely: <https://flaviocopes.com/npm-peer-dependencies/>
    * [in version 7](https://github.blog/2021-02-02-npm-7-is-now-generally-available/) peerDependencies are automatically installed unless an upstream dependency conflict is present that cannot be automatically resolved
  * Transitivity (mentioned by [Ben Hutchison](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies/22004559#comment57650997_22004559)):

    * `dependencies` are installed transitively: if A requires B, and B requires C, then C gets installed, otherwise, B could not work, and neither would A.

    * `devDependencies` is not installed transitively. E.g. we don't need to test B to test A, so B's testing dependencies can be left out.

Related options not discussed here:

  * `bundledDependencies` which is discussed on the following question: _[Advantages of bundledDependencies over normal dependencies in npm](https://stackoverflow.com/questions/11207638/advantages-of-bundleddependencies-over-normal-dependencies-in-npm?lq=1)_
  * [`optionalDependencies`](https://docs.npmjs.com/files/package.json#optionaldependencies) (mentioned [by Aidan Feldman](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies/22004559#comment62749434_18875674))

## devDependencies

`dependencies` are required to run, `devDependencies` only to develop, e.g.:
unit tests, CoffeeScript to JavaScript transpilation, minification, ...

If you are going to develop a package, you download it (e.g. via `git clone`),
go to its root which contains `package.json`, and run:

    
    
    npm install
    

Since you have the actual source, it is clear that you want to develop it, so
by default, both `dependencies` (since you must, of course, run to develop)
and `devDependency` dependencies are also installed.

These instructions use
[`tsx`](https://tsx.is/) as an example but there are many other similar
libraries available.

  1. Install the package as a development dependency using whatever package manager you're using for your project. For example, with `npm`:
    
        npm install --save-dev tsx copy

  2. Then you can run your TypeScript code via:
    
        npx tsx your-file.ts copy

Or alternatively, you can run with `node` via:

    
        node --import=tsx your-file.ts copy

### Type stripping#

Added in: v22.6.0

[Stability: 1](documentation.html#stability-index).0 - Early development

The flag [`--experimental-strip-types`](cli.html#--experimental-strip-types)
enables Node.js to run TypeScript files. By default Node.js will execute only
files that contain no TypeScript features that require transformation, such as
enums or namespaces. Node.js will replace inline type annotations with
whitespace, and no type checking is performed. To enable the transformation of
such features use the flag [`--experimental-transform-
types`](cli.html#--experimental-transform-types). TypeScript features that
depend on settings within `tsconfig.json`, such as paths or converting newer
JavaScript syntax to older standards, are intentionally unsupported. To get
full TypeScript support, see Full TypeScript support.

The type stripping feature is designed to be lightweight. By intentionally not
supporting syntaxes that require JavaScript code generation, and by replacing
inline types with whitespace, Node.js can run TypeScript code without the need
for source maps.

#### Determining module system#

Node.js supports both [CommonJS](modules.html) and [ES Modules](esm.html)
syntax in TypeScript files. Node.js will not convert from one module system to
another; if you want your code to run as an ES module, you must use `import`
and `export` syntax, and if you want your code to run as CommonJS you must use
`require` and `module.exports`.

  * `.ts` files will have their module system determined [the same way as `.js` files.](packages.html#determining-module-system) To use `import` and `export` syntax, add `""type"": ""module""` to the nearest parent `package.json`.",music-website,devDependencies.typescript,VERSION_NUMBER,typescript:~4.5.5,nodejs,music-client/package.json,devDependencies.typescript,VERSION_NUMBER,typescript:~4.5.5,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Check the 'devDependencies' section in both music-client/package.json and music-manage/package.json files. 2. Verify that both configurations have the same version number (~4.5.5) for the typescript dependency. 3. If the versions match, consider them dependent due to value equality."",
    ""rationale"": ""The 'devDependencies' section in a Node.js project specifies the dependencies required for development. The 'typescript' dependency with version ~4.5.5 must be consistent across both music-client and music-manage projects to ensure compatibility. Therefore, the devDependencies.typescript configuration options depend on each other due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The configuration options `devDependencies.@vue/cli-service` with value `@vue/cli-service:~5.0.0` in both `music-client/package.json` and `music-manage/package.json` have the same version number. This suggests that they might be dependent on each other, as they are using the same version of `@vue/cli-service`. However, without more information about the project structure and dependencies, it's difficult to conclude a direct dependency.","{
  ""name"": ""music-client"",
  ""version"": ""3.0.0"",
  ""private"": true,
  ""scripts"": {
    ""serve"": ""vue-cli-service serve"",
    ""build"": ""vue-cli-service build"",
    ""lint"": ""vue-cli-service lint""
  },
  ""dependencies"": {
    ""axios"": ""^0.26.0"",
    ""core-js"": ""^3.8.3"",
    ""element-plus"": ""^2.0.4"",
    ""vue"": ""^3.2.13"",
    ""vue-router"": ""^4.0.3"",
    ""vuex"": ""^4.0.0""
  },
  ""devDependencies"": {
    ""@element-plus/icons-vue"": ""^1.0.0"",
    ""@typescript-eslint/eslint-plugin"": ""^5.4.0"",
    ""@typescript-eslint/parser"": ""^5.4.0"",
    ""@vue/cli-plugin-babel"": ""~5.0.0"",
    ""@vue/cli-plugin-eslint"": ""~5.0.0"",
    ""@vue/cli-plugin-router"": ""~5.0.0"",
    ""@vue/cli-plugin-typescript"": ""~5.0.0"",
    ""@vue/cli-plugin-vuex"": ""~5.0.0"",
    ""@vue/cli-service"": ""~5.0.0"",
    ""@vue/eslint-config-typescript"": ""^9.1.0"",
    ""eslint"": ""^7.32.0"",
    ""eslint-plugin-vue"": ""^8.0.3"",
    ""sass"": ""^1.32.7"",
    ""sass-loader"": ""^12.0.0"",
    ""typescript"": ""~4.5.5""
  }
}

All packages installed correctly using vue 2 with vue-cli 4.5.12.

### What is actually happening?

    
    
    npm ERR! code ERESOLVE
    npm ERR! ERESOLVE unable to resolve dependency tree
    npm ERR! 
    npm ERR! While resolving: manager-app@1.22.1
    npm ERR! Found: vue@2.6.12
    npm ERR! node_modules/vue
    npm ERR!   dev vue@""2.6.12"" from the root project
    npm ERR! 
    npm ERR! Could not resolve dependency:
    npm ERR! peer vue@""3.0.11"" from @vue/compiler-sfc@3.0.11
    npm ERR! node_modules/@vue/compiler-sfc
    npm ERR!   peerOptional @vue/compiler-sfc@""^3.0.0-beta.14"" from @vue/cli-service@4.5.12
    npm ERR!   node_modules/@vue/cli-service
    npm ERR!     dev @vue/cli-service@""4.5.12"" from the root project
    npm ERR!     1 more (@vue/cli-plugin-babel)
    

* * *

It works fine few days before. Now, it's not working. I think the problem is
with `@vue/compiler-sfc` peerOptional in `@vue/cli-service` package  
---  
The text was updated successfully, but these errors were encountered:

  
  
All reactions

[![@sodatea](https://avatars.githubusercontent.com/u/3277634?s=80&u=a530f156e5bb174497f01b8b7d7af547736dd860&v=4)](/sodatea)

Copy link

Member

###

**[sodatea](/sodatea) ** commented Apr 22, 2021

See [#6270 (comment)](https://github.com/vuejs/vue-
cli/issues/6270#issuecomment-790666206). Please update your npm version.  
---  
  
All reactions

Sorry, something went wrong.

[!

com/vuejs/vue-cli)

  * [Overview](/guide/)
  * [Installation](/guide/installation)
  * Basics

    * [Creating a Project](/guide/creating-a-project)
    * [Plugins and Presets](/guide/plugins-and-presets)
    * [CLI Service](/guide/cli-service)
      * Using the Binary
      * vue-cli-service serve
      * vue-cli-service build
      * vue-cli-service inspect
      * Checking All Available Commands
      * Skipping Plugins
      * Caching and Parallelization
      * Git Hooks
      * Configuration without Ejecting
  * Development

    * [Browser Compatibility](/guide/browser-compatibility)
    * [HTML and Static Assets](/guide/html-and-static-assets)
    * [Working with CSS](/guide/css)
    * [Working with Webpack](/guide/webpack)
    * [Modes and Environment Variables](/guide/mode-and-env)
    * [Build Targets](/guide/build-targets)
    * [Deployment](/guide/deployment)
    * [Troubleshooting](/guide/troubleshooting)

⚠️ Vue CLI is in Maintenance Mode!

For new projects, it is now recommended to use [`create-
vue`](https://github.com/vuejs/create-vue) to scaffold
[Vite](https://vitejs.dev)-based projects. Also refer to the [Vue 3 Tooling
Guide](https://vuejs.org/guide/scaling-up/tooling.html) for the latest
recommendations.

# CLI Service #

## Using the Binary #

Inside a Vue CLI project, `@vue/cli-service` installs a binary named `vue-cli-
service`. You can access the binary directly as `vue-cli-service` in npm
scripts, or as `./node_modules/.bin/vue-cli-service` from the terminal.

You can access the binary directly as `vue-cli-service` in npm
scripts, or as `./node_modules/.bin/vue-cli-service` from the terminal.

This is what you will see in the `package.json` of a project using the default
preset:

    
    
    {
      ""scripts"": {
        ""serve"": ""vue-cli-service serve"",
        ""build"": ""vue-cli-service build""
      }
    }
    

You can invoke these scripts using either npm or Yarn:

    
    
    npm run serve
    # OR
    yarn serve
    

If you have [npx](https://github.com/npm/npx) available (should be bundled
with an up-to-date version of npm), you can also invoke the binary directly
with:

    
    
    npx vue-cli-service serve
    

TIP

You can run scripts with additional features using the GUI with the `vue ui`
command.

Here is the Webpack Analyzer from the GUI in action:

![UI Webpack Analyzer](/ui-analyzer.png)

## vue-cli-service serve #

    
    
    Usage: vue-cli-service serve [options] [entry]
    
    Options:
    
      --open         open browser on server start
      --copy         copy url to clipboard on server start
      --mode         specify env mode (default: development)
      --host         specify host (default: 0.0.0.0)
      --port         specify port (default: 8080)
      --https        use https (default: false)
      --public       specify the public network URL for the HMR client
      --skip-plugins comma-separated list of plugin names to skip for this run
    

\--copy

Copying to clipboard might not work on a few platforms. If copying was
successful, `(copied to clipboard)` is displayed next to the local dev server
URL.

The `vue-cli-service serve` command starts a dev server (based on [webpack-
dev-server](https://github.com/webpack/webpack-dev-server)) that comes with
Hot-Module-Replacement (HMR) working out of the box.

In addition to the command line flags, you can also configure the dev server
using the [devServer](./../config/#devserver) field in `vue.config.js`.

* `--target` allows you to build any component(s) inside your project as a library or as web components. See [Build Targets](/guide/build-targets) for more details.

  * `--report` and `--report-json` will generate reports based on your build stats that can help you analyze the size of the modules included in your bundle.

## vue-cli-service inspect #

    
    
    Usage: vue-cli-service inspect [options] [...paths]
    
    Options:
    
      --mode    specify env mode (default: development)
    

You can use `vue-cli-service inspect` to inspect the webpack config inside a
Vue CLI project. See [Inspecting Webpack Config](/guide/webpack#inspecting-
the-project-s-webpack-config) for more details.

## Checking All Available Commands #

Some CLI plugins will inject additional commands to `vue-cli-service`. For
example, `@vue/cli-plugin-eslint` injects the `vue-cli-service lint` command.
You can see all injected commands by running:

    
    
    npx vue-cli-service help
    

You can also learn about the available options of each command with:

    
    
    npx vue-cli-service help [command]
    

## Skipping Plugins #

You can exclude specific plugins when running a command by passing the name of
the plugin to the `--skip-plugins` option:

    
    
    npx vue-cli-service build --skip-plugins pwa
    

TIP

This option is available for _every_ `vue-cli-service` command, including
custom ones added by other plugins.

You can skip multiple plugins by passing their names as a comma-separated list
or by repeating the argument:

    
    
    npx vue-cli-service build --skip-plugins pwa,apollo --skip-plugins eslint
    

Plugin names are resolved the same way they are during install, as described
[here](/guide/plugins-and-presets#installing-plugins-in-an-existing-project)

    
    
    # these are all equivalent
    npx vue-cli-service build --skip-plugins pwa
    
    npx vue-cli-service build --skip-plugins @vue/pwa
    
    npx vue-cli-service build --skip-plugins @vue/cli-plugin-pwa
    

## Caching and Parallelization #

  * `cache-loader` is enabled for Vue/Babel/TypeScript compilations by default. Files are cached inside `node_modules/.cache` \- if running into compilation issues, always try deleting the cache directory first.",music-website,devDependencies.@vue/cli-service,VERSION_NUMBER,@vue/cli-service:~5.0.0,nodejs,music-client/package.json,devDependencies.@vue/cli-service,VERSION_NUMBER,@vue/cli-service:~5.0.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their purpose and behavior in the context of Vue CLI projects. We should consider whether the version of @vue/cli-service has any impact on the project's functionality or compatibility when used across different modules."",
    ""rationale"": ""The 'devDependencies.@vue/cli-service' option specifies the version of Vue CLI Service being used in a project. The tilde (~) symbol in the version number indicates that the project is compatible with the latest patch version of Vue CLI Service 5.0.0. Since both modules use the same version range, it implies that they are compatible with each other and can coexist without issues. However, this does not create a dependency between them, as each module can function independently with its own version of Vue CLI Service."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this analysis is that if both projects have the same version of @vue/cli-plugin-typescript as a devDependency, it implies that they share a common requirement or constraint. This could be due to a shared dependency or a specific feature that requires this exact version. Therefore, we can conclude that there is a dependency between these configuration options.","5.8"",
        ""vuex"": ""^3.5.1""
      },
      ""devDependencies"": {
        ""@types/electron-devtools-installer"": ""^2.2.0"",
        ""@typescript-eslint/eslint-plugin"": ""^4.33.0"",
        ""@typescript-eslint/parser"": ""^4.33.0"",
        ""@vue/cli-plugin-babel"": ""~4.5.0"",
        ""@vue/cli-plugin-eslint"": ""~4.5.0"",
        ""@vue/cli-plugin-router"": ""^4.5.4"",
        ""@vue/cli-plugin-typescript"": ""~4.5.0"",
        ""@vue/cli-service"": ""~4.5.0"",
        ""@vue/eslint-config-typescript"": ""^7.0.0"",
        ""babel-eslint"": ""^10.1.0"",
        ""dotenv-webpack"": ""^7.0.3"",
        ""electron"": ""^13.0.0"",
        ""electron-devtools-installer"": ""^3.1.0"",
        ""eslint"": ""^6.7.2"",
        ""eslint-plugin-vue"": ""^6.2.2"",
        ""sass"": ""^1.38.2"",
        ""sass-loader"": ""^8.0.0"",
        ""typescript"": ""~4.1.5"",
        ""vue-cli-plugin-capacitor"": ""~2.0.1"",
        ""vue-cli-plugin-electron-builder"": ""~2.1.1"",
        ""vue-cli-plugin-vuetify"": ""~2.0.7"",
        ""vue-template-compiler"": ""^2.6.14"",
        ""vuetify-loader"": ""^1.7.3""
      },
      ""eslintConfig"": {
        ""root"": true,
        ""env"": {
          ""node"": true
        },
        ""extends"": [
          ""plugin:vue/essential"",
          ""eslint:recommended"",
          ""@vue/typescript""
        ],
        ""parserOptions"": {
          ""parser"": ""@typescript-eslint/parser""
        },
        ""rules"": {}
      },
      ""browserslist"": [
        ""> 1%"",
        ""last 2 versions"",
        ""not dead""
      ],
      ""keywords"": [],

node_modules/@vue/eslint-config-typescript
    npm ERR!     dev @vue/eslint-config-typescript@""^7.0.0"" from the root project
    npm ERR! 
    npm ERR! Conflicting peer dependency: [[email protected]](/cdn-cgi/l/email-protection)
    npm ERR! node_modules/eslint
    npm ERR!   peer eslint@""^5.0.0 || ^6.0.0 || ^7.0.0"" from @typescript-eslint/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR!   node_modules/@typescript-eslint/eslint-plugin
    npm ERR!     dev @typescript-eslint/eslint-plugin@""^4.33.0"" from the root project
    npm ERR!     peer @typescript-eslint/eslint-plugin@""^4.4.0"" from @vue/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR!     node_modules/@vue/eslint-config-typescript
    npm ERR!       dev @vue/eslint-config-typescript@""^7.0.0"" from the root project
    npm ERR! 
    npm ERR! Fix the upstream dependency conflict, or retry
    npm ERR! this command with --force, or --legacy-peer-deps
    npm ERR! to accept an incorrect (and potentially broken) dependency resolution.
    npm ERR! 
    npm ERR! See /home/pau/.npm/eresolve-report.txt for a full report.
    
    npm ERR! A complete log of this run can be found in:
    npm ERR!     /home/pau/.npm/_logs/2021-10-29T19_09_55_798Z-debug.log
    

I am using `node` version `v14.17.4`, `npm` version `8.0.0`.

Here is my `package.json`. I configured the majority of the project using Vue
Cli, currently on version `@vue/cli 4.5.14`.

    
    
    {
      ""name"": ""uama.groundframework.frontend"",
      ""version"": ""0.1.0"",
      ""private"": true,
      ""description"": ""## Project setup ``` npm install ```"",
      ""author"": """",
      ""scripts"": {
        ""serve"": ""vue-cli-service serve"",

com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/core-plugins/typescript)

  * [简体中文](/zh/core-plugins/typescript.html)

  * [Русский](/ru/core-plugins/typescript)

[GitHub ](https://github.com/vuejs/vue-cli)

  * Core Vue CLI Plugins

    * [@vue/cli-plugin-babel](/core-plugins/babel)
    * [@vue/cli-plugin-typescript](/core-plugins/typescript)
      * Configuration
      * Caching
      * Parallelization
      * Installing in an Already Created Project
      * Injected webpack-chain Rules
    * [@vue/cli-plugin-eslint](/core-plugins/eslint)
    * [@vue/cli-plugin-pwa](/core-plugins/pwa)
    * [@vue/cli-plugin-unit-jest](/core-plugins/unit-jest)
    * [@vue/cli-plugin-unit-mocha](/core-plugins/unit-mocha)
    * [@vue/cli-plugin-e2e-cypress](/core-plugins/e2e-cypress)
    * [@vue/cli-plugin-e2e-nightwatch](/core-plugins/e2e-nightwatch)
    * [@vue/cli-plugin-e2e-webdriverio](/core-plugins/e2e-webdriverio)

⚠️ Vue CLI is in Maintenance Mode!

For new projects, it is now recommended to use [`create-
vue`](https://github.com/vuejs/create-vue) to scaffold
[Vite](https://vitejs.dev)-based projects. Also refer to the [Vue 3 Tooling
Guide](https://vuejs.org/guide/scaling-up/tooling.html) for the latest
recommendations.

# @vue/cli-plugin-typescript #

> typescript plugin for vue-cli

Uses TypeScript + `ts-loader` \+ [fork-ts-checker-webpack-
plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) for
faster off-thread type checking.

## Configuration #

TypeScript can be configured via `tsconfig.json`.

Since `3.0.0-rc.6`, `typescript` is now a peer dependency of this package, so
you can use a specific version of TypeScript by updating your project's
`package.json`.

This plugin can be used alongside `@vue/cli-plugin-babel`.

When I run `npm audit fix` it can't
resolve the dependency conflict:

    
    
    npm ERR! code ERESOLVE
    npm ERR! ERESOLVE could not resolve
    npm ERR! 
    npm ERR! While resolving: @typescript-eslint/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR! Found: [[email protected]](/cdn-cgi/l/email-protection)
    npm ERR! node_modules/eslint
    npm ERR!   dev eslint@""^6.7.2"" from the root project
    npm ERR!   peer eslint@""^5.0.0 || ^6.0.0 || ^7.0.0"" from @typescript-eslint/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR!   node_modules/@typescript-eslint/eslint-plugin
    npm ERR!     dev @typescript-eslint/eslint-plugin@""^4.33.0"" from the root project
    npm ERR!     peer @typescript-eslint/eslint-plugin@""^4.4.0"" from @vue/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR!     node_modules/@vue/eslint-config-typescript
    npm ERR!       dev @vue/eslint-config-typescript@""^7.0.0"" from the root project
    npm ERR!   9 more (@typescript-eslint/experimental-utils, eslint-utils, ...)
    npm ERR! 
    npm ERR! Could not resolve dependency:
    npm ERR! peer eslint@""^5.0.0 || ^6.0.0 || ^7.0.0"" from @typescript-eslint/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR! node_modules/@typescript-eslint/eslint-plugin
    npm ERR!   dev @typescript-eslint/eslint-plugin@""^4.33.0"" from the root project
    npm ERR!   peer @typescript-eslint/eslint-plugin@""^4.4.0"" from @vue/[[email protected]](/cdn-cgi/l/email-protection)
    npm ERR!   node_modules/@vue/eslint-config-typescript
    npm ERR!     dev @vue/eslint-config-typescript@""^7.0.0"" from the root project
    npm ERR! 
    npm ERR!

[ Vue CLI](/)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/core-plugins/typescript)

  * [简体中文](/zh/core-plugins/typescript.html)

  * [Русский](/ru/core-plugins/typescript)

[GitHub ](https://github.com/vuejs/vue-cli)

[Guide ](/guide/)

[Config Reference ](/config/)

Plugins

  * [Core Plugins](/core-plugins/)

  * [Plugin Dev Guide](/dev-guide/plugin-dev)

  * [Plugin API](/dev-guide/plugin-api)

  * [Generator API](/dev-guide/generator-api)

  * [UI Plugin Info](/dev-guide/ui-info)

  * [UI Plugin API](/dev-guide/ui-api)

  * [UI Localization](/dev-guide/ui-localization)

  * [Discover More](https://awesomejs.dev/for/vue-cli/)

Migrate from Older Versions

  * [From Vue CLI v3 to v4](/migrations/migrate-from-v3)

  * [From Vue CLI v4 to v5](/migrations/migrate-from-v4)

  * [Full Changelog](https://github.com/vuejs/vue-cli/blob/dev/CHANGELOG.md)

Languages

  * [English](/core-plugins/typescript)

  * [简体中文](/zh/core-plugins/typescript.",music-website,devDependencies.@vue/cli-plugin-typescript,VERSION_NUMBER,@vue/cli-plugin-typescript:~5.0.0,nodejs,music-client/package.json,devDependencies.@vue/cli-plugin-typescript,VERSION_NUMBER,@vue/cli-plugin-typescript:~5.0.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: devDependencies.@vue/cli-plugin-typescript in music-client/package.json and music-manage/package.json.\n2. Check the type of both configuration options: VERSION_NUMBER.\n3. Compare the values of both configuration options: ~5.0.0.\n4. Evaluate whether the values are equal, considering the tilde (~) as a range specifier."",
    ""rationale"": ""The 'devDependencies.@vue/cli-plugin-typescript' in a Node.js project specifies the version of the TypeScript plugin being used. Since both configurations have the same value '~5.0.0', which is a range specifier allowing for minor updates, they can be considered equal. This means that if one configuration is updated to a newer version within the specified range, the other should also be updated to maintain compatibility."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. Since both values are equal to @typescript-eslint/eslint-plugin:^5.4.0, it implies that the same version of the eslint-plugin is required in both music-client and music-manage projects.","Could you help me, I've got this error when I try building a project?

> Oops! Something went wrong! :(

> ESLint: 8.0.0

> TypeError: Failed to load plugin '@typescript-eslint' declared in
> 'src.eslintrc': Class extends value undefined is not a constructor or null
> Referenced from: src.eslintrc

package.json

    
    
        ""devDependencies"": {
            ""@typescript-eslint/eslint-plugin"": ""^4.33.0"",
            ""@typescript-eslint/parser"": ""^4.33.0"",
            ""browserslist"": ""^4.17.3"",
            ""eslint"": ""^8.0.0"",
            ""eslint-config-prettier"": ""^8.3.0"",
            ""eslint-plugin-import"": ""^2.24.2"",
            ""eslint-plugin-prettier"": ""^4.0.0"",
            ""eslint-plugin-react"": ""^7.26.1"",
            ""prettier"": ""^2.3.2"",
        }
    

.eslintrc

    
    
        ""parser"": ""@typescript-eslint/parser"",
        ""extends"": [
            ""eslint:recommended"",
            ""plugin:@typescript-eslint/eslint-recommended"",
            ""plugin:@typescript-eslint/recommended"",
            ""plugin:react/recommended"",
            ""plugin:@typescript-eslint/recommended"",
            ""plugin:prettier/recommended"",
            ""prettier""
        ],
        ""plugins"": [""@typescript-eslint""],
    

  * [javascript](/questions/tagged/javascript ""show questions tagged 'javascript'"")
  * [typescript](/questions/tagged/typescript ""show questions tagged 'typescript'"")
  * [eslint](/questions/tagged/eslint ""show questions tagged 'eslint'"")
  * [typescript-eslint](/questions/tagged/typescript-eslint ""show questions tagged 'typescript-eslint'"")

[Share](/q/69513869 ""Short permalink to this question"")

[Improve this question](/posts/69513869/edit)

Follow

[edited Oct 10, 2021 at 9:31](/posts/69513869/revisions ""show all edits to
this post"")

Alexei Delezhov

asked Oct 10, 2021 at 9:17

[!

We’ll occasionally send you
account related emails.

Already on GitHub? [Sign in](/login?return_to=%2Ftypescript-
eslint%2Ftypescript-eslint%2Fissues%2Fnew%2Fchoose) to your account

Jump to bottom

#  Fix peer dependency #747

Closed

[deser](/deser) opened this issue Jul 23, 2019 * 5 comments

Closed

#  Fix peer dependency  #747

[deser](/deser) opened this issue Jul 23, 2019 * 5 comments

Labels

[ package: eslint-plugin ](/typescript-eslint/typescript-
eslint/labels/package%3A%20eslint-plugin) Issues related to @typescript-
eslint/eslint-plugin [ working as intended ](/typescript-eslint/typescript-
eslint/labels/working%20as%20intended) Issues that are closed as they are
working as intended

## Comments

[![@deser](https://avatars.githubusercontent.com/u/3010698?s=80&u=b907a9835f8bd5d58933098e2325769d65ec4c61&v=4)](/deser)

Copy link

###

**[deser](/deser) ** commented Jul 23, 2019

@typescript-eslint/eslint-plugin@1.13.0 requires a peer of eslint@^5.0.0 but
none is installed. You must install peer dependencies yourself.  
---  
The text was updated successfully, but these errors were encountered:

  
  
All reactions

[![@deser](https://avatars.githubusercontent.com/u/3010698?s=40&u=b907a9835f8bd5d58933098e2325769d65ec4c61&v=4)](/deser)
[deser](/deser) added [ package: eslint-plugin ](/typescript-
eslint/typescript-eslint/labels/package%3A%20eslint-plugin) Issues related to
@typescript-eslint/eslint-plugin [ triage ](/typescript-eslint/typescript-
eslint/labels/triage) Waiting for maintainers to take a look labels Jul 23,
2019

[!

'](/questions/76900656/failed-to-load-plugin-typescript-eslint-declared-in-
eslintrc-cjs-unexpec?noredirect=1)

#### Related

[ 12 ](/q/59287268 ""Question score \(upvotes - downvotes\)"") [ESLint is not
recognizing ""@typescript-eslint/eslint-plugin""](/questions/59287268/eslint-is-
not-recognizing-typescript-eslint-eslint-plugin)

[ 5 ](/q/61024198 ""Question score \(upvotes - downvotes\)"") [ESLint conflicts
with eslint-plugin-import and typescript-eslint](/questions/61024198/eslint-
conflicts-with-eslint-plugin-import-and-typescript-eslint)

[ 10 ](/q/63170955 ""Question score \(upvotes - downvotes\)"") [eslint fails
with Cannot read config file: /some/path/node_modules/@typescript-
eslint/eslint-plugin/dist/configs/eslint-
recommended](/questions/63170955/eslint-fails-with-cannot-read-config-file-
some-path-node-modules-typescript-e)

[ 17 ](/q/63478122 ""Question score \(upvotes - downvotes\)"") [typescript-
eslint config: .eslintrc file 'module' is not
defined](/questions/63478122/typescript-eslint-config-eslintrc-file-module-is-
not-defined)

[ 4 ](/q/66273491 ""Question score \(upvotes - downvotes\)"") [Why I got error
Unable to resolve path to module?

[![@bradzacher](https://avatars.githubusercontent.com/u/7462525?s=80&u=e9348570a8def9214eef0dbc696a564be1da3ec2&v=4)](/bradzacher)

Copy link

Member

###

**[bradzacher](/bradzacher) ** commented Jul 24, 2019

[#735](https://github.com/typescript-eslint/typescript-eslint/issues/735)  
---  
  
All reactions

Sorry, something went wrong.

[![@github-
actions](https://avatars.githubusercontent.com/in/15368?s=40&v=4)](/apps/github-
actions) [github-actions](/apps/github-actions) bot locked as **resolved** and
limited conversation to collaborators Apr 21, 2020

[Sign up for free](/join?source=comment-repo) **to subscribe to this
conversation on GitHub**. Already have an account? [Sign
in](/login?return_to=https%3A%2F%2Fgithub.com%2Ftypescript-
eslint%2Ftypescript-eslint%2Fissues%2F747).

Assignees

No one assigned

Labels

[ package: eslint-plugin ](/typescript-eslint/typescript-
eslint/labels/package%3A%20eslint-plugin) Issues related to @typescript-
eslint/eslint-plugin [ working as intended ](/typescript-eslint/typescript-
eslint/labels/working%20as%20intended) Issues that are closed as they are
working as intended

Projects

None yet

Milestone

No milestone

Development

No branches or pull requests

4 participants

[ ![@deser](https://avatars.githubusercontent.com/u/3010698?s=52&v=4)
](/deser) [
![@bradzacher](https://avatars.githubusercontent.com/u/7462525?s=52&v=4)
](/bradzacher) [
![@crhistianramirez](https://avatars.githubusercontent.com/u/16483662?s=52&v=4)
](/crhistianramirez) [
![@alexkulikov101](https://avatars.githubusercontent.com/u/26524255?s=52&v=4)
](/alexkulikov101)

## Footer

[ ](https://github.com ""GitHub"") (C) 2024 GitHub, Inc.

[NPM
Downloads](https://camo.githubusercontent.com/a604f5b1ff56d234479968f6d649531312ed4d7700e047e375c2acce18efad88/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40747970657363726970742d65736c696e742f65736c696e742d706c7567696e2e7376673f7374796c653d666c61742d737175617265)](https://www.npmjs.com/package/@typescript-
eslint/eslint-plugin)

ð See **<https://typescript-eslint.io/getting-started>** for our Getting
Started docs.

> See <https://typescript-eslint.io> for general documentation on typescript-
> eslint, the tooling that allows you to run ESLint and Prettier on TypeScript
> code.

## Readme

### Keywords

  * [eslint](/search?q=keywords:eslint)
  * [eslintplugin](/search?q=keywords:eslintplugin)
  * [eslint-plugin](/search?q=keywords:eslint-plugin)
  * [typescript](/search?q=keywords:typescript)

## Package Sidebar

### Install

`npm i @typescript-eslint/eslint-plugin`

### Repository

[Gitgithub.com/typescript-eslint/typescript-
eslint](https://github.com/typescript-eslint/typescript-eslint)

### Homepage

[typescript-eslint.io/packages/eslint-plugin](https://typescript-
eslint.io/packages/eslint-plugin)

[**Fund** this package](https://opencollective.com/typescript-eslint)

### DownloadsWeekly Downloads

23,946,549

### Version

7.16.1

### License

MIT

### Unpacked Size

2.8 MB

### Total Files

560

### Last publish

a day ago

### Collaborators

  * [!",music-website,devDependencies.@typescript-eslint/eslint-plugin,VERSION_NUMBER,@typescript-eslint/eslint-plugin:^5.4.0,nodejs,music-client/package.json,devDependencies.@typescript-eslint/eslint-plugin,VERSION_NUMBER,@typescript-eslint/eslint-plugin:^5.4.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
    ""plan"": ""1. Identify the configuration options: devDependencies.@typescript-eslint/eslint-plugin in music-client/package.json and music-manage/package.json.\n2. Check the type of the configuration option: VERSION_NUMBER.\n3. Compare the values of the configuration options: @typescript-eslint/eslint-plugin:^5.4.0.\n4. Evaluate whether the values are equal."",
    ""rationale"": ""The 'devDependencies.@typescript-eslint/eslint-plugin' in a Node.js project specifies the version of the ESLint plugin being used. Since both music-client and music-manage have the same version (^5.4.0) specified, it is essential to maintain consistency across both modules to ensure compatibility. Therefore, the devDependencies.@typescript-eslint/eslint-plugin needs to be the same across both modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_spring-boot-starter-log4j.groupId and project.dependencies.dependency_spring-boot-starter-mail.groupId have the same value 'org.springframework.boot', which suggests a potential dependency between them. This is because both dependencies are part of the Spring Boot ecosystem, and it's common for projects to use multiple Spring Boot starters together.","Here is a FULL file as an example: (this is the ROOT build.gradle) (If you
code a monolith, you'll only have a root build.gradle, if you write multiple
""gradle modules"", you'll have a root and subproject build.gradle files) (if
you have no idea what i'm talking about see link to docs.gradle.org at bottom)

(you can remove the dependencies, but i prefer to give a full working)

    
    
    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'java'
    }
    
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
        implementation 'org.springframework.boot:spring-boot-starter-integration'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-web-services'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'com.h2database:h2'
        implementation 'mysql:mysql-connector-java'
    
    
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.batch:spring-batch-test'
        testImplementation 'org.springframework.integration:spring-integration-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }
    
    test {
        useJUnitPlatform()
    }
    
    
    allprojects {
    
        /* custom task to show dependencies.  run ""gradle printAllDependencies"" from commandline.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

I follow the instructions
[here](https://plugins.gradle.org/plugin/org.springframework.boot) for the
latest `spring.framework.boot` plugin.

My `build.gradle` has

    
    
    plugins {
      id 'java-library'
      id 'eclipse'
      id 'io.spring.dependency-management' version '1.0.11.RELEASE'
      id 'org.springframework.boot' version '2.6.2'
      id 'org.springframework.boot.experimental.thin-launcher' version '1.0.23.RELEASE'
    }
    

but gradle tasks have the error

    
    
    > Could not resolve all dependencies for configuration ':detachedConfiguration1'.
       > Could not find org.springframework.boot:spring-boot-dependencies:2.6.2.
    

_UPDATE_ I neglected to add the final lines of the error description, which
were in fact important to answer it.

    
    
     Searched in the following locations:
       - https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
       - https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
    

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [gradle](/questions/tagged/gradle ""show questions tagged 'gradle'"")

[Share](/q/70624098 ""Short permalink to this question"")

[Improve this question](/posts/70624098/edit)

Follow

[edited Jan 11, 2022 at 15:18](/posts/70624098/revisions ""show all edits to
this post"")

rupweb

asked Jan 7, 2022 at 16:10

[!

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 22 ](/q/44266687 ""Question score \(upvotes - downvotes\)"") [How to print out
all dependencies in a Gradle multi-project build?](/questions/44266687/how-to-
print-out-all-dependencies-in-a-gradle-multi-project-build?noredirect=1)

#### Related

[ 1 ](/q/37349111 ""Question score \(upvotes - downvotes\)"") [Spring boot
dependencies error gradle](/questions/37349111/spring-boot-dependencies-error-
gradle)

[ 24 ](/q/49651374 ""Question score \(upvotes - downvotes\)"") [Cannot resolve
external dependency org.springframework.boot:spring-boot-starter: because no
repositories are defined](/questions/49651374/cannot-resolve-external-
dependency-org-springframework-bootspring-boot-starter)

[ 8 ](/q/56783015 ""Question score \(upvotes - downvotes\)"") [could not resolve
plugin artifact
'org.springframework.boot:org.springframework.boot.gradle.plugin:2.1.6.RELEASE'](/questions/56783015/could-
not-resolve-plugin-artifact-org-springframework-bootorg-springframework)

[ 10 ](/q/57534450 ""Question score \(upvotes - downvotes\)"") [Plugin [id:
'org.springframework.boot', version: '2.1.7.

[DEBUG] MBean server at port 9001 is not up yet. [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 60) . [INFO] backend . FAILURE [33:37 min] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 33:47 min [INFO] Finished at: 2019-06-12T16:06:05+02:00 [INFO] Final Memory: 238M/6637M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started: Failed to connect to MBean server at port 9001: Spring application did not start before the configured timeout (60000ms -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.",music-website,project.dependencies.dependency_spring-boot-starter-log4j.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.dependencies.dependency_spring-boot-starter-mail.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values of both configuration options: project.dependencies.dependency_spring-boot-starter-log4j.groupId and project.dependencies.dependency_spring-boot-starter-mail.groupId. 2. Check if they have the same value, which is org.springframework.boot in this case. 3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The equality of the groupId values indicates that both dependencies are part of the same Spring Boot ecosystem. However, there is no inherent dependency between the log4j and mail starters, as they serve different purposes in a Spring Boot application. The dependency on the Spring Boot ecosystem does not imply a direct dependency between these two specific starters."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_spring-boot-starter-mail.groupId and project.dependencies.dependency_spring-boot-starter-test.groupId have the same value 'org.springframework.boot', which suggests a dependency between them. This is because both dependencies are part of the Spring Boot ecosystem, and having the same groupId implies a common namespace or parent project.","I have a multibuild project and I am currently just setting it up. Each module
naturally each has a `gradle.build` file that only contains the following:

    
    
    dependencies {
    
    }
    

In the main `build.gradle` file I have want is needed for every module.
However when I do a `gradle build` I get a error saying:

> Cannot resolve external dependency org.springframework.boot:spring-boot-
> starter: because no repositories are defined. Required by: project :
    
    
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    
    version = '0.0.1-SNAPSHOT'
        sourceCompatibility = 1.8
    
    buildscript {
        ext {
            springBootVersion = '2.0.0.RELEASE'
        }
        repositories {
            mavenCentral()
        }
        dependencies {
    
            classpath(""org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"")
        }
    }
    
    sourceSets.all { ext.purpose = null }
    
    // Everything in subprojects are applied to all modules
    subprojects {
    
        apply plugin: 'java'
        apply plugin: 'maven'
        apply plugin: 'eclipse'
        apply plugin: 'org.springframework.boot'
        apply plugin: 'io.spring.dependency-management'
    
        version = '0.0.1-SNAPSHOT'
    
    
        test {
            useTestNG()
            testLogging.showStandardStreams = true
    
            beforeTest { descriptor ->
                logger.lifecycle(""Running test: "" + descriptor)
            }
    
            // listen to standard out and standard error of the test JVM(s)
            onOutput { descriptor, event ->
                logger.lifecycle(""Test: "" + descriptor + "" produced standard out/err: "" + event.message )
            }
        }
    
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    
        repositories {
            jcenter()
            mavenCentral()
            maven {
                url ""https://plugins.gradle.org/m2/""
            }
        }
    
        dependencies {
            compile('org.springframework.boot:spring-boot-starter')
            testCompile('org.springframework.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 1 ](/q/61424966 ""Question score \(upvotes - downvotes\)"") [Failed to resolve
imported Maven boms: Cannot resolve external
dependency](/questions/61424966/failed-to-resolve-imported-maven-boms-cannot-
resolve-external-dependency?noredirect=1)

#### Related

[ 5 ](/q/29765668 ""Question score \(upvotes - downvotes\)"") [Spring-boot
dependency not working with gradle](/questions/29765668/spring-boot-
dependency-not-working-with-gradle)

[ 1 ](/q/37349111 ""Question score \(upvotes - downvotes\)"") [Spring boot
dependencies error gradle](/questions/37349111/spring-boot-dependencies-error-
gradle)

[ 4 ](/q/42628920 ""Question score \(upvotes - downvotes\)"") [Gradle project
error - java.lang.ClassNotFoundException:
org.springframework.boot.SpringApplication](/questions/42628920/gradle-
project-error-java-lang-classnotfoundexception-org-springframework-boo)

[ 1 ](/q/55413530 ""Question score \(upvotes - downvotes\)"") [Gradle couldn't
locate the Spring core jar](/questions/55413530/gradle-couldnt-locate-the-
spring-core-jar)

[ 7 ](/q/62213471 ""Question score \(upvotes - downvotes\)"") [Gradle and
Spring-bootRun can not find my class](/questions/62213471/gradle-and-spring-
bootrun-can-not-find-my-class)

[ 0 ](/q/68639367 ""Question score \(upvotes - downvotes\)"") [Gradle Build
Can't find dependencies](/questions/68639367/gradle-build-cant-find-
dependencies)

[ 1 ](/q/70624098 ""Question score \(upvotes - downvotes\)"") [Could not find
org.springframework.boot:spring-boot-
dependencies:2.6.

gradle.org/m2/""
            }
        }
    
        dependencies {
            compile('org.springframework.boot:spring-boot-starter')
            testCompile('org.springframework.boot:spring-boot-starter-test')
        }
    
    }
    
    dependencies {
        compile('org.springframework.boot:spring-boot-starter')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }
    

Advice

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [gradle](/questions/tagged/gradle ""show questions tagged 'gradle'"")
  * [build.gradle](/questions/tagged/build.gradle ""show questions tagged 'build.gradle'"")

[Share](/q/49651374 ""Short permalink to this question"")

[Improve this question](/posts/49651374/edit)

Follow

[edited Dec 18, 2019 at 13:33](/posts/49651374/revisions ""show all edits to
this post"")

[![Bonifacio2's user
avatar](https://www.gravatar.com/avatar/ab68ec41682314f87def370d3ddbac1f?s=64&d=identicon&r=PG)](/users/1812322/bonifacio2)

[Bonifacio2](/users/1812322/bonifacio2)

3,71366 gold badges3737 silver badges5656 bronze badges

asked Apr 4, 2018 at 12:44

[!

springframework.boot:spring-boot-
dependencies:2.6.1](/questions/70624098/could-not-find-org-springframework-
bootspring-boot-dependencies2-6-1)

[ 4 ](/q/71809001 ""Question score \(upvotes - downvotes\)"") [Gradle cannot
find Spring Boot 3.0.0-M1](/questions/71809001/gradle-cannot-find-spring-
boot-3-0-0-m1)

[ 1 ](/q/73065110 ""Question score \(upvotes - downvotes\)"") [Missing spring-
boot-buildpack-platform](/questions/73065110/missing-spring-boot-buildpack-
platform)

[ 2 ](/q/73448952 ""Question score \(upvotes - downvotes\)"") [Gradle Spring
Boot Dependency Not found Multi Module Project](/questions/73448952/gradle-
spring-boot-dependency-not-found-multi-module-project)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ When Trump ex-rivals, who previously gave Trump terrible comments, now turn to praising him, what benefits could they gain? ](https://politics.stackexchange.com/questions/88373/when-trump-ex-rivals-who-previously-gave-trump-terrible-comments-now-turn-to-p)
  * [ What are the ways compilers recognize complex patterns? ](https://langdev.stackexchange.com/questions/3942/what-are-the-ways-compilers-recognize-complex-patterns)
  * [ How can I fix one user account when the Finder Tags don't show in the contextual menu? ](https://apple.stackexchange.com/questions/474095/how-can-i-fix-one-user-account-when-the-finder-tags-don-t-show-in-the-contextual)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers? ](https://retrocomputing.stackexchange.com/questions/30359/what-was-the-purpose-of-the-scan-commands-on-the-intel-8272-nec-%ce%bcpd765-floppy)
  * [ Are missiles aircraft?",music-website,project.dependencies.dependency_spring-boot-starter-mail.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.dependencies.dependency_spring-boot-starter-test.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-mail.groupId and project.dependencies.dependency_spring-boot-starter-test.groupId.\n2. Check their values: both are org.springframework.boot.\n3. Evaluate if they depend on each other due to value equality."",
    ""rationale"": ""The configuration options have the same groupId value, which indicates that they are part of the same Spring Boot ecosystem. However, having the same groupId does not necessarily imply a dependency between them. They are separate dependencies with different functionalities (mail and test)."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Music-website a music streaming plattform, encompasing two core modules: the client and server.
It is developed with Spring Boot, MyBatis, Maven, Docker, and Vue.

The project structure of the first two levels of music-website is as follows:

music-website/
├── img/
├── LICENSE
├── music-client/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
├── music-manage/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── public/
│   ├── src/
│   ├── tsconfig.json
│   └── vue.config.js
└── music-server/
    ├── docker-server/
    ├── docker-vue-client/
    ├── docker-vue-manage/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── sql/
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The groupId value org.springframework.cloud is common to both dependencies, which suggests that they belong to the same namespace. This implies that there might be an implicit dependency between the two configuration options, as they share a common parent or ancestor in the Maven dependency hierarchy.","apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

@ line 28,
column 15](/questions/60377218/maven-build-error-dependencies-dependency-
version-for-org-springframework-c)

[ 0 ](/q/62864106 ""Question score \(upvotes - downvotes\)"") [spring clound
eureka server dependencies error gradle intellij](/questions/62864106/spring-
clound-eureka-server-dependencies-error-gradle-intellij)

[ 2 ](/q/67837761 ""Question score \(upvotes - downvotes\)"") [Getting error in
pom.xml with spring-cloud-starter-netflix-eureka-client
dependency](/questions/67837761/getting-error-in-pom-xml-with-spring-cloud-
starter-netflix-eureka-client-depende)

[ 0 ](/q/68825030 ""Question score \(upvotes - downvotes\)"") [Can't import
Spring Cloud dependencies for enabling Eureka
client](/questions/68825030/cant-import-spring-cloud-dependencies-for-
enabling-eureka-client)

[ 6 ](/q/70965480 ""Question score \(upvotes - downvotes\)"") [SpringBoot
3.0.0-M1 + SpringCloud 2022.0.0-M1 [ERROR] 'dependency.version' for
org.springframework.cloud:spring-cloud-starter-sleuth:jar is
missing](/questions/70965480/springboot-3-0-0-m1-springcloud-2022-0-0-m1-error-
dependency-version-for-o)

[ 0 ](/q/73232691 ""Question score \(upvotes - downvotes\)"") [Cannot resolve
org.springframework.cloud:spring-cloud-starter-eureka-
server:unknown](/questions/73232691/cannot-resolve-org-springframework-
cloudspring-cloud-starter-eureka-serverunkn)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Narcissist boss won't allow me to move on ](https://workplace.stackexchange.com/questions/198473/narcissist-boss-wont-allow-me-to-move-on)
  * [ Moving features of different geometries at the same time in QGIS ](https://gis.stackexchange.

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.

springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
    
        <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/61287791 ""Short permalink to this answer"")

[Improve this answer](/posts/61287791/edit)

Follow

answered Apr 18, 2020 at 10:40

[!",piggymetrics,project.dependencies.dependency_spring-cloud-starter-oauth2.groupId,NAME,org.springframework.cloud,maven,account-service/pom.xml,project.dependencies.dependency_spring-cloud-starter-sleuth.groupId,NAME,org.springframework.cloud,maven,gateway/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configurations: org.springframework.cloud in account-service/pom.xml and org.springframework.cloud in gateway/pom.xml.\n2. Compare the groupId values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-cloud-starter-oauth2.groupId and the option project.dependencies.dependency_spring-cloud-starter-sleuth.groupId located in different modules indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Cloud ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. Since both groupId values are set to 'org.springframework.cloud', it implies that these dependencies are related and might have an impact on each other's functionality or compatibility.","Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
            <version>2.1.1.RELEASE</version>
        </dependency>
    
        <!--Test-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.194</version>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
    
        <!--microservices-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.1.0.RELEASE</version>
        </dependency>
    
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-commons</artifactId>-->
            <!--<version>1.0.0.RELEASE</version>-->
        <!--</dependency>-->
    
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.

I have been trying to set up a spring boot project but am getting an error. I
researched and tried various options but no luck so far. Any help would be
appreciated.

The pom.xml file:

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    
    <groupId>com.sysyaas.pardakhtyary</groupId>
    <artifactId>auth</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>master</name>
    <packaging>jar</packaging>
    <description>Auth Server Pardakhtyary</description>
    
    <!--<properties>-->
        <!--<java.version>1.8</java.version>-->
        <!--<spring-cloud.version>Finchley.M8</spring-cloud.version>-->
    <!--</properties>-->
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.

xml missing dependencies](/questions/54812168/spring-boot-pom-xml-missing-
dependencies)

[ 0 ](/q/55742450 ""Question score \(upvotes - downvotes\)"") [Non-resolvable
import POM: Failure to find org.springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 1 ](/q/63710439 ""Question score \(upvotes - downvotes\)"") [Non Resolvable
import POM Spring-boot dependencies 2.3.3 Release](/questions/63710439/non-
resolvable-import-pom-spring-boot-dependencies-2-3-3-release)

[ 0 ](/q/65167089 ""Question score \(upvotes - downvotes\)"") [dependecy not
found: openfeign](/questions/65167089/dependecy-not-found-openfeign)

[ 0 ](/q/65697448 ""Question score \(upvotes - downvotes\)"") [maven dependency
spring-cloud-starter 2.1.0.RELEASE test failures](/questions/65697448/maven-
dependency-spring-cloud-starter-2-1-0-release-test-failures)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers? ](https://retrocomputing.stackexchange.com/questions/30359/what-was-the-purpose-of-the-scan-commands-on-the-intel-8272-nec-%ce%bcpd765-floppy)
  * [ The Zentralblatt asked me to review a worthless paper, what to do? ](https://academia.stackexchange.com/questions/212304/the-zentralblatt-asked-me-to-review-a-worthless-paper-what-to-do)
  * [ What was the Night in Genesis 1? ](https://judaism.stackexchange.com/questions/143746/what-was-the-night-in-genesis-1)
  * [ ""A set of Guatemalas"" in Forster's Maurice?

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 0 ](/q/9116129 ""Question score \(upvotes - downvotes\)"") [POM missing for
dependency <groupId>org.springframework</groupId>](/questions/9116129/pom-
missing-for-dependency-groupidorg-springframework-groupid)

[ 28 ](/q/31901320 ""Question score \(upvotes - downvotes\)"") [POM error:
Failure to find org.springframework.boot](/questions/31901320/pom-error-
failure-to-find-org-springframework-boot)

[ 11 ](/q/47280247 ""Question score \(upvotes - downvotes\)"") [Non-resolvable
import POM Failure to find](/questions/47280247/non-resolvable-import-pom-
failure-to-find)

[ 0 ](/q/47652168 ""Question score \(upvotes - downvotes\)"") [Missing artifact
org.springframework.boot:spring-boot-starter-
parent:pom:2.0.0.M5](/questions/47652168/missing-artifact-org-springframework-
bootspring-boot-starter-parentpom2-0-0-m)

[ 3 ](/q/52473491 ""Question score \(upvotes - downvotes\)"") [spring cloud and
spring boot compatibility issue in pom.xml](/questions/52473491/spring-cloud-
and-spring-boot-compatibility-issue-in-pom-xml)

[ 0 ](/q/54812168 ""Question score \(upvotes - downvotes\)"") [Spring boot
POM.",piggymetrics,project.dependencies.dependency_spring-cloud-starter-netflix-hystrix-dashboard.groupId,NAME,org.springframework.cloud,maven,monitoring/pom.xml,project.dependencies.dependency_spring-cloud-netflix-hystrix-stream.groupId,NAME,org.springframework.cloud,maven,statistics-service/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configurations: org.springframework.cloud.\n2. Compare the groupId values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a value-equality dependency."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-cloud-starter-netflix-hystrix-dashboard.groupId and the option project.dependencies.dependency_spring-cloud-netflix-hystrix-stream.groupId located in different modules indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Cloud ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Port Mapping,llama3:70b,config2,9.0,FP,False,The dependency exists between services.rabbitmq.ports.in and services.rabbitmq.ports.out because they share the same port value (5672). This value-equality indicates that they are interconnected and should be updated simultaneously to ensure proper communication with RabbitMQ.,"This might happen from a number of reasons - I'll name a few:

1) The IP of the RabbitMQ-server wasn't specified correctly.  
It might no passed has a environment variable (this is why its important to
add a check for that in the code).  
When working with [docker-compose](/questions/tagged/docker-compose ""show
questions tagged 'docker-compose'"") the IP of the RabbitMQ-server should be
replaced with the service DNS (which is the name of the service in the
`docker-compose.yml` file or the value of `hostname` property if specified).

2) The RabbitMQ workers/clients tried to reach the RabbitMQ-server before its
ready.  
**Notice that`depend_on` only express dependency between services, and wait
for services to _start_ but not to be _ready_**.  
So you can't rely on it by adding:

    
    
      depends_on:
        - rabbitmq-server
    

Because the RabbitMQ-server service bootstrap phase take time.  
See the reference below regarding the `depend_on` command.  
See the solutions I provided for this runtime dependency problem below.

3) There is a RabbitMQ-server service already running on the host which uses
the `5672` port.  
In this case you'll receive an explicit error when you try to start the
RabbitMQ-server service, but from the RabbitMQ-worker perspective its the same
problem.

* * *

You can solve the runtime dependency problem mentioned in the #2 by:  

A) Had a retry logic in the client - Consider using
[pluggins](https://www.rabbitmq.com/reliability.html#federation-and-shovel)
like [Shoval](https://www.rabbitmq.com/shovel.html) and
[Federation](https://www.rabbitmq.com/federation.html).

B) If the cause for the problem is #2 - you can use the
[restart_policy](https://docs.docker.com/compose/compose-file/#restart_policy)
option and the connection will succeed after a few retries.

C) Use a tool such as [wait-for-it](https://github.com/vishnubob/wait-for-it),
[dockerize](https://github.com/jwilder/dockerize), or sh-compatible [wait-
for](https://github.com/Eficode/wait-for).

I want to run RabbitMQ in one container, and a worker process in another. The
worker process needs to access RabbitMQ.

I'd like these to be managed through `docker-compose`.

This is my `docker-compose.yml` file so far:

    
    
    version: ""3""
    
    services:
    
      rabbitmq:
        image: rabbitmq
        command: rabbitmq-server
        expose:
          - ""5672""
          - ""15672""
    
      worker:
        build: ./worker
        depends_on:
          - rabbitmq
        # Allow access to docker daemon
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    

So I've exposed the RabbitMQ ports. The worker process accesses RabbitMQ using
the following URL:

    
    
    amqp://guest:guest@rabbitmq:5672/
    

Which is what they use in the official tutorial, but `localhost` has been
swapped for `rabbitmq`, since the the containers should be [discoverable with
a hostname identical to the container
name:](https://docs.docker.com/compose/networking/)

> By default Compose sets up a single network for your app. Each container for
> a service joins the default network and is both reachable by other
> containers on that network, and discoverable by them at a hostname identical
> to the container name.

Whenever I run this, I get an connection refused error:

    
    
    Recreating ci_rabbitmq_1 ... done                                                                                                                                                    
    Recreating ci_worker_1   ... done                                                                                                                                                    
    Attaching to ci_rabbitmq_1, ci_worker_1                                                                                                                                              
    worker_1    | dial tcp 127.0.0.1:5672: connect: connection refused                                                                                                                   
    ci_worker_1 exited with code 1        
    

I find this interesting because it's using the IP `127.0.0.1` which (I think)
is `localhost`, even though I specified `rabbitmq` as the hostname. I'm not an
expert on docker networking, so maybe this is desired.

I'm happy to supply more information if needed!

* * *

**Edit**

There is an almost identical question
[here](https://stackoverflow.com/questions/31746182/docker-compose-wait-for-
container-x-before-starting-y).

So my goal is to have several containers that interact among themselves using
rabbitmq messages(rabbitmq server is in a separate container)

rabbit.py

    
    
    class Rabbit:
        host = 'rabbitmq-host'
        userid = 'test'
        password = 'test'
    
    
    class Consumer(Rabbit):
    
        def __init__(self, exchange_name):
            self.exchange_name = exchange_name
            self.connection = None
            try:
                credentials = pika.PlainCredentials(self.userid, self.password)
                params = pika.ConnectionParameters(self.host, 5672, '/', credentials)
                self.connection = pika.BlockingConnection(params)
            except Exception as ex:
                print(ex)
                if self.connection is not None and self.connection.is_open:
                    self.connection.close()
                raise ex
    
            self.channel = self.connection.channel()
    

Credentials test:test exist, I re-checked.

Then from another file(main.py) the Consumer is created

    
    
    c = Consumer('media')
    

docker-compose.yml

    
    
    version: '3'
    services:
    
    rabbitmq-server:
      image: ""rabbitmq:3-management""
      hostname: ""rabbitmq-host""
      environment:
        RABBITMQ_ERLANG_COOKIE: ""SWQOKODSQALRPCLNMEQG""
        RABBITMQ_DEFAULT_USER: ""test""
        RABBITMQ_DEFAULT_PASS: ""test""
        RABBITMQ_DEFAULT_VHOST: ""/""
      ports:
        - ""15672:15672""
        - ""5672:5672""
      labels:
        NAME: ""rabbitmq1""
    
    
    info-getter:
      build: ./info-getter
      depends_on:
        - rabbitmq-server
      tty: true
      ports:
        - ""3000:3000""
    

When testing, I run rabbitmq server in a container, but the app from local
mechine, all is working, but when I run 'docker-compose up' I get this
exception:

    
    
    info-getter_1      | 
    info-getter_1      | Traceback (most recent call last):
    info-getter_1      |   File ""main.py"", line 10, in <module>
    info-getter_1      |     c = Consumer('media')
    info-getter_1      |   File ""libs/rabbit.py"", line 27,

](/questions/20345658/how-to-use-rabbitmqctl-to-connect-to-the-
rabbitmqserver-in-the-docker-container)

[ 2 ](/q/34611129 ""Question score \(upvotes - downvotes\)"") [accessing the
docker container for rabbitmq from ubuntu host](/questions/34611129/accessing-
the-docker-container-for-rabbitmq-from-ubuntu-host)

[ 5 ](/q/44925747 ""Question score \(upvotes - downvotes\)"") [RabbitMq refuses
connection when run in docker](/questions/44925747/rabbitmq-refuses-
connection-when-run-in-docker)

[ 1 ](/q/54002105 ""Question score \(upvotes - downvotes\)"") [Problem with
connection to RabbitMQ on container](/questions/54002105/problem-with-
connection-to-rabbitmq-on-container)

[ 6 ](/q/54146342 ""Question score \(upvotes - downvotes\)"") [docker-compose
with rabbitmq](/questions/54146342/docker-compose-with-rabbitmq)

[ 1 ](/q/55077073 ""Question score \(upvotes - downvotes\)"") [How to connect to
rabbitmq container from the application server
container](/questions/55077073/how-to-connect-to-rabbitmq-container-from-the-
application-server-container)

[ 11 ](/q/57262128 ""Question score \(upvotes - downvotes\)"") [Using rabbitmq
with docker in production](/questions/57262128/using-rabbitmq-with-docker-in-
production)

[ 3 ](/q/60657549 ""Question score \(upvotes - downvotes\)"") [How to connect to
the rabbitMQ docker container?](/questions/60657549/how-to-connect-to-the-
rabbitmq-docker-container)

[ 1 ](/q/64530217 ""Question score \(upvotes - downvotes\)"") [How to connect to
RabbitMQ (docker-compose)?

In this article, we're going to set up RabbitMQ with Docker Compose. Then,
we're going to write a message Sender and Receiver using Go. Before we start,
make sure you have the following installed:

  * [Docker](https://www.docker.com/get-started)
  * [Docker Compose](https://docs.docker.com/compose/)
  * [Go](https://golang.org/dl/)

### Setting Up Docker Compose

If you want to make your code more portable and share the same version of
RabbitMQ with your developer colleagues, I highly recommend using Docker.

In this case, we're going to use `docker-compose` to configure the container
name, the volumes and networks, and the ports that RabbitMQ will use. Doing so
ensures that everything is isolated and easy to modify.

To start, create a folder called `rabbitmq-go` in your Golang project folder.
Then, create a new file with the name `docker-compose.yml`. Inside that file,
add the following:

    
    
    version: ""3.2""
    services:
      rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: 'rabbitmq'
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - rabbitmq_go_net
    
    networks:
      rabbitmq_go_net:
        driver: bridge

Here's what we've just done:

  * **image** : where we tell Docker which image to pull. We're using an Alpine implementation of RabbitMQ with the `management` plugin. The Alpine distro is the one you'll want to use if you want to save disk space.
  * **container_name** : this represents the container created from the image above.
  * **ports** : the list of ports that will be mapped from the container to the outside world, for interacting with the queue and the web UI.
  * **volumes** : where we map the `log` and `data` from the container to our local folder. This allows us to view the files directly in their local folder structure instead of having to connect to the container.",piggymetrics,services.rabbitmq.ports.in,PORT,5672,docker-compose,docker-compose.dev.yml,services.rabbitmq.ports.out,PORT,5672,docker-compose,docker-compose.dev.yml,Port,Port,"{
    ""plan"": ""1. Identify the configuration options: services.rabbitmq.ports.in and services.rabbitmq.ports.out in docker-compose.dev.yml of technology docker-compose.\n2. Check their types (PORT) and values (5672).\n3. Evaluate if the value equality indicates a dependency between the two options."",
    ""rationale"": ""The configuration option services.rabbitmq.ports.in specifies the internal port within the RabbitMQ container, while services.rabbitmq.ports.out specifies the external port on the host. The value equality (5672) suggests that these ports are mapped to each other, allowing the RabbitMQ service to be accessed from outside the container. This setup is a common practice in Docker Compose and does not imply a dependency between the two options."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Exclusive Dependencies,llama3:70b,config2,8.0,FP,False,"The rationale behind this dependency is that both Dockerfiles use the same base image 'java:8-jre', which implies that they share a common foundation and might be dependent on each other. This value-equality suggests a potential coupling between these two configuration options.","stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/46795907 ""Question score \(upvotes - downvotes\)"") [Setting java home
in docker](/questions/46795907/setting-java-home-in-docker?noredirect=1)

[ 170 ](/q/33379393 ""Question score \(upvotes - downvotes\)"") [docker ENV vs
RUN export](/questions/33379393/docker-env-vs-run-export?noredirect=1)

[ 1 ](/q/63380705 ""Question score \(upvotes - downvotes\)"") [Change from JRE
to JDK in Docker container](/questions/63380705/change-from-jre-to-jdk-in-
docker-container?noredirect=1)

#### Related

[ 3 ](/q/5437224 ""Question score \(upvotes - downvotes\)"") [Bash shell script:
How to set JAVA_HOME environment variable](/questions/5437224/bash-shell-
script-how-to-set-java-home-environment-variable)

[ 5 ](/q/31725380 ""Question score \(upvotes - downvotes\)"") [How to set
environment variables via env-file](/questions/31725380/how-to-set-
environment-variables-via-env-file)

[ 0 ](/q/38266737 ""Question score \(upvotes - downvotes\)"") [Setting JAVA_HOME
variable](/questions/38266737/setting-java-home-variable)

[ 11 ](/q/46277631 ""Question score \(upvotes - downvotes\)"") [Change JAVA_HOME
in docker](/questions/46277631/change-java-home-in-docker)

[ 2 ](/q/50917822 ""Question score \(upvotes - downvotes\)"") [Trying to set
JAVA_HOME in a docker image,

don't know why its not
working](/questions/50917822/trying-to-set-java-home-in-a-docker-image-dont-
know-why-its-not-working)

[ 0 ](/q/53405006 ""Question score \(upvotes - downvotes\)"") [How do i have a
JAVA_HOME set using a Dockerfile and python?](/questions/53405006/how-do-i-
have-a-java-home-set-using-a-dockerfile-and-python)

[ 1 ](/q/54627140 ""Question score \(upvotes - downvotes\)"") [how to set
JAVA_HOME on my docker-ubuntu environment?](/questions/54627140/how-to-set-
java-home-on-my-docker-ubuntu-environment)

[ 1 ](/q/56336284 ""Question score \(upvotes - downvotes\)"") [Find and change
the value of JAVA_HOME in centos/wildfly docker
image](/questions/56336284/find-and-change-the-value-of-java-home-in-centos-
wildfly-docker-image)

[ 0 ](/q/57281450 ""Question score \(upvotes - downvotes\)"") [Access dockerfile
ENV variables in entrypoint](/questions/57281450/access-dockerfile-env-
variables-in-entrypoint)

[ 1 ](/q/65761187 ""Question score \(upvotes - downvotes\)"") [Dynamically set
JAVA_HOME and import certs into cacerts passing JAVA_HOME as
path](/questions/65761187/dynamically-set-java-home-and-import-certs-into-
cacerts-passing-java-home-as-pat)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ is it possible to start a new town in America with its own political system ](https://politics.stackexchange.com/questions/88374/is-it-possible-to-start-a-new-town-in-america-with-its-own-political-system)
  * [ How should I run cable across a steel beam? ](https://diy.stackexchange.com/questions/303548/how-should-i-run-cable-across-a-steel-beam)
  * [ How do cables and cooling lines transverse the pressure hull of the International Space Station?

And how to start with it ](/wkrzywiec/what-s-docker-and-
how-to-start-with-it-2eai ""Published Nov 28 '20"") [ 2 How to put your Java
application into Docker container ](/wkrzywiec/how-to-put-your-java-
application-into-docker-container-21cg ""Published Dec 6 '20"") [ 3 Database in
a Docker container — how to start and what’s it about ](/wkrzywiec/database-
in-a-docker-container-how-to-start-and-what-s-it-about-56dj ""Published Dec 13
'20"") [ 4 Build and run Angular application in a Docker container
](/wkrzywiec/build-and-run-angular-application-in-a-docker-container-19pm
""Published Dec 19 '20"") [ 5 How to run database, backend and frontend in a
single-click with Docker Compose ](/wkrzywiec/how-to-run-database-backend-and-
frontend-in-a-single-click-with-docker-compose-of1 ""Published Dec 25 '20"")

##  Top comments (9)

Subscribe

![pic](https://media.dev.to/cdn-cgi/image/width=256,height=,fit=scale-
down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-
uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png)

Personal Trusted User

[ Create template ](/settings/response-templates)

Templates let you quickly answer FAQs or store snippets for re-use.

Submit Preview [Dismiss](/404.html)

Collapse Expand



[ ![rasharm_ profile image](https://media.dev.to/cdn-
cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-
to-
uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F173327%2F06e7b788-94f3-4dbb-
be09-9796c15a3953.jpg) ](https://dev.to/rasharm_)

[ Raman Sharma ](https://dev.to/rasharm_)

Raman Sharma

[ !

library.path: [/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjdk/jre/./lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib]
    2019-04-08 05:01:37.451  INFO 1 --- [           main] org.apache.jasper.servlet.TldScanner     : At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
    2019-04-08 05:01:37.853  INFO 1 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2019-04-08 05:01:37.853  INFO 1 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4143 ms
    2019-04-08 05:01:38.685  INFO 1 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
    2019-04-08 05:01:39.031  INFO 1 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path '/actuator'
    2019-04-08 05:01:39.221  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
    2019-04-08 05:01:39.226  INFO 1 --- [           main] c.w.m.n.NasapictureApplication           : Started NasapictureApplication in 6.2 seconds (JVM running for 7.479)
    
    

Enter fullscreen mode Exit fullscreen mode

Yeah!

I've read the documentation on jib github repo on authenticating but I don't really understand how to procede and feel overwhelmed
UPDATE
I ran docker login and I get:
Authenticating with existing credentials... Login Succeeded 
but the error persists (and I figured I didn't include some part of the logging maybe:
[INFO] Using credentials from Docker config (C:\Users\david\.docker\config.json) for openjdk:17 [INFO] Executing tasks:                                [INFO] [============                  ] 40.0% complete [INFO] > building image to Docker daemon               [INFO]                                                 [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  2.964 s [INFO] Finished at: 2022-05-17T19:39:12+02:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:3.2.1:dockerBuild (default-cli) on project SpringBootFullStack: Build  to Docker daemon failed, perhaps you should make sure your credentials for 'registry-1.docker.io/library/openjdk' are set up correctly. See  Unauthorized for registry-1.docker.io/library/openjdk: 401 Unauthorized [ERROR] {""details"":""incorrect username or password""} [ERROR] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging.",piggymetrics,FROM,UNKNOWN,java:8-jre,docker,monitoring/Dockerfile,FROM,UNKNOWN,java:8-jre,docker,statistics-service/Dockerfile,Independent Components,Different Dockerfiles,"{ 
 ""plan"": ""To evaluate the dependency between the two configuration options FROM in monitoring/Dockerfile and statistics-service/Dockerfile, follow these steps:\n1. Check if both Dockerfiles use the same base image 'java:8-jre'.\n2. Verify that the Dockerfiles are independent of each other and build their respective Docker images.\n3. Since the base image is the same, it does not imply a dependency between them."", 
 ""rationale"": ""The configuration option FROM in monitoring/Dockerfile and statistics-service/Dockerfile both specify the same base image 'java:8-jre'. Although they use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and builds its respective Docker image."", 
 ""isDependency"": false 
}","Carefully evaluate whether configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-quartz/Dockerfile of technology docker depends on configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-monitor/Dockerfile of technology docker or vice versa.

{
    ""rationale"": ""The configuration option FROM in pig-visual/pig-quartz/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and build its respective Docker image. Therefore, there cannot be a value-equality dependency between options from different Dockerfiles."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Exclusive Dependencies,llama3:70b,config2,8.0,FP,False,"The dependency exists because both configuration options have the same value, which suggests that they are referencing the same MongoDB image. This implies that if one option is updated, the other option will also be affected, as they share the same underlying image.","Let’s embark on
this journey together and explore even more exciting insights into the world
of DevOps. Your engagement is greatly appreciated! 👏🔗

[Mongodb](/tag/mongodb?source=post_page-----b321ba25f654---------------
mongodb-----------------)

[Ec2](/tag/ec2?source=post_page-----b321ba25f654---------------
ec2-----------------)

[DevOps](/tag/devops?source=post_page-----b321ba25f654---------------
devops-----------------)

[Docker Compose](/tag/docker-compose?source=post_page-----b321ba25f654
---------------docker_compose-----------------)

[Docker](/tag/docker?source=post_page-----b321ba25f654---------------
docker-----------------)

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Fb321ba25f654&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40mudasirhaji%2Fdeploying-
mongodb-and-mongodb-express-with-docker-compose-on-aws-
ec2-b321ba25f654&user=Mudasir&userId=dc37f35e9a26&source=-----b321ba25f654
---------------------clap_footer-----------)

\--

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Fb321ba25f654&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40mudasirhaji%2Fdeploying-
mongodb-and-mongodb-express-with-docker-compose-on-aws-
ec2-b321ba25f654&user=Mudasir&userId=dc37f35e9a26&source=-----b321ba25f654
---------------------clap_footer-----------)

\--

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Fb321ba25f654&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40mudasirhaji%2Fdeploying-
mongodb-and-mongodb-express-with-docker-compose-on-aws-
ec2-b321ba25f654&source=--------------------------bookmark_footer-----------)

[!

[Mongodb-express
wont compose with docker-compose.yaml](/questions/72161540/mongodb-express-
wont-compose-with-docker-compose-yaml)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Standard negative binomial regression when counts are mainly zeros? ](https://stats.stackexchange.com/questions/651155/standard-negative-binomial-regression-when-counts-are-mainly-zeros)
  * [ Teaching students how to check the validity of their proofs ](https://matheducators.stackexchange.com/questions/27972/teaching-students-how-to-check-the-validity-of-their-proofs)
  * [ Are there any philosophers that clearly define the word ""consciousness"" in their arguments? ](https://philosophy.stackexchange.com/questions/115107/are-there-any-philosophers-that-clearly-define-the-word-consciousness-in-their)
  * [ Do spells taken by the Magic Initiate feat require material components that cost gold? ](https://rpg.stackexchange.com/questions/212737/do-spells-taken-by-the-magic-initiate-feat-require-material-components-that-cost)
  * [ 4-color theorem for hypergraphs ](https://mathoverflow.net/questions/475239/4-color-theorem-for-hypergraphs)
  * [ What is this black square on this crime scene photo in Longlegs? ](https://movies.stackexchange.com/questions/123030/what-is-this-black-square-on-this-crime-scene-photo-in-longlegs)
  * [ Does a green card holder need a visa for a layover in Athens airport? ](https://travel.stackexchange.com/questions/190218/does-a-green-card-holder-need-a-visa-for-a-layover-in-athens-airport)
  * [ This expected value has a minimum! ](https://math.stackexchange.com/questions/4947055/this-expected-value-has-a-minimum)
  * [ How to pronounce Turkiye in English?

[Mudasir](https://miro.medium.com/v2/resize:fill:144:144/1*65dqbwgngKV0LCTmvdYcQA.jpeg)](/@mudasirhaji?source=post_page
-----b321ba25f654--------------------------------)

Follow

[](/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45deb36518a1&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40mudasirhaji%2Fdeploying-
mongodb-and-mongodb-express-with-docker-compose-on-aws-
ec2-b321ba25f654&newsletterV3=dc37f35e9a26&newsletterV3Id=45deb36518a1&user=Mudasir&userId=dc37f35e9a26&source=-----b321ba25f654
---------------------subscribe_user-----------)

## [Written by Mudasir](/@mudasirhaji?source=post_page-----
b321ba25f654--------------------------------)

[2.4K Followers](/@mudasirhaji/followers?source=post_page-----
b321ba25f654--------------------------------)

AWS Community Builder | DevOps Engineer | 3x AWS | 1x Azure | CCNP | Palo Alto | NSE 3 | Ansible | Terraform | Docker | Jenkins | Git

Follow

[](/m/signin?actionUrl=%2F_%2Fapi%2Fsubscriptions%2Fnewsletters%2F45deb36518a1&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40mudasirhaji%2Fdeploying-
mongodb-and-mongodb-express-with-docker-compose-on-aws-
ec2-b321ba25f654&newsletterV3=dc37f35e9a26&newsletterV3Id=45deb36518a1&user=Mudasir&userId=dc37f35e9a26&source=-----b321ba25f654
---------------------subscribe_user-----------)

[Help](https://help.medium.com/hc/en-us?source=post_page-----
b321ba25f654--------------------------------)

[Status](https://medium.statuspage.

:
NodeJS + MongoDB](/questions/32360615/docker-compose-nodejs-mongodb)

[ 8 ](/q/32503116 ""Question score \(upvotes - downvotes\)"") [NodeJS Mongodb in
docker compose = ECONNREFUSED](/questions/32503116/nodejs-mongodb-in-docker-
compose-econnrefused)

[ 0 ](/q/42607627 ""Question score \(upvotes - downvotes\)"") [Docker
compose:](/questions/42607627/docker-compose)

[ 9 ](/q/44508183 ""Question score \(upvotes - downvotes\)"") [Docker-compose
mongoose](/questions/44508183/docker-compose-mongoose)

[ 1 ](/q/54943249 ""Question score \(upvotes - downvotes\)"") [Docker-compose
Nodejs Mongodb doesn't success](/questions/54943249/docker-compose-nodejs-
mongodb-doesnt-success)

[ 0 ](/q/58682564 ""Question score \(upvotes - downvotes\)"") [Can't get
connection with Docker using mongodb and express](/questions/58682564/cant-
get-connection-with-docker-using-mongodb-and-express)

[ 3 ](/q/68116744 ""Question score \(upvotes - downvotes\)"") [mongo-express is
not starting with docker-compose file](/questions/68116744/mongo-express-is-
not-starting-with-docker-compose-file)

[ 9 ](/q/68242250 ""Question score \(upvotes - downvotes\)"") [Unable to run
mongo express with docker compose](/questions/68242250/unable-to-run-mongo-
express-with-docker-compose)

[ 1 ](/q/69584895 ""Question score \(upvotes - downvotes\)"") [Dockerizing
Express-MongoDB Atlas (docker-compose)](/questions/69584895/dockerizing-
express-mongodb-atlas-docker-compose)

[ 0 ](/q/72161540 ""Question score \(upvotes - downvotes\)"") [Mongodb-express
wont compose with docker-compose.yaml](/questions/72161540/mongodb-express-
wont-compose-with-docker-compose-yaml)

####  [ Hot Network Questions ](https://stackexchange.

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 2 ](/q/60087244 ""Question score \(upvotes - downvotes\)"") [MongoExpress
shows ""Cannot read property 'listDatabases' of undefined""
error](/questions/60087244/mongoexpress-shows-cannot-read-property-
listdatabases-of-undefined-error?noredirect=1)

[ 1 ](/q/56456171 ""Question score \(upvotes - downvotes\)"") [Changing 8081
port of Mongo-express](/questions/56456171/changing-8081-port-of-mongo-
express?noredirect=1)

[ 1 ](/q/68716646 ""Question score \(upvotes - downvotes\)"") [Docker image not
able to connect with public IP address](/questions/68716646/docker-image-not-
able-to-connect-with-public-ip-address?noredirect=1)

[ 1 ](/q/78113226 ""Question score \(upvotes - downvotes\)"") [MongoDB Compass
can't connect to Docker hosted Mong-rs](/questions/78113226/mongodb-compass-
cant-connect-to-docker-hosted-mong-rs?noredirect=1)

#### Related

[ 12 ](/q/32360615 ""Question score \(upvotes - downvotes\)"") [Docker Compose :
NodeJS + MongoDB](/questions/32360615/docker-compose-nodejs-mongodb)

[ 8 ](/q/32503116 ""Question score \(upvotes - downvotes\)"") [NodeJS Mongodb in
docker compose =",piggymetrics,services.account-mongodb.image,IMAGE,sqshq/piggymetrics-mongodb,docker-compose,docker-compose.yml,services.statistics-mongodb.image,IMAGE,sqshq/piggymetrics-mongodb,docker-compose,docker-compose.yml,Independent Components,Different Services,"{
    ""plan"": ""1. Identify the configuration options: services.account-mongodb.image and services.statistics-mongodb.image.\n2. Check their types: both are of type IMAGE.\n3. Compare their values: both have the same value sqshq/piggymetrics-mongodb.\n4. Evaluate whether the similarity in values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration options services.account-mongodb.image and services.statistics-mongodb.image have the same value sqshq/piggymetrics-mongodb, which suggests that they might be using the same MongoDB image. However, this similarity does not necessarily imply a direct dependency between the two services. Each service can use the same image independently without relying on the other."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration options project.name and project.parent_piggymetrics.artifactId have the same value, 'piggymetrics'. This suggests a potential dependency between them. In Maven, the artifactId is often used to identify a specific module or sub-project within a larger project. The parent artifactId may be used to establish a hierarchical relationship between projects. Given this context, it's likely that project.name depends on project.parent_piggymetrics.artifactId.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Reload]() to refresh your session.
You signed out in another tab or window. [Reload]() to refresh your session.
You switched accounts on another tab or window. [Reload]() to refresh your
session. Dismiss alert

{{ message }}

[ pvergara ](/pvergara) / **[PiggyMetrics](/pvergara/PiggyMetrics) ** Public

forked from [RameshMF/PiggyMetrics](/RameshMF/PiggyMetrics)

  * [ Notifications ](/login?return_to=%2Fpvergara%2FPiggyMetrics) You must be signed in to change notification settings
  * [ Fork 0 ](/login?return_to=%2Fpvergara%2FPiggyMetrics)
  * [ Star  0 ](/login?return_to=%2Fpvergara%2FPiggyMetrics)

  * [ Code ](/pvergara/PiggyMetrics)
  * [ Pull requests 0 ](/pvergara/PiggyMetrics/pulls)
  * [ Actions ](/pvergara/PiggyMetrics/actions)
  * [ Projects 0 ](/pvergara/PiggyMetrics/projects)
  * [ Security ](/pvergara/PiggyMetrics/security)
  * [ Insights ](/pvergara/PiggyMetrics/pulse)

Additional navigation options

  * [ Code ](/pvergara/PiggyMetrics)
  * [ Pull requests ](/pvergara/PiggyMetrics/pulls)
  * [ Actions ](/pvergara/PiggyMetrics/actions)
  * [ Projects ](/pvergara/PiggyMetrics/projects)
  * [ Security ](/pvergara/PiggyMetrics/security)
  * [ Insights ](/pvergara/PiggyMetrics/pulse)

## Footer

[ ](https://github.com ""GitHub"") (C) 2024 GitHub, Inc.

By this question, interviewer wants to know about your basic knowledge on Maven and pom.xml file. I find recently one nice blog post on it with real life example. Just sharing the link here. Hope it will help others. [Difference between groupId and artifactId in pom.xml](https://industechie.com/index.php/2020/11/26/what-is-the-difference-between-groupid-and-artifactid-in-maven/)

- [Aritra](/users/1936953/aritra ""3 reputation"")

Commented Nov 26, 2020 at 20:11

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/39185798/what-is-the-difference-
between-artifactid-and-groupid-in-pom-xml?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

44

[](/posts/39185833/timeline ""Show activity on this post."")

From maven.apache.org, [Naming
Conventions](https://maven.apache.org/guides/mini/guide-naming-
conventions.html):

> `artifactId` is the name of the jar without version. If you created it then
> you can choose whatever name you want with lowercase letters and no strange
> symbols. If it's a third party jar you have to take the name of the jar as
> it's distributed. eg. `maven`, `commons-math`
>
> `groupId` will identify your project uniquely across all projects, so we
> need to enforce a naming schema. It has to follow the package name rules,
> what means that has to be at least as a domain name you control, and you can
> create as many subgroups as you want. Look at More information about package
> names. eg. `org.apache.maven`, `org.apache.commons`

[Share](/a/39185833 ""Short permalink to this answer"")

[Improve this answer](/posts/39185833/edit)

Follow

answered Aug 27, 2016 at 21:17

[!

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

You can check this in google repo (url:
<https://maven.google.com/web/index.html?q=activity-
compose#androidx.activity:activity-compose:1.7.1>) screenshot below,

[![enter image description
here](https://i.sstatic.net/yfsxZ.jpg)](https://i.sstatic.net/yfsxZ.jpg)

The link of actual artifact:
<https://dl.google.com/android/maven2/androidx/activity/activity-
compose/1.7.1/activity-compose-1.7.1.aar>

[Share](/a/76159152 ""Short permalink to this answer"")

[Improve this answer](/posts/76159152/edit)

Follow

answered May 2, 2023 at 21:59

[![Uddhav P. Gautam's user
avatar](https://i.sstatic.net/06tSZ.jpg?s=64)](/users/7232295/uddhav-p-gautam)

[Uddhav P. Gautam](/users/7232295/uddhav-p-gautam)Uddhav P. Gautam

7,58133 gold badges5050 silver badges6767 bronze badges

Add a comment  | 

0

[](/posts/58443001/timeline ""Show activity on this post."")

The main difference between groupId and artifactId in Maven is that the
groupId specifies the id of the project group while the artifactId specifies
the id of the project.

It is required to use third party libraries when developing a project. The
programmer can download and add these third-party libraries to the project,
but it is difficult to update them later. Maven provides a solution to this
issue. It helps to include all the dependencies required for the project.
Moreover, the programmer can specify the required dependencies in the POM.XML
file. It has the configuration information to build the project. Furthermore,
this file consists of several XML elements, and two of them are groupId and
artifactId. example groupId : com.test.java (similar to package name)
artifactId : javaproject(project or module name)

[Share](/a/58443001 ""Short permalink to this answer"")

[Improve this answer](/posts/58443001/edit)

Follow

answered Oct 18, 2019 at 2:06

[!",piggymetrics,project.name,NAME,piggymetrics,maven,pom.xml,project.parent_piggymetrics.artifactId,NAME,piggymetrics,maven,turbine-stream-service/pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Identify the configuration options: project.name in pom.xml of technology Maven with value piggymetrics and project.parent_piggymetrics.artifactId in turbine-stream-service/pom.xml of technology Maven with value piggymetrics.\n2. Analyze their purposes: project.name specifies the name of the Maven project, while project.parent_piggymetrics.artifactId refers to the artifact ID of the parent project.\n3. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options project.name and project.parent_piggymetrics.artifactId share the same value 'piggymetrics', but they serve different purposes in Maven project management. The identical value does not indicate a dependency between them, as it is common for projects to have similar names or identifiers."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FN,True,"The error message indicates that the Maven compiler plugin is using an outdated source option (1.5) which is no longer supported. Updating the plugin to a compatible version should resolve this issue. The configuration options in the registry/pom.xml and turbine-stream-service/pom.xml files do not appear to be directly dependent on each other, as they are referencing the same project name.","apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <file>${project.build.finalName}.${project.packaging}</file>
                            <generatePom>false</generatePom>
                            <pomFile>pom.xml</pomFile>
                            <version>${my.version}</version>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
    </plugins>
    </build>
    

**Commnad** `mvn clean install`

**Output**

    
    
    [INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ base ---
    [INFO] Building jar: D:\dev\project\base\target\my-base-project.jar
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install (default-install) @ base ---
    [INFO] Installing D:\dev\project\base\target\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.pom
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install-file (default) @ base ---
    [INFO] Installing D:\dev\project\base\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.pom
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    

  
[Reference](http://maven.

The `build-info` goal generates such file
with the coordinates of the project and the build time. It also allows you to
add an arbitrary number of additional properties, as shown in the following
example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<executions>
    					<execution>
    						<goals>
    							<goal>build-info</goal>
    						</goals>
    						<configuration>
    							<additionalProperties>
    								<encoding.source>UTF-8</encoding.source>
    								<encoding.reporting>UTF-8</encoding.reporting>
    								<java.source>${maven.compiler.source}</java.source>
    								<java.target>${maven.compiler.target}</java.target>
    							</additionalProperties>
    						</configuration>
    					</execution>
    				</executions>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will generate a `build-info.properties` at the expected
location with four additional keys. Note that `maven.compiler.source` and
`maven.compiler.target` are expected to be regular properties available in the
project. They will be interpolated as you would expect.

### 9.1. `spring-boot:build-info`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Generate a `build-info.properties` file based the content of the current
`MavenProject`.

#### 9.1.1. Optional parameters

Name | Type | Default  
---|---|---  
additionalProperties | `Map` |   
outputFile | `File` | `${project.build.outputDirectory}/META-INF/build-info.properties`  
time | `String` |   
  
#### 9.1.2. Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

Alternative layouts implementations can be provided by
3rd parties.

Name | `layoutFactory`  
---|---  
Type | `org.springframework.boot.loader.tools.LayoutFactory`  
Default value |   
User property |   
Since | `1.5.0`  
  
##### `mainClass`

The name of the main class. If not specified the first compiled class found
that contains a 'main' method will be used.

Name | `mainClass`  
---|---  
Type | `java.lang.String`  
Default value |   
User property |   
Since | `1.0.0`  
  
##### `skip`

Skip the execution.

Name | `skip`  
---|---  
Type | `boolean`  
Default value | `false`  
User property | `spring-boot.build-image.skip`  
Since | `2.3.0`  
  
##### `sourceDirectory`

Directory containing the JAR.

Name | `sourceDirectory`  
---|---  
Type | `java.io.File`  
Default value | `${project.build.directory}`  
User property |   
Since | `2.3.0`  
  
### 6.4. Examples

#### 6.4.1. Custom Image Builder

If you need to customize the builder used to create the image, configure the
plugin as shown in the following example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<configuration>
    					<image>
    						<builder>mine/java-cnb-builder</builder>
    					</image>
    				</configuration>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will use a builder image with the name `mine/java-cnb-
builder` and the tag `latest`.

The builder can be specified on the command line as well, as shown in this
example:

    
    
    $ mvn spring-boot:build-image -Dspring-boot.build-image.builder=mine/java-cnb-builder

#### 6.4.2. Builder Configuration

If the builder exposes configuration options using environment variables,
those can be set using the `env` attributes.

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.",piggymetrics,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName,NAME,${project.name},maven,registry/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName,NAME,${project.name},maven,turbine-stream-service/pom.xml,Multi-Maven-Modules,Maven Properties,"{
    ""plan"": ""1. Identify the configuration options: project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName in registry/pom.xml and turbine-stream-service/pom.xml.\n2. Analyze their values: ${project.name} in both cases.\n3. Determine if the value equality implies a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName with the value ${project.name} in registry/pom.xml and turbine-stream-service/pom.xml specifies the final name of the built artifact. The value equality does not imply a direct dependency between these two configuration options, as they are located in different modules and are used to configure the final name of their respective artifacts."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value equality, as both have the same version number `1.0-SNAPSHOT`. This suggests that the `gateway/pom.xml` file might be inheriting the version from the `monitoring/pom.xml` file or vice versa. The usage of the `project.version` property in the dependencies also implies a dependency between the two configuration options.","To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

How is placeholder `${project.version}` resolved for managed properties from
parent pom? I've expected that it is resolved globally, so when the parent pom
has version 2, `${project.version}` would also be resolved to version 2.

In parent pom I have:

    
    
    <groupId>my.group</groupId>
    <artifactId>parent</artifactId>
    <version>2</version>
    <packaging>pom</packaging>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>my.group</groupId>
                <artifactId>dep</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>     
    

In child I use

    
    
    <parent>
        <groupId>my.group</groupId>
        <artifactId>parent</artifactId>
        <version>2</version>
    </parent>
    <version>1</version>
    <artifactId>child</artifactId>
    

But the artifact `my.group.dep.1.jar` is used, instead of
`my.group.dep.2.jar`. So the placeholder is resolved to the version of the
project **using** the managed dependency, and not those of the project
**defining** the dependency.

Is that expected behaviour? I'm using **maven 3.0.4.**

  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")
  * [build-dependencies](/questions/tagged/build-dependencies ""show questions tagged 'build-dependencies'"")

[Share](/q/16895555 ""Short permalink to this question"")

[Improve this question](/posts/16895555/edit)

Follow

[edited Apr 11, 2014 at 10:29](/posts/16895555/revisions ""show all edits to
this post"")

[![Aritz's user
avatar](https://i.sstatic.net/55Hvn.jpg?s=64)](/users/1199132/aritz)

[Aritz](/users/1199132/aritz)

31.4k1616 gold badges142142 silver badges222222 bronze badges

asked Jun 3, 2013 at 11:21

[!

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Verbs for to punish ](https://german.stackexchange.com/questions/77602/verbs-for-to-punish)
  * [ Negotiating tenure track position after major career grant ](https://academia.stackexchange.com/questions/212328/negotiating-tenure-track-position-after-major-career-grant)
  * [ Why are maximum age restrictions so rare? ](https://politics.stackexchange.com/questions/88356/why-are-maximum-age-restrictions-so-rare)
  * [ He is ill/well/highly reputed of ](https://ell.stackexchange.com/questions/354985/he-is-ill-well-highly-reputed-of)
  * [ Why are there two cables connected to this GFCI outlet?",piggymetrics,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,gateway/pom.xml,project.parent_piggymetrics.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,monitoring/pom.xml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: project.version in gateway/pom.xml and project.parent_piggymetrics.version in monitoring/pom.xml.\n2. Determine their types: both are VERSION_NUMBER.\n3. Compare their values: both have value version:1.0-SNAPSHOT.\n4. Evaluate if a dependency exists based on value equality."",
    ""rationale"": ""The 'project.version' and 'project.parent_piggymetrics.version' in Maven projects specify the version of the project and its parent, respectively. Since they share the same value (1.0-SNAPSHOT), it implies that the versions are managed centrally, and changes to one would affect the other. Therefore, a dependency exists between these configuration options due to value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration options project.parent_piggymetrics.artifactId and project.name are dependent because they share the same value 'piggymetrics'. The parent POM defines the artifactId, which is inherited by the child POM. This inheritance implies a dependency between the two configuration options due to their value equality.","Skip to content

[ ![HowToDoInJava](https://howtodoinjava.com/wp-
content/uploads/2023/12/HowToDoInJava-logo.png) ](https://howtodoinjava.com/)

Menu

Menu

  * [Java](https://howtodoinjava.com/series/java-tutorial/)
  * [Spring Boot](https://howtodoinjava.com/series/spring-boot/)
  * [Hibernate](https://howtodoinjava.com/series/hibernate-tutorials/)
  * [JUnit](https://howtodoinjava.com/series/junit/)
  * [Interview](https://howtodoinjava.com/series/interview-guides/)

# Maven Parent and Child POM Example

[Lokesh Gupta](https://howtodoinjava.com/author/lokeshgupta1981/)

December 25, 2022

[Maven](https://howtodoinjava.com/maven/)

[Maven](https://howtodoinjava.com/tag/maven/)

**Maven parent POM** (or super POM) is used to structure the project to
**avoid redundancies or duplicate configurations** using _inheritance between
pom files_. It helps in easy maintenance in long term.

Note that if any dependency or property is configured in both parent and child
POMs with different values then the child POM value will take priority.

## 1\. Contents of Parent POM

A parent POM can be declared with packaging `pom`. It is not meant to be
distributed because it is only referenced from other projects.

Maven parent pom can contain almost everything, and those can be inherited
into child pom files e.g

  * Common data - Developers' names, SCM address, distribution management etc.
  * Constants - Such as version numbers
  * Common dependencies - Common to all children. It has the same effect as writing them several times in individual pom files.
  * Properties - For example plugins, declarations, executions and IDs.
  * Configurations
  * Resources

## 2\. A simple Example of Parent POM and Child POM

To match a parent POM, Maven uses two rules:

  * There is a pom file in the project's root directory or in a given relative path.
  * Reference from the child POM file contains the same coordinates as stated in the parent POM file.

* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

<packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.

    
    
    <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <junit.version>3.8.1</junit.version>
      <spring.version>4.2.3.RELEASE</spring.version>
    </properties>
     
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${spring.version}</version>
      </dependency>
    </dependencies>

### 4.2. Create Child Project

Create a new maven project just like you did for the parent project. Change
project-specific details like its name etc.

![Create Maven Child Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Child-Project.png)Create Maven Child
Project

Now update the child project's `pom.xml` file with parent reference.

    
    
    <!--The identifier of the parent POM -->
    <parent>
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
    </parent>

Now you are free to use parent pom's elements such as properties. Your child
project has inherited the parent project. To test this, just remove all
dependencies from child project's `pom.xml`.

Now check its libraries in Java Build Path. You will see all parent's
dependencies there.

![Java Build Path of Child Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Java-Build-Path-of-Child-Project.png)Java Build Path
of Child Project

Drop me your questions in the comment section.

Happy Learning !!

This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.",piggymetrics,project.parent_piggymetrics.artifactId,NAME,piggymetrics,maven,monitoring/pom.xml,project.name,NAME,piggymetrics,maven,pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Analyze the configuration options: project.parent_piggymetrics.artifactId of type NAME with value piggymetrics in monitoring/pom.xml of technology Maven and project.name of type NAME with value piggymetrics in pom.xml of technology Maven.\n2. Identify the purpose of each configuration option: one is for specifying the parent artifact ID in a Maven project, and the other is for defining the name of the project.\n3. Evaluate whether the identical values indicate a dependency between the two options."",
    ""rationale"": ""The configuration options project.parent_piggymetrics.artifactId and project.name refer to the same name 'piggymetrics', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for specifying the parent artifact ID in a Maven project, and the other is for defining the name of the project. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.parent_litemall.artifactId of type NAME with value litemall in litemall-wx-api/pom.xml of technology maven depends on configuration option ervices.litemall.container_name of type NAME with value litemall in docker/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option project.parent_litemall.artifactId and services.litemall.container_name refer to the same name 'litemall', which is the project name and thus frequently appearing. However, these configurations serve different purposes: one is for Maven project management, and the other is for container orchestration. Therefore, the options do not depend on each other due to value-equality."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Ambiguous Option Values,llama3:70b,config2,8.0,FP,False,"The configuration options project.modules.module with value turbine-stream-service in pom.xml of technology Maven and project.name with value turbine-stream-service in turbine-stream-service/pom.xml of technology Maven have the same value. This suggests that they are related, but it does not necessarily imply a dependency between them. The dependency exists if the turbine-stream-service module is a part of the multi-module Maven project and has a dependency on the turbine-stream-configuration module.","[Maven multi
module dependency sharing](/questions/30027989/maven-multi-module-dependency-
sharing)

[ 3 ](/q/45655128 ""Question score \(upvotes - downvotes\)"") [In a Maven multi-
module project, how to specify dependency needed in more than one
module?](/questions/45655128/in-a-maven-multi-module-project-how-to-specify-
dependency-needed-in-more-than-o)

[ 3 ](/q/51438402 ""Question score \(upvotes - downvotes\)"") [Maven dependency
resolution between modules during a multi-module project
build](/questions/51438402/maven-dependency-resolution-between-modules-during-
a-multi-module-project-build)

[ 5 ](/q/55433668 ""Question score \(upvotes - downvotes\)"") [Maven multi-
module dependency resolution](/questions/55433668/maven-multi-module-
dependency-resolution)

[ 0 ](/q/64756878 ""Question score \(upvotes - downvotes\)"") [Handling
interdependencies in maven multi-module project](/questions/64756878/handling-
interdependencies-in-maven-multi-module-project)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Citing specific R functions in publications? ](https://academia.stackexchange.com/questions/212287/citing-specific-r-functions-in-publications)
  * [ Is the 7809 bad for a DC motor? ](https://electronics.stackexchange.com/questions/719671/is-the-7809-bad-for-a-dc-motor)
  * [ Dual boot - 2 windows instances - add EFI to secondary drive ](https://superuser.com/questions/1849393/dual-boot-2-windows-instances-add-efi-to-secondary-drive)
  * [ Is ""secco"" really used in piano music? ](https://music.stackexchange.com/questions/136827/is-secco-really-used-in-piano-music)
  * [ Was supposed to be co-signer on auto for daughter but I'm listed the buyer ](https://money.stackexchange.com/questions/163372/was-supposed-to-be-co-signer-on-auto-for-daughter-but-i-m-listed-the-buyer)
  * [ Wait, ASCII was 128 characters all along?

](/questions/14694139/how-to-resolve-dependencies-between-modules-within-
multi-module-project)

[ 4  Sharing dependencies between maven modules ](/questions/18660066/sharing-
dependencies-between-maven-modules)

[ 0  Maven dependency scopes for multi-module project
](/questions/18681692/maven-dependency-scopes-for-multi-module-project)

[ 0  How does Maven handle dependencies between modules?
](/questions/21415873/how-does-maven-handle-dependencies-between-modules)

[ 2  Maven multi module dependency sharing ](/questions/30027989/maven-multi-
module-dependency-sharing)

[ 1  Standard structure for multi-module java maven project
](/questions/38801423/standard-structure-for-multi-module-java-maven-project)

[ 3  In a Maven multi-module project, how to specify dependency needed in more
than one module? ](/questions/45655128/in-a-maven-multi-module-project-how-to-
specify-dependency-needed-in-more-than-o)

Load 7 more related questions  Show fewer related questions

##  0

Sorted by:  [ Reset to default ](/questions/58268204/how-should-dependencies-
between-modules-be-declared-in-a-maven-multi-module-
proj?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

##  Know someone who can answer?

Linked

[ 575 ](/q/1114026 ""Question score \(upvotes - downvotes\)"") [Maven Modules +
Building a Single Specific Module](/questions/1114026/maven-modules-building-
a-single-specific-module?noredirect=1)

[ 4 ](/q/12942782 ""Question score \(upvotes - downvotes\)"") [""mvn clean
generate-sources"" could not resolve dependencies](/questions/12942782/mvn-
clean-generate-sources-could-not-resolve-dependencies?noredirect=1)

[ 2 ](/q/57213350 ""Question score \(upvotes - downvotes\)"") [Docker and Maven
dependency offline](/questions/57213350/docker-and-maven-dependency-
offline?noredirect=1)

#### Related

[ 2 ](/q/3435130 ""Question score \(upvotes - downvotes\)"") [Aggregate
Dependencies in a Multi-Module Maven Project](/questions/3435130/aggregate-
dependencies-in-a-multi-module-maven-project)

[ 3 ](/q/4570229 ""Question score \(upvotes - downvotes\)"") [maven share
dependencies among different modules](/questions/4570229/maven-share-
dependencies-among-different-modules)

[ 1 ](/q/21305763 ""Question score \(upvotes - downvotes\)"") [Dependency
management does not work for multi-module
project](/questions/21305763/dependency-management-does-not-work-for-multi-
module-project)

[ 0 ](/q/21398391 ""Question score \(upvotes - downvotes\)"") [dealing with
Dependencies for a multimodule Maven Project](/questions/21398391/dealing-
with-dependencies-for-a-multimodule-maven-project)

[ 1 ](/q/22578814 ""Question score \(upvotes - downvotes\)"") [Resolving
dependencies ad-hoc in multi-module maven
project](/questions/22578814/resolving-dependencies-ad-hoc-in-multi-module-
maven-project)

[ 2 ](/q/30027989 ""Question score \(upvotes - downvotes\)"") [Maven multi
module dependency sharing](/questions/30027989/maven-multi-module-dependency-
sharing)

[ 3 ](/q/45655128 ""Question score \(upvotes - downvotes\)"") [In a

[SpaceTrucker's user
avatar](https://www.gravatar.com/avatar/c47d1f7544a8c4a1bb7a41d511f53604?s=64&d=identicon&r=PG)](/users/1466267/spacetrucker)

[SpaceTrucker](/users/1466267/spacetrucker)SpaceTrucker

13.4k66 gold badges6161 silver badges100100 bronze badges

1

  * 1

In the end is does not really matter which style you use...just use it
consistently...I prefer to use the one with using the version via
`${project.version}` and not using dependencyManagement it shows easier which
dependency is from within the project (in particular in larger multi module
builds) identified by the `<version>${project.version}</version>`...

- [khmarbaise](/users/296328/khmarbaise ""95,973 reputation"")

Commented Oct 7, 2019 at 12:19

Add a comment  | 

Related questions

[ 3  maven share dependencies among different modules
](/questions/4570229/maven-share-dependencies-among-different-modules)

[ 0  How are dependencies shared in a maven multi-module project?
](/questions/11254690/how-are-dependencies-shared-in-a-maven-multi-module-
project)

[ 0  Maven-2: Module depends upon another within same project (Two questions)
](/questions/14488627/maven-2-module-depends-upon-another-within-same-project-
two-questions)

Related questions

[ 3  maven share dependencies among different modules
](/questions/4570229/maven-share-dependencies-among-different-modules)

[ 0  How are dependencies shared in a maven multi-module project?
](/questions/11254690/how-are-dependencies-shared-in-a-maven-multi-module-
project)

[ 0  Maven-2: Module depends upon another within same project (Two questions)
](/questions/14488627/maven-2-module-depends-upon-another-within-same-project-
two-questions)

[ 24  How to resolve dependencies between modules within multi-module project?

test.skip=true [INFO] Scanning for projects. [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO]  [INFO] tdk-cloud [INFO] tdk-core [INFO] tdk-batch [INFO] tdk-web [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-cloud 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-cloud --- [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-core 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.h2database:h2:jar:1.4.194 is missing, no dependency information available [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-core --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-core --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO] Copying 1 resource [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-core --- [INFO] Changes detected - recompiling the module!",piggymetrics,project.modules.module,NAME,turbine-stream-service,maven,pom.xml,project.name,NAME,turbine-stream-service,maven,turbine-stream-service/pom.xml,Generic Names,Names,"{
    ""plan"": ""1. Identify the configuration options: project.modules.module with value turbine-stream-service in pom.xml of technology Maven and project.name with value turbine-stream-service in turbine-stream-service/pom.xml of technology Maven.\n2. Evaluate whether the identical values indicate a dependency between the two configuration options.\n3. Check if the Maven module's name and the project name are aligned, as they reference a common name in the project."",
    ""rationale"": ""The configuration option project.modules.module with the value turbine-stream-service in pom.xml defines a module within a Maven multi-module project. The configuration option project.name with the same value turbine-stream-service in the pom.xml file specifies the name of the project. The Maven module's name and the project name are aligned, as they reference a common name in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Exclusive Dependencies,llama3:70b,config2,6.0,FP,False,"The configuration options FROM with value java:8-jre in both Dockerfiles indicate that they use the same base image. This suggests a potential dependency between the two services, as changes to the base image could affect both services. However, without more information about the services and their interactions, it is unclear whether this constitutes a direct dependency or simply a coincidence.","stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/46795907 ""Question score \(upvotes - downvotes\)"") [Setting java home
in docker](/questions/46795907/setting-java-home-in-docker?noredirect=1)

[ 170 ](/q/33379393 ""Question score \(upvotes - downvotes\)"") [docker ENV vs
RUN export](/questions/33379393/docker-env-vs-run-export?noredirect=1)

[ 1 ](/q/63380705 ""Question score \(upvotes - downvotes\)"") [Change from JRE
to JDK in Docker container](/questions/63380705/change-from-jre-to-jdk-in-
docker-container?noredirect=1)

#### Related

[ 3 ](/q/5437224 ""Question score \(upvotes - downvotes\)"") [Bash shell script:
How to set JAVA_HOME environment variable](/questions/5437224/bash-shell-
script-how-to-set-java-home-environment-variable)

[ 5 ](/q/31725380 ""Question score \(upvotes - downvotes\)"") [How to set
environment variables via env-file](/questions/31725380/how-to-set-
environment-variables-via-env-file)

[ 0 ](/q/38266737 ""Question score \(upvotes - downvotes\)"") [Setting JAVA_HOME
variable](/questions/38266737/setting-java-home-variable)

[ 11 ](/q/46277631 ""Question score \(upvotes - downvotes\)"") [Change JAVA_HOME
in docker](/questions/46277631/change-java-home-in-docker)

[ 2 ](/q/50917822 ""Question score \(upvotes - downvotes\)"") [Trying to set
JAVA_HOME in a docker image,

don't know why its not
working](/questions/50917822/trying-to-set-java-home-in-a-docker-image-dont-
know-why-its-not-working)

[ 0 ](/q/53405006 ""Question score \(upvotes - downvotes\)"") [How do i have a
JAVA_HOME set using a Dockerfile and python?](/questions/53405006/how-do-i-
have-a-java-home-set-using-a-dockerfile-and-python)

[ 1 ](/q/54627140 ""Question score \(upvotes - downvotes\)"") [how to set
JAVA_HOME on my docker-ubuntu environment?](/questions/54627140/how-to-set-
java-home-on-my-docker-ubuntu-environment)

[ 1 ](/q/56336284 ""Question score \(upvotes - downvotes\)"") [Find and change
the value of JAVA_HOME in centos/wildfly docker
image](/questions/56336284/find-and-change-the-value-of-java-home-in-centos-
wildfly-docker-image)

[ 0 ](/q/57281450 ""Question score \(upvotes - downvotes\)"") [Access dockerfile
ENV variables in entrypoint](/questions/57281450/access-dockerfile-env-
variables-in-entrypoint)

[ 1 ](/q/65761187 ""Question score \(upvotes - downvotes\)"") [Dynamically set
JAVA_HOME and import certs into cacerts passing JAVA_HOME as
path](/questions/65761187/dynamically-set-java-home-and-import-certs-into-
cacerts-passing-java-home-as-pat)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ The book where someone can serve a sentence in advance ](https://scifi.stackexchange.com/questions/289942/the-book-where-someone-can-serve-a-sentence-in-advance)
  * [ How could double damage be explained in-universe? ](https://worldbuilding.stackexchange.com/questions/260058/how-could-double-damage-be-explained-in-universe)
  * [ Wording clarification for remastered powerful shove feat ](https://rpg.stackexchange.com/questions/212744/wording-clarification-for-remastered-powerful-shove-feat)
  * [ Why are maximum age restrictions so rare?

And how to start with it ](/wkrzywiec/what-s-docker-and-
how-to-start-with-it-2eai ""Published Nov 28 '20"") [ 2 How to put your Java
application into Docker container ](/wkrzywiec/how-to-put-your-java-
application-into-docker-container-21cg ""Published Dec 6 '20"") [ 3 Database in
a Docker container — how to start and what’s it about ](/wkrzywiec/database-
in-a-docker-container-how-to-start-and-what-s-it-about-56dj ""Published Dec 13
'20"") [ 4 Build and run Angular application in a Docker container
](/wkrzywiec/build-and-run-angular-application-in-a-docker-container-19pm
""Published Dec 19 '20"") [ 5 How to run database, backend and frontend in a
single-click with Docker Compose ](/wkrzywiec/how-to-run-database-backend-and-
frontend-in-a-single-click-with-docker-compose-of1 ""Published Dec 25 '20"")

##  Top comments (9)

Subscribe

![pic](https://media.dev.to/cdn-cgi/image/width=256,height=,fit=scale-
down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-
uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png)

Personal Trusted User

[ Create template ](/settings/response-templates)

Templates let you quickly answer FAQs or store snippets for re-use.

Submit Preview [Dismiss](/404.html)

Collapse Expand



[ ![rasharm_ profile image](https://media.dev.to/cdn-
cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-
to-
uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F173327%2F06e7b788-94f3-4dbb-
be09-9796c15a3953.jpg) ](https://dev.to/rasharm_)

[ Raman Sharma ](https://dev.to/rasharm_)

Raman Sharma

[ !

I've read the documentation on jib github repo on authenticating but I don't really understand how to procede and feel overwhelmed
UPDATE
I ran docker login and I get:
Authenticating with existing credentials... Login Succeeded 
but the error persists (and I figured I didn't include some part of the logging maybe:
[INFO] Using credentials from Docker config (C:\Users\david\.docker\config.json) for openjdk:17 [INFO] Executing tasks:                                [INFO] [============                  ] 40.0% complete [INFO] > building image to Docker daemon               [INFO]                                                 [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  2.964 s [INFO] Finished at: 2022-05-17T19:39:12+02:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:3.2.1:dockerBuild (default-cli) on project SpringBootFullStack: Build  to Docker daemon failed, perhaps you should make sure your credentials for 'registry-1.docker.io/library/openjdk' are set up correctly. See  Unauthorized for registry-1.docker.io/library/openjdk: 401 Unauthorized [ERROR] {""details"":""incorrect username or password""} [ERROR] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging.

And how to start with it ](/wkrzywiec/what-s-docker-and-
how-to-start-with-it-2eai ""Published Nov 28 '20"") [ 2 How to put your Java
application into Docker container ](/wkrzywiec/how-to-put-your-java-
application-into-docker-container-21cg ""Published Dec 6 '20"") [ 3 Database in
a Docker container — how to start and what’s it about ](/wkrzywiec/database-
in-a-docker-container-how-to-start-and-what-s-it-about-56dj ""Published Dec 13
'20"") [ 4 Build and run Angular application in a Docker container
](/wkrzywiec/build-and-run-angular-application-in-a-docker-container-19pm
""Published Dec 19 '20"") [ 5 How to run database, backend and frontend in a
single-click with Docker Compose ](/wkrzywiec/how-to-run-database-backend-and-
frontend-in-a-single-click-with-docker-compose-of1 ""Published Dec 25 '20"")

> Cover image by [Benjamin
> Voros](https://unsplash.com/@vorosbenisop?utm_source=medium&utm_medium=referral)
> on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)

_The main purpose of enormous popularity of Docker nowadays is that it’s
really easy to use and it allows developers to create a portable application
that could be run on every machine in a nick of time. With this blog post I
would like to present how simple is to create your own Docker image with your
own Java app inside._

Haven’t you heard of Docker yet? Or maybe you’re not comfortable with what
exactly it is? Don’t worry, you can check [my previous article in which I
elaborate on that](https://dev.to/wkrzywiec/what-s-docker-and-how-to-start-
with-it-2eai).

For demonstration purposes for this blog post I’ve created a simple Java
project. It’s a Spring Boot app that connects to the [NASA Astronomy Picture
of the Day API](https://api.nasa.gov/api.html#apod), gets the picture of the
current day with description and then prints it on a main page (HTML).

[!",piggymetrics,FROM,UNKNOWN,java:8-jre,docker,auth-service/Dockerfile,FROM,UNKNOWN,java:8-jre,docker,statistics-service/Dockerfile,Independent Components,Different Dockerfiles,"{
    ""plan"": ""1. Identify the configuration options: FROM in auth-service/Dockerfile and statistics-service/Dockerfile both of type UNKNOWN with value java:8-jre.\n2. Check if the values are identical: yes, both have the same base image 'java:8-jre'.\n3. Evaluate whether this similarity implies a dependency between the options."",
    ""rationale"": ""The configuration option FROM in auth-service/Dockerfile and statistics-service/Dockerfile both specify the same base image 'java:8-jre'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and builds its respective Docker image."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-quartz/Dockerfile of technology docker depends on configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-monitor/Dockerfile of technology docker or vice versa.

{
    ""rationale"": ""The configuration option FROM in pig-visual/pig-quartz/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and build its respective Docker image. Therefore, there cannot be a value-equality dependency between options from different Dockerfiles."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The value equality of the modelVersion configuration option does not necessarily imply a dependency between the two POM files. Maven projects can have independent POM files with the same model version. A dependency would exist if one POM file inherits from or aggregates the other, which is not evident from the provided information.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",piggymetrics,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,monitoring/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,turbine-stream-service/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in monitoring/pom.xml and turbine-stream-service/pom.xml, follow these steps: 1) Check if both POM files have the same model version (4.0.0). 2) Verify that both projects are using Maven as their build technology. 3) Since Maven only supports model version 4.0.0, and it's required for compatibility across all modules, a dependency exists based on value equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options 'version' in docker-compose.dev.yml and docker-compose.yml have the same value 'version: 2.1'. This suggests that they are dependent on each other, as changing the version in one file would likely require a corresponding change in the other file to maintain compatibility.","I have the following docker-compose.yml file

    
    
    services:
      containerA:
        healthcheck:
          test: ""/build/docheck""
          interval: ""10s""
        hostname: ""containerA""
        container_name: ""containerA""
        build:
          dockerfile: ""Dockerfile-5.6""
        ports:
        - ""8081:8081""
    version: ""2.1""
    

When I try the following command: **docker-compose up**

it fails due to:

_ERROR: Version in ""./docker-compose.yml"" is unsupported. You might be seeing
this error because you're using the wrong Compose file version. Either specify
a version of ""2"" (or ""2.0"") and place your service definitions under
the`services` key, or omit the `version` key and place your service
definitions at the root of the file to use version 1. For more on the Compose
file format versions, see <https://docs.docker.com/compose/compose-file/>_

I have the following setting:

    
    
    $> docker-compose --version
    docker-compose version 1.8.0, build unknown
    
    $> docker --version
    Docker version 17.12.0-ce, build c97c6d6
    
    $> uname -r
    4.9.0-4-amd64
    
    $> lsb_release -a
    No LSB modules are available.
    Distributor ID: Debian
    Description:    Debian GNU/Linux 9.3 (stretch)
    Release:    9.3
    Codename:   stretch
    

I need to use version 2.1 because I am using the healthcheck. Any ideas why
this is complaining?

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [docker-machine](/questions/tagged/docker-machine ""show questions tagged 'docker-machine'"")

[Share](/q/49113453 ""Short permalink to this question"")

[Improve this question](/posts/49113453/edit)

Follow

[edited Jan 7, 2019 at 3:42](/posts/49113453/revisions ""show all edits to this
post"")

[!

[Here](https://stackoverflow.com/questions/29727171/docker-compose-up-leads-
to-client-and-server-dont-have-same-version-client) is a very similar
question. But the problem is that some people said that docker version is too
old, some people said that docker version is not old enough. My question is
that after I checked the version of my docker and docker-compose, I cannot
find version 1.21 which is reported by the ERROR. Where can I find it?

I am trying to run [Crystalnix/omaha-
server](https://github.com/Crystalnix/omaha-server).  
  
I followed the steps:  

    
    
    $ sudo apt-get update
    $ sudo apt-get install docker.io
    $ sudo apt-get install python-paver python-pip
    $ sudo pip install -U docker-compose
    $ git clone https://github.com/Crystalnix/omaha-server.git
    $ cd omaha-server
    $ sudo paver up_local_dev_server
    

Then I received error:  
`docker-compose -f docker-compose.dev.yml -p dev up -d db ERROR: client and
server don't have same version (client : 1.21, server: 1.18)`  
  
From [Srini Koganti's
Answer](https://stackoverflow.com/questions/29727171/docker-compose-up-leads-
to-client-and-server-dont-have-same-version-client), I found that the error
may be caused by `docker API version used by docker-compose being higher than
that that of docker daemon listening to serve.`  
  
Then I check:

    
    
    docker-compose --version
    docker-compose version 1.13.0, build 1719ceb
    

Also:

    
    
    docker version
    Client version: 1.6.2
    Client API version: 1.18
    Go version (client): go1.2.1
    Git commit (client): 7c8fca2
    OS/Arch (client): linux/amd64
    

I can found the version 1.21 nowhere, so what is the cause of this problem?
And how to fix it?

version issue](/questions/44404167/error-in-docker-compose-
build-version-issue)

[ 9 ](/q/47972328 ""Question score \(upvotes - downvotes\)"") [Version in
docker-compose is unsupported](/questions/47972328/version-in-docker-compose-
is-unsupported)

[ 3 ](/q/49113453 ""Question score \(upvotes - downvotes\)"") [Version in
""./docker-compose.yml"" is unsupported](/questions/49113453/version-in-docker-
compose-yml-is-unsupported)

[ 1 ](/q/53612953 ""Question score \(upvotes - downvotes\)"") [Wrong Compose
file version](/questions/53612953/wrong-compose-file-version)

[ 0 ](/q/60909431 ""Question score \(upvotes - downvotes\)"") [How to find the
right version of my docker-compose](/questions/60909431/how-to-find-the-right-
version-of-my-docker-compose)

[ 23 ](/q/61344927 ""Question score \(upvotes - downvotes\)"") [when using
docker compose 3.8 getting 'version is unsupported'
error](/questions/61344927/when-using-docker-compose-3-8-getting-version-is-
unsupported-error)

[ 1 ](/q/66465310 ""Question score \(upvotes - downvotes\)"") [Docker compose
file version compatibility error](/questions/66465310/docker-compose-file-
version-compatibility-error)

[ 0 ](/q/66647630 ""Question score \(upvotes - downvotes\)"") [docker-compose
builds an old version of the app](/questions/66647630/docker-compose-builds-
an-old-version-of-the-app)

[ 4 ](/q/69269195 ""Question score \(upvotes - downvotes\)"") [Ubuntu docker-
compose wrong Compose file version](/questions/69269195/ubuntu-docker-compose-
wrong-compose-file-version)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What is the meaning of the ""Super 8 - Interactive Teaser"" under ""EXTRAS"" in Portal 2?

You might be seeing this error because
you're using the wrong Compose file version](/questions/44535976/error-
version-in-docker-compose-yml-is-unsupported-you-might-be-seeing-thi)

[ 2 ](/q/47319239 ""Question score \(upvotes - downvotes\)"") [docker-
compose.yml invalid type](/questions/47319239/docker-compose-yml-invalid-type)

[ 9 ](/q/47972328 ""Question score \(upvotes - downvotes\)"") [Version in
docker-compose is unsupported](/questions/47972328/version-in-docker-compose-
is-unsupported)

[ 9 ](/q/56225523 ""Question score \(upvotes - downvotes\)"") [The Compose file
'./docker-compose.yml' is invalid because: Unsupported config
option](/questions/56225523/the-compose-file-docker-compose-yml-is-invalid-
because-unsupported-config-o)

[ 0 ](/q/57014917 ""Question score \(upvotes - downvotes\)"") [Version in
“./docker-compose.yml” is unsupported. You might be seeing this error because
you're using the wrong Compose file version](/questions/57014917/version-in-
docker-compose-yml-is-unsupported-you-might-be-seeing-this-error)

[ 26 ](/q/57456212 ""Question score \(upvotes - downvotes\)"") [ERROR: Version
in ""./docker-compose.yml"" is unsupported](/questions/57456212/error-version-
in-docker-compose-yml-is-unsupported)

[ 0 ](/q/65806860 ""Question score \(upvotes - downvotes\)"") [docker-compose
1.27 ERROR: Version in ""./docker-compose.yml"" is
invalid](/questions/65806860/docker-compose-1-27-error-version-in-docker-
compose-yml-is-invalid)

[ 0 ](/q/71443976 ""Question score \(upvotes - downvotes\)"") [I get error
message 'Version in ""./docker-compose.yaml"" is invalid - it should be a
string.

##

Not the answer you're looking for? Browse other questions tagged

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 43 ](/q/29727171 ""Question score \(upvotes - downvotes\)"") [docker-compose
up leads to ""client and server don't have same version (client : 1.14, server:
1.12)"" error but client and server have the same
version](/questions/29727171/docker-compose-up-leads-to-client-and-server-
dont-have-same-version-client?noredirect=1)

#### Related

[ 1 ](/q/41682305 ""Question score \(upvotes - downvotes\)"") [Installing
specific version of docker](/questions/41682305/installing-specific-version-
of-docker)

[ 0 ](/q/44404167 ""Question score \(upvotes - downvotes\)"") [Error in docker-
compose build.",piggymetrics,version,VERSION_NUMBER,version:2.1,docker-compose,docker-compose.dev.yml,version,VERSION_NUMBER,version:2.1,docker-compose,docker-compose.yml,Version Numbers,Project Version,"{
    ""plan"": ""1. Identify the configuration options: version with value version:2.1 in docker-compose.dev.yml and version with value version:2.1 in docker-compose.yml.\n2. Check if both options have the same type (VERSION_NUMBER) and value (version:2.1).\n3. Evaluate whether the equality of values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option 'version' with value 'version:2.1' in docker-compose.dev.yml specifies the version of Docker Compose to use in the development environment. The same option with the same value in docker-compose.yml specifies the version of Docker Compose to use in the production environment. Since both options have the same type and value, it indicates that the development and production environments are intended to use the same version of Docker Compose. This setup shows a dependency because the development environment relies on the same version as the production environment."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option services.statistics-mongodb.restart of type MODE with value always in docker-compose.yml of technology docker-compose  depends on configuration option services.monitoring.restart of type MODE with value always in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The 'restart' option in docker-compose.yml specifies the restart policy for a service. The value 'always' means that the service will always be restarted if it stops. This setting is typically used to ensure high availability and resilience of services. Each service can have its own restart policy independently of the other and therefore the similarity of their values does not indicate a dependency."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.eureka.ports.out of type PORT with value 8761 in docker-compose.yml of technology docker-compose depends on configuration option services.ace-auth.environment.EUREKA_PORT of type PORT with value 8761 in docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""The configuration option services.eureka.ports.out in docker-compose.yml specifies the external port (8761) exposed by the Eureka service container. The option services.ace-auth.environment.EUREKA_PORT in the same docker-compose.yml specifies an environment variable EUREKA_PORT, likely used to configure the ace-auth service to connect to the Eureka service on port 8761. The value equality (8761) indicates that the ace-auth service relies on the Eureka service being available on this specific port. This setup shows a dependency because the ace-auth configuration expects the Eureka service to be accessible at the port defined by services.eureka.ports.out."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId and project.dependencies.dependency_spring-boot-starter-web.groupId both have the value 'org.springframework.boot', which suggests a dependency between them. This is because they share the same groupId, implying that they are part of the same Spring Boot ecosystem.","I am having a problem while creating a simple `spring boot` web application. I
am building this app using Intellij Idea IDE. There is a issue arising related
to the dependency. Intellij is saying - `Dependency
'org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE' not found`(in
`pom.xml`).

Detailed Error Information:

    
    
    Dependency 'org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE' not found.
    Tag name: artifactId Description : The unique id for an artifact produced by the project group, e.g. maven-artifact. Version : 3.0.0+ 
    
    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.3.0.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.example</groupId>
        <artifactId>springboot-demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>springboot-demo</name>
        <description>Demo project for Spring Boot</description>
    
        <properties>
            <java.version>1.8</java.version>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.junit.

I am new to spring boot and just started exploring it .I came across this
issue where intellij ide shows this error in pom.xml .I fail to understand as
to why this is happening.

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.5.3</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.example</groupId>
        <artifactId>Spring-boot-tutorial</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>Spring-boot-tutorial</name>
        <description>Demo project for Spring Boot</description>
        <properties>
            <java.version>1.8</java.version>
        </properties>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <scope>runtime</scope>
                <optional>true</optional>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>2.5.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 5 ](/q/41446501 ""Question score \(upvotes - downvotes\)"") [Dependency not
found in Spring Boot project](/questions/41446501/dependency-not-found-in-
spring-boot-project)

[ 7 ](/q/45479060 ""Question score \(upvotes - downvotes\)"") [spring boot
package does not exist error](/questions/45479060/spring-boot-package-does-
not-exist-error)

[ 26 ](/q/45480451 ""Question score \(upvotes - downvotes\)"") [Spring boot
starter parent 2.0.0 not found dependency](/questions/45480451/spring-boot-
starter-parent-2-0-0-not-found-dependency)

[ 35 ](/q/48847951 ""Question score \(upvotes - downvotes\)"") [package
org.springframework.boot does not exist](/questions/48847951/package-org-
springframework-boot-does-not-exist)

[ 6 ](/q/53565576 ""Question score \(upvotes - downvotes\)"") [Spring boot
project not resolving dependencies - Failed to collect dependencies at
org.springframework.boot:spring-boot-starter-
web:jar:2.1.1.RELEASE](/questions/53565576/spring-boot-project-not-resolving-
dependencies-failed-to-collect-dependencies)

[ 0 ](/q/54415850 ""Question score \(upvotes - downvotes\)"") [Maven dependency
missing](/questions/54415850/maven-dependency-missing)

[ 0 ](/q/61537415 ""Question score \(upvotes - downvotes\)"") [Dependency
'org.springframework.boot:spring-boot-starter-security:2.2.6.RELEASE' not
found](/questions/61537415/dependency-org-springframework-bootspring-boot-
starter-security2-2-6-release)

[ 0 ](/q/67375026 ""Question score \(upvotes - downvotes\)"") [Maven - package
org.springframework.

springframework.boot does not exist](/questions/67375026/maven-package-
org-springframework-boot-does-not-exist)

[ 2 ](/q/68552789 ""Question score \(upvotes - downvotes\)"") [Dependency
'org.springframework.boot:spring-boot-starter-data-jpa:2.5.3' not
found](/questions/68552789/dependency-org-springframework-bootspring-boot-
starter-data-jpa2-5-3-not-fou)

[ 1 ](/q/75372360 ""Question score \(upvotes - downvotes\)"") [Project
'org.springframework.boot:spring-boot-starter-parent:3.0.2' not
found](/questions/75372360/project-org-springframework-bootspring-boot-
starter-parent3-0-2-not-found)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Why does ""They be naked"" use the base form of ""be""? ](https://ell.stackexchange.com/questions/355031/why-does-they-be-naked-use-the-base-form-of-be)
  * [ How should I run cable across a steel beam? ](https://diy.stackexchange.com/questions/303548/how-should-i-run-cable-across-a-steel-beam)
  * [ Is ""secco"" really used in piano music? ](https://music.stackexchange.com/questions/136827/is-secco-really-used-in-piano-music)
  * [ Is quantifying over natural numbers non first order? ](https://math.stackexchange.com/questions/4947194/is-quantifying-over-natural-numbers-non-first-order)
  * [ What sort of security does Docusign provide? ](https://security.stackexchange.com/questions/277851/what-sort-of-security-does-docusign-provide)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers? ](https://retrocomputing.stackexchange.com/questions/30359/what-was-the-purpose-of-the-scan-commands-on-the-intel-8272-nec-%ce%bcpd765-floppy)
  * [ This expected value has a minimum!",piggymetrics,project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId,NAME,org.springframework.boot,maven,account-service/pom.xml,project.dependencies.dependency_spring-boot-starter-web.groupId,NAME,org.springframework.boot,maven,notification-service/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId and project.dependencies.dependency_spring-boot-starter-web.groupId.\n2. Check their types (both are NAME) and values (both are org.springframework.boot).\n3. Evaluate if they are part of the same Maven dependency in different modules.\n4. Determine if there is a value-equality dependency between them."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-boot-starter-data-mongodb.groupId and project.dependencies.dependency_spring-boot-starter-web.groupId have the same groupId value 'org.springframework.boot', indicating that they are part of the same Spring Boot ecosystem. However, this does not imply a direct dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Inferring Dependencies,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that both configuration options have the same scope value 'test', which suggests that they might be used together in a testing environment. The spring-boot-starter-test dependency provides libraries for testing Spring Boot applications, while the json-path dependency provides a library for working with JSON data. If these dependencies are used together in a test environment, it is likely that there is a dependency between them.","html)

# Test Scope Dependencies

The `spring-boot-starter-test` ""Starter"" (in the `test` `scope`) contains the
following provided libraries:

  * [JUnit 5](https://junit.org/junit5/): The de-facto standard for unit testing Java applications.

  * [Spring Test](https://docs.spring.io/spring-framework/reference/6.1.10/testing/integration.html) & Spring Boot Test: Utilities and integration test support for Spring Boot applications.

  * [AssertJ](https://assertj.github.io/doc/): A fluent assertion library.

  * [Hamcrest](https://github.com/hamcrest/JavaHamcrest): A library of matcher objects (also known as constraints or predicates).

  * [Mockito](https://site.mockito.org/): A Java mocking framework.

  * [JSONassert](https://github.com/skyscreamer/JSONassert): An assertion library for JSON.

  * [JsonPath](https://github.com/jayway/JsonPath): XPath for JSON.

  * [Awaitility](https://github.com/awaitility/awaitility): A library for testing asynchronous systems.

We generally find these common libraries to be useful when writing tests. If
these libraries do not suit your needs, you can add additional test
dependencies of your own.

[Testing](index.html) [Testing Spring Applications](spring-applications.html)

  * [Spring Boot](././index.html)
    * [ 3.4.0-SNAPSHOT ](././3.4-SNAPSHOT/index.html)
    * [ 3.3.2-SNAPSHOT ](././3.3-SNAPSHOT/index.html)
    * [ 3.3.1current ](././index.html)

  * Related Spring Documentation 
    * [ Spring Boot ](https://docs.spring.io/spring-boot/)
    * [ Spring Framework ](https://docs.spring.io/spring-framework/reference/)
    * __Spring Cloud
      * [ Spring Cloud Build ](https://docs.spring.io/spring-cloud-build/reference/)
      * [ Spring Cloud Bus ](https://docs.spring.io/spring-cloud-bus/reference/)
      * [ Spring Cloud Circuit Breaker ](https://docs.spring.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

/./how-to/native-image/testing-native-applications.html)
      * [Class Data Sharing](././how-to/class-data-sharing.html)
      * [Deploying Spring Boot Applications](././how-to/deployment/index.html)
        * [Traditional Deployment](././how-to/deployment/traditional-deployment.html)
        * [Deploying to the Cloud](././how-to/deployment/cloud.html)
        * [Installing Spring Boot Applications](././how-to/deployment/installing.html)
      * [Docker Compose](././how-to/docker-compose.html)
    * [Build Tool Plugins](././build-tool-plugin/index.html)
      * [Maven Plugin](././maven-plugin/index.html)
        * [Getting Started](././maven-plugin/getting-started.html)
        * [Using the Plugin](././maven-plugin/using.html)
        * [Goals](././maven-plugin/goals.html)
        * [Packaging Executable Archives](././maven-plugin/packaging.html)
        * [Packaging OCI Images](././maven-plugin/build-image.html)
        * [Running your Application with Maven](././maven-plugin/run.html)
        * [Ahead-of-Time Processing](././maven-plugin/aot.html)
        * [Running Integration Tests](././maven-plugin/integration-tests.html)
        * [Integrating with Actuator](././maven-plugin/build-info.html)
        * [Help Information](././maven-plugin/help.html)
      * [Gradle Plugin](././gradle-plugin/index.html)
        * [Getting Started](././gradle-plugin/getting-started.html)
        * [Managing Dependencies](././gradle-plugin/managing-dependencies.html)
        * [Packaging Executable Archives](././gradle-plugin/packaging.html)
        * [Packaging OCI Images](././gradle-plugin/packaging-oci-image.html)
        * [Publishing your Application](././gradle-plugin/publishing.html)
        * [Running your Application with Gradle](././gradle-plugin/running.html)
        * [Ahead-of-Time Processing](././gradle-plugin/aot.html)
        * [Integrating with Actuator](./.

/./specification/executable-jar/nested-jars.html)
        * [Spring Boot's ""NestedJarFile"" Class](././specification/executable-jar/jarfile-class.html)
        * [Launching Executable Jars](././specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](././specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](././specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](././specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](././appendix/application-properties/index.html)
      * [Auto-configuration Classes](././appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](././appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](././appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](././appendix/test-auto-configuration/index.html)
        * [Test Slices](././appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](././appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](././appendix/dependency-versions/coordinates.html)
        * [Version Properties](././appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-
docs/src/docs/antora/modules/reference/pages/testing/test-scope-
dependencies.adoc) [ GitHub Project ](https://github.com/spring-
projects/spring-boot ""GitHub"") [ Stack Overflow
](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](././index.html)
  * [Reference](./index.html)
  * [Testing](index.html)
  * [Test Scope Dependencies](test-scope-dependencies.html)

# Test Scope Dependencies

The `spring-boot-starter-test` ""Starter"" (in the `test` `scope`) contains the
following provided libraries:

  * [JUnit 5](https://junit.

/messaging/rsocket.html)
        * [Spring Integration](./messaging/spring-integration.html)
        * [WebSockets](./messaging/websockets.html)
      * [Testing](index.html)
        * [Test Scope Dependencies](test-scope-dependencies.html)
        * [Testing Spring Applications](spring-applications.html)
        * [Testing Spring Boot Applications](spring-boot-applications.html)
        * [Testcontainers](testcontainers.html)
        * [Test Utilities](test-utilities.html)
      * [Packaging Spring Boot Applications](./packaging/index.html)
        * [Efficient Deployments](./packaging/efficient.html)
        * [Class Data Sharing](./packaging/class-data-sharing.html)
        * [Ahead-of-time Processing With the JVM](./packaging/aot.html)
        * [GraalVM Native Images](./packaging/native-image/index.html)
          * [Introducing GraalVM Native Images](./packaging/native-image/introducing-graalvm-native-images.html)
          * [Advanced Native Images Topics](./packaging/native-image/advanced-topics.html)
        * [Checkpoint and Restore With the JVM](./packaging/checkpoint-restore.html)
        * [Container Images](./packaging/container-images/index.html)
          * [Efficient Container Images](./packaging/container-images/efficient-images.html)
          * [Dockerfiles](./packaging/container-images/dockerfiles.html)
          * [Cloud Native Buildpacks](./packaging/container-images/cloud-native-buildpacks.html)
      * [Production-ready Features](./actuator/index.html)
        * [Enabling Production-ready Features](./actuator/enabling.html)
        * [Endpoints](./actuator/endpoints.html)
        * [Monitoring and Management Over HTTP](./actuator/monitoring.html)
        * [Monitoring and Management over JMX](./actuator/jmx.html)
        * [Observability](./actuator/observability.html)
        * [Loggers](./actuator/loggers.html)
        * [Metrics](./actuator/metrics.html)
        * [Tracing](./actuator/tracing.html)
        * [Auditing](.",piggymetrics,project.dependencies.dependency_spring-boot-starter-test.scope,UNKNOWN,test,maven,account-service/pom.xml,project.dependencies.dependency_json-path.scope,UNKNOWN,test,maven,notification-service/pom.xml,Libraries,Dependency Scope,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-test.scope and project.dependencies.dependency_json-path.scope.\n2. Determine their types: both are of type UNKNOWN.\n3. Evaluate their values: both have value 'test'.\n4. Check if they are in the same Maven module: no, they are in different modules (account-service/pom.xml and notification-service/pom.xml).\n5. Conclude whether a dependency exists based on value-equality."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-boot-starter-test.scope and project.dependencies.dependency_json-path.scope have the same value 'test', but they are in different Maven modules and define the scope of different dependencies. This does not create a dependency between these Maven dependencies, as each independently defines its scope."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","PiggyMetrics is a simple financial advisor app built to demonstrate the Microservice Architecture Pattern using Spring Boot, Spring Cloud, Maven, Docker, and Docker Compose. 
It is decomposed into three core microservices, including a statistics, account, and notification service.
Each microservice has its own database, with MongoDB being used the primary database for each service. 
Overall, PiggyMetrics includes 9 Spring Boot modules, 4 MongoDB instances and a RabittMq.

In the PiggyMetrics project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in PiggyMetrics, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of PiggyMetrics is as follows:

piggymetrics/
├── account-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── auth-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── config/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── docker-compose.dev.yml
├── docker-compose.yml
├── gateway/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── LICENCE
├── mongodb/
│   ├── Dockerfile
│   ├── dump/
│   └── init.sh
├── monitoring/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── notification-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pom.xml
├── README.md
├── registry/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── statistics-service/
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
└── turbine-stream-service/
    ├── Dockerfile
    ├── pom.xml
    └── src/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. The project.packaging configuration option with value pom indicates that the Maven module is a pom-type project, which typically defines dependencies and configurations for its child modules. The project.dependencyManagement.dependencies.dependency_spring-cloud-alibaba-dependencies.type configuration option with value pom suggests that the spring-cloud-alibaba-dependencies dependency is managed at the parent level, influencing the packaging and dependencies of its child modules. Given the value-equality, it is likely that the project.packaging configuration option depends on the project.dependencyManagement.dependencies.dependency_spring-cloud-alibaba-dependencies.type configuration option.","](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 247 ](/q/26975818 ""Question score \(upvotes - downvotes\)"") [What is <scope>
under <dependency> in pom.xml for?](/questions/26975818/what-is-scope-under-
dependency-in-pom-xml-for)

[ 4 ](/q/38893345 ""Question score \(upvotes - downvotes\)"") [Maven: How to
import dependency of type pom?](/questions/38893345/maven-how-to-import-
dependency-of-type-pom)

[ 4 ](/q/44740355 ""Question score \(upvotes - downvotes\)"") [Import and
Dependency Management in Maven](/questions/44740355/import-and-dependency-
management-in-maven)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/47015818 ""Question score \(upvotes - downvotes\)"") [POM references a
dependency and a parent the same way. How we choose what is
what?](/questions/47015818/pom-references-a-dependency-and-a-parent-the-same-
way-how-we-choose-what-is-wha)

[ 3 ](/q/55886406 ""Question score \(upvotes - downvotes\)"") [Importing pom in
dependency management](/questions/55886406/importing-pom-in-dependency-
management)

[ 3 ](/q/62750789 ""Question score \(upvotes - downvotes\)"") [maven dependency
management mechanism, the priority about dependency management which using
import scope](/questions/62750789/maven-dependency-management-mechanism-the-
priority-about-dependency-management)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Are missiles aircraft?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/36766693/dependencies-vs-
dependenciesmanagement)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/46220108 ""Question score \(upvotes - downvotes\)"") [How Maven looks
for dependencies](/questions/46220108/how-maven-looks-for-dependencies)

[ 0 ](/q/60994565 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency management tag in pom.xml?](/questions/60994565/what-is-
the-purpose-of-dependency-management-tag-in-pom-xml)

[ 0 ](/q/63437884 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency maven-model?](/questions/63437884/what-is-the-purpose-
of-dependency-maven-model)

[ 0 ](/q/65819063 ""Question score \(upvotes - downvotes\)"") [What's the
difference between the maven-dependency-plugin and
dependencyManagement](/questions/65819063/whats-the-difference-between-the-
maven-dependency-plugin-and-dependencymanageme)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Parking ticket for parking in a private lot reserved for customers of X, Y, and Z business's ](https://law.stackexchange.com/questions/103926/parking-ticket-for-parking-in-a-private-lot-reserved-for-customers-of-x-y-and)
  * [ The book where someone can serve a sentence in advance ](https://scifi.stackexchange.com/questions/289942/the-book-where-someone-can-serve-a-sentence-in-advance)
  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines? ](https://retrocomputing.stackexchange.com/questions/30344/could-todays-flash-memory-be-used-instead-of-ram-in-1980s-8-bit-machines)
  * [ How should I run cable across a steel beam?

](/questions/58459171/why-are-slf4j-logger-and-loggerfactory-imports-
missing-from-maven-project?noredirect=1)

[ 111 ](/q/17325163 ""Question score \(upvotes - downvotes\)"")
['dependencies.dependency.version' is missing error, but version is managed in
parent](/questions/17325163/dependencies-dependency-version-is-missing-error-
but-version-is-managed-in-pa?noredirect=1)

[ 96 ](/q/5845990 ""Question score \(upvotes - downvotes\)"") [Maven 3 and JUnit
4 compilation problem: package org.junit does not
exist](/questions/5845990/maven-3-and-junit-4-compilation-problem-package-org-
junit-does-not-exist?noredirect=1)

[ 83 ](/q/31740785 ""Question score \(upvotes - downvotes\)"") [Why order of
Maven dependencies matter?](/questions/31740785/why-order-of-maven-
dependencies-matter?noredirect=1)

[ 17 ](/q/26506364 ""Question score \(upvotes - downvotes\)"") [maven- not
downloading new added dependency in pom.xml file](/questions/26506364/maven-
not-downloading-new-added-dependency-in-pom-xml-file?noredirect=1)

[ 22 ](/q/22870422 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of including the jersey-bom import scoped dependency in a jersey
project?](/questions/22870422/what-is-the-purpose-of-including-the-jersey-bom-
import-scoped-dependency-in-a-je?noredirect=1)

[ 12 ](/q/72128029 ""Question score \(upvotes - downvotes\)"") [How do I resolve
Could not find artifact javax.xml.bind:jaxb-api:pom:2.3.0-b161121.1438 in
central (https://repo1.maven.org/maven2)?",pig,project.packaging,TYPE,pom,maven,pig-common/pig-common-bom/pom.xml,project.dependencyManagement.dependencies.dependency_spring-cloud-alibaba-dependencies.type,TYPE,pom,maven,pom.xml,Multi-Maven-Modules,Packaging Format,"{
    ""plan"": ""1. Analyze the configuration options: project.packaging of type TYPE with value pom in pig-common/pig-common-bom/pom.xml and project.dependencyManagement.dependencies.dependency_spring-cloud-alibaba-dependencies.type of type TYPE with value pom in pom.xml.\n2. Check if both options are specified in the same Maven project or in different projects.\n3. Evaluate whether the values of both options are equal (both are 'pom').\n4. Determine if a dependency exists between the two configuration options."",
    ""rationale"": ""The configuration option project.packaging and project.dependencyManagement.dependencies.dependency_spring-cloud-alibaba-dependencies.type are specified in different Maven projects, but they share the same value 'pom'. This does not create a direct dependency between them, as each option serves a different purpose in the Maven build process."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Inheritance and Overrides,llama3:70b,config2,6.0,FN,True,"The configuration options have the same value 'pig', but this does not necessarily imply a dependency between them. In Maven, the artifactId is a unique identifier for a project, and it's possible for different projects to have the same artifactId as long as their groupIds are different. Without more information about the project structure and relationships, we cannot conclude that there is a dependency between these configuration options.","](/questions/15631436/missing-
artifactid-in-pom-and-error-in-find-parent)

[ 7 ](/q/26503589 ""Question score \(upvotes - downvotes\)"") [Duplicate
artifactId in child pom](/questions/26503589/duplicate-artifactid-in-child-
pom)

[ 5 ](/q/26858565 ""Question score \(upvotes - downvotes\)"") [Unable to resolve
${project.version} in child pom.xml from parent
pom.xml](/questions/26858565/unable-to-resolve-project-version-in-child-pom-
xml-from-parent-pom-xml)

[ 1 ](/q/30732384 ""Question score \(upvotes - downvotes\)"") [maven dependency
management from parent pom overrides
${project.version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 45 ](/q/38594036 ""Question score \(upvotes - downvotes\)"") [difference of
artifactId and name in maven POM](/questions/38594036/difference-of-
artifactid-and-name-in-maven-pom)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 3 ](/q/45946539 ""Question score \(upvotes - downvotes\)"") [Artifactory/JFrog
is producing the wrong parent artifactId in generated
POM](/questions/45946539/artifactory-jfrog-is-producing-the-wrong-parent-
artifactid-in-generated-pom)

[ 0 ](/q/61676718 ""Question score \(upvotes - downvotes\)"") [POM parent
artifact id same to original artifact is](/questions/61676718/pom-parent-
artifact-id-same-to-original-artifact-is)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Are the hangers on these joists sized and installed properly?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

/developers/index.html ""Maven Developer Centre"")
  * [Maven Core ITs](./././core-its/index.html ""Maven Core ITs"")
  * Project Documentation
  * [Project Information](project-info.html ""Project Information"")
  * [Project Reports](project-reports.html ""Project Reports"")
  * Maven Projects
  * [Maven](././current ""Maven"")
  * [Archetypes](./././archetypes/index.html ""Archetypes"")
  * [Extensions](./././extensions/index.html ""Extensions"")
  * [Parent POMs](./././pom/index.html ""Parent POMs"")
  * [Plugins](./././plugins/index.html ""Plugins"")
  * [Skins](./././skins/index.html ""Skins"")
  * []()
    * [Archetype](./././archetype/index.html ""Archetype"")
    * [Artifact Resolver](./././resolver/index.html ""Artifact Resolver"")
    * [Doxia](./././doxia/index.html ""Doxia"")
    * [Indexer](./././maven-indexer/index.html ""Indexer"")
    * [JXR](./././jxr/index.html ""JXR"")
    * [Plugin Testing](./././plugin-testing/index.html ""Plugin Testing"")
    * [Plugin Tools](./././plugin-tools/index.html ""Plugin Tools"")
    * [Resource Bundles](./././apache-resource-bundles/index.html ""Resource Bundles"")
    * [SCM](./././scm/index.html ""SCM"")
    * [Shared Components](./././shared/index.html ""Shared Components"")
    * [Surefire](./././surefire/index.html ""Surefire"")
    * [Wagon](./././wagon/index.html ""Wagon"")
  * ASF
  * [How Apache Works](https://www.apache.org/foundation/how-it-works.html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.",pig,project.parent_pig.artifactId,NAME,pig,maven,pig-boot/pom.xml,project.artifactId,NAME,pig,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the configuration options: project.parent_pig.artifactId in pig-boot/pom.xml and project.artifactId in pom.xml.\n2. Determine their types (both are of type NAME) and values (both have value 'pig').\n3. Evaluate if they depend on each other due to value-equality, considering the Maven project structure and inheritance."",
    ""rationale"": ""The configuration option project.parent_pig.artifactId with value 'pig' in pig-boot/pom.xml specifies the artifact ID of the parent module. The configuration option project.artifactId with the same value 'pig' in pom.xml identifies the artifact's unique ID within the project. Due to Maven project inheritance, the artifact ID in the submodule (pig-boot) is derived from or set to match the artifact ID in the parent module (pom.xml). Therefore, these options depend on each other due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both pom.xml files have the same value 4.0.0, which is a standard version for Maven POM files. This value doesn't imply any direct dependency between the two projects. However, if one project is a module or a parent of the other, then there might be an indirect dependency due to the hierarchical structure of Maven projects.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",pig,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-core/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-register/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in pig-common/pig-common-core/pom.xml and pig-register/pom.xml, follow these steps: 1) Verify that both Maven projects use the same model version (4.0.0). 2) Check if the value of project.modelVersion is consistent across both modules. If it is, then a dependency exists due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Inheritance and Overrides,llama3:70b,config2,8.0,FP,False,"The configuration options have the same groupId value (com.pig4cloud), which suggests a possible dependency between them. Since both configurations are part of different modules (pig-common-xss and pig-upms-biz) within the same project, it's likely that they share dependencies or have a hierarchical relationship.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-xss/pom.xml,project.dependencies.dependency_pig-common-log.groupId,NAME,com.pig4cloud,maven,pig-upms/pig-upms-biz/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Analyze the Maven project structure and identify the relationships between modules.\n2. Check the groupId values in both configuration options: project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-xss/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-upms/pig-upms-biz/pom.xml.\n3. Compare the values to determine if they are equal."",
    ""rationale"": ""Both configuration options have the same groupId value 'com.pig4cloud', which indicates that they belong to the same project and share a common namespace. This suggests a dependency between the two modules, as they are likely to be part of the same larger project."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The configuration options project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId and project.dependencies.dependency_mybatis-plus-extension.groupId have the same value 'com.baomidou'. This suggests a potential dependency between the two, as they share a common groupId. However, without further analysis of the Maven project structure and dependencies, it's uncertain whether this constitutes an actual dependency.","- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/58459171/why-are-slf4j-logger-and-loggerfactory-imports-
missing-from-maven-project?noredirect=1)

[ 111 ](/q/17325163 ""Question score \(upvotes - downvotes\)"")
['dependencies.dependency.version' is missing error, but version is managed in
parent](/questions/17325163/dependencies-dependency-version-is-missing-error-
but-version-is-managed-in-pa?noredirect=1)

[ 96 ](/q/5845990 ""Question score \(upvotes - downvotes\)"") [Maven 3 and JUnit
4 compilation problem: package org.junit does not
exist](/questions/5845990/maven-3-and-junit-4-compilation-problem-package-org-
junit-does-not-exist?noredirect=1)

[ 83 ](/q/31740785 ""Question score \(upvotes - downvotes\)"") [Why order of
Maven dependencies matter?](/questions/31740785/why-order-of-maven-
dependencies-matter?noredirect=1)

[ 17 ](/q/26506364 ""Question score \(upvotes - downvotes\)"") [maven- not
downloading new added dependency in pom.xml file](/questions/26506364/maven-
not-downloading-new-added-dependency-in-pom-xml-file?noredirect=1)

[ 22 ](/q/22870422 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of including the jersey-bom import scoped dependency in a jersey
project?](/questions/22870422/what-is-the-purpose-of-including-the-jersey-bom-
import-scoped-dependency-in-a-je?noredirect=1)

[ 12 ](/q/72128029 ""Question score \(upvotes - downvotes\)"") [How do I resolve
Could not find artifact javax.xml.bind:jaxb-api:pom:2.3.0-b161121.1438 in
central (https://repo1.maven.org/maven2)?",pig,project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId,NAME,com.baomidou,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_mybatis-plus-extension.groupId,NAME,com.baomidou,maven,pig-common/pig-common-mybatis/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId and project.dependencies.dependency_mybatis-plus-extension.groupId.\n2. Analyze their values: com.baomidou.\n3. Check if they are part of the same Maven dependency ecosystem.\n4. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId and project.dependencies.dependency_mybatis-plus-extension.groupId have the same groupId value com.baomidou, indicating that they are part of the same Maven dependency ecosystem. Due to this value-equality, it can be inferred that these configuration options depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.properties.maven.compiler.source and project.properties.maven.compiler.target depend on each other due to value-equality. This means that if the source option is set to a specific Java version (e.g., 17), it is likely that the target option will also be set to the same version to ensure compatibility between the compiled code and the JVM. However, this dependency is not absolute, as different versions can be used for compilation and JVM compatibility.","Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

About the default values for `source` and `target`, note that [since the
`3.8.0` of the maven compiler, the default values have changed from `1.5` to
`1.6`](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12341563).

# `maven-compiler-plugin` with `release` instead of `source` & `target`

  3. The maven-compiler-plugin `3.6` and later versions provide a new way :

org.apache.maven.plugins maven-compiler-plugin 3.8.0 9

You could also declare just :

    
    
    <properties>
        <maven.compiler.release>9</maven.compiler.release>
    </properties>
    

But at this time it will not work as the `maven-compiler-plugin` default
version you use doesn't rely on a recent enough version.

The Maven `release` argument conveys `release` : a [new JVM standard option
](https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627) that we could
pass from Java 9 :

> Compiles against the public, supported and documented API for a specific VM
> version.

This way provides a standard way to specify the same version for the `source`,
the `target` and the `bootstrap` JVM options.  
Note that specifying the `bootstrap` is a good practice for cross compilations
and it will not hurt if you don't make cross compilations either.

* * *

**Which is the best way to specify the JDK version?**

The first way (`<java.version>`) is allowed only if you use Spring Boot.

**For Java 8 and below :**

About the two other ways : valuing the
`maven.compiler.source`/`maven.compiler.target` properties **or** using the
`maven-compiler-plugin`, you can use one or the other. It changes nothing in
the facts since finally the two solutions rely on the same properties and the
same mechanism : the maven core compiler plugin.

# `maven-compiler-plugin` with `source` & `target`

  2. Using `maven-compiler-plugin` or `maven.compiler.source`/`maven.compiler.target` properties are equivalent.

That is indeed :

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

is equivalent to :

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

according to the [Maven documentation of the compiler
plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
mojo.html) since the `<source>` and the `<target>` elements in the compiler
configuration use the properties `maven.compiler.source` and
`maven.compiler.target` if they are defined.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: 1.7.  
>  User property is: `maven.compiler.source`.

> [**target**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#target)

> The `-target` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

## Setting the `-source` and `-target` of the Java Compiler

Sometimes when you may need to compile a certain project to a different
version than what you are currently using. The `javac` can accept such command
using `-source` and `-target`. The Compiler Plugin can also be configured to
provide these options during compilation.

For example, if you want to use the Java 8 language features (`-source 1.8`)
and also want the compiled classes to be compatible with JVM 1.8 (`-target
1.8`), you can either add the two following properties, which are the default
property names for the plugin parameters:

    
    
    <project>
      [...]
      <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
      </properties>
      [...]
    </project>

or configure the plugin directly:

    
    
    <project>
      [...]
      <build>
        [...]
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.13.0</version>
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
            </configuration>
          </plugin>
        </plugins>
        [...]
      </build>
      [...]
    </project>

**Note:** Merely setting the `target` option does not guarantee that your code
actually runs on a JRE with the specified version. The pitfall is unintended
usage of APIs that only exist in later JREs which would make your code fail at
runtime with a linkage error.

Is it 10 or 1.10 ?

- [MasterJoe](/users/6648326/masterjoe ""2,245 reputation"")

Commented Mar 9, 2020 at 17:26

  * 2

@MasterJoe2 from java 9 and above versions you need to write the version
number as it is ( <version> 10 </version>), and for the below versions, you
have to add 1. in front of the version (<version>1.5</version>)

- [Ikbel](/users/10275943/ikbel ""2,073 reputation"")

Commented Jun 8, 2020 at 10:37

Add a comment  | 

3

[](/posts/66963233/timeline ""Show activity on this post."")

The below steps work for me like charm! so thought to share with everyone.

These are the lines i added in the pom.xml file to work with a basic project.
I am using Java 12 (you can replace yours 11, 10, 1.8 etc).

    
    
    <properties>
        <maven.compiler.source>12</maven.compiler.source>
        <maven.compiler.target>12</maven.compiler.target>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>12</release>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

After changing the pom file please reload your project so that IDE can
download/fetch the plugin to the project. (For IntelijIDEA: Right-click on
pom.xml -> Go to maven -> Reload project).

please make sure to configure the desire version in your IDE as well.

[Share](/a/66963233 ""Short permalink to this answer"")

[Improve this answer](/posts/66963233/edit)

Follow

answered Apr 6, 2021 at 5:43

[!

I'm not very experienced with Maven and while experimenting with multi-module
project I started wondering how can I specify Java version for all my child
modules in parent Maven pom. Until today I was using just:

    
    
    <properties>
        <java.version>1.8</java.version>
    </properties>
    

...but when researching I found that you can also specify Java version in
Maven compiler plugin, like that:

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

And then wrap this into plugin management tag to enable child poms usage of
this. So the first question is this:

**What are the differences beetwen setting Java version in properties and in
Maven compiler plugin?**

I couldn't find clear answer but in process of researching I found that you
can also specify Java version in this way:

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

...which suggest that compiler plugin is there even if I don't explicit
declare it. Running `mvn package` outputs with

    
    
    maven-compiler-plugin:3.1:compile (default-compile) @ testproj ---
    

...and some other plugins that I didn't declare.

**So are those plugins default, hidden part of Maven pom? Are there any
differences between setting source/target in properties and in Maven plugin
configuration element?**

Some other questions are - which way should be used (and when if they are not
equal)? Which one is best for multi-module project and what happens if Java
version specified in pom is different than version pointed in `JAVA_HOME`?",pig,project.properties.maven.compiler.source,VERSION_NUMBER,17,maven,pom.xml,project.properties.maven.compiler.target,VERSION_NUMBER,17,maven,pom.xml,Version Numbers,JAVA Version,"{
    ""plan"": ""To determine the dependency between project.properties.maven.compiler.source and project.properties.maven.compiler.target, analyze their usage in Maven pom files. Since both options specify Java version for compilation, they are related but not identical. Setting one does not automatically set the other. However, it is recommended to keep them consistent to avoid potential compatibility issues."",
    ""rationale"": ""The 'project.properties.maven.compiler.source' and 'project.properties.maven.compiler.target' in a Maven project define the Java version used for compilation. While they are related, setting one does not imply the other. Nevertheless, maintaining consistency between these options is crucial to ensure compatibility across modules. Therefore, a dependency based on value equality exists."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The rationale behind this evaluation is that both POM files have the same value for project.modelVersion, which suggests that they might be part of the same Maven project or share a common parent POM. However, without more information about the project structure and dependencies, we cannot conclude a direct dependency between these two configuration options.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",pig,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-core/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-feign/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and context. Since both options have the same value 'modelVersion:4.0.0' in different POM files, we can conclude that they depend on each other due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required for all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creating a dependency based on value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,"The configuration options do not depend on each other because they are from different projects (pig-common-bom and pig-common-log) and have different artifact IDs. The issue is related to a missing artifact in the Maven repository, which is unrelated to the configuration options.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/36766693/dependencies-vs-
dependenciesmanagement)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/46220108 ""Question score \(upvotes - downvotes\)"") [How Maven looks
for dependencies](/questions/46220108/how-maven-looks-for-dependencies)

[ 0 ](/q/60994565 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency management tag in pom.xml?](/questions/60994565/what-is-
the-purpose-of-dependency-management-tag-in-pom-xml)

[ 0 ](/q/63437884 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency maven-model?](/questions/63437884/what-is-the-purpose-
of-dependency-maven-model)

[ 0 ](/q/65819063 ""Question score \(upvotes - downvotes\)"") [What's the
difference between the maven-dependency-plugin and
dependencyManagement](/questions/65819063/whats-the-difference-between-the-
maven-dependency-plugin-and-dependencymanageme)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Domestic Air Travel within the US with Limited Term Driver's License and no passport, for non-resident aliens? ](https://travel.stackexchange.com/questions/190223/domestic-air-travel-within-the-us-with-limited-term-drivers-license-and-no-pass)
  * [ When Trump ex-rivals, who previously gave Trump terrible comments, now turn to praising him, what benefits could they gain? ](https://politics.stackexchange.com/questions/88373/when-trump-ex-rivals-who-previously-gave-trump-terrible-comments-now-turn-to-p)
  * [ Mutual Life Insurance Company of New York -- What is it now? How can I reach them?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",pig,project.dependencyManagement.dependencies.dependency_pig-common-datasource.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-log/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""To resolve the issue, first check if the artifact 'spring-cloud-starter-openfeign' with version '3.0.3-SNAPSHOT' is available in the Maven repository. If not, try to update the Maven repository or use a different version of the artifact. Then, verify that the dependency is correctly declared in the pom.xml file and that there are no typos or incorrect namespace declarations."",
    ""rationale"": ""The configuration options do not depend on each other due to value-equality because they are from different projects and modules. The issue is related to the unavailability of the artifact 'spring-cloud-starter-openfeign' with version '3.0.3-SNAPSHOT' in the Maven repository."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this plan is that if the same groupId (com.baomidou) is used in both pom.xml files, it implies that the dependencies are related and might be dependent on each other. This is because Maven uses the groupId to identify unique artifacts, so if the same groupId is used, it suggests a connection between the dependencies.","Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

](/questions/36766693/dependencies-vs-
dependenciesmanagement)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/46220108 ""Question score \(upvotes - downvotes\)"") [How Maven looks
for dependencies](/questions/46220108/how-maven-looks-for-dependencies)

[ 0 ](/q/60994565 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency management tag in pom.xml?](/questions/60994565/what-is-
the-purpose-of-dependency-management-tag-in-pom-xml)

[ 0 ](/q/63437884 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency maven-model?](/questions/63437884/what-is-the-purpose-
of-dependency-maven-model)

[ 0 ](/q/65819063 ""Question score \(upvotes - downvotes\)"") [What's the
difference between the maven-dependency-plugin and
dependencyManagement](/questions/65819063/whats-the-difference-between-the-
maven-dependency-plugin-and-dependencymanageme)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Welch t-test p-values are poorly calibrated for N=2 samples ](https://stats.stackexchange.com/questions/651279/welch-t-test-p-values-are-poorly-calibrated-for-n-2-samples)
  * [ Is increasing Average Product(AP) always implying increasing Marginal Product(MP) in microeconomics? ](https://economics.stackexchange.com/questions/58818/is-increasing-average-productap-always-implying-increasing-marginal-productmp)
  * [ Is the 't' in 'witch' considered a silent t? ](https://english.stackexchange.com/questions/624325/is-the-t-in-witch-considered-a-silent-t)
  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines?

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",pig,project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId,NAME,com.baomidou,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_dynamic-datasource-spring-boot3-starter.groupId,NAME,com.baomidou,maven,pig-common/pig-common-datasource/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId and project.dependencies.dependency_dynamic-datasource-spring-boot3-starter.groupId.\n2. Analyze their values: com.baomidou in both cases.\n3. Evaluate whether they depend on each other due to value-equality."",
    ""rationale"": ""Both configuration options have the same groupId value, which indicates that they are part of the same ecosystem and might be related. However, without further analysis of the project structure and dependencies, it cannot be concluded that one depends on the other solely based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Context Uilization and Retrieval,llama3:70b,config2,6.0,FN,True,"The value equality of project.modelVersion in both POM files does not necessarily imply a direct dependency between them. Maven projects can have multiple modules with the same model version, and each module can have its own POM file. Without more context, it is unclear whether pig-common-feign and pig-common-security are related modules or separate projects.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",pig,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-feign/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-security/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and context. Since both options have the same value 'modelVersion:4.0.0' and are of type VERSION_NUMBER, we can conclude that they depend on each other due to value equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,"The configuration options project.dependencies.dependency_pig-common-core.groupId with value com.pig4cloud in pig-common/pig-common-xss/pom.xml and project.dependencies.dependency_pig-common-log.groupId with value com.pig4cloud in pig-visual/pig-codegen/pom.xml have the same groupId value. This suggests that they might be related, but it does not necessarily imply a direct dependency between them.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-xss/pom.xml,project.dependencies.dependency_pig-common-log.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-xss/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml.\n2. Check if both options have the same value, which is com.pig4cloud.\n3. Evaluate whether the options depend on each other due to value-equality."",
    ""rationale"": ""Both configuration options specify the same groupId 'com.pig4cloud', which implies a dependency between them due to value-equality. This means that if one option changes, the other will also be affected."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-quartz/Dockerfile of technology docker depends on configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-monitor/Dockerfile of technology docker or vice versa.

{
    ""rationale"": ""The configuration option FROM in pig-visual/pig-quartz/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and build its respective Docker image. Therefore, there cannot be a value-equality dependency between options from different Dockerfiles."",
    ""isDependency"": false
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Exclusive Dependencies,llama3:70b,config2,8.0,FP,False,"The configuration options in both Dockerfiles have the same value 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis', which suggests that they are referencing the same base image from the same registry. This value-equality may imply a dependency between the two configurations, as changes to the base image could affect both pig-boot and pig-visual/pig-monitor.","cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8-extended-ga-anolis
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8.12.13-extended-ga-anolis
    # 8.12.13-standard-ga-centos
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8-standard-ga-centos
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8.12.13-standard-ga-centos
    

# Run in command line

Just like other images

    
    
    $ sudo docker run -v $PWD:$PWD -it --rm registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.4.4-GA_alpine_x86_64_8u262-b10 /bin/sh
    

#  `FROM` as base image

Just change the `FROM` line like below:

    
    
    FROM dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8.12.13-extended-ga-centos
    # balabala.
    

# Get JDK from image

    
    
    COPY --from=dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8.12.13-extended-ga-centos /opt/java/openjdk /opt
    

Alibaba Dragonwell

###  Toggle table of contents Pages 23

  * Loading

[Home](/dragonwell-project/dragonwell8/wiki)

  * Loading

[Alibaba Dragonwell Support](/dragonwell-project/dragonwell8/wiki/Alibaba-
Dragonwell-Support)

  * Loading

[Alibaba Dragonwell8 Actions Support](/dragonwell-
project/dragonwell8/wiki/Alibaba-Dragonwell8-Actions-Support)

  * Loading

[Alibaba Dragonwell8 Extended Edition Release Notes](/dragonwell-
project/dragonwell8/wiki/Alibaba-Dragonwell8-Extended-Edition-Release-Notes)

  * Loading

[Alibaba Dragonwell8

You can obtained
images after 8.12.13 by yourself according to the rules.

    
    
    ${DRAGONWELL_VERSION}-${EDITION}-${OPT}-${OS}(-slim)?
    

  * DOCKER REPOSITORY: dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell or registry.hub.docker.com/alibabadragonwell/dragonwell
  * DRAGONWELL_VERSION: such as 8.12.13, you can also write the latest version number 8 which will point to the latest version.
  * EDITION: standard/extended
  * OPT: ga\d+
  * OS: anolis/centos/ubuntu/alpine
  * slim: the image whose tag has -slim postfix is specially trimmed for smaller image size, and its functionality may be incomplete for your application

# Current supported platforms

Dragonwell | OS | Architecture | Edition  
---|---|---|---  
8 | centos | amd64,arm64 | extended/standard  
8 | ubuntu | amd64,arm64 | extended/standard  
8 | anolis | amd64,arm64 | extended/standard  
  
# List of Dragonwell images

<https://hub.docker.com/r/alibabadragonwell/dragonwell/tags>

# List of Dragonwell images before 8.12.13

Below are Docker images published on Aliyun and DockerHub. You may [raise a
Dragonwell bug](https://github.com/alibaba/dragonwell8/issues) to ask for an
image of your OS/arch.  
The images listed below are images before 8.12.13, which will be obtained by
yourself in the future according to the rules.

Image:Tag | arch | OS | slim?  
---|---|---|---  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell:dragonwell-standard-8.12.13_jdk8u345-ga_aarch64_slim | aarch64 | centos | Yes  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell:dragonwell-standard-8.12.13_jdk8u345-ga_x86_64_slim | x86_64 | centos | Yes  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell:dragonwell-standard-8.

2.2-GA_alpine_x86_64_8u232-b82 | x86_64 | alpine | No  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.2.2-GA_alpine_x86_64_8u232-b82_slim | x86_64 | alpine | Yes  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.1.1-GA_alpine_x86_64_8u222-b67 | x86_64 | alpine | No  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.1.1-GA_alpine_x86_64_8u222-b67_slim | x86_64 | alpine | Yes  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.0.0-GA_alpine_x86_64_8u212-b04 | x86_64 | alpine | No  
registry.cn-hangzhou.aliyuncs.com/dragonwell/dragonwell8:8.0.0-GA_alpine_x86_64_8u212-b04_slim | x86_64 | alpine | Yes  
  
> The image whose tag has `_slim` postfix is specially trimmed for smaller
> image size, and its functionality may be incomplete for your application.

# Dockerfile of image

<https://github.com/dragonwell-releng/dragonwell-containers>

# Pull the image

For example(if the current latest version is 8.12.13):

    
    
    # 8.12.13-extended-ga-anolis
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8-anolis
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.com/dragonwell/dragonwell:8-extended-ga-anolis
    docker pull dragonwell-registry.cn-hangzhou.cr.aliyuncs.

[ __Document Center](/help/en)



All Products

__

Search

  * [Document Center](/help/en ""Document Center"")
  * [Container Registry](/help/en/acr/ ""Container Registry"")
  * [Getting Started](/help/en/acr/getting-started/ ""Getting Started"")
  * [Basic operations on Docker](/help/en/acr/getting-started/basic-operations-on-docker ""Basic operations on Docker"")

all-products-head

This Product __

  * This Product
  * All Products

__

Container Registry:Basic operations on Docker __

[ __Document Center](/help/en)

# Container Registry:Basic operations on Docker

Last Updated:Feb 26, 2024

This topic describes the three most common operations on Docker, namely,
docker login, docker pull, and docker push. This topic also describes how to
log on to a Container Registry Enterprise Edition instance. You can better use
Container Registry after you get familiar with basic operations on Docker
images.

## Background information

Before you use Container Registry, you must install Docker. For more
information about how to install Docker, see the following topics:

  * [CentOS help](https://docs.docker.com/engine/install/centos/)

  * [Ubuntu help](https://docs.docker.com/engine/install/ubuntu/)

  * [Debian help](https://docs.docker.com/engine/install/debian/)

  * [Fedora help](https://docs.docker.com/engine/install/fedora/)

## docker login

The following section provides an example on how to log on to a Container
Registry Enterprise Edition instance which is located in the China (Hangzhou)
region.

  1. Specify the domain name of the Container Registry Enterprise Edition instance and enter your username and logon password. 

After you log on to the Container Registry Enterprise Edition instance, `Login
Succeeded` is displayed.

    
        docker login <Name of the Container Registry Enterprise Edition instance>-registry.cn-hangzhou.cr.aliyuncs.com
    Username: ****@test.com
    Password:
    Login Succeeded

 __

**Note**

     * You can obtain the domain name of the Container Registry Enterprise Edition instance on the **Access Control** page. 

     * The logon password is the password that you set in the [Container Registry console](https://cr.console.aliyun.com) and is not your Alibaba Cloud account password.

build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring-boot-admin.version>3.3.2</spring-boot-admin.version>
        <spring.authorization.version>1.3.1</spring.authorization.version>
        <screw.version>0.0.3</screw.version>
        <captcha.version>2.2.3</captcha.version>
        <aws.version>1.12.675</aws.version>
        <velocity.version>2.3</velocity.version>
        <velocity.tool.version>3.1</velocity.tool.version>
        <configuration.version>1.10</configuration.version>
        <jasypt.version>3.0.5</jasypt.version>
        <jaxb.version>4.0.5</jaxb.version>
        <knife4j.version>3.0.5</knife4j.version>
        <swagger.fox.version>3.0.0</swagger.fox.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <docker.plugin.version>0.44.0</docker.plugin.version>
        <docker.host>http://192.168.0.100:2375</docker.host>
        <docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
        <docker.namespace>pig4cloud</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
        <git.commit.plugin>9.0.1</git.commit.plugin>
        <spring.checkstyle.plugin>0.0.41</spring.checkstyle.plugin>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.",pig,FROM,UNKNOWN,registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis,docker,pig-boot/Dockerfile,FROM,UNKNOWN,registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis,docker,pig-visual/pig-monitor/Dockerfile,Independent Components,Different Dockerfiles,"{
    ""plan"": ""1. Identify the configuration options: FROM of type UNKNOWN with values registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-boot/Dockerfile and pig-visual/pig-monitor/Dockerfile. 2. Check if both Dockerfiles use the same base image. 3. Evaluate whether this implies a dependency between them."",
    ""rationale"": ""The configuration option FROM in pig-boot/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and builds its respective Docker image."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-quartz/Dockerfile of technology docker depends on configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-monitor/Dockerfile of technology docker or vice versa.

{
    ""rationale"": ""The configuration option FROM in pig-visual/pig-quartz/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and build its respective Docker image. Therefore, there cannot be a value-equality dependency between options from different Dockerfiles."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Inheritance and Overrides,llama3:70b,config2,7.0,FN,True,"The configuration options project.dependencies.dependency_pig-common-core.groupId with value com.pig4cloud in pig-common/pig-common-feign/pom.xml and project.dependencies.dependency_pig-common-log.groupId with value com.pig4cloud in pig-visual/pig-codegen/pom.xml do not directly depend on each other. However, since they share the same groupId 'com.pig4cloud', it is possible that there are transitive dependencies or common parent POM files that could create a dependency between them.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

[Visit chat](https://chat.stackoverflow.com/)

#### Linked

[ 1079 ](/q/2619598 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in
Maven](/questions/2619598/differences-between-dependencymanagement-and-
dependencies-in-maven?noredirect=1)

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.version is missing even though the dependency is
already declared in its parent's pom file's dependency management
section](/questions/12900525/dependencies-dependency-version-is-missing-even-
though-the-dependency-is-already?noredirect=1)

[ 13 ](/q/2389602 ""Question score \(upvotes - downvotes\)"") [Maven2 cannot
find parent from relative path](/questions/2389602/maven2-cannot-find-parent-
from-relative-path?noredirect=1)

[ 0 ](/q/68290415 ""Question score \(upvotes - downvotes\)"") [Quarkus
project](/questions/68290415/quarkus-project?noredirect=1)

#### Related

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-feign/pom.xml,project.dependencies.dependency_pig-common-log.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-feign/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml.\n2. Check if both options have the same value, which is com.pig4cloud.\n3. Evaluate whether a dependency exists due to value-equality."",
    ""rationale"": ""Both configuration options specify the same groupId 'com.pig4cloud', which implies that they depend on each other due to value-equality. This means that if one option changes its groupId, the other option would also need to change accordingly to maintain consistency."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-quartz/Dockerfile of technology docker depends on configuration option FROM of type UNKNOWN with value registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis in pig-visual/pig-monitor/Dockerfile of technology docker or vice versa.

{
    ""rationale"": ""The configuration option FROM in pig-visual/pig-quartz/Dockerfile and pig-visual/pig-monitor/Dockerfile both specify the same base image 'registry.cn-hangzhou.aliyuncs.com/dockerhub_mirror/java:21-anolis'. Although both Dockerfiles use the same base image, this does not imply a dependency between them, since each Dockerfile is independent and build its respective Docker image. Therefore, there cannot be a value-equality dependency between options from different Dockerfiles."",
    ""isDependency"": false
}","Pig is a microservice developed with modern and popular technologies, such as Spring Boot, Spring Cloud, Maven, MySQL, Docker, and Docker Compose. 

In the pig project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project. 
However, in pig, each module specifies its own version, which overrides the inherited version from the parent.

The project structure of the first two levels of pig is as follows:

pig/
├── db/
│   ├── Dockerfile
│   ├── pig.sql
│   └── pig_config.sql
├── docker-compose.yml
├── pig-auth/ # Authorization service provider
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-boot/ # The launcher for standalone mode
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-common/ # Common system modules encompassing several sub-modules
│   ├── pig-common-bom/
│   ├── pig-common-core/
│   ├── pig-common-datasource/
│   ├── pig-common-feign/
│   ├── pig-common-log/
│   ├── pig-common-mybatis/
│   ├── pig-common-oss/
│   ├── pig-common-seata/
│   ├── pig-common-security/
│   ├── pig-common-swagger/
│   ├── pig-common-xss/
│   └── pom.xml
├── pig-gateway/ # Spring Cloud Gateway for API gateway management
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-register/ # Nacos Server for service registration and discovery
│   ├── Dockerfile
│   ├── pom.xml
│   └── src/
├── pig-upms/ # General user and permission management module with two sub-components
│   ├── pig-upms-api/
│   ├── pig-upms-biz/
│   └── pom.xml
├── pig-visual/ # Modules for visualization and monitoring purposes
│   ├── pig-codegen/
│   ├── pig-monitor/
│   ├── pig-quartz/
│   └── pom.xml
├── pom.xml
└── README.md"
Configuration Consistency,llama3:70b,config2,8.0,FN,True,"The configuration options `project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId` and `project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId` both have the same value `jacoco-maven-plugin`. This suggests that they might be related, but it is not a direct dependency. The plugins are used in different profiles (`coverage` and `travis`) and builds, which implies that they can be configured independently.","Specify `reportSets`
explicitly to avoid this:

    
    
    <project>
      <reporting>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <reportSets>
              <reportSet>
                <reports>
                  <!-- select non-aggregate reports -->
                  <report>report</report>
                </reports>
              </reportSet>
            </reportSets>
          </plugin>
        </plugins>
      </reporting>
    </project>
    

## Goals

The JaCoCo Maven plug-in defines the following goals:

  * [help](help-mojo.html)
  * [prepare-agent](prepare-agent-mojo.html)
  * [prepare-agent-integration](prepare-agent-integration-mojo.html)
  * [merge](merge-mojo.html)
  * [report](report-mojo.html)
  * [report-integration](report-integration-mojo.html)
  * [report-aggregate](report-aggregate-mojo.html)
  * [check](check-mojo.html)
  * [dump](dump-mojo.html)
  * [instrument](instrument-mojo.html)
  * [restore-instrumented-classes](restore-instrumented-classes-mojo.html)

[JaCoCo](http://www.jacoco.org/jacoco) 0.8.13.202407140452
[Copyright](license.html) (C) 2009, 2024 Mountainminds GmbH & Co. KG and
Contributors

[JaCoCo](../index.html) > [Documentation](index.html) > Maven Plug-in

# Maven Plug-in

The JaCoCo [Maven](http://maven.apache.org/) plug-in provides the JaCoCo
runtime agent to your tests and allows basic report creation.

If you want to have line number information included in the coverage reports
or you want source code highlighting the class files of the test target must
be compiled with debug information.

When using the `maven-surefire-plugin` or `maven-failsafe-plugin` you **must
not** use a [ `forkCount`](http://maven.apache.org/surefire/maven-surefire-
plugin/test-mojo.html#forkCount) of `0` or set the [
`forkMode`](http://maven.apache.org/surefire/maven-surefire-plugin/test-
mojo.html#forkMode) to `never` as this would prevent the execution of the
tests with the `javaagent` set and no coverage would be recorded.

## Example

  * The JaCoCo distribution contains a simple example how code coverage can be added to a Maven project.
  * This [POM file](examples/build/pom.xml) for a JAR project runs JUnit tests under code coverage and creates a coverage report (`target/site/jacoco/index.html`). 
  * This [POM file](examples/build/pom-it.xml) for a JAR project runs unit tests and integration tests under code coverage and creates two coverage reports, one for unit tests ( `target/site/jacoco/index.html`) and one for integration tests ( `target/site/jacoco-it/index.html`). 
  * The complete example is located in the `./doc/examples/build` folder of the distribution. 

## Prerequisites

The JaCoCo Maven plug-in requires

  * Maven 3.0 or higher and
  * Java 1.8 or higher for the Maven runtime, Java 1.5 or higher for the test executor.

## Usage

The Maven plug-in can be included in your build with the following
declaration. Please check
[here](http://search.maven.org/#search|ga|1|g%3Aorg.jacoco%20a%3Ajacoco-maven-
plugin) for the latest release version in the repository.

1.1</javax.activation.version>
		<javax.mail.version>1.6.2</javax.mail.version>
		<jaxb.version>2.3.1</jaxb.version>
		<junit.version>5.9.2</junit.version>
		<nacos-discovery-api.version>1.4.0</nacos-discovery-api.version>
		<!-- database driver -->
		<mysql-connector-j.version>8.0.32</mysql-connector-j.version>
		<postgre.version>42.7.2</postgre.version>
		<!-- Plugins Version sort by alphabet -->
		<maven-assembly-plugin.version>3.3.0</maven-assembly-plugin.version>
		<maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-jacoco-plugin.version>0.8.8</maven-jacoco-plugin.version>
		<maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.4.0</maven-javadoc-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-source-plugin.version>3.2.1</maven-source-plugin.version>
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.

12</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.3</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                        <encoding>UTF-8</encoding>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                        <format>xml</format>
                        <maxmem>256m</maxmem>
                        <aggregate>true</aggregate>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.eluder.coveralls</groupId>
                    <artifactId>coveralls-maven-plugin</artifactId>
                    <version>4.1.0</version>
                    <configuration>
                        <sourceEncoding>UTF-8</sourceEncoding>
                        <repoToken>${env.coveralls_repo_token}</repoToken>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5</version>
                    <configuration>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <useReleaseProfile>true</useReleaseProfile>
                        <releaseProfiles>release</releaseProfiles>
                        <goals>deploy</goals>
                    </configuration>
                </plugin>
    
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.5</version>
                    <configuration>
                        <archive>
                            <addMavenDescriptor>false</addMavenDescriptor>
                            <manifest>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>        
            </plugins>
        </build>
    </project>
    

AS you can see, I am not using the `maven-deploy-plugin`. Do you know what the
warning means?

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.",spring-boot-admin,project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId,NAME,jacoco-maven-plugin,maven,pom.xml,project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId,NAME,jacoco-maven-plugin,maven,spring-boot-admin-samples/pom.xml,Libraries,Maven Plugin,"{
    ""plan"": ""1. Identify the Maven project structure and analyze the pom.xml files involved.\n2. Check if both configuration options have the same artifactId value 'jacoco-maven-plugin'.\n3. Evaluate if the two profiles (profile_coverage and profile_travis) are related or used together in the build process.\n4. Determine if the artifactId value is unique across all Maven projects."",
    ""rationale"": ""The configuration options project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId and project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId both have the same value 'jacoco-maven-plugin'. This suggests that they are related and might be used together in the build process. Since they share the same artifactId, it is likely that they depend on each other."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,6.0,FN,True,"The configuration options have the same value 'org.springframework.boot' for the groupId, which suggests that they might be related. However, this alone does not guarantee a dependency between them. Further analysis of the project structures and dependencies is required to confirm or deny the existence of a dependency.","If you wish to override the Spring Security
version, you can do so by providing a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring-security.version>6.3.1</spring-security.version>
    </properties>

Since Spring Security makes breaking changes only in major releases, you can
safely use a newer version of Spring Security with Spring Boot. However, at
times, you may need to update the version of Spring Framework as well. You can
do so by adding a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring.version>6.1.9</spring.version>
    </properties>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

### Maven Without Spring Boot

When you use Spring Security without Spring Boot, the preferred way is to use
Spring Security's BOM to ensure that a consistent version of Spring Security
is used throughout the entire project. The following example shows how to do
so:

pom.xml

    
    
    <dependencyManagement>
    	<dependencies>
    		<!-- ... other dependency elements ... -->
    		<dependency>
    			<groupId>org.springframework.security</groupId>
    			<artifactId>spring-security-bom</artifactId>
    			<version>{spring-security-version}</version>
    			<type>pom</type>
    			<scope>import</scope>
    		</dependency>
    	</dependencies>
    </dependencyManagement>

A minimal Spring Security Maven set of dependencies typically looks like the
following example:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-web</artifactId>
    	</dependency>
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-config</artifactId>
    	</dependency>
    </dependencies>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

com/tags/spring-security)

  * [Spring Security](index.html)
  * [Getting Spring Security](getting-spring-security.html)

# Getting Spring Security

This section describes how to get the Spring Security binaries. See [Source
Code](community.html#community-source) for how to obtain the source code.

## Release Numbering

Spring Security versions are formatted as MAJOR.MINOR.PATCH such that:

  * MAJOR versions may contain breaking changes. Typically, these are done to provide improved security to match modern security practices.

  * MINOR versions contain enhancements but are considered passive updates.

  * PATCH level should be perfectly compatible, forwards and backwards, with the possible exception of changes that fix bugs.

## Usage with Maven

As most open source projects, Spring Security deploys its dependencies as
Maven artifacts. The topics in this section describe how to consume Spring
Security when using Maven.

### Spring Boot with Maven

Spring Boot provides a `spring-boot-starter-security` starter that aggregates
Spring Security-related dependencies. The simplest and preferred way to use
the starter is to use [Spring
Initializr](https://docs.spring.io/initializr/docs/current/reference/html/) by
using an IDE integration in
([Eclipse](https://joshlong.com/jl/blogPost/tech_tip_geting_started_with_spring_boot.html)
or [IntelliJ](https://www.jetbrains.com/help/idea/spring-
boot.html#d1489567e2), [NetBeans](https://github.com/AlexFalappa/nb-
springboot/wiki/Quick-Tour)) or through
[start.spring.io](https://start.spring.io). Alternatively, you can manually
add the starter, as the following example shows:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-security</artifactId>
    	</dependency>
    </dependencies>

Since Spring Boot provides a Maven BOM to manage dependency versions, you do
not need to specify a version.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

If you wish to override the Spring Security version,
you can do so by providing a Gradle property:

build.gradle

    
    
    ext['spring-security.version']='6.3.1'

Since Spring Security makes breaking changes only in major releases, you can
safely use a newer version of Spring Security with Spring Boot. However, at
times, you may need to update the version of Spring Framework as well. You can
do so by adding a Gradle property:

build.gradle

    
    
    ext['spring.version']='6.1.9'

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

### Gradle Without Spring Boot

When you use Spring Security without Spring Boot, the preferred way is to use
Spring Security's BOM to ensure a consistent version of Spring Security is
used throughout the entire project. You can do so by using the [Dependency
Management Plugin](https://github.com/spring-gradle-plugins/dependency-
management-plugin):

build.gradle

    
    
    plugins {
    	id ""io.spring.dependency-management"" version ""1.0.6.RELEASE""
    }
    
    dependencyManagement {
    	imports {
    		mavenBom 'org.springframework.security:spring-security-bom:6.3.1'
    	}
    }

A minimal Spring Security Maven set of dependencies typically looks like the
following:

build.gradle

    
    
    dependencies {
    	implementation ""org.springframework.security:spring-security-web""
    	implementation ""org.springframework.security:spring-security-config""
    }

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

Spring Security builds against Spring Framework 6.1.9 but should generally
work with any newer version of Spring Framework 5.x. Many users are likely to
run afoul of the fact that Spring Security's transitive dependencies resolve
Spring Framework 6.1.9, which can cause strange classpath problems. The
easiest way to resolve this is to use the `spring-framework-bom` within your
`dependencyManagement` section of your `build.gradle`.

springframework.boot:spring-boot-
dependencies:2.6.1](/questions/70624098/could-not-find-org-springframework-
bootspring-boot-dependencies2-6-1)

[ 4 ](/q/71809001 ""Question score \(upvotes - downvotes\)"") [Gradle cannot
find Spring Boot 3.0.0-M1](/questions/71809001/gradle-cannot-find-spring-
boot-3-0-0-m1)

[ 1 ](/q/73065110 ""Question score \(upvotes - downvotes\)"") [Missing spring-
boot-buildpack-platform](/questions/73065110/missing-spring-boot-buildpack-
platform)

[ 2 ](/q/73448952 ""Question score \(upvotes - downvotes\)"") [Gradle Spring
Boot Dependency Not found Multi Module Project](/questions/73448952/gradle-
spring-boot-dependency-not-found-multi-module-project)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What sort of security does Docusign provide? ](https://security.stackexchange.com/questions/277851/what-sort-of-security-does-docusign-provide)
  * [ Fancyhdr automatic header height ](https://tex.stackexchange.com/questions/722701/fancyhdr-automatic-header-height)
  * [ Why does ""They be naked"" use the base form of ""be""? ](https://ell.stackexchange.com/questions/355031/why-does-they-be-naked-use-the-base-form-of-be)
  * [ Objects proven finiteness yet no algorithm discovered? ](https://mathoverflow.net/questions/475211/objects-proven-finiteness-yet-no-algorithm-discovered)
  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Wikipedia states that the relativistic Doppler effect is the same whether it is the source or the receiver that is stationary. Can this be true?",spring-boot-admin,project.dependencies.dependency_spring-boot-starter-security.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,project.dependencies.dependency_spring-boot-starter-security.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-samples/spring-boot-admin-sample-servlet/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-security.groupId in both pom.xml files.\n2. Compare their values: org.springframework.boot.\n3. Evaluate whether the equality of groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-security.groupId has the same value org.springframework.boot in both pom.xml files, indicating that they are part of the same Spring Boot ecosystem. However, this does not imply a direct dependency between these two configuration options, as they can coexist independently in different modules."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Inferring Dependencies,llama3:70b,config2,8.0,FP,False,"The configuration option project.profiles.profile_nativeTest.dependencies.dependency_junit-platform-launcher.scope in spring-boot-admin-samples/spring-boot-admin-sample-servlet-graalvm/pom.xml has a value of 'test', which is identical to the scope of project.dependencies.dependency_spring-boot-starter-test.scope in spring-boot-admin-server-cloud/pom.xml. This suggests that there may be a dependency between these configuration options, as they both rely on the same testing framework (JUnit) with the same scope.","This is a typical tiered
architecture -- the API call is processed from the _Controller_ to _Service_
to the _Persistence_ layer.

## **3\. Maven Dependencies**

Let's first add our testing dependencies:

            
                        <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <version>3.1.5</version>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <scope>test</scope>
            </dependency>

The [_spring-boot-starter-
test_](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-test) is the primary dependency that contains the majority of
elements required for our tests.

The [H2 DB](https://mvnrepository.com/artifact/com.h2database/h2) is our in-
memory database. It eliminates the need for configuring and starting an actual
database for test purposes.

### 3.1. JUnit 4

Starting with Spring Boot 2.4, JUnit 5’s vintage engine has been removed from
_spring-boot-starter-test_. If we still want to write tests using JUnit 4, we
need to add the following Maven dependency:

            
                        <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.hamcrest</groupId>
                        <artifactId>hamcrest-core</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

## **4\. Integration Testing With _@SpringBootTest_**

As the name suggests, integration tests focus on integrating different layers
of the application. That also means no mocking is involved.

**Ideally, we should keep the integration tests separated from the unit tests
and should not run along with the unit tests.** We can do this by using a
different profile to only run the integration tests. A couple of reasons for
doing this could be that the integration tests are time-consuming and might
need an actual database to execute.

build for
different profiles](/questions/3922191/maven-build-for-different-profiles)

[ 7 ](/q/10022225 ""Question score \(upvotes - downvotes\)"") [Maven Build
different to Dependency Tree](/questions/10022225/maven-build-different-to-
dependency-tree)

[ 7 ](/q/10553458 ""Question score \(upvotes - downvotes\)"") [Change maven
dependency's version by using different maven
profiles](/questions/10553458/change-maven-dependencys-version-by-using-
different-maven-profiles)

[ 0 ](/q/10756483 ""Question score \(upvotes - downvotes\)"") [How to have
different build task and dependency ""on-demand"" with
Maven](/questions/10756483/how-to-have-different-build-task-and-dependency-on-
demand-with-maven)

[ 6 ](/q/13195767 ""Question score \(upvotes - downvotes\)"") [how to make maven
build dependent project](/questions/13195767/how-to-make-maven-build-
dependent-project)

[ 1 ](/q/22166940 ""Question score \(upvotes - downvotes\)"") [Maven Profile in
different dependencies](/questions/22166940/maven-profile-in-different-
dependencies)

[ 1 ](/q/24162265 ""Question score \(upvotes - downvotes\)"") [maven profile
conditional dependency](/questions/24162265/maven-profile-conditional-
dependency)

[ 0 ](/q/27578997 ""Question score \(upvotes - downvotes\)"") [Maven make same
projects with different dependencies](/questions/27578997/maven-make-same-
projects-with-different-dependencies)

[ 2 ](/q/29281905 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include a dependency with a specific build
profile?

](/questions/24855678/how-to-
enforce-the-use-of-exactly-one-out-of-two-maven-profiles?noredirect=1)

[ 5 ](/q/31528033 ""Question score \(upvotes - downvotes\)"") [SonarQube ""Class
Not Found"" during Main AST Scan](/questions/31528033/sonarqube-class-not-
found-during-main-ast-scan?noredirect=1)

[ 8 ](/q/31949027 ""Question score \(upvotes - downvotes\)"") [How to run unit
tests against several versions of a dependency](/questions/31949027/how-to-
run-unit-tests-against-several-versions-of-a-dependency?noredirect=1)

[ 3 ](/q/8232748 ""Question score \(upvotes - downvotes\)"") [Maven: How do I
include a dependency in test phase and exclude it in integration-test
phase?](/questions/8232748/maven-how-do-i-include-a-dependency-in-test-phase-
and-exclude-it-in-integration?noredirect=1)

[ 4 ](/q/54024506 ""Question score \(upvotes - downvotes\)"") [Specifying
version in Maven optional dependency](/questions/54024506/specifying-version-
in-maven-optional-dependency?noredirect=1)

[ 1 ](/q/22047366 ""Question score \(upvotes - downvotes\)"") [Force maven to
fail if two dependencies are included at the same
time](/questions/22047366/force-maven-to-fail-if-two-dependencies-are-
included-at-the-same-time?noredirect=1)

[See more linked questions](/questions/linked/166895)

#### Related

[ 0 ](/q/2183851 ""Question score \(upvotes - downvotes\)"") [maven dependencies
in profiles during release build](/questions/2183851/maven-dependencies-in-
profiles-during-release-build)

[ 3 ](/q/3922191 ""Question score \(upvotes - downvotes\)"") [Maven build for
different profiles](/questions/3922191/maven-build-for-different-profiles)

[ 7 ](/q/10022225 ""Question score \(upvotes - downvotes\)"") [Maven Build
different

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",spring-boot-admin,project.profiles.profile_nativeTest.dependencies.dependency_junit-platform-launcher.scope,UNKNOWN,test,maven,spring-boot-admin-samples/spring-boot-admin-sample-servlet-graalvm/pom.xml,project.dependencies.dependency_spring-boot-starter-test.scope,UNKNOWN,test,maven,spring-boot-admin-server-cloud/pom.xml,Libraries,Dependency Scope,"{
    ""plan"": ""1. Identify the configuration options: project.profiles.profile_nativeTest.dependencies.dependency_junit-platform-launcher.scope and project.dependencies.dependency_spring-boot-starter-test.scope.\n2. Determine their types: both are of type UNKNOWN with value test.\n3. Evaluate if they define a dependency between each other based on their scope values."",
    ""rationale"": ""The configuration option project.profiles.profile_nativeTest.dependencies.dependency_junit-platform-launcher.scope and the option project.dependencies.dependency_spring-boot-starter-test.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', it does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The rationale behind this evaluation is that if both Maven projects have the same configuration option (addResources) with the same value (FALSE), it implies that they are likely to be dependent on each other. This is because the spring-boot-maven-plugin is responsible for building and packaging the application, and the addResources option affects how resources are handled during this process.","The `build-info` goal generates such file
with the coordinates of the project and the build time. It also allows you to
add an arbitrary number of additional properties, as shown in the following
example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<executions>
    					<execution>
    						<goals>
    							<goal>build-info</goal>
    						</goals>
    						<configuration>
    							<additionalProperties>
    								<encoding.source>UTF-8</encoding.source>
    								<encoding.reporting>UTF-8</encoding.reporting>
    								<java.source>${maven.compiler.source}</java.source>
    								<java.target>${maven.compiler.target}</java.target>
    							</additionalProperties>
    						</configuration>
    					</execution>
    				</executions>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will generate a `build-info.properties` at the expected
location with four additional keys. Note that `maven.compiler.source` and
`maven.compiler.target` are expected to be regular properties available in the
project. They will be interpolated as you would expect.

### 9.1. `spring-boot:build-info`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Generate a `build-info.properties` file based the content of the current
`MavenProject`.

#### 9.1.1. Optional parameters

Name | Type | Default  
---|---|---  
additionalProperties | `Map` |   
outputFile | `File` | `${project.build.outputDirectory}/META-INF/build-info.properties`  
time | `String` |   
  
#### 9.1.2. Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.

Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

Name | `additionalProperties`  
---|---  
Type | `java.util.Map`  
Default value |   
User property |   
Since |   
  
##### `outputFile`

The location of the generated build-info.properties.

Name | `outputFile`  
---|---  
Type | `java.io.File`  
Default value | `${project.build.outputDirectory}/META-INF/build-info.properties`  
User property |   
Since |   
  
##### `time`

The value used for the `build.time` property in a form suitable for
`Instant#parse(CharSequence)`. Defaults to `session.request.startTime`. To
disable the `build.time` property entirely, use `'off'`.

Name | `time`  
---|---  
Type | `java.lang.String`  
Default value |   
User property |   
Since | `2.2.0`  
  
## 10\. Help Information

The `help` goal is a standard goal that displays information on the
capabilities of the plugin.

### 10.1. `spring-boot:help`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Display help information on spring-boot-maven-plugin. Call `mvn spring-
boot:help -Ddetail=true -Dgoal=<goal-name>` to display parameter details.

#### 10.1.1. Optional parameters

Name | Type | Default  
---|---|---  
detail | `boolean` | `false`  
goal | `String` |   
indentSize | `int` | `2`  
lineLength | `int` | `80`  
  
#### 10.1.2. Parameter details

##### `detail`

If `true`, display all settable properties for each goal.

Name | `detail`  
---|---  
Type | `boolean`  
Default value | `false`  
User property | `detail`  
Since |   
  
##### `goal`

The name of the goal for which to show help. If unspecified, all goals will be
displayed.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",spring-boot-admin,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.addResources,VERSION_NUMBER,FALSE,maven,spring-boot-admin-samples/spring-boot-admin-sample-war/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.addResources,VERSION_NUMBER,FALSE,maven,spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/pom.xml,Libraries,Maven Plugin,"{
    ""plan"": ""1. Identify the configuration options: project.build.plugins.plugin_spring-boot-maven-plugin.configuration.addResources in both pom.xml files.\n2. Compare their values: FALSE in both cases.\n3. Evaluate whether the value equality implies a dependency between the two configuration options."",
    ""rationale"": ""The configuration option project.build.plugins.plugin_spring-boot-maven-plugin.configuration.addResources has the same value FALSE in both pom.xml files. However, this value equality does not imply a dependency between the two configuration options because they are located in different modules and do not have any inherent relationship."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,8.0,FN,True,"The configuration options management.endpoints.web.path-mapping.health and spring.cloud.consul.discovery.metadata.health-path have the same value (/ping), but they serve different purposes. The former configures the health endpoint for Spring Boot Admin, while the latter specifies the health check path for Consul service discovery. Although they share the same value, it's a coincidence rather than a logical dependency.","html)
        * [Launching Executable Jars](././specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](././specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](././specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](././specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](././appendix/application-properties/index.html)
      * [Auto-configuration Classes](././appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](././appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](././appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](././appendix/test-auto-configuration/index.html)
        * [Test Slices](././appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](././appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](././appendix/dependency-versions/coordinates.html)
        * [Version Properties](././appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-
docs/src/docs/antora/modules/reference/pages/actuator/endpoints.adoc) [ GitHub
Project ](https://github.com/spring-projects/spring-boot ""GitHub"") [ Stack
Overflow ](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](././index.html)
  * [Reference](./index.html)
  * [Production-ready Features](index.html)
  * [Endpoints](endpoints.html)

# Endpoints

Actuator endpoints let you monitor and interact with your application. Spring
Boot includes a number of built-in endpoints and lets you add your own. For
example, the `health` endpoint provides basic application health information.

You can enable or disable each individual endpoint and expose them (make them
remotely accessible) over HTTP or JMX.

|   
`spring.kafka.consumer.isolation-level` | Isolation level for reading messages that have been written transactionally. | `read-uncommitted`  
`spring.kafka.consumer.key-deserializer` | Deserializer class for keys. |   
`spring.kafka.consumer.max-poll-records` | Maximum number of records returned in a single call to poll(). |   
`spring.kafka.consumer.properties.*` | Additional consumer-specific properties used to configure the client. |   
`spring.kafka.consumer.security.protocol` | Security protocol used to communicate with brokers. |   
`spring.kafka.consumer.ssl.bundle` | Name of the SSL bundle to use. |   
`spring.kafka.consumer.ssl.key-password` | Password of the private key in either key store key or key store file. |   
`spring.kafka.consumer.ssl.key-store-certificate-chain` | Certificate chain in PEM format with a list of X.509 certificates. |   
`spring.kafka.consumer.ssl.key-store-key` | Private key in PEM format with PKCS#8 keys. |   
`spring.kafka.consumer.ssl.key-store-location` | Location of the key store file. |   
`spring.kafka.consumer.ssl.key-store-password` | Store password for the key store file. |   
`spring.kafka.consumer.ssl.key-store-type` | Type of the key store. |   
`spring.kafka.consumer.ssl.protocol` | SSL protocol to use. |   
`spring.kafka.consumer.ssl.trust-store-certificates` | Trusted certificates in PEM format with X.509 certificates. |   
`spring.kafka.consumer.ssl.trust-store-location` | Location of the trust store file. |   
`spring.kafka.consumer.ssl.trust-store-password` | Store password for the trust store file. |   
`spring.kafka.consumer.ssl.trust-store-type` | Type of the trust store. |   
`spring.kafka.consumer.value-deserializer` | Deserializer class for values. |   
`spring.kafka.jaas.control-flag` | Control flag for login configuration. | `required`  
`spring.kafka.jaas.enabled` | Whether to enable JAAS configuration. | `false`  
`spring.kafka.jaas.login-module` | Login module. | `com.sun.security.auth.module.Krb5LoginModule`  
`spring.kafka.jaas.options.*` | Additional JAAS options.

[INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  
This is the error I got:
*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration.

Used for server-side logging. |   
`spring.kafka.streams.properties.*` | Additional Kafka properties used to configure the streams. |   
`spring.kafka.streams.replication-factor` | The replication factor for change log topics and repartition topics created by the stream processing application. |   
`spring.kafka.streams.security.protocol` | Security protocol used to communicate with brokers. |   
`spring.kafka.streams.ssl.bundle` | Name of the SSL bundle to use. |   
`spring.kafka.streams.ssl.key-password` | Password of the private key in either key store key or key store file. |   
`spring.kafka.streams.ssl.key-store-certificate-chain` | Certificate chain in PEM format with a list of X.509 certificates. |   
`spring.kafka.streams.ssl.key-store-key` | Private key in PEM format with PKCS#8 keys. |   
`spring.kafka.streams.ssl.key-store-location` | Location of the key store file. |   
`spring.kafka.streams.ssl.key-store-password` | Store password for the key store file. |   
`spring.kafka.streams.ssl.key-store-type` | Type of the key store. |   
`spring.kafka.streams.ssl.protocol` | SSL protocol to use. |   
`spring.kafka.streams.ssl.trust-store-certificates` | Trusted certificates in PEM format with X.509 certificates. |   
`spring.kafka.streams.ssl.trust-store-location` | Location of the trust store file. |   
`spring.kafka.streams.ssl.trust-store-password` | Store password for the trust store file. |   
`spring.kafka.streams.ssl.trust-store-type` | Type of the trust store. |   
`spring.kafka.streams.state-dir` | Directory location for the state store. |   
`spring.kafka.streams.state-store-cache-max-size` | Maximum size of the in-memory state store cache across all threads. |   
`spring.kafka.template.default-topic` | Default topic to which messages are sent. |   
`spring.kafka.template.observation-enabled` | Whether to enable observation. | `false`  
`spring.kafka.template.transaction-id-prefix` | Transaction id prefix, override the transaction id prefix in the producer factory. |   
`spring.pulsar.admin.authentication.param.*` | Authentication parameter(s) as a map of parameter names to parameter values.

/features/json.html)
        * [Task Execution and Scheduling](./features/task-execution-and-scheduling.html)
        * [Development-time services](./features/dev-services.html)
        * [Creating Your Own Auto-configuration](./features/developing-auto-configuration.html)
        * [Kotlin Support](./features/kotlin.html)
        * [SSL](./features/ssl.html)
      * [Web](./web/index.html)
        * [Servlet Web Applications](./web/servlet.html)
        * [Reactive Web Applications](./web/reactive.html)
        * [Graceful Shutdown](./web/graceful-shutdown.html)
        * [Spring Security](./web/spring-security.html)
        * [Spring Session](./web/spring-session.html)
        * [Spring for GraphQL](./web/spring-graphql.html)
        * [Spring HATEOAS](./web/spring-hateoas.html)
      * [Data](./data/index.html)
        * [SQL Databases](./data/sql.html)
        * [Working with NoSQL Technologies](./data/nosql.html)
      * [IO](./io/index.html)
        * [Caching](./io/caching.html)
        * [Hazelcast](./io/hazelcast.html)
        * [Quartz Scheduler](./io/quartz.html)
        * [Sending Email](./io/email.html)
        * [Validation](./io/validation.html)
        * [Calling REST Services](./io/rest-client.html)
        * [Web Services](./io/webservices.html)
        * [Distributed Transactions With JTA](./io/jta.html)
      * [Messaging](./messaging/index.html)
        * [JMS](./messaging/jms.html)
        * [AMQP](./messaging/amqp.html)
        * [Apache Kafka Support](./messaging/kafka.html)
        * [Apache Pulsar Support](./messaging/pulsar.html)
        * [RSocket](./messaging/rsocket.html)
        * [Spring Integration](./messaging/spring-integration.html)
        * [WebSockets](./messaging/websockets.html)
      * [Testing](./testing/index.html)
        * [Test Scope Dependencies](.",spring-boot-admin,management.endpoints.web.path-mapping.health,PATH,/ping,spring,spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/resources/application.yml,spring.cloud.consul.discovery.metadata.health-path,PATH,/ping,spring,spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/resources/application.yml,Others,Health Monitoring,"{
    ""plan"": ""1. Analyze the configuration options: management.endpoints.web.path-mapping.health and spring.cloud.consul.discovery.metadata.health-path.\n2. Check their types (both are PATH) and values (/ping).\n3. Evaluate if the similarity in values indicates a dependency between them."",
    ""rationale"": ""The configuration options management.endpoints.web.path-mapping.health and spring.cloud.consul.discovery.metadata.health-path have the same value '/ping', but they serve different purposes. The first one is related to endpoint mapping, while the second one is related to Consul discovery metadata. Although they share the same value, it's a coincidence and not an indication of a dependency between them."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Inheritance and Overrides,llama3:70b,config2,6.0,FN,True,"The configuration options have the same value '..' which suggests a possible connection between them. However, this value equality alone does not imply a direct dependency between the two options. The Maven project structure and the actual file system would need to be examined further to determine if there is an actual dependency.","For example, if we have a second
module that should inherit the settings from _module1_ , not from the
aggregator, we must name the sibling folder:

[![module2](/wp-content/uploads/2021/09/module2.svg)](/wp-
content/uploads/2021/09/module2.svg)

            
                        <artifactId>module2</artifactId>
            <parent>
                <groupId>com.baeldung.maven-parent-pom-resolution</groupId>
                <artifactId>module1</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <relativePath>../module1/pom.xml</relativePath>
            </parent>

Of course, we should only use relative paths that are available in every
environment (mostly to a path within the same Git repository) to ensure the
portability of our build.

## 4\. Disable Local File Resolution

To skip the local file search and directly search the parent POM in Maven
repositories, we need to explicitly set the _relativePath_ to an empty value:

            
                        <parent>
                <groupId>com.baeldung</groupId>
                <artifactId>external-project</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <relativePath/>
            </parent>

[![external](/wp-content/uploads/2021/09/external.svg)](/wp-
content/uploads/2021/09/external.svg)

This should be a best practice whenever we inherit from external projects like
[Spring Boot](https://robintegg.com/2019/01/20/why-does-spring-initializr-set-
the-parent-pom-relativepath-to-empty.html).

## 5\. IDEs

Interestingly, IntelliJ IDEA (current version: 2021.1.3) comes with a Maven
plugin that differs from external Maven runtimes concerning the Parent POM
resolution. Deviating from [Maven's POM
Schema](http://maven.apache.org/xsd/maven-4.0.0.xsd), it explains the
_relativePath_ tag this way:

> […] Maven looks for the parent pom first in the reactor of currently
> building projects […]

That means, for IDE-internal resolution, the position of the parent POM
doesn't matter as long as the parent project is registered as an IntelliJ
Maven Project.

](/questions/21125358/maven-multi-
module-project-is-relativepath-necessary)

[ 8 ](/q/35608981 ""Question score \(upvotes - downvotes\)"") [Relative Path in
Maven parent definition](/questions/35608981/relative-path-in-maven-parent-
definition)

[ 59 ](/q/36450720 ""Question score \(upvotes - downvotes\)"") [Maven:Non-
resolvable parent POM and 'parent.relativePath' points at wrong local
POM](/questions/36450720/mavennon-resolvable-parent-pom-and-parent-
relativepath-points-at-wrong-local)

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path)

[ 5 ](/q/41540074 ""Question score \(upvotes - downvotes\)"") [Non resolvable
parent POM although relativePath set to existing parent
pom.xml](/questions/41540074/non-resolvable-parent-pom-although-relativepath-
set-to-existing-parent-pom-xml)

[ 4 ](/q/43741817 ""Question score \(upvotes - downvotes\)"") [Maven: Eclipse
not correctly configuring paths in a project with a parent
pom](/questions/43741817/maven-eclipse-not-correctly-configuring-paths-in-a-
project-with-a-parent-pom)

[ 0 ](/q/48808466 ""Question score \(upvotes - downvotes\)"") [Maven Project
Build Error : parent.relativePath points at no local
POM](/questions/48808466/maven-project-build-error-parent-relativepath-points-
at-no-local-pom)

[ 1 ](/q/53869863 ""Question score \(upvotes - downvotes\)"") [Maven insist
using local parent rather than remote WITHOUT relativePath
mentioned](/questions/53869863/maven-insist-using-local-parent-rather-than-
remote-without-relativepath-mentione)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Verbs for to punish ](https://german.stackexchange.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path?noredirect=1)

[ 1 ](/q/39104875 ""Question score \(upvotes - downvotes\)"") [Issue with
dependencies that are present in remote repository](/questions/39104875/issue-
with-dependencies-that-are-present-in-remote-repository?noredirect=1)

[ 0 ](/q/74187763 ""Question score \(upvotes - downvotes\)"")
['parent.relativePath' of imported bill-of materials POM creating warning in
Eclipse](/questions/74187763/parent-relativepath-of-imported-bill-of-
materials-pom-creating-warning-in-ecli?noredirect=1)

[ 0 ](/q/72994324 ""Question score \(upvotes - downvotes\)"") ['mvn clean
install' does not work if it is in bash script](/questions/72994324/mvn-clean-
install-does-not-work-if-it-is-in-bash-script?noredirect=1)

#### Related

[ 13 ](/q/2389602 ""Question score \(upvotes - downvotes\)"") [Maven2 cannot
find parent from relative path](/questions/2389602/maven2-cannot-find-parent-
from-relative-path)

[ 1 ](/q/14261997 ""Question score \(upvotes - downvotes\)"") [Java File Class
Using Relative Path in Windows 7](/questions/14261997/java-file-class-using-
relative-path-in-windows-7)

[ 5 ](/q/21125358 ""Question score \(upvotes - downvotes\)"") [maven multi
module project: is relativepath necessary?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",spring-boot-admin,project.parent_spring-boot-admin-samples.relativePath,PATH,..,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,project.parent_spring-boot-admin-samples.relativePath,PATH,..,maven,spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml,Multi-Maven-Modules,Project Structure,"{
    ""plan"": ""1. Identify the configuration options: project.parent_spring-boot-admin-samples.relativePath of type PATH with value .. in spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml and project.parent_spring-boot-admin-samples.relativePath of type PATH with value .. in spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml. 2. Analyze the values: both have the same value .., which indicates a relative path to the parent directory. 3. Evaluate the dependency: since they share the same value and are part of the same Maven project structure, it is likely that they depend on each other."",
    ""rationale"": ""The configuration options have the same value .., indicating a relative path to the parent directory. This suggests that both modules (spring-boot-admin-sample-eureka and spring-boot-admin-sample-reactive) share the same parent Maven project, which implies a dependency between them."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options management.endpoint.health.show-details with value ALWAYS in both application.yml files are related to the same health endpoint. Since they have the same value, it implies that they might be dependent on each other. This is because the show-details option controls the level of detail shown in the health endpoint response, and having the same value (ALWAYS) means that both configurations will behave similarly.","Controller endpoints provide deeper integration with
Spring's web frameworks but at the expense of portability. The `@Endpoint` and
`@WebEndpoint` annotations should be preferred whenever possible.

### 2.8. Health Information

You can use health information to check the status of your running
application. It is often used by monitoring software to alert someone when a
production system goes down. The information exposed by the `health` endpoint
depends on the `management.endpoint.health.show-details` and
`management.endpoint.health.show-components` properties which can be
configured with one of the following values:

Name | Description  
---|---  
`never` | Details are never shown.  
`when-authorized` | Details are only shown to authorized users. Authorized roles can be configured using `management.endpoint.health.roles`.  
`always` | Details are shown to all users.  
  
The default value is `never`. A user is considered to be authorized when they
are in one or more of the endpoint's roles. If the endpoint has no configured
roles (the default) all authenticated users are considered to be authorized.
The roles can be configured using the `management.endpoint.health.roles`
property.

__ |  If you have secured your application and wish to use `always`, your security configuration must permit access to the health endpoint for both authenticated and unauthenticated users.   
---|---  
  
Health information is collected from the content of a
[`HealthContributorRegistry`](https://github.com/spring-projects/spring-
boot/tree/v2.5.6/spring-boot-project/spring-boot-
actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributorRegistry.java)
(by default all [`HealthContributor`](https://github.com/spring-
projects/spring-boot/tree/v2.5.6/spring-boot-project/spring-boot-
actuator/src/main/java/org/springframework/boot/actuate/health/HealthContributor.java)
instances defined in your `ApplicationContext`). Spring Boot includes a number
of auto-configured `HealthContributors` and you can also write your own.

A `HealthContributor` can either be a `HealthIndicator` or a
`CompositeHealthContributor`. A `HealthIndicator` provides actual health
information, including a `Status`. A `CompositeHealthContributor` provides a
composite of other `HealthContributors`.

|   
`management.endpoint.health.show-components` | When to show components. If not specified the 'show-details' setting will be used. |   
`management.endpoint.health.show-details` | When to show full health details. | `never`  
`management.endpoint.health.status.http-mapping.*` | Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200). |   
`management.endpoint.health.status.order` | Comma-separated list of health statuses in order of severity. | `[DOWN, OUT_OF_SERVICE, UP, UNKNOWN]`  
`management.endpoint.health.validate-group-membership` | Whether to validate health group membership on startup. Validation fails if a group includes or excludes a health contributor that does not exist. | `true`  
`management.endpoint.heapdump.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.heapdump.enabled` | Whether to enable the heapdump endpoint. | `true`  
`management.endpoint.httpexchanges.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.httpexchanges.enabled` | Whether to enable the httpexchanges endpoint. | `true`  
`management.endpoint.info.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.info.enabled` | Whether to enable the info endpoint. | `true`  
`management.endpoint.integrationgraph.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.integrationgraph.enabled` | Whether to enable the integrationgraph endpoint. | `true`  
`management.endpoint.liquibase.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.liquibase.enabled` | Whether to enable the liquibase endpoint. | `true`  
`management.endpoint.logfile.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.logfile.enabled` | Whether to enable the logfile endpoint. | `true`  
`management.endpoint.logfile.external-file` | External Logfile to be accessed.

Similarly, to create a group that excludes the database indicators from the
group and includes all the other indicators, you can define the following:

Properties

    
    
    management.endpoint.health.group.custom.exclude=db

Yaml

    
    
    management:
      endpoint:
        health:
          group:
            custom:
              exclude: ""db""

By default groups will inherit the same `StatusAggregator` and
`HttpCodeStatusMapper` settings as the system health, however, these can also
be defined on a per-group basis. It's also possible to override the `show-
details` and `roles` properties if required:

Properties

    
    
    management.endpoint.health.group.custom.show-details=when-authorized
    management.endpoint.health.group.custom.roles=admin
    management.endpoint.health.group.custom.status.order=fatal,up
    management.endpoint.health.group.custom.status.http-mapping.fatal=500
    management.endpoint.health.group.custom.status.http-mapping.out-of-service=500

Yaml

    
    
    management:
      endpoint:
        health:
          group:
            custom:
              show-details: ""when-authorized""
              roles: ""admin""
              status:
                order: ""fatal,up""
                http-mapping:
                  fatal: 500
                  out-of-service: 500

__ |  You can use `@Qualifier(""groupname"")` if you need to register custom `StatusAggregator` or `HttpCodeStatusMapper` beans for use with the group.   
---|---  
  
#### 2.8.6. DataSource Health

The `DataSource` health indicator shows the health of both standard data
source and routing data source beans. The health of a routing data source
includes the health of each of its target data sources. In the health
endpoint's response, each of a routing data source's targets is named using
its routing key. If you prefer not to include routing data sources in the
indicator's output, set `management.health.db.ignore-routing-data-sources` to
`true`.

### 2.9. Kubernetes Probes

Applications deployed on Kubernetes can provide information about their
internal state with [Container
Probes](https://kubernetes.io/docs/concepts/workloads/pods/pod-
lifecycle/#container-probes).

---|---  
  
### 3.1. Customizing the Management Endpoint Paths

Sometimes, it is useful to customize the prefix for the management endpoints.
For example, your application might already use `/actuator` for another
purpose. You can use the `management.endpoints.web.base-path` property to
change the prefix for your management endpoint, as shown in the following
example:

Properties

    
    
    management.endpoints.web.base-path=/manage

Yaml

    
    
    management:
      endpoints:
        web:
          base-path: ""/manage""

The preceding `application.properties` example changes the endpoint from
`/actuator/{id}` to `/manage/{id}` (for example, `/manage/info`).

__ |  Unless the management port has been configured to expose endpoints by using a different HTTP port, `management.endpoints.web.base-path` is relative to `server.servlet.context-path` (Servlet web applications) or `spring.webflux.base-path` (reactive web applications). If `management.server.port` is configured, `management.endpoints.web.base-path` is relative to `management.server.base-path`.   
---|---  
  
If you want to map endpoints to a different path, you can use the
`management.endpoints.web.path-mapping` property.

The following example remaps `/actuator/health` to `/healthcheck`:

Properties

    
    
    management.endpoints.web.base-path=/
    management.endpoints.web.path-mapping.health=healthcheck

Yaml

    
    
    management:
      endpoints:
        web:
          base-path: ""/""
          path-mapping:
            health: ""healthcheck""

### 3.2. Customizing the Management Server Port

Exposing management endpoints by using the default HTTP port is a sensible
choice for cloud-based deployments. If, however, your application runs inside
your own data center, you may prefer to expose endpoints by using a different
HTTP port.

You can set the `management.server.port` property to change the HTTP port, as
shown in the following example:

Properties

    
    
    management.server.port=8081

Yaml

    
    
    management:
      server:
        port: 8081

__ |  On Cloud Foundry, applications only receive requests on port 8080 for both HTTP and TCP routing, by default.

Dark Theme

# Spring Boot Actuator: Production-ready Features

Table of Contents

[Back to index](index.html)

  * 1\. Enabling Production-ready Features
  * 2\. Endpoints
    * 2.1. Enabling Endpoints
    * 2.2. Exposing Endpoints
    * 2.3. Securing HTTP Endpoints
    * 2.4. Configuring Endpoints
    * 2.5. Hypermedia for Actuator Web Endpoints
    * 2.6. CORS Support
    * 2.7. Implementing Custom Endpoints
      * 2.7.1. Receiving Input
        * Input Type Conversion
      * 2.7.2. Custom Web Endpoints
        * Web Endpoint Request Predicates
        * Path
        * HTTP method
        * Consumes
        * Produces
        * Web Endpoint Response Status
        * Web Endpoint Range Requests
        * Web Endpoint Security
      * 2.7.3. Servlet Endpoints
      * 2.7.4. Controller Endpoints
    * 2.8. Health Information
      * 2.8.1. Auto-configured HealthIndicators
      * 2.8.2. Writing Custom HealthIndicators
      * 2.8.3. Reactive Health Indicators
      * 2.8.4. Auto-configured ReactiveHealthIndicators
      * 2.8.5. Health Groups
      * 2.8.6. DataSource Health
    * 2.9. Kubernetes Probes
      * 2.9.1. Checking External State with Kubernetes Probes
      * 2.9.2. Application Lifecycle and Probe States
    * 2.10. Application Information
      * 2.10.1. Auto-configured InfoContributors
      * 2.10.2. Custom Application Information
      * 2.10.3. Git Commit Information
      * 2.10.4. Build Information
      * 2.10.5. Writing Custom InfoContributors
  * 3\. Monitoring and Management over HTTP
    * 3.1.",spring-boot-admin,management.endpoint.health.show-details,UNKNOWN,ALWAYS,spring,spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/resources/application.yml,management.endpoint.health.show-details,UNKNOWN,ALWAYS,spring,spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/resources/application.yml,Others,Health Monitoring,"{
    ""plan"": ""1. Identify the configuration options: management.endpoint.health.show-details in both spring-boot-admin-samples/spring-boot-admin-sample-hazelcast/src/main/resources/application.yml and spring-boot-admin-samples/spring-boot-admin-sample-reactive/src/main/resources/application.yml.\n2. Determine their types: UNKNOWN.\n3. Evaluate their values: ALWAYS.\n4. Analyze the context: Both options are used in different samples of Spring Boot Admin, which is a framework for managing and monitoring Spring Boot applications.\n5. Decide whether a dependency exists based on value-equality."",
    ""rationale"": ""The configuration options management.endpoint.health.show-details in both application.yml files have the same value ALWAYS, but they are used in different samples of Spring Boot Admin. Each sample is likely configured independently for its specific use case and does not inherently depend on the other. Therefore, there is no dependency between these options based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,6.0,FN,True,"The configuration options have the same value for the artifactId (frontend-maven-plugin), which suggests that they might be related. However, without further analysis of the project structure and plugin usage, it's unclear whether there's a direct dependency between them.","Instead, child projects inherit these values from the
declaration in the parent POM.

Finally, let's run the build again and see the output:

            
                        ....
            [INFO] --- build-helper-maven-plugin:3.3.0:add-resource (add-resource) @ submodule-1 ---
            [INFO]
            [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ submodule-1 ---
            [INFO] Using 'UTF-8' encoding to copy filtered resources.
            
            [INFO] Copying 1 resource to json
            ....

Here, the plugin executes during the build but only in the child project with
the corresponding declaration. As a result, the project output now contains
the additional resources from the specified project location, as expected.

We should note that **only** **the parent POM contains the plugin declaration
and configuration** whilst the child projects just reference this, as needed.

The child projects are free to [modify the inherited configuration](/maven-
plugin-override-parent) if required.

## 5\. Core Plugins

There are some Maven [core plugins](/core-maven-plugins) that are used as part
of the build lifecycle, by default. For example, the _clean_ and _compiler_
plugins don't need to be declared explicitly.

We can, however, explicitly declare and configure these in the
_pluginManagement_ element in the POM. The main difference is that the **core
plugin configuration takes effect automatically without any reference in the
child projects**.

Let's try this out by adding the _compiler_ plugin to the familiar
_pluginManagement_ section:

            
                        <pluginManagement>
                ....
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.12.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
                ....
            </pluginManagement>

Here, we've locked down the plugin version and configured it to use Java 8 to
build the project. However, there is no additional _plugin_ declaration
required in any child projects. The build framework activates this
configuration by default.

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Overview

[Apache Maven](/maven) is a powerful tool that uses
[plugins](/maven#introduction-10) to automate and perform all the build and
reporting tasks in a Java project.

However, there are likely to be several of these plugins used in the build
along with different versions and configurations, especially in a [multi-
module project](/maven-multi-module). This can lead to problems of complex POM
files with redundant or duplicate plugin artifacts as well as configurations
scattered across various child projects.

In this article, we'll see how to use Maven's plugin management mechanism to
handle such issues and effectively maintain plugins across the whole project.

## 2\. Plugin Configuration

Maven has two types of plugins:

        * Build - executed during the build process. Examples include Clean, Install, and Surefire plugins. These should be configured in the _build_ section of the POM.
        * Reporting - executed during site generation to produce various project reports. Examples include Javadoc and Checkstyle plugins. These are configured in the _reporting_ section of the project POM.

Maven plugins provide all the useful functionalities required to execute and
manage the project build.

For example, we can declare the [Jar](https://maven.apache.org/plugins/maven-
jar-plugin/) plugin in the POM:

            
                        <build>
                ....
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>3.3.0</version>
                        ....
                    </plugin>
                ....
                </plugins>
            </build>

Here, we've included the plugin in the _build_ section to add the capability
to compile our project into a _jar_.

## 3\.

For instance, the Maven Antrun Plugin version 1.2 uses Ant version 1.6.5, if
you want to use the latest Ant version when running this plugin, you need to
add `<dependencies>` element like the following:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            ...
            <dependencies>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant</artifactId>
                <version>1.7.1</version>
              </dependency>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant-launcher</artifactId>
                <version>1.7.1</version>
              </dependency>
             </dependencies>
          </plugin>
        </plugins>
      </build>
      ...
    </project>

### Using the `<inherited>` Tag In Build Plugins

By default, plugin configuration should be propagated to child POMs, so to
break the inheritance, you could use the `<inherited>` tag:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            <inherited>false</inherited>
            ...
          </plugin>
        </plugins>
      </build>
      ...
    </project>

## Configuring Reporting Plugins

The following is only to configure Reporting plugins in the `<reporting>`
element.

### Using the `<reporting>` Tag VS `<build>` Tag

Configuring a reporting plugin in the `<reporting>` or `<build>` elements in
the pom does not exactly have the same results.

`mvn site`

    Since maven-site-plugin 3.4, it uses the parameters defined in the `<configuration>` element of each reporting Plugin specified in the `<reporting>` element, in addition to the parameters defined in the `<configuration>` element of each plugin specified in `<build>` (parameters from `<build>` section were previously ignored).

](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 36 ](/q/14725316 ""Question score \(upvotes - downvotes\)"") [What is the use
of pom.xml in Maven?](/questions/14725316/what-is-the-use-of-pom-xml-in-maven)

[ 1 ](/q/21150991 ""Question score \(upvotes - downvotes\)"") [Difference
between plugins in project->build->pluginManagement and
project->build](/questions/21150991/difference-between-plugins-in-project-
build-pluginmanagement-and-project-buil)

[ 2 ](/q/25615330 ""Question score \(upvotes - downvotes\)"") [maven plugin
dependency scope in pom.xml](/questions/25615330/maven-plugin-dependency-
scope-in-pom-xml)

[ 4 ](/q/36572018 ""Question score \(upvotes - downvotes\)"") [Maven default
life-cycle and plugins section](/questions/36572018/maven-default-life-cycle-
and-plugins-section)

[ 1 ](/q/39180770 ""Question score \(upvotes - downvotes\)"") [whats the use of
the dependencies in the plugin element on a
pom.xml](/questions/39180770/whats-the-use-of-the-dependencies-in-the-plugin-
element-on-a-pom-xml)

[ 2 ](/q/47512758 ""Question score \(upvotes - downvotes\)"") [Maven dependency
Plugin usage](/questions/47512758/maven-dependency-plugin-usage)

[ 0 ](/q/51510426 ""Question score \(upvotes - downvotes\)"") [Maven
Dependencies on Plugin Development](/questions/51510426/maven-dependencies-on-
plugin-development)

[ 1 ](/q/59076702 ""Question score \(upvotes - downvotes\)"") [Why can I use
Maven plugins without declaring them in pom.xml?",spring-boot-admin,project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId,NAME,frontend-maven-plugin,maven,pom.xml,project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId,NAME,frontend-maven-plugin,maven,spring-boot-admin-server-ui/pom.xml,Libraries,Maven Plugin,"{
    ""plan"": ""1. Identify the two configuration options: project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId and project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId.\n2. Check if they have the same value, which is frontend-maven-plugin.\n3. Evaluate whether the pluginManagement section in the pom.xml file depends on the specific profile configuration in another pom.xml file."",
    ""rationale"": ""The configuration option project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId with the value frontend-maven-plugin specifies a plugin used in the build process. The configuration option project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId with the same value frontend-maven-plugin identifies a specific plugin used within a profile. Since they share the same value, it implies that the pluginManagement section depends on the specific profile configuration, as the plugin is only applicable within that profile."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The 'groupId' value of a Maven plugin is used to identify the plugin and its dependencies. If the 'groupId' values of the 'maven-failsafe-plugin' and 'maven-site-plugin' are identical, it suggests that both plugins belong to the same group or family. This could imply a dependency between the two configuration options, as they may be related or used together in the build process.","Instead, child projects inherit these values from the
declaration in the parent POM.

Finally, let's run the build again and see the output:

            
                        ....
            [INFO] --- build-helper-maven-plugin:3.3.0:add-resource (add-resource) @ submodule-1 ---
            [INFO]
            [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ submodule-1 ---
            [INFO] Using 'UTF-8' encoding to copy filtered resources.
            
            [INFO] Copying 1 resource to json
            ....

Here, the plugin executes during the build but only in the child project with
the corresponding declaration. As a result, the project output now contains
the additional resources from the specified project location, as expected.

We should note that **only** **the parent POM contains the plugin declaration
and configuration** whilst the child projects just reference this, as needed.

The child projects are free to [modify the inherited configuration](/maven-
plugin-override-parent) if required.

## 5\. Core Plugins

There are some Maven [core plugins](/core-maven-plugins) that are used as part
of the build lifecycle, by default. For example, the _clean_ and _compiler_
plugins don't need to be declared explicitly.

We can, however, explicitly declare and configure these in the
_pluginManagement_ element in the POM. The main difference is that the **core
plugin configuration takes effect automatically without any reference in the
child projects**.

Let's try this out by adding the _compiler_ plugin to the familiar
_pluginManagement_ section:

            
                        <pluginManagement>
                ....
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.12.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
                ....
            </pluginManagement>

Here, we've locked down the plugin version and configured it to use Java 8 to
build the project. However, there is no additional _plugin_ declaration
required in any child projects. The build framework activates this
configuration by default.

This is a snippet of my pom file.

    
    
    ...
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.4</version>                        
                    <executions>
                        <execution>
                            <phase>install</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                ......
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
    ...
    

I use it successfully with the command

    
    
    mvn install
    

But, when I try to enclose it into the ""pluginManagement"" tag, the `maven-
dependency-plugin` stops working when I launch the `install` goal. Why does
the ""pluginManagement"" tag change the build behavior? Or should I use another
goal or option?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [build](/questions/tagged/build ""show questions tagged 'build'"")
  * [pom.xml](/questions/tagged/pom.xml ""show questions tagged 'pom.xml'"")
  * [maven-dependency-plugin](/questions/tagged/maven-dependency-plugin ""show questions tagged 'maven-dependency-plugin'"")

[Share](/q/10483180 ""Short permalink to this question"")

[Improve this question](/posts/10483180/edit)

Follow

[edited Jan 4 at 0:47](/posts/10483180/revisions ""show all edits to this
post"")

[![PatPanda's user
avatar](https://i.sstatic.net/fgo5D.jpg?s=64)](/users/10461625/patpanda)

[PatPanda](/users/10461625/patpanda)

4,5001919 gold badges9191 silver badges213213 bronze badges

asked May 7, 2012 at 13:43

[!

I'm using a parent pom for my projects and wanted to specify the versions in
one place, so I used properties to specify the version:

parent pom:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
             http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        ....
        <properties>
            <maven-compiler-plugin-version>2.3.2</maven-compiler-plugin-version>
        </properties>
        ....
    </project>
    

project pom:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
             http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        ....
        <build>
            <finalName>helloworld</finalName>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin-version}</version>
                    <configuration>
                        <source>1.6</source>
                        <target>1.6</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </project>
    

See also: <https://www.allthingsdigital.nl/2011/04/10/maven-3-and-the-
versions-dilemma/>

[Share](/a/28086672 ""Short permalink to this answer"")

[Improve this answer](/posts/28086672/edit)

Follow

answered Jan 22, 2015 at 10:38

[!

In our example, we'll use it to copy some
additional resources to the project output for a child project.

### 4.1. Parent POM Configuration

First, we'll add the plugin to the _pluginManagement_ section of the parent
POM:

            
                        <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>3.3.0</version>
                        <executions>
                            <execution>
                                <id>add-resource</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>add-resource</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>src/resources</directory>
                                            <targetPath>json</targetPath>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
               </plugins>
            </pluginManagement>

This binds the plugin's _add-resource_ goal to the _generate-resources_ phase
in the [default POM
lifecycle](https://maven.apache.org/guides/introduction/introduction-to-the-
lifecycle.html#Built-in_Lifecycle_Bindings). We've also specified the
_src/resources_ directory containing the additional resources. The plugin
execution will copy these resources to the target location in the project
output, as required.

Next, let's run the maven command to ensure that the configuration is valid
and the build is successful:

            
                        $ mvn clean test

After running this, the target location does not contain the expected
resources yet.

### 4.2. Child POM Configuration

Now, let's reference this plugin from the child POM:

            
                        <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>

Similar to dependency management, we don't declare the version or any plugin
configuration. Instead, child projects inherit these values from the
declaration in the parent POM.

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Overview

[Apache Maven](/maven) is a powerful tool that uses
[plugins](/maven#introduction-10) to automate and perform all the build and
reporting tasks in a Java project.

However, there are likely to be several of these plugins used in the build
along with different versions and configurations, especially in a [multi-
module project](/maven-multi-module). This can lead to problems of complex POM
files with redundant or duplicate plugin artifacts as well as configurations
scattered across various child projects.

In this article, we'll see how to use Maven's plugin management mechanism to
handle such issues and effectively maintain plugins across the whole project.

## 2\. Plugin Configuration

Maven has two types of plugins:

        * Build - executed during the build process. Examples include Clean, Install, and Surefire plugins. These should be configured in the _build_ section of the POM.
        * Reporting - executed during site generation to produce various project reports. Examples include Javadoc and Checkstyle plugins. These are configured in the _reporting_ section of the project POM.

Maven plugins provide all the useful functionalities required to execute and
manage the project build.

For example, we can declare the [Jar](https://maven.apache.org/plugins/maven-
jar-plugin/) plugin in the POM:

            
                        <build>
                ....
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>3.3.0</version>
                        ....
                    </plugin>
                ....
                </plugins>
            </build>

Here, we've included the plugin in the _build_ section to add the capability
to compile our project into a _jar_.

## 3\.",spring-boot-admin,project.build.pluginManagement.plugins.plugin_maven-failsafe-plugin.groupId,NAME,org.apache.maven.plugins,maven,pom.xml,project.build.plugins.plugin_maven-site-plugin.groupId,NAME,org.apache.maven.plugins,maven,spring-boot-admin-docs/pom.xml,Libraries,Maven Plugin,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and contexts. First, identify the groupId values of both options: org.apache.maven.plugins for project.build.pluginManagement.plugins.plugin_maven-failsafe-plugin and org.apache.maven.plugins for project.build.plugins.plugin_maven-site-plugin. Then, check if these plugins are part of the same Maven ecosystem and if they have any interdependencies. Finally, conclude whether a dependency exists between the two configuration options based on their groupId values."",
    ""rationale"": ""The configuration option project.build.pluginManagement.plugins.plugin_maven-failsafe-plugin.groupId and the option project.build.plugins.plugin_maven-site-plugin.groupId located in different modules and indicate different Maven plugins. The equality of the groupId values indicates that they are part of the same Maven ecosystem, but there is no direct dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,6.0,FN,True,"The configuration options have the same groupId value io.projectreactor, which suggests that they might be related. However, without further analysis of the POM files and the project structures, it is unclear whether there is an actual dependency between the two projects. The value equality alone does not necessarily imply a dependency.","more linked questions](/questions/linked/1725476)

#### Related

[ 6 ](/q/10532274 ""Question score \(upvotes - downvotes\)"") [Maven: Extract
dependency resources before test](/questions/10532274/maven-extract-
dependency-resources-before-test)

[ 8 ](/q/12104668 ""Question score \(upvotes - downvotes\)"") [How to run maven
compile phase with test-jar dependencies](/questions/12104668/how-to-run-
maven-compile-phase-with-test-jar-dependencies)

[ 1 ](/q/17284553 ""Question score \(upvotes - downvotes\)"") [Maven plugin as
dependency in multi-module project](/questions/17284553/maven-plugin-as-
dependency-in-multi-module-project)

[ 0 ](/q/20372228 ""Question score \(upvotes - downvotes\)"") [maven-nar-plugin
and tests in dependent module](/questions/20372228/maven-nar-plugin-and-tests-
in-dependent-module)

[ 1 ](/q/23548879 ""Question score \(upvotes - downvotes\)"") [Maven surefire -
making dependency between tests](/questions/23548879/maven-surefire-making-
dependency-between-tests)

[ 6 ](/q/25858904 ""Question score \(upvotes - downvotes\)"") [Maven : Build all
dependencies but run tests on specific modules](/questions/25858904/maven-
build-all-dependencies-but-run-tests-on-specific-modules)

[ 42 ](/q/27726779 ""Question score \(upvotes - downvotes\)"") [Declare Maven
dependency as test runtime only](/questions/27726779/declare-maven-dependency-
as-test-runtime-only)

[ 5 ](/q/35875897 ""Question score \(upvotes - downvotes\)"") [Maven: Ignore
inter-module dependencies while running unit tests](/questions/35875897/maven-
ignore-inter-module-dependencies-while-running-unit-tests)

[ 9 ](/q/47146491 ""Question score \(upvotes - downvotes\)"") [Java9 Multi-
Module Maven Project Test Dependencies](/questions/47146491/java9-multi-
module-maven-project-test-dependencies)

[ 2 ](/q/63269228 ""Question score \(upvotes - downvotes\)"") [Maven

Multi-
Module Maven Project Test Dependencies](/questions/47146491/java9-multi-
module-maven-project-test-dependencies)

[ 2 ](/q/63269228 ""Question score \(upvotes - downvotes\)"") [Maven multi
module project Cyclic Dependency Issue](/questions/63269228/maven-multi-
module-project-cyclic-dependency-issue)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Infinite output impedance in amplifier, instead of 0? ](https://electronics.stackexchange.com/questions/719736/infinite-output-impedance-in-amplifier-instead-of-0)
  * [ He is ill/well/highly reputed of ](https://ell.stackexchange.com/questions/354985/he-is-ill-well-highly-reputed-of)
  * [ Jellium Hamiltonian in the thermodynamic limit ](https://physics.stackexchange.com/questions/821767/jellium-hamiltonian-in-the-thermodynamic-limit)
  * [ I think standard deviation of y is related to size of x. How do I create a model for this / test this? ](https://stats.stackexchange.com/questions/651262/i-think-standard-deviation-of-y-is-related-to-size-of-x-how-do-i-create-a-model)
  * [ Are Windows ReFS file-level snapshots what File History should have been? ](https://superuser.com/questions/1849380/are-windows-refs-file-level-snapshots-what-file-history-should-have-been)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ What sort of security does Docusign provide? ](https://security.stackexchange.com/questions/277851/what-sort-of-security-does-docusign-provide)
  * [ This expected value has a minimum! ](https://math.stackexchange.com/questions/4947055/this-expected-value-has-a-minimum)
  * [ Is ""secco"" really used in piano music?

](/questions/7751860/how-do-i-include-a-dependencys-test-jar-into-
a-maven-projects-deployment?noredirect=1)

[ 8 ](/q/12104668 ""Question score \(upvotes - downvotes\)"") [How to run maven
compile phase with test-jar dependencies](/questions/12104668/how-to-run-
maven-compile-phase-with-test-jar-dependencies?noredirect=1)

[ 1 ](/q/15949977 ""Question score \(upvotes - downvotes\)"") [Maven can't find
Package in Test-Jar](/questions/15949977/maven-cant-find-package-in-test-
jar?noredirect=1)

[ 2 ](/q/33335307 ""Question score \(upvotes - downvotes\)"") [Why does a Maven
3 multi-module project fail on ""clean package"", and succeed on ""clean compile""
followed by ""package""?](/questions/33335307/why-does-a-maven-3-multi-module-
project-fail-on-clean-package-and-succeed-on?noredirect=1)

[ 0 ](/q/37559779 ""Question score \(upvotes - downvotes\)"") [Why doesn't
IntelliJ Idea find Maven dependencies from another Kotlin
module?](/questions/37559779/why-doesnt-intellij-idea-find-maven-dependencies-
from-another-kotlin-module?noredirect=1)

[ -3 ](/q/34596437 ""Question score \(upvotes - downvotes\)"") [How to script
maven commands in Eclipse](/questions/34596437/how-to-script-maven-commands-
in-eclipse?noredirect=1)

[ 0 ](/q/47719712 ""Question score \(upvotes - downvotes\)"") [Can `mvn compile`
be expected to work with multi-module Maven reactor
builds?](/questions/47719712/can-mvn-compile-be-expected-to-work-with-multi-
module-maven-reactor-builds?noredirect=1)

[See more linked questions](/questions/linked/1725476)

#### Related

[ 6 ](/q/10532274 ""Question score \(upvotes - downvotes\)"") [Maven: Extract
dependency resources before

Apparently, the JAR from the repositories could be outdated or
> completely missing, causing a build failure (cf.
> [MNG-2045](http://jira.codehaus.org/browse/MNG-2045)).

So, first, to package up compiled tests in a JAR and deploy them for general
reuse, configure the `maven-jar-plugin` as follows:

    
    
    <project>
      <build>
        <plugins>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-jar-plugin</artifactId>
           <version>2.2</version>
           <executions>
             <execution>
               <goals>
                 <goal>test-jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>
        </plugins>
      </build>
    </project>
    

Then, install/deploy the test JAR artifact as usual (using `mvn install` or
`mvn deploy`).

Finally, to use the test JAR, you should specify a dependency with a specified
type of `test-jar`:

    
    
    <project>
      ...
      <dependencies>
        <dependency>
          <groupId>com.myco.app</groupId>
          <artifactId>foo</artifactId>
          <version>1.0-SNAPSHOT</version>
          <type>test-jar</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
      ...
    </project>
    

[Share](/a/1733745 ""Short permalink to this answer"")

[Improve this answer](/posts/1733745/edit)

Follow

answered Nov 14, 2009 at 9:02

[![Pascal Thivent's user
avatar](https://www.gravatar.com/avatar/dc1a5b5fdba36ae9cdcf6e267f1a86ca?s=64&d=identicon&r=PG)](/users/70604/pascal-
thivent)

[Pascal Thivent](/users/70604/pascal-thivent)Pascal Thivent

568k140140 gold badges1.1k1.1k silver badges1.1k1.1k bronze badges

5

  * 4

Pascal. First of all thanks a lot for answering all the maven questions !!
Regarding this question.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",spring-boot-admin,project.dependencies.dependency_reactor-test.groupId,NAME,io.projectreactor,maven,spring-boot-admin-server-cloud/pom.xml,project.dependencies.dependency_reactor-test.groupId,NAME,io.projectreactor,maven,spring-boot-admin-server/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configuration options: io.projectreactor in spring-boot-admin-server-cloud/pom.xml and io.projectreactor in spring-boot-admin-server/pom.xml.\n2. Compare the values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The equality of the groupId values 'io.projectreactor' in both configuration options indicates that they are part of the same project ecosystem, but there is no direct dependency between these two configuration options based solely on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Inferring Dependencies,llama3:70b,config2,6.0,FP,False,"The rationale behind this evaluation is that both configuration options have the same value 'test', which indicates they are related to testing. Although they belong to different projects and technologies (Maven), their similar scope values suggest a possible connection. However, without more context or specific requirements, it's uncertain whether one depends on the other.","apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.

@ line 28,
column 15](/questions/60377218/maven-build-error-dependencies-dependency-
version-for-org-springframework-c)

[ 0 ](/q/62864106 ""Question score \(upvotes - downvotes\)"") [spring clound
eureka server dependencies error gradle intellij](/questions/62864106/spring-
clound-eureka-server-dependencies-error-gradle-intellij)

[ 2 ](/q/67837761 ""Question score \(upvotes - downvotes\)"") [Getting error in
pom.xml with spring-cloud-starter-netflix-eureka-client
dependency](/questions/67837761/getting-error-in-pom-xml-with-spring-cloud-
starter-netflix-eureka-client-depende)

[ 0 ](/q/68825030 ""Question score \(upvotes - downvotes\)"") [Can't import
Spring Cloud dependencies for enabling Eureka
client](/questions/68825030/cant-import-spring-cloud-dependencies-for-
enabling-eureka-client)

[ 6 ](/q/70965480 ""Question score \(upvotes - downvotes\)"") [SpringBoot
3.0.0-M1 + SpringCloud 2022.0.0-M1 [ERROR] 'dependency.version' for
org.springframework.cloud:spring-cloud-starter-sleuth:jar is
missing](/questions/70965480/springboot-3-0-0-m1-springcloud-2022-0-0-m1-error-
dependency-version-for-o)

[ 0 ](/q/73232691 ""Question score \(upvotes - downvotes\)"") [Cannot resolve
org.springframework.cloud:spring-cloud-starter-eureka-
server:unknown](/questions/73232691/cannot-resolve-org-springframework-
cloudspring-cloud-starter-eureka-serverunkn)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Infinite output impedance in amplifier, instead of 0?

/./specification/executable-jar/nested-jars.html)
        * [Spring Boot's ""NestedJarFile"" Class](././specification/executable-jar/jarfile-class.html)
        * [Launching Executable Jars](././specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](././specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](././specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](././specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](././appendix/application-properties/index.html)
      * [Auto-configuration Classes](././appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](././appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](././appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](././appendix/test-auto-configuration/index.html)
        * [Test Slices](././appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](././appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](././appendix/dependency-versions/coordinates.html)
        * [Version Properties](././appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-
docs/src/docs/antora/modules/reference/pages/testing/test-scope-
dependencies.adoc) [ GitHub Project ](https://github.com/spring-
projects/spring-boot ""GitHub"") [ Stack Overflow
](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](././index.html)
  * [Reference](./index.html)
  * [Testing](index.html)
  * [Test Scope Dependencies](test-scope-dependencies.html)

# Test Scope Dependencies

The `spring-boot-starter-test` ""Starter"" (in the `test` `scope`) contains the
following provided libraries:

  * [JUnit 5](https://junit.

/./how-to/native-image/testing-native-applications.html)
      * [Class Data Sharing](././how-to/class-data-sharing.html)
      * [Deploying Spring Boot Applications](././how-to/deployment/index.html)
        * [Traditional Deployment](././how-to/deployment/traditional-deployment.html)
        * [Deploying to the Cloud](././how-to/deployment/cloud.html)
        * [Installing Spring Boot Applications](././how-to/deployment/installing.html)
      * [Docker Compose](././how-to/docker-compose.html)
    * [Build Tool Plugins](././build-tool-plugin/index.html)
      * [Maven Plugin](././maven-plugin/index.html)
        * [Getting Started](././maven-plugin/getting-started.html)
        * [Using the Plugin](././maven-plugin/using.html)
        * [Goals](././maven-plugin/goals.html)
        * [Packaging Executable Archives](././maven-plugin/packaging.html)
        * [Packaging OCI Images](././maven-plugin/build-image.html)
        * [Running your Application with Maven](././maven-plugin/run.html)
        * [Ahead-of-Time Processing](././maven-plugin/aot.html)
        * [Running Integration Tests](././maven-plugin/integration-tests.html)
        * [Integrating with Actuator](././maven-plugin/build-info.html)
        * [Help Information](././maven-plugin/help.html)
      * [Gradle Plugin](././gradle-plugin/index.html)
        * [Getting Started](././gradle-plugin/getting-started.html)
        * [Managing Dependencies](././gradle-plugin/managing-dependencies.html)
        * [Packaging Executable Archives](././gradle-plugin/packaging.html)
        * [Packaging OCI Images](././gradle-plugin/packaging-oci-image.html)
        * [Publishing your Application](././gradle-plugin/publishing.html)
        * [Running your Application with Gradle](././gradle-plugin/running.html)
        * [Ahead-of-Time Processing](././gradle-plugin/aot.html)
        * [Integrating with Actuator](./.",spring-boot-admin,project.dependencies.dependency_spring-boot-starter-test.scope,UNKNOWN,test,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,project.dependencies.dependency_spring-boot-starter-security.scope,UNKNOWN,test,maven,spring-boot-admin-server-cloud/pom.xml,Libraries,Dependency Scope,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_spring-boot-starter-test.scope and project.dependencies.dependency_spring-boot-starter-security.scope.\n2. Determine their types: both are of type UNKNOWN.\n3. Evaluate their values: both have a value of 'test'.\n4. Check if they are specified in the same configuration file: no, they are in different files (spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml and spring-boot-admin-server-cloud/pom.xml).\n5. Analyze whether their equality of values creates a dependency between them."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-boot-starter-test.scope and project.dependencies.dependency_spring-boot-starter-security.scope have the same value 'test', but they are specified in different configuration files and define the scope of different Maven dependencies. This equality of values does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope of type UNKNOWN with value test in pom.xml of technology maven depends on configuration option project.dependencies.dependency_h2.scope of type UNKNOWN with value test in apollo-build-sql-converter/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_awaitility.scope and the option project.dependencies.dependency_h2.scope are specified in different configuration files and indicate the scope of different Maven dependencies, but define the scope of dependencies in Maven. While both scopes are set to 'test', is does not create a dependency between these Maven dependencies, as each Maven dependency independently defines its scope."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,6.0,FP,False,"The dependency between the configuration options is based on the value equality of the `repackage` goal. If both projects use the same version of the Spring Boot Maven Plugin and have identical configurations for the `repackage` goal, it's likely that they depend on each other. This is because the `repackage` goal is used to create an executable archive of the application, and any changes to this configuration could affect the build process.","[INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  
This is the error I got:
*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration.

apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:362)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.

# Spring Boot Maven Plugin Documentation

Stephane Nicoll, Andy Wilkinson, Scott Frederick  

Table of Contents

  * 1\. Introduction
  * 2\. Getting Started
  * 3\. Using the Plugin
    * 3.1. Inheriting the Starter Parent POM
    * 3.2. Using Spring Boot without the Parent POM
  * 4\. Goals
  * 5\. Packaging Executable Archives
    * 5.1. Layered Jars
      * 5.1.1. Custom Layers Configuration
    * 5.2. `spring-boot:repackage`
      * 5.2.1. Required parameters
      * 5.2.2. Optional parameters
      * 5.2.3. Parameter details
        * `attach`
        * `classifier`
        * `embeddedLaunchScript`
        * `embeddedLaunchScriptProperties`
        * `excludeDevtools`
        * `excludeGroupIds`
        * `excludes`
        * `executable`
        * `includeSystemScope`
        * `includes`
        * `layers`
        * `layout`
        * `layoutFactory`
        * `mainClass`
        * `outputDirectory`
        * `outputTimestamp`
        * `requiresUnpack`
        * `skip`
    * 5.3. Examples
      * 5.3.1. Custom Classifier
      * 5.3.2. Custom Name
      * 5.3.3. Local Repackaged Artifact
      * 5.3.4. Custom Layout
      * 5.3.5. Dependency Exclusion
      * 5.3.6. Layered Jar Tools
      * 5.3.7. Custom Layers Configuration
  * 6\. Packaging OCI Images
    * 6.1. Docker Daemon
    * 6.2. Image Customizations
    * 6.3. `spring-boot:build-image`
      * 6.3.1. Required parameters
      * 6.3.2. Optional parameters
      * 6.3.3.",spring-boot-admin,project.profiles.profile_native.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage,UNKNOWN,repackage,maven,spring-boot-admin-samples/spring-boot-admin-sample-servlet-graalvm/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage,UNKNOWN,repackage,maven,spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/pom.xml,Libraries,Maven Plugin,"{
    ""plan"": ""1. Identify the configuration options: project.profiles.profile_native.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage in spring-boot-admin-samples/spring-boot-admin-sample-servlet-graalvm/pom.xml and project.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage in spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/pom.xml. 2. Determine the type of configuration options: UNKNOWN with value repackage. 3. Evaluate whether the configuration options depend on each other due to value-equality."",
    ""rationale"": ""The configuration options project.profiles.profile_native.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage and project.build.plugins.plugin_spring-boot-maven-plugin.executions.execution.goals.goal_repackage have the same type UNKNOWN and value repackage. However, they are located in different modules (spring-boot-admin-sample-servlet-graalvm and spring-boot-admin-sample-zookeeper) and are part of different Maven builds. The equality of the values indicates that they are related to the Spring Boot Maven plugin's repackage goal, but there is no direct dependency between these two configuration options."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option services.consul.ports.out of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose depends on configuration option services.consul.ports.in of type PORT with value 8500 in spring-boot-admin-samples/spring-boot-admin-sample-consul/docker-compose.yml of technology docker-compose or vice versa.

{
    ""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different."",
    ""isDependency"": false
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Inheritance and Overrides,llama3:70b,config2,8.0,FN,True,The configuration options do not directly depend on each other due to value equality. The issue arises from the missing artifact 'spring-cloud-starter-openfeign' with a specific version (3.0.3-SNAPSHOT). This suggests that the dependency is not properly managed by the Spring Boot starter parent or there's an inconsistency in the Maven repository.,"## **3\. Setting Up a Client**

Now, after we've set up our admin server, we can register our first Spring
Boot application as a client. We must add the following [Maven
dependency](https://mvnrepository.com/search?q=spring-boot-admin-starter-
client):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>3.1.5</version>
            </dependency>

Next, we need to configure the client to know about the admin server's base
URL. For this to happen, we just add the following property:

            
                        spring.boot.admin.client.url=http://localhost:8080

**Starting with Spring Boot 2, endpoints other than _health_ and _info_ are
not exposed by default.**

Let's expose all the endpoints:

            
                        management.endpoints.web.exposure.include=*
            management.endpoint.health.show-details=always

## **4\. Security Configuration**

The Spring Boot Admin server has access to the application's sensitive
endpoints, so **it 's advised that we add some security configuration to both
the admin and client applications.**

At first, we'll focus on configuring the admin server's security. We must add
the following [Maven
dependencies](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-security):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>1.5.7</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>3.1.5</version>
            </dependency>

This will enable security and add a login interface to the admin application.
Make sure to get the [latest
version](https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-
server-ui) of the admin application.

For example, to change the Java version, we can indicate it in the
_java.version_ property:

            
                        <properties>
                <java.version>17</java.version>
            </properties>

## 7\. Spring Boot Project Without Starter Parent

Sometimes we have a custom Maven parent, or we prefer to declare all our Maven
configurations manually.

In that case, we can opt not to use the _spring-boot-starter-parent_ project.
But we can still benefit from its dependency tree by adding a dependency,
_spring-boot-dependencies,_ in our project in _import_ scope.

Let's illustrate this with a simple example in which we want to use another
parent other than the starter parent:

            
                        <parent>
                <groupId>com.baeldung</groupId>
                <artifactId>spring-boot-parent</artifactId>
                <version>1.0.0-SNAPSHOT</version>
            </parent>

Here, we used _parent-modules,_ a different project, as our parent dependency.

Now, in this case, we can still get the same benefits of dependency management
by adding it in _import_ scope and _pom_ type:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-dependencies</artifactId>
                        <version>3.1.5</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                </dependencies>
            </dependencyManagement>

Furthermore, we can pull in any dependency by just declaring it in
_dependencies,_ as we did in our previous examples. No version numbers are
needed for those dependencies.

## 8\. Conclusion

In this article, we gave an overview of _spring-boot-starter-parent,_ and the
benefits of adding it as a parent in any child project.

Next, we learned how to manage dependencies. We can override dependencies in
_dependencyManagement_ or via properties.

The source code for the snippets used in this article is available over on
[Github](https://github.com/eugenp/tutorials/tree/master/spring-boot-
modules/spring-boot-parent), one using the starter parent and the other a
custom parent.

Partner - Aegik AB - NPI EA (cat= Persistence)

!

](/questions/58485006/why-spring-boot-build-
parent-dependency-is-missig)

[ 2 ](/q/58537611 ""Question score \(upvotes - downvotes\)"") [Adding Spring
project to Spring Boot project as a dependency in the
pom.xml](/questions/58537611/adding-spring-project-to-spring-boot-project-as-
a-dependency-in-the-pom-xml)

[ 0 ](/q/59110606 ""Question score \(upvotes - downvotes\)"") [spring-boot-
starter-parent: Can this be included as
dependency](/questions/59110606/spring-boot-starter-parent-can-this-be-
included-as-dependency)

[ 1 ](/q/60384918 ""Question score \(upvotes - downvotes\)"") [Maven child
module in parent pom as dependency](/questions/60384918/maven-child-module-in-
parent-pom-as-dependency)

[ 1 ](/q/62891554 ""Question score \(upvotes - downvotes\)"") [Maven - Add a
maven module as dependency to other maven module](/questions/62891554/maven-
add-a-maven-module-as-dependency-to-other-maven-module)

[ 0 ](/q/70847434 ""Question score \(upvotes - downvotes\)"") [How to use
dependencies from spring-boot-starter-parent?](/questions/70847434/how-to-use-
dependencies-from-spring-boot-starter-parent)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Determine if N is zibbable ](https://puzzling.stackexchange.com/questions/127439/determine-if-n-is-zibbable)
  * [ Standard negative binomial regression when counts are mainly zeros? ](https://stats.stackexchange.com/questions/651155/standard-negative-binomial-regression-when-counts-are-mainly-zeros)
  * [ Can I cause a star to go supernova by altering the four fundamental forces?

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Introduction

In this tutorial, we'll learn about _spring-boot-starter-parent._ We'll
discuss how we can benefit from it for better dependency management, default
configurations for plugins, and to quickly build our _Spring Boot_
applications.

We'll also see how we can override the versions of existing dependencies and
properties provided by _starter-parent._

## 2\. Spring Boot Starter Parent

The _spring-boot-starter-parent_ project is a special starter project that
provides default configurations for our application and a complete dependency
tree to quickly build our _Spring Boot_ project. It also provides default
configurations for Maven plugins, such as _maven-failsafe-plugin_ , _maven-
jar-plugin_ , _maven-surefire-plugin_ , and _maven-war-plugin_.

Beyond that, it also inherits dependency management from _spring-boot-
dependencies,_ which is the parent to the s _pring-boot-starter-parent_.

We can start using it in our project by adding it as a parent in our project's
_pom.xml_ :

            
                        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>3.1.5</version>
            </parent>

We can always get the latest version of [_spring-boot-starter-
parent_](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-parent) from Maven Central.

## 3\. Managing Dependencies

Once we've declared the starter parent in our project, we can pull any
dependency from the parent by just declaring it in our _dependencies_ tag. We
also don't need to define versions of the dependencies; Maven will download
jar files based on the version defined for the starter parent in the parent
tag.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",spring-boot-admin,project.parent_spring-boot-admin-build.groupId,NAME,de.codecentric,maven,spring-boot-admin-client/pom.xml,project.dependencyManagement.dependencies.dependency_spring-boot-admin-starter-server.groupId,NAME,de.codecentric,maven,spring-boot-admin-dependencies/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
    ""plan"": ""1. Check the Maven project structure and identify the relationships between modules.\n2. Analyze the groupId values of both configuration options: de.codecentric in spring-boot-admin-client/pom.xml and de.codecentric in spring-boot-admin-dependencies/pom.xml.\n3. Evaluate whether the equality of groupId values indicates a dependency between the two configuration options."",
    ""rationale"": ""The equality of groupId values 'de.codecentric' in both configuration options suggests that they are part of the same project ecosystem. Since spring-boot-admin-client is likely a module dependent on spring-boot-admin-dependencies, the groupId value equality implies a dependency between these two configuration options."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Spring-boot-admin is a monitoring tool that aims to visualize information provided by Spring Boot Actuators in a nice and accessible way. 
It consists of two major parts: a server that provides a user interface to display and interact with Spring Boot Actuator and client that is used to register at the server and allow to access actuator endpoints 

In the spring-boot-admin project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of spring-boot-admin is as follows:

spring-boot-admin/
├── pom.xml
├── spring-boot-admin-build/
│   └── pom.xml
├── spring-boot-admin-client/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-dependencies/
│   └── pom.xml
├── spring-boot-admin-docs/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-samples/
│   ├── pom.xml
│   ├── spring-boot-admin-sample-consul/
│   ├── spring-boot-admin-sample-custom-ui/
│   ├── spring-boot-admin-sample-eureka/
│   ├── spring-boot-admin-sample-hazelcast/
│   ├── spring-boot-admin-sample-reactive/
│   ├── spring-boot-admin-sample-servlet/
│   ├── spring-boot-admin-sample-servlet-graalvm/
│   ├── spring-boot-admin-sample-war/
│   └── spring-boot-admin-sample-zookeeper/
├── spring-boot-admin-server/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-cloud/
│   ├── pom.xml
│   └── src/
├── spring-boot-admin-server-ui/
│   ├── babel.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── pom.xml
│   ├── postcss.config.js
│   ├── src/
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.mts
├── spring-boot-admin-starter-client/
│   └── pom.xml
├── spring-boot-admin-starter-server/
│   └── pom.xml
└── src/
    ├── checkstyle/
    └── main/"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. The `groupId` of the `dependency` element in the `ace-infrastructure/ace-monitor/pom.xml` file is `org.springframework.cloud`, which matches the `groupId` of the `dependencyManagement` element in the `pom.xml` file. This suggests that the dependency declared in the `ace-infrastructure/ace-monitor/pom.xml` file is managed by the `dependencyManagement` element in the `pom.xml` file.","springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 0 ](/q/59151300 ""Question score \(upvotes - downvotes\)"") [how fix
dependency error Project build error: dependencies cloud:spring-cloud-starter-
openfeign:jar is missing](/questions/59151300/how-fix-dependency-error-
project-build-error-dependencies-cloudspring-cloud-st)

[ 0 ](/q/60377218 ""Question score \(upvotes - downvotes\)"") [Maven Build-
[ERROR] 'dependencies.dependency.version' for
org.springframework.cloud:spring-cloud-starter-zuul:jar is missing. @ line 28,
column 15](/questions/60377218/maven-build-error-dependencies-dependency-
version-for-org-springframework-c)

[ 6 ](/q/70965480 ""Question score \(upvotes - downvotes\)"") [SpringBoot
3.0.0-M1 + SpringCloud 2022.0.0-M1 [ERROR] 'dependency.version' for
org.springframework.cloud:spring-cloud-starter-sleuth:jar is
missing](/questions/70965480/springboot-3-0-0-m1-springcloud-2022-0-0-m1-error-
dependency-version-for-o)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ How should I run cable across a steel beam? ](https://diy.stackexchange.com/questions/303548/how-should-i-run-cable-across-a-steel-beam)
  * [ What standards did velocipedes have when they were invented? ](https://bicycles.stackexchange.com/questions/94874/what-standards-did-velocipedes-have-when-they-were-invented)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ Okay to travel to places where the locals are unwelcoming?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
            <version>2.1.1.RELEASE</version>
        </dependency>
    
        <!--Test-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.194</version>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
    
        <!--microservices-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.1.0.RELEASE</version>
        </dependency>
    
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-commons</artifactId>-->
            <!--<version>1.0.0.RELEASE</version>-->
        <!--</dependency>-->
    
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.

xml missing dependencies](/questions/54812168/spring-boot-pom-xml-missing-
dependencies)

[ 0 ](/q/55742450 ""Question score \(upvotes - downvotes\)"") [Non-resolvable
import POM: Failure to find org.springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 1 ](/q/63710439 ""Question score \(upvotes - downvotes\)"") [Non Resolvable
import POM Spring-boot dependencies 2.3.3 Release](/questions/63710439/non-
resolvable-import-pom-spring-boot-dependencies-2-3-3-release)

[ 0 ](/q/65167089 ""Question score \(upvotes - downvotes\)"") [dependecy not
found: openfeign](/questions/65167089/dependecy-not-found-openfeign)

[ 0 ](/q/65697448 ""Question score \(upvotes - downvotes\)"") [maven dependency
spring-cloud-starter 2.1.0.RELEASE test failures](/questions/65697448/maven-
dependency-spring-cloud-starter-2-1-0-release-test-failures)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ How to reset hints in a CP-SAT model? ](https://or.stackexchange.com/questions/12303/how-to-reset-hints-in-a-cp-sat-model)
  * [ Is the XOR of hashes a good hash function? ](https://crypto.stackexchange.com/questions/112377/is-the-xor-of-hashes-a-good-hash-function)
  * [ Holding *west* on the 090 radial? ](https://aviation.stackexchange.com/questions/105988/holding-west-on-the-090-radial)
  * [ Mass driver - reducing required length using loop? ](https://space.stackexchange.com/questions/66472/mass-driver-reducing-required-length-using-loop)
  * [ Why are there two cables connected to this GFCI outlet?

I have been trying to set up a spring boot project but am getting an error. I
researched and tried various options but no luck so far. Any help would be
appreciated.

The pom.xml file:

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    
    <groupId>com.sysyaas.pardakhtyary</groupId>
    <artifactId>auth</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>master</name>
    <packaging>jar</packaging>
    <description>Auth Server Pardakhtyary</description>
    
    <!--<properties>-->
        <!--<java.version>1.8</java.version>-->
        <!--<spring-cloud.version>Finchley.M8</spring-cloud.version>-->
    <!--</properties>-->
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.",Spring-Cloud-Platform,project.dependencies.dependency_spring-cloud-starter-loadbalancer.groupId,NAME,org.springframework.cloud,maven,ace-infrastructure/ace-monitor/pom.xml,project.dependencyManagement.dependencies.dependency_spring-cloud-dependencies.groupId,NAME,org.springframework.cloud,maven,pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values in both configurations: org.springframework.cloud.\n2. Compare the values to determine if they are equal.\n3. Evaluate whether the equality of the groupId values indicates a dependency between the configuration options."",
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-cloud-starter-loadbalancer.groupId and the option project.dependencyManagement.dependencies.dependency_spring-cloud-dependencies.groupId located in different modules indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Cloud ecosystem, but there is no direct dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,6.0,FN,True,"The configuration options project.dependencies.dependency_fastjson.artifactId in both POM files have the same value 'fastjson', which suggests a potential dependency. However, without further analysis of the Maven project structure and dependencies, it's unclear whether one depends on the other. If ace-dev-base/ace-common/pom.xml declares a dependency on ace-modules/ace-admin, or vice versa, then we can conclude that there is a dependency between the configuration options.","Overview**

[**FastJson**](https://github.com/alibaba/fastjson) is a lightweight Java
library used to effectively convert JSON strings to Java objects and vice
versa.

In this article we're going to dive into several concrete and practical
applications of the FastJson library.

## **2\. Maven Configuration**

In order to start working with FastJson, we first need to add that to our
_pom.xml_ :

            
                        <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.13</version>
            </dependency>
            

And as a quick note - [here's the most updated
version](https://mvnrepository.com/artifact/com.alibaba/fastjson) of the
library on Maven Central.

## **3\.

Assuming the MyEjbProject is not another Maven Project you own or want to
build with maven, you could use system dependencies to link to the existing
jar file of the project like so

    
    
    <project>
       ...
       <dependencies>
          <dependency>
             <groupId>yourgroup</groupId>
             <artifactId>myejbproject</artifactId>
             <version>2.0</version>
             <scope>system</scope>
             <systemPath>path/to/myejbproject.jar</systemPath>
          </dependency>
       </dependencies>
       ...
    </project>
    

That said it is usually the better (and preferred way) to install the package
to the repository either by making it a maven project and building it or
installing it the way you already seem to do.

* * *

If they are, however, dependent on each other, you can always create a
separate parent project (has to be a ""pom"" project) declaring the two other
projects as its ""modules"". (The child projects would not have to declare the
third project as their parent). As a consequence you'd get a new directory for
the new parent project, where you'd also quite probably put the two
independent projects like this:

    
    
    parent
    |- pom.xml
    |- MyEJBProject
    |   `- pom.xml
    `- MyWarProject
        `- pom.xml
    

The parent project would get a ""modules"" section to name all the child
modules.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

The aggregator would then use the dependencies in the child modules
to actually find out the order in which the projects are to be built)

    
    
    <project>
       ...
       <artifactId>myparentproject</artifactId>
       <groupId>...</groupId>
       <version>...</version>
    
       <packaging>pom</packaging>
       ...
       <modules>
         <module>MyEJBModule</module>
         <module>MyWarModule</module>
       </modules>
       ...
    </project>
    

That way the projects can relate to each other but (once they are installed in
the local repository) still be used independently as artifacts in other
projects

* * *

Finally, if your projects are not in related directories, you might try to
give them as relative modules:

    
    
    filesystem
     |- mywarproject
     |   `pom.xml
     |- myejbproject
     |   `pom.xml
     `- parent
         `pom.xml
    

now you could just do this (worked in maven 2, just tried it):

    
    
    <!--parent-->
    <project>
      <modules>
        <module>../mywarproject</module>
        <module>../myejbproject</module>
      </modules>
    </project>
    

[Share](/a/15383584 ""Short permalink to this answer"")

[Improve this answer](/posts/15383584/edit)

Follow

[edited Apr 25, 2018 at 16:01](/posts/15383584/revisions ""show all edits to
this post"")

[![Neuron's user
avatar](https://lh5.googleusercontent.com/-HcKtiretO2g/AAAAAAAAAAI/AAAAAAAAAH0/IXGAL7MX8sQ/photo.jpg?sz=64)](/users/4298200/neuron)

[Neuron](/users/4298200/neuron)

5,63555 gold badges4242 silver badges6161 bronze badges

answered Mar 13, 2013 at 11:08

[!

](/questions/29738773/how-to-use-
dependency-of-projecta-in-projectb-in-maven)

[ 12 ](/q/33208765 ""Question score \(upvotes - downvotes\)"") [how to add
dependency of other maven project to my current maven project in java
eclipse?](/questions/33208765/how-to-add-dependency-of-other-maven-project-to-
my-current-maven-project-in-java)

[ 1 ](/q/48964699 ""Question score \(upvotes - downvotes\)"") [How to add a
maven project as a dependency to another one](/questions/48964699/how-to-add-
a-maven-project-as-a-dependency-to-another-one)

[ 2 ](/q/51871832 ""Question score \(upvotes - downvotes\)"") [How non maven
project can be added as a dependency in maven
project](/questions/51871832/how-non-maven-project-can-be-added-as-a-
dependency-in-maven-project)

[ 0 ](/q/56878639 ""Question score \(upvotes - downvotes\)"") [Adding a local
Maven project as a dependency in another local Maven
project](/questions/56878639/adding-a-local-maven-project-as-a-dependency-in-
another-local-maven-project)

[ 2 ](/q/70950337 ""Question score \(upvotes - downvotes\)"") [how do I add a
Maven dependency on another existing project in
Eclipse](/questions/70950337/how-do-i-add-a-maven-dependency-on-another-
existing-project-in-eclipse)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers?",Spring-Cloud-Platform,project.dependencies.dependency_fastjson.artifactId,NAME,fastjson,maven,ace-dev-base/ace-common/pom.xml,project.dependencies.dependency_fastjson.artifactId,NAME,fastjson,maven,ace-modules/ace-admin/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options: project.dependencies.dependency_fastjson.artifactId of type NAME with value fastjson in ace-dev-base/ace-common/pom.xml and project.dependencies.dependency_fastjson.artifactId of type NAME with value fastjson in ace-modules/ace-admin/pom.xml.\n2. Evaluate if the values are identical, which is true in this case since both have the value 'fastjson'.\n3. Check if the configuration options are from different Maven projects, which is also true since they are from ace-dev-base/ace-common and ace-modules/ace-admin respectively.\n4. Determine if the dependency exists based on the evaluation."",
    ""rationale"": ""The configuration options project.dependencies.dependency_fastjson.artifactId in both pom.xml files have the same value 'fastjson'. However, this similarity does not imply a dependency between them because they are from different Maven projects and artifactId is a unique identifier within each project. The presence of the same artifactId in multiple projects indicates that the fastjson library is used as a dependency in both projects, but there is no inherent dependency between these configuration options."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Inferring Dependencies,llama3:70b,config2,6.0,FN,True,"The configuration options project.artifactId and project.modules.module have the same value 'ace-gate', which suggests a potential relationship between them. However, without further analysis of the Maven project structure, build logs, and Java code, it is uncertain whether this value equality implies a dependency between the two configuration options.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/2879256/maven-unofficial-artifact-naming-
scheme)

[ 22 ](/q/3150003 ""Question score \(upvotes - downvotes\)"") [Naming convention
for Maven Artifacts](/questions/3150003/naming-convention-for-maven-artifacts)

[ 21 ](/q/5214075 ""Question score \(upvotes - downvotes\)"") [Maven groupId and
package name in java source](/questions/5214075/maven-groupid-and-package-
name-in-java-source)

[ 0 ](/q/16162902 ""Question score \(upvotes - downvotes\)"") [How to know
(pragmatically) correct maven artifact-id group-id for a jar
name](/questions/16162902/how-to-know-pragmatically-correct-maven-artifact-id-
group-id-for-a-jar-name)

[ 8 ](/q/25610544 ""Question score \(upvotes - downvotes\)"") [Applying maven
groupId naming convention](/questions/25610544/applying-maven-groupid-naming-
convention)

[ 0 ](/q/30810006 ""Question score \(upvotes - downvotes\)"") [Maven GroupID and
ArtifactID for J2EE Utility Project](/questions/30810006/maven-groupid-and-
artifactid-for-j2ee-utility-project)

[ 16 ](/q/35139738 ""Question score \(upvotes - downvotes\)"") [Sensible group
Id for individual project?](/questions/35139738/sensible-group-id-for-
individual-project)

[ 52 ](/q/39185798 ""Question score \(upvotes - downvotes\)"") [What is the
difference between artifactId and groupId in
pom.xml?](/questions/39185798/what-is-the-difference-between-artifactid-and-
groupid-in-pom-xml)

[ 1 ](/q/58448007 ""Question score \(upvotes - downvotes\)"") [Allways append
the artifact id to the group id?

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

[![Maven Model](../../../images/apache-maven-project.png)](../../../)

[![](../../../images/maven-logo-black-on-white.png)](../../../)

* * *

  * [Apache](https://www.apache.org/ ""Apache"")/
  * [Maven](../../../index.html ""Maven"")/
  * [Ref](../../ ""Ref"")/
  * [Maven 3.9.7](../ ""Maven 3.9.7"")/
  * [Maven Model](index.html ""Maven Model"")/
  * Maven [![](./images/accessories-text-editor.png)](https://github.com/apache/maven/tree/maven-3.9.7/maven-model/target/generated-site/xdoc/maven.xml)
  * | Last Published: 2024-05-22
  * Version: 3.9.7

  * Overview
  * [Introduction](index.html ""Introduction"")
  * [Javadocs](apidocs/index.html ""Javadocs"")
  * [Source Xref](xref/index.html ""Source Xref"")
  * Descriptors Reference
  * [POM](./maven-model/maven.html ""POM"")
  * [Settings](./maven-settings/settings.html ""Settings"")
  * [Toolchains](./maven-core/toolchains.html ""Toolchains"")
  * Reference
  * [Lifecycles](./maven-core/lifecycles.html ""Lifecycles"")
  * [Plugin Bindings to Default Lifecycle](./maven-core/default-bindings.html ""Plugin Bindings to Default Lifecycle"")
  * [Artifact Handlers](./maven-core/artifact-handlers.html ""Artifact Handlers"")
  * [CLI options](./maven-embedder/cli.html ""CLI options"")
  * [Super POM](./maven-model-builder/super-pom.html ""Super POM"")
  * Development
  * [Maven Developer Centre](./././developers/index.html ""Maven Developer Centre"")
  * [Maven Core ITs](./././core-its/index.html ""Maven Core ITs"")
  * Project Documentation
  * [Project Information](project-info.html ""Project Information"")
  * [Project Reports](project-reports.html ""Project Reports"")
  * Maven Projects
  * [Maven](./.

[INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  
This is the error I got:
*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration.",Spring-Cloud-Platform,project.artifactId,NAME,ace-gate,maven,ace-gate/pom.xml,project.modules.module,NAME,ace-gate,maven,pom.xml,Multi-Maven-Modules,Project Aggregation,"{
    ""plan"": ""1. Analyze the Maven project structure and identify the relationships between modules and artifacts.\n2. Examine the configuration options project.artifactId and project.modules.module in the pom.xml files.\n3. Check if the values of these configuration options are identical, indicating a potential dependency.\n4. Evaluate whether the artifact ID is used to define the module name or vice versa."",
    ""rationale"": ""The configuration option project.artifactId with value ace-gate in ace-gate/pom.xml specifies the unique ID of the artifact within the Maven project. The configuration option project.modules.module with the same value ace-gate in pom.xml defines a module within a Maven multi-module project. Since the values are identical, it is likely that the artifact ID is used to define the module name, indicating a dependency."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modules.module of type NAME with value apollo-configservice in pom.xml of technology maven depends on configuration option spring.application.name of type NAME with value apollo-configservice in apollo-configservice/src/test/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration option project.modules.module with the value apollo-configservice in pom.xml defines a module within a Maven multi-module project. The configuration option spring.application.name with the same value apollo-configservice in the application.yml file specifies the name of the Spring application. The Maven module's name and the Spring application name are aligned, as they reference a common name in project that frequently appears in the project. So, the identical value does not indicate a dependency."",
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options project.dependencies.dependency_spring-cloud-sleuth-zipkin.groupId and project.dependencies.dependency_spring-cloud-starter-alibaba-nacos-discovery.exclusions.exclusion_spring-cloud-starter-netflix-ribbon.groupId have the same value (org.springframework.cloud), which suggests a potential dependency between them. This is because both dependencies are related to Spring Cloud, and changes to one might affect the other.","Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

dependency.version' for org.springframework.cloud:spring-
cloud-starter-config:jar is missing](/questions/54257355/project-build-error-
dependencies-dependency-version-for-org-springframework-c)

[ 12 ](/q/61909247 ""Question score \(upvotes - downvotes\)"") [Dependency
'org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE' not
found](/questions/61909247/dependency-org-springframework-bootspring-boot-
starter-web2-3-0-release-not)

[ 0 ](/q/65878482 ""Question score \(upvotes - downvotes\)"") [Upgrade Spring
Cloud Hoxton.SR6 to 2020.0.0](/questions/65878482/upgrade-spring-cloud-hoxton-
sr6-to-2020-0-0)

[ 0 ](/q/71319082 ""Question score \(upvotes - downvotes\)"") [Spring sleuth
error - correct the classpath of your application so that it contains
compatible versions of the classes](/questions/71319082/spring-sleuth-error-
correct-the-classpath-of-your-application-so-that-it-conta)

[ 5 ](/q/74615108 ""Question score \(upvotes - downvotes\)"") [Sleuth is not
working with Spring Boot 3.0.0 Version](/questions/74615108/sleuth-is-not-
working-with-spring-boot-3-0-0-version)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Constructing the interval [0, 1) via inverse powers of 2 ](https://math.stackexchange.com/questions/4946475/constructing-the-interval-0-1-via-inverse-powers-of-2)
  * [ What are good reasons for declining to referee a manuscript that hasn't been posted on arXiv?

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 33 ](/q/72406352 ""Question score \(upvotes - downvotes\)"") [Spring Boot 3
Micrometer Tracing Example](/questions/72406352/spring-boot-3-micrometer-
tracing-example?noredirect=1)

#### Related

[ 0 ](/q/44976635 ""Question score \(upvotes - downvotes\)"") [Spring cloud
sleuth + Spring Boot 1.4.0 transitive dependencies
issue](/questions/44976635/spring-cloud-sleuth-spring-boot-1-4-0-transitive-
dependencies-issue)

[ 1 ](/q/48940831 ""Question score \(upvotes - downvotes\)"") [Spring boot 2.0
and Spring Cloud Sleuth 2.x Working Sample](/questions/48940831/spring-
boot-2-0-and-spring-cloud-sleuth-2-x-working-sample)

[ 21 ](/q/51921033 ""Question score \(upvotes - downvotes\)"") [Project build
error: 'dependencies.dependency.version' for org.springframework.cloud:spring-
cloud-starter-eureka-server:jar is missing](/questions/51921033/project-build-
error-dependencies-dependency-version-for-org-springframework-c)

[ 0 ](/q/52932301 ""Question score \(upvotes - downvotes\)"") [Cloud Sleuth
change from SpringBoot 1.5 to 2.x](/questions/52932301/cloud-sleuth-change-
from-springboot-1-5-to-2-x)

[ 7 ](/q/54096810 ""Question score \(upvotes - downvotes\)"") [spring-cloud-
sleuth does not show any info in logs after adding
dependencies](/questions/54096810/spring-cloud-sleuth-does-not-show-any-info-
in-logs-after-adding-dependencies)

[ 5 ](/q/54257355 ""Question score \(upvotes - downvotes\)"") [Project build
error: 'dependencies.dependency.

0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
            <version>2.1.1.RELEASE</version>
        </dependency>
    
        <!--Test-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.194</version>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
    
        <!--microservices-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.1.0.RELEASE</version>
        </dependency>
    
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-commons</artifactId>-->
            <!--<version>1.0.0.RELEASE</version>-->
        <!--</dependency>-->
    
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.

[INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  
This is the error I got:
*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration.",Spring-Cloud-Platform,project.dependencies.dependency_spring-cloud-sleuth-zipkin.groupId,NAME,org.springframework.cloud,maven,ace-modules/ace-admin/pom.xml,project.dependencies.dependency_spring-cloud-starter-alibaba-nacos-discovery.exclusions.exclusion_spring-cloud-starter-netflix-ribbon.groupId,NAME,org.springframework.cloud,maven,ace-modules/ace-generator/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and Maven dependencies. Firstly, identify the groupId values of both configurations, which are 'org.springframework.cloud' in both cases. Secondly, check if they refer to the same Maven dependency or different ones. If they have the same artifactId and version, it indicates a value-equality dependency."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-cloud-sleuth-zipkin.groupId and project.dependencies.dependency_spring-cloud-starter-alibaba-nacos-discovery.exclusions.exclusion_spring-cloud-starter-netflix-ribbon.groupId have the same groupId value 'org.springframework.cloud', but they refer to different Maven dependencies. The first one is related to Spring Cloud Sleuth Zipkin, while the second one is related to Spring Cloud Starter Alibaba Nacos Discovery and excludes Spring Cloud Starter Netflix Ribbon. Therefore, there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in notification-service/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-cloud-starter-sleuth.artifactId of type NAME with value spring-cloud-starter-sleuth in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The artifactId 'spring-cloud-starter-sleut' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. It therefore indicates a value-equality dependency."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to their identical values, which suggests a relationship between the Lucene Highlighter and Query Parser dependencies. This value-equality implies that both dependencies might be used together in the Maven project, or one might be a prerequisite for the other.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 1079 ](/q/2619598 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in
Maven](/questions/2619598/differences-between-dependencymanagement-and-
dependencies-in-maven?noredirect=1)

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.version is missing even though the dependency is
already declared in its parent's pom file's dependency management
section](/questions/12900525/dependencies-dependency-version-is-missing-even-
though-the-dependency-is-already?noredirect=1)

[ 13 ](/q/2389602 ""Question score \(upvotes - downvotes\)"") [Maven2 cannot
find parent from relative path](/questions/2389602/maven2-cannot-find-parent-
from-relative-path?noredirect=1)

[ 0 ](/q/68290415 ""Question score \(upvotes - downvotes\)"") [Quarkus
project](/questions/68290415/quarkus-project?noredirect=1)

#### Related

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.

A couple things I think you could try:

  1. Put the literal value of the version in the **child** pom
    
        <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>3.2.3.RELEASE</version>
      <scope>runtime</scope>
    </dependency>
    

  2. Clear your .m2 cache normally located C:\Users\user.m2\repository. I would say I do this pretty frequently when I'm working in maven. Especially before committing so that I can be more confident CI will run. You don't have to nuke the folder every time, sometimes just your project packages and the .cache folder are enough.

  3. Add a relativePath tag to your parent pom declaration
    
        <parent>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
     <relativePath>../parent/pom.xml</relativePath>
    </parent>
    

It looks like you have 8 total errors in your poms. I would try to get some
basic compilation running before adding the parent pom and properties.

[Share](/a/17327104 ""Short permalink to this answer"")

[Improve this answer](/posts/17327104/edit)

Follow

answered Jun 26, 2013 at 17:51

[![Brian Blain's user
avatar](https://www.gravatar.com/avatar/c5f1129473ab6d11b3eb940c24a6fd26?s=64&d=identicon&r=PG)](/users/1451832/brian-
blain)

[Brian Blain](/users/1451832/brian-blain)Brian Blain

91277 silver badges44 bronze badges

4

  * 1

Just to clarify - the other 7 errors that I excluded were all of the same sort
- i.e.

io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:538) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:531) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:111) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:323) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:685) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:632) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:549) demo |  at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511) demo |  at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918) demo |  at org.apache.flink.shaded.netty4.io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.",Spring-Cloud-Platform,project.dependencies.dependency_lucene-highlighter.groupId,NAME,org.apache.lucene,maven,ace-modules/ace-tool/pom.xml,project.dependencies.dependency_lucene-queryparser.groupId,NAME,org.apache.lucene,maven,ace-modules/ace-tool/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the groupId values of both configuration options: project.dependencies.dependency_lucene-highlighter.groupId and project.dependencies.dependency_lucene-queryparser.groupId.\n2. Compare the values to determine if they are equal.\n3. If the values are equal, evaluate whether the dependencies are part of the same ecosystem or framework (e.g., Apache Lucene).\n4. Determine if there is a logical dependency between the two configuration options based on their groupId values."",
    ""rationale"": ""The configuration option project.dependencies.dependency_lucene-highlighter.groupId and project.dependencies.dependency_lucene-queryparser.groupId have equal groupId values, which indicates that they are part of the same Apache Lucene ecosystem. This suggests a logical dependency between the two configuration options, as they are likely to be used together in the ace-tool module."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencies.dependency_spring-boot-starter-test.groupId of type NAME with value org.springframework.boot in registry/pom.xml of technology maven depends on configuration option project.dependencies.dependency_spring-boot-starter-security.groupId of type NAME with value org.springframework.boot in account-service/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-test.groupId and the option project.dependencies.dependency_spring-boot-starter-security.groupId located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same Spring Boot ecosystem, but there is no dependency between these two configuration options based on their groupId values."",
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Inferring Dependencies,llama3:70b,config2,6.0,FP,False,"The configuration options management.endpoints.web.exposure.include with value * in both ace-admin and ace-sample applications seem to be identical. This suggests that they might be related or even duplicated configurations. However, without additional context, it is unclear whether one configuration depends on the other or if they are simply identical by coincidence.","The _management.endpoints.web.exposure.include_ property can also take a
comma-separated list of endpoints. So, let's only expose _/beans_ and
_/loggers_ :

            
                        management.endpoints.web.exposure.include=beans, loggers

In addition to including certain endpoints with a property, we can also
exclude endpoints. Let's expose all the endpoints except _/threaddump_ :

            
                        management.endpoints.web.exposure.include=*
            management.endpoints.web.exposure.exclude=threaddump

Both the _include_ and _exclude_ properties take a list of endpoints. **The
_exclude_ property takes precedence over _include_**.

### 3.3. Enabling Specific Endpoints

Next, let's learn how we can get more fine-grained about which endpoints we
have enabled.

First, we need to turn off the default that enables all the endpoints:

            
                        management.endpoints.enabled-by-default=false

Next, let's enable and expose only the _/health_ endpoint:

            
                        management.endpoint.health.enabled=true
            management.endpoints.web.exposure.include=health

With this configuration, we can access only the _/health_ endpoint.

### 3.4. Enabling Shutdown

Because of its sensitive nature, **the _/shutdown_ endpoint is disabled by
default**.

Let's enable it now by adding a line to our _application.properties_ file:

            
                        management.endpoint.shutdown.enabled=true

Now when we query the _/actuator_ endpoint, we should see it listed. **The
_/shutdown_ endpoint only accepts _POST_ requests**, so let's shut down our
application gracefully:

            
                        curl -X POST http://localhost:8080/actuator/shutdown

## 4\. Securing Endpoints

In a real-world application, we're most likely going to have security on our
application. With that in mind, let's secure our actuator endpoints.

If you deploy applications behind a firewall, you may prefer that all your
actuator endpoints can be accessed without requiring authentication. You can
do so by changing the `management.endpoints.web.exposure.include` property, as
follows:

Properties

    
    
    management.endpoints.web.exposure.include=*

Yaml

    
    
    management:
      endpoints:
        web:
          exposure:
            include: ""*""

Additionally, if Spring Security is present, you would need to add custom
security configuration that allows unauthenticated access to the endpoints as
shown in the following example:

    
    
    import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.web.SecurityFilterChain;
    
    @Configuration(proxyBeanMethods = false)
    public class MySecurityConfiguration {
    
        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
            http.requestMatcher(EndpointRequest.toAnyEndpoint())
                    .authorizeRequests((requests) -> requests.anyRequest().permitAll());
            return http.build();
        }
    
    }
    

__ |  In both the examples above, the configuration applies only to the actuator endpoints. Since Spring Boot's security configuration backs off completely in the presence of any `SecurityFilterChain` bean, you will need to configure an additional `SecurityFilterChain` bean with rules that apply to the rest of the application.   
---|---  
  
### 2.4. Configuring Endpoints

Endpoints automatically cache responses to read operations that do not take
any parameters. To configure the amount of time for which an endpoint will
cache a response, use its `cache.time-to-live` property. The following example
sets the time-to-live of the `beans` endpoint's cache to 10 seconds:

Properties

    
    
    management.endpoint.beans.cache.time-to-live=10s

Yaml

    
    
    management:
      endpoint:
        beans:
          cache:
            time-to-live: ""10s""

__ |  The prefix `management.endpoint.<name>` is used to uniquely identify the endpoint that is being configured.   
---|---  
  
### 2.5. Hypermedia for Actuator Web Endpoints

A ""discovery page"" is added with links to all the endpoints. The ""discovery
page"" is available on `/actuator` by default.

For example:

  * `management.endpoints.jmx.exposure.*` \- what endpoints are exposed via JMX?
  * `management.endpoints.jmx.domain` \- what domain should be used to name MBeans?
  * `management.endpoints.web.exposure.*` \- what endpoints are exposed over the web?
  * `management.endpoints.web.base-path` \- under what base path should web endpoints be served?
  * `management.endpoints.enabled-by-default` \- should all endpoints be _enabled_ by default? (note that _enabled_ and _exposed_ are separate concerns)

The `management.endpoint` (singular) properties apply to _individual_ actuator
endpoints, allowing each endpoint to define its own configurable properties.
Specific configurations live under `management.endpoint.<endpointId>.*`.
Hence, it is effectively a namespace reserved for unique and identifiable
endpoints. For example:

  * `management.endpoint.health.show-details` \- should detailed health info be shown?
  * `management.endpoint.health.roles` \- what user roles are permitted to see detailed health info?
  * `management.endpoint.env.enabled` \- should env endpoint be _enabled_? (note that instrumentation is skipped entirely for disabled endpoints)
  * `management.endpoint.env.additional-keys-to-sanitize` \- what additional patterns should be used to sanitize sensitive env vars?

* * *

TL;DR:

  * `management.endpoints.*` globally configures common endpoint properties and the ways in which endpoints may be accessed.
  * `management.endpoint.<endpointId>.*` individually configures the endpoint identified by `endpointId`, which may define its own unique configurable properties.

[Share](/a/76257251 ""Short permalink to this answer"")

[Improve this answer](/posts/76257251/edit)

Follow

answered May 15, 2023 at 19:05

[![ParkerM's user
avatar](https://i.sstatic.net/DD5v8.jpg?s=64)](/users/5659556/parkerm)

[ParkerM](/users/5659556/parkerm)ParkerM

33511 gold badge44 silver badges1818 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow.

| `0ms`  
`management.endpoint.sbom.enabled` | Whether to enable the sbom endpoint. | `true`  
`management.endpoint.scheduledtasks.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.scheduledtasks.enabled` | Whether to enable the scheduledtasks endpoint. | `true`  
`management.endpoint.sessions.enabled` | Whether to enable the sessions endpoint. | `true`  
`management.endpoint.shutdown.enabled` | Whether to enable the shutdown endpoint. | `false`  
`management.endpoint.startup.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.startup.enabled` | Whether to enable the startup endpoint. | `true`  
`management.endpoint.threaddump.cache.time-to-live` | Maximum time that a response can be cached. | `0ms`  
`management.endpoint.threaddump.enabled` | Whether to enable the threaddump endpoint. | `true`  
`management.endpoints.enabled-by-default` | Whether to enable or disable all endpoints by default. |   
`management.endpoints.jackson.isolated-object-mapper` | Whether to use an isolated object mapper to serialize endpoint JSON. | `true`  
`management.endpoints.jmx.domain` | Endpoints JMX domain name. Fallback to 'spring.jmx.default-domain' if set. | `org.springframework.boot`  
`management.endpoints.jmx.exposure.exclude` | Endpoint IDs that should be excluded or '*' for all. |   
`management.endpoints.jmx.exposure.include` | Endpoint IDs that should be included or '*' for all. | `health`  
`management.endpoints.jmx.static-names` | Additional static properties to append to all ObjectNames of MBeans representing Endpoints. |   
`management.endpoints.migrate-legacy-ids` | Whether to transparently migrate legacy endpoint IDs. | `false`  
`management.endpoints.web.base-path` | Base path for Web endpoints. Relative to the servlet context path (server.servlet.context-path) or WebFlux base path (spring.webflux.base-path) when the management server is sharing the main server port. Relative to the management server base path (management.server.base-path) when a separate management server port (management.server.port) is configured.

---|---  
  
### 3.1. Customizing the Management Endpoint Paths

Sometimes, it is useful to customize the prefix for the management endpoints.
For example, your application might already use `/actuator` for another
purpose. You can use the `management.endpoints.web.base-path` property to
change the prefix for your management endpoint, as shown in the following
example:

Properties

    
    
    management.endpoints.web.base-path=/manage

Yaml

    
    
    management:
      endpoints:
        web:
          base-path: ""/manage""

The preceding `application.properties` example changes the endpoint from
`/actuator/{id}` to `/manage/{id}` (for example, `/manage/info`).

__ |  Unless the management port has been configured to expose endpoints by using a different HTTP port, `management.endpoints.web.base-path` is relative to `server.servlet.context-path` (Servlet web applications) or `spring.webflux.base-path` (reactive web applications). If `management.server.port` is configured, `management.endpoints.web.base-path` is relative to `management.server.base-path`.   
---|---  
  
If you want to map endpoints to a different path, you can use the
`management.endpoints.web.path-mapping` property.

The following example remaps `/actuator/health` to `/healthcheck`:

Properties

    
    
    management.endpoints.web.base-path=/
    management.endpoints.web.path-mapping.health=healthcheck

Yaml

    
    
    management:
      endpoints:
        web:
          base-path: ""/""
          path-mapping:
            health: ""healthcheck""

### 3.2. Customizing the Management Server Port

Exposing management endpoints by using the default HTTP port is a sensible
choice for cloud-based deployments. If, however, your application runs inside
your own data center, you may prefer to expose endpoints by using a different
HTTP port.

You can set the `management.server.port` property to change the HTTP port, as
shown in the following example:

Properties

    
    
    management.server.port=8081

Yaml

    
    
    management:
      server:
        port: 8081

__ |  On Cloud Foundry, applications only receive requests on port 8080 for both HTTP and TCP routing, by default.",Spring-Cloud-Platform,management.endpoints.web.exposure.include,UNKNOWN,*,spring,ace-modules/ace-admin/src/main/resources/application.yml,management.endpoints.web.exposure.include,UNKNOWN,*,spring,ace-modules/ace-sample/src/main/resources/application.yml,Others,Others,"{
    ""plan"": ""1. Analyze the context of both configuration options: management.endpoints.web.exposure.include in ace-modules/ace-admin/src/main/resources/application.yml and management.endpoints.web.exposure.include in ace-modules/ace-sample/src/main/resources/application.yml.\n2. Check if they are used in different environments or modules with separate concerns.\n3. Evaluate if the value '*' is a wildcard or a default value, implying no specific dependency between them."",
    ""rationale"": ""The configuration options management.endpoints.web.exposure.include in ace-modules/ace-admin/src/main/resources/application.yml and management.endpoints.web.exposure.include in ace-modules/ace-sample/src/main/resources/application.yml have the same value '*', but they are used in different modules (ace-admin and ace-sample) with separate concerns. The value '*' is likely a wildcard, implying that all endpoints are exposed by default. Therefore, there is no inherent dependency between these options based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value-equality. Since both configurations have the same 'target' version (1.8), it implies that the Maven compiler plugin is configured to compile the code with Java 8 compatibility in both projects. This similarity in configuration values creates a dependency between the two configuration options.","# `maven-compiler-plugin` with `source` & `target`

  2. Using `maven-compiler-plugin` or `maven.compiler.source`/`maven.compiler.target` properties are equivalent.

That is indeed :

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

is equivalent to :

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

according to the [Maven documentation of the compiler
plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
mojo.html) since the `<source>` and the `<target>` elements in the compiler
configuration use the properties `maven.compiler.source` and
`maven.compiler.target` if they are defined.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: 1.7.  
>  User property is: `maven.compiler.source`.

> [**target**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#target)

> The `-target` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

## Setting the `-source` and `-target` of the Java Compiler

Sometimes when you may need to compile a certain project to a different
version than what you are currently using. The `javac` can accept such command
using `-source` and `-target`. The Compiler Plugin can also be configured to
provide these options during compilation.

For example, if you want to use the Java 8 language features (`-source 1.8`)
and also want the compiled classes to be compatible with JVM 1.8 (`-target
1.8`), you can either add the two following properties, which are the default
property names for the plugin parameters:

    
    
    <project>
      [...]
      <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
      </properties>
      [...]
    </project>

or configure the plugin directly:

    
    
    <project>
      [...]
      <build>
        [...]
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.13.0</version>
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
            </configuration>
          </plugin>
        </plugins>
        [...]
      </build>
      [...]
    </project>

**Note:** Merely setting the `target` option does not guarantee that your code
actually runs on a JRE with the specified version. The pitfall is unintended
usage of APIs that only exist in later JREs which would make your code fail at
runtime with a linkage error.

The javac can accept such command using -source and -target.
maven-compiler-plugin can also be configured to provide these options during
compilation.

For example, if you want to use the Java 8 language features (-source 1.8) and
also want the compiled classes to be compatible with JVM 1.8 (-target 1.8),
you can either add the two following properties, which are the default
property names for the plugin parameters:

    
    
    <project>
      [...]
      <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
      </properties>
      [...]
    </project>
    

or configure the plugin directly:

    
    
    <project>
      [...]
      <build>
        [...]
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
              <source>1.8</source>
              <target>1.8</target>
            </configuration>
          </plugin>
        </plugins>
        [...]
      </build>
      [...]
    </project>
    

Technically we can use both spring-boot-maven-plugin and maven-compiler-plugin
in combination if the requirement is to create an executable jar as well as
make sure source and target code have a specific version (which is
accomplished by including maven-compiler-plugin).

In my case, i didn't use in combination but when my java project is a spring
boot app that needs to run as a micro-service etc then we need an executable
jar as build output so used spring boot maven plugin (only) but my other java
project that consists of spring beans or components and is going to be used as
a spring enabled library in other external apps but not required to run on its
own but had to make sure source and target versions are specified then normal
""mvn package"" generated jar should work. For that maven compiler plugin (only)
should do the job.

Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

About the default values for `source` and `target`, note that [since the
`3.8.0` of the maven compiler, the default values have changed from `1.5` to
`1.6`](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12341563).

# `maven-compiler-plugin` with `release` instead of `source` & `target`

  3. The maven-compiler-plugin `3.6` and later versions provide a new way :

org.apache.maven.plugins maven-compiler-plugin 3.8.0 9

You could also declare just :

    
    
    <properties>
        <maven.compiler.release>9</maven.compiler.release>
    </properties>
    

But at this time it will not work as the `maven-compiler-plugin` default
version you use doesn't rely on a recent enough version.

The Maven `release` argument conveys `release` : a [new JVM standard option
](https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627) that we could
pass from Java 9 :

> Compiles against the public, supported and documented API for a specific VM
> version.

This way provides a standard way to specify the same version for the `source`,
the `target` and the `bootstrap` JVM options.  
Note that specifying the `bootstrap` is a good practice for cross compilations
and it will not hurt if you don't make cross compilations either.

* * *

**Which is the best way to specify the JDK version?**

The first way (`<java.version>`) is allowed only if you use Spring Boot.

**For Java 8 and below :**

About the two other ways : valuing the
`maven.compiler.source`/`maven.compiler.target` properties **or** using the
`maven-compiler-plugin`, you can use one or the other. It changes nothing in
the facts since finally the two solutions rely on the same properties and the
same mechanism : the maven core compiler plugin.

From its point of view, it is an unknown JDK version since it was released
after it.  
In this case, you should configure the Maven compiler plugin to specify the
JDK in this way :

    
    
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <compilerVersion>1.8</compilerVersion>      
            <fork>true</fork>
            <executable>D:\jdk1.8\bin\javac</executable>                
        </configuration>
    </plugin>
    

You could have more details in [examples with maven compiler
plugin](https://maven.apache.org/plugins/maven-compiler-
plugin/examples/compile-using-different-jdk.html).

* * *

It is not asked but cases where that may be more complicated is when you
specify source but not target. It may use a different version in target
according to the source version. Rules are particular : you can read about
them in [the Cross-Compilation Options
part](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html).

* * *

**Why the compiler plugin is traced in the output at the execution of the
Maven`package` goal even if you don't specify it in the pom.xml?**

To compile your code and more generally to perform all tasks required for a
maven goal, Maven needs tools. So, it uses core Maven plugins (you recognize a
core Maven plugin by its `groupId` : `org.apache.maven.plugins`) to do the
required tasks : compiler plugin for compiling classes, test plugin for
executing tests, and so for... So, even if you don't declare these plugins,
they are bound to the execution of the Maven lifecycle.  
At the root dir of your Maven project, you can run the command : `mvn
help:effective-pom` to get the final pom effectively used. You could see among
other information, attached plugins by Maven (specified or not in your
pom.xml), with the used version, their configuration and the executed goals
for each phase of the lifecycle.",Spring-Cloud-Platform,project.build.plugins.plugin_maven-compiler-plugin.configuration.target,VERSION_NUMBER,target:1.8,maven,ace-gate/pom.xml,project.build.plugins.plugin_maven-compiler-plugin.configuration.target,VERSION_NUMBER,target:1.8,maven,ace-modules/ace-admin/pom.xml,Version Numbers,JAVA Version,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their roles in the Maven build process. The `project.build.plugins.plugin_maven-compiler-plugin.configuration.target` option specifies the target Java version for compilation. Since both configurations have the same value `target:1.8`, it implies that they are related. We can check if there is a hierarchical relationship between the two projects, where one project inherits the configuration from the other. If so, then the dependency exists."",
    ""rationale"": ""The configuration options `project.build.plugins.plugin_maven-compiler-plugin.configuration.target` with value `target:1.8` in both `ace-gate/pom.xml` and `ace-modules/ace-admin/pom.xml` specify the same target Java version for compilation. This value-equality suggests a dependency between the two configurations, as they are likely to be related through inheritance or other means."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Resource Sharing,llama3:70b,config2,8.0,FP,False,"The two configuration options have the same value, which suggests a potential relationship between them. The coreSize parameter determines the number of threads in the thread pool that are available to execute tasks. If one option is changed, it could affect the performance of the thread pool and, consequently, the other option. However, without further analysis, we cannot conclude that changing one option would directly impact the other.","Along with it is [Hystrix
support](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-
cloud-feign.html#spring-cloud-feign-hystrix) \- a circuit breaker mechanism.
Every Feign client call is wrapped with a Hystrix command for fault tolerance
or latency tolerance.

    
    
    @FeignClient(value = ""system-service"", fallback = SystemFallback.class)  
    public interface **SystemClient** {__ @GetMapping(value = ""/user"")  
        JsonResponse<List<UserDto>> **sendGetAllUsers**();  
      
    }

In this example, current service can make a REST call to system-service to get
a list of users. Associate with it is a fallback function to return an empty
list if the call fails.

    
    
    @Component  
    public class **SystemFallback** implements SystemClient {  
         
       @Override  
       public JsonResponse<List<UserDto>> **sendGetAllUsers**() {  
          return new JsonResponse<>(Collections._emptyList_());  
       }  
      
    }

So far, our discussion mainly focuses on how Hystrix ThreadPool works, so I
will **disable** the Circuit breaker mechanism, which means the circuit is in
always in CLOSED state. All calls can go past the circuit breaker and reach
the ThreadPoolExecutor for execution.

    
    
    hystrix:  
      command:  
        default:  
          circuitBreaker:  
            #sleepWindowInMilliseconds: 10000  
            #_requestVolumeThreshold: 6  
            _**enabled: false**  
          execution:  
            isolation:_  
    _ strategy: THREAD _  
    _ thread:  
                timeoutInMilliseconds: 3000

Now, let's take a look back at the Hystrix Thread Pool configuration:

    
    
    hystrix:_  
    _ threadpool:  
        default:_  
    _**coreSize** : 2  
          _#keepAliveTimeMinutes:1  
          _**maximumSize** : 5  
          **allowMaximumSizeToDivergeFromCoreSize** : true  
     _  
    _**maxQueueSize** : 3 _  
    _**queueSizeRejectionThreshold** : 3

First group is the Thread Pool configuration:

**· coreSize** : number of always-available threads in Thread pool.

**· maximumSize** : maximum capacity of the Thread Pool.

I'm working on a spring boot project about electronic contract recently.And
There has an interface of raiseContract().Considering that the traffic of this
interface will be large in the future,My Leader let me use Hystrix to defender
it.And I did not use it before.I am learning it and trying to use it on the
interface.I use ThreadPool Isolation Strategy and I don't konw how to set the
parameter of coreSize reasonable in ThreadPoolProperties.In other words,I want
to know what should I follow to set it.

I did a lot of research,but I did not get the answer.All of Answer is about
the meaning of coreSize,maxQueueSize etc.

Here is my code:

    
    
    @HystrixCommand(
                groupKey = ""contractGroup"",
                commandKey = ""raiseContract"",
                fallbackMethod = ""raiseContractFallback"",
                threadPoolProperties = {
                        @HystrixProperty(name = ""coreSize"", value = ""20""),
                        @HystrixProperty(name = ""maxQueueSize"", value = ""150""),
                        @HystrixProperty(name = ""queueSizeRejectionThreshold"", value = ""100"")},
                commandProperties = {
                        @HystrixProperty(name = ""execution.isolation.thread.timeoutInMilliseconds"", value = ""15000""),
                        @HystrixProperty(name = ""circuitBreaker.requestVolumeThreshold"", value = ""5""),
                        @HystrixProperty(name = ""circuitBreaker.errorThresholdPercentage"", value = ""50""),
                        @HystrixProperty(name = ""circuitBreaker.sleepWindowInMilliseconds"", value = ""3000""),
                        @HystrixProperty(name = ""fallback.isolation.semaphore.maxConcurrentRequests"", value = ""20"")
                })
    

  * [hystrix](/questions/tagged/hystrix ""show questions tagged 'hystrix'"")

[Share](/q/56394800 ""Short permalink to this question"")

[Improve this question](/posts/56394800/edit)

Follow

asked May 31, 2019 at 12:05

[!

will post the solution once I have tested it & know it works.

- [Amrut](/users/3812718/amrut ""981 reputation"")

Commented Jul 8, 2015 at 9:20

  * Those values came through the hystrix.stream.

- [spencergibb](/users/2730527/spencergibb ""24,949 reputation"")

Commented Jul 8, 2015 at 16:10

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/31211685/configuring-hystrix-
command-properties-using-application-yaml-in-spring-boot-
app?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

37

[](/posts/31290555/timeline ""Show activity on this post."")

The main problem was that, I was using groupKey value instead of commandKey
value to define the properties. The wiki page for these configuration
properties - <https://github.com/Netflix/Hystrix/wiki/Configuration#intro>
says -

    
    
    hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds
    

Replace the HystrixCommandKey portion of the property with the value you set
for commandkey.

    
    
    hystrix.threadpool.HystrixThreadPoolKey.coreSize
    

Replace the HystrixThreadPoolKey portion of the property with the value you
set for threadPoolKey.

Here is how I define both commandKey & threadPoolKey over the method wrapped
by HystrixCommand -

    
    
    @HystrixCommand(groupKey = ""StoreSubmission"", commandKey = ""StoreSubmission"", threadPoolKey = ""StoreSubmission"")
    public String storeSubmission(ReturnType returnType, InputStream is, String id) {
    }
    

You can actually define both command & threadpool properties on the method
within **@HystixCommand** annotation.

a professional project I joined implements the Microservice
Architecture (MSA) using the Spring Cloud Netflix stack including Eureka,
Spring Cloud Config Server, Feign Client with Hystrix support and more.
Playing with the Hystrix, a circuit breaker, I get confused with the [thread
pool
configuration](https://github.com/Netflix/Hystrix/wiki/Configuration#ThreadPool)
and [how it works](https://github.com/Netflix/Hystrix/wiki/How-it-
Works#Threads):

    
    
    hystrix:  
      command:  
        default:  
          circuitBreaker:  
            #sleepWindowInMilliseconds: 10000  
            #_requestVolumeThreshold: 6  
            _enabled: false  
          execution:  
            isolation:_  
    _ strategy: THREAD _  
    _ thread:  
                timeoutInMilliseconds: 3000  
     _  
    _ threadpool:  
        default:_  
    _ coreSize: 2  
          _#keepAliveTimeMinutes:1  
          _maximumSize: 5  
          allowMaximumSizeToDivergeFromCoreSize: true  
     _  
    _ maxQueueSize: 3 _  
    _ queueSizeRejectionThreshold: 3

That leads me to research about thread pool, concurrency concept. After
searching a dozen of articles, I found a thing behind the thread pool:
[**ThreadPoolExecutor**](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html).
The API documentation is comprehensive and detailed but difficult to imagine
the working flow since there's no diagram or illustration, only descriptive
text. But another clue that enlightens me to understand about it is the
**producer/consumer pattern.**

**Producer consumer pattern**

Simply put, tasks are sent from **multiple** **producers** into a waiting
**queue,** waiting to be handled by **multiple** **consumers.**

Internally, Hystrix Thread Pool is a Java's ThreadPoolExecutor which
implements this pattern.

[https://medium.com/@vipulgupta_19290/threadpool-or-executor-
framework-7007844cac52](/@vipulgupta_19290/threadpool-or-executor-
framework-7007844cac52)

In the microservice environment, I use FeignClient as a Rest client to
communicate with other business services.

**· maximumSize** : maximum capacity of the Thread Pool. By default, it’s
equal to coreSize and only takes effect when
allowMaximumSizeToDivergeFromCoreSize=true. Ideally, coreSize < maximumSize.

**· allowMaximumSizeToDivergeFromCoreSize** (default **false**): when
switching to true, allow maximumSize to have different value from coreSize.

In the sample configuration, I set the _coreSize_ =2, _maximumSize_ =5 and
_allowMaximumSizeToDivergeFromCoreSize_ =true. This means there are always 2
available threads ready to execute tasks. When necessary, 3 more threads can
be created and ready to serve. They will get disposed if idle for more than
_keepAliveInMinutes_ period (default 1).  
(See **Core and maximum pool sizes** and **Keep-alive times** section
[here](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html)).

The latter group is the queue configuration:

**· maxQueueSize** (default: -1): maximum size of the
[LinkedBlockingQueue](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html),
fixed after initialization. When value is -1, a
[SynchronousQueue](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/SynchronousQueue.html)
is used instead, a simple hand-off queue with no buffer.

**· queueSizeRejectionThreshold** : dynamically changes the queue limit, never
exceeds the _maxQueueSize_ , only takes effect when _maxQueueSize_ value is
positive.

(More info can found in this git issue
[discussion](https://github.com/Netflix/Hystrix/issues/1554) or official
Netflix document).

Here’s the illustration when I send 10 concurrent _requests_ (illustrated as
_tasks_):

Initially, there are _2 available threads_ in the thread pool. The 2 first
tasks go through the queue and get redirected to idle _Thread 1 and 2_ for
execution.

When task 3 is enqueued, as there’s no available thread, ThreadFactory inside
the ThreadPoolExecutor creates a new _Thread 3_ to handle the task.",Spring-Cloud-Platform,hystrix.threadpool.default.coreSize,NUMBER,1000,spring,ace-modules/ace-admin/src/main/resources/application.yml,hystrix.threadpool.default.coreSize,NUMBER,1000,spring,ace-modules/ace-sample/src/main/resources/application.yml,Integers,Number,"{
    ""plan"": ""1. Identify the configuration options: hystrix.threadpool.default.coreSize in ace-modules/ace-admin/src/main/resources/application.yml and hystrix.threadpool.default.coreSize in ace-modules/ace-sample/src/main/resources/application.yml.\n2. Check if they have the same value (1000).\n3. Evaluate whether the similarity in values indicates a dependency between them, considering their usage in different modules and environments."",
    ""rationale"": ""The configuration options hystrix.threadpool.default.coreSize in ace-modules/ace-admin/src/main/resources/application.yml and hystrix.threadpool.default.coreSize in ace-modules/ace-sample/src/main/resources/application.yml have the same value (1000), but they are used in different modules (admin and sample) and likely have separate thread pool configurations. Therefore, there is no dependency between these options based on value-equality."",
    ""isDependency"": false
}","Carefully evaluate whether configuration option spring.datasource.username of type USERNAME with value root in ace-modules/ace-sample/src/main/resources/application.yml of technology spring depends on configuration option spring.sample-datasource.username of type USERNAME with value root in ace-modules/ace-generator/src/main/resources/application.yml of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.username in ace-modules/ace-sample/src/main/resources/application.yml and spring.sample-datasource.username in ace-modules/ace-generator/src/main/resources/application.yml do not inherently depend on each other despite both having the value 'root'. Typically, each module in a project has its own datasource. Therefore, the similarity in their values does not indicate a dependency between them."",
    ""isDependency"": false
}

Carefully evaluate whether configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-prod.properties of technology spring depends on configuration option spring.datasource.password of type PASSWORD with value 123456 in music-server/src/main/resources/application-dev.properties of technology spring or vice versa.

{
    ""rationale"": ""The configuration options spring.datasource.password in music-server/src/main/resources/application-prod.properties and spring.datasource.password in music-server/src/main/resources/application-dev.properties are used in different environments (production and development), and each is likely defined independently for its specific environment and uses its own datasource. Therefore, there is no dependency between these options based on value-equality.""
    ""isDependency"": false
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion with value modelVersion:4.0.0 in both POM files do not directly depend on each other due to value equality. However, they might be related through the Maven project aggregation mechanism, where the parent POM (ace-monitor) aggregates the child POM (ace-admin).","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",Spring-Cloud-Platform,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-infrastructure/ace-monitor/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-admin/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in ace-infrastructure/ace-monitor/pom.xml and ace-modules/ace-admin/pom.xml, follow these steps:\n1. Check if both Maven projects use the same model version (4.0.0).\n2. Verify that the packaging type of the parent project is set to 'pom' to enable module aggregation.\n3. Ensure that the modules section in the parent project includes the relative path to the child project."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The equality of values and types does not inherently create a dependency between the two configuration options. They might be independent configurations that happen to share the same value. A dependency would imply that one option's value is influenced by or affects the other, which is not evident in this case.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

* reporting

Notable elements which are `not` inherited include:

  * artifactId
  * name
  * prerequisites
  * profiles (but the effects of active profiles from parent POMs are)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>my-parent</artifactId>
        <version>2.0</version>
        <relativePath>../my-parent</relativePath>
      </parent>
    
      <artifactId>my-project</artifactId>
    </project>

Notice the `relativePath` element. It is not required, but may be used as a
signifier to Maven to first search the path given for this project's parent,
before searching the local and then remote repositories.

To see inheritance in action, just have a look at the
[ASF](https://github.com/apache/maven-apache-parent/blob/master/pom.xml) or
[Maven](https://github.com/apache/maven-parent/blob/master/pom.xml) parent
POM's.

Detailed inheritance rules are outlined in [Maven Model
Builder](https://maven.apache.org/ref/3-LATEST/maven-model-
builder/index.html#Inheritance_Assembly). All URLs are transformed when being
inherited by default. The other ones are just inherited as is. For plugin
configuration you can overwrite the inheritance behaviour with the attributes
`combine.children` or `combine.self` outlined in Plugins.

#### The Super POM

Similar to the inheritance of objects in object oriented programming, POMs
that extend a parent POM inherit certain values from that parent. Moreover,
just as Java objects ultimately inherit from `java.lang.Object`, all Project
Object Models inherit from a base Super POM. The snippet below is the Super
POM for Maven 3.5.4.

    
    
    <project>
      <modelVersion>4.0.

The only
element that exists as a prerequisite in POM 4.0.0 is the `maven` element,
which takes a minimum version number.

Use [ Maven Enforcer Plugin's `requireMavenVersion` rule](/enforcer/enforcer-
rules/requireMavenVersion.html), or other rules for **build-time**
prerequisites. For packaging `maven-plugin` this is still used at **run-time**
to make sure that the minimum Maven version for the plugin is met (but only in
the pom.xml of the referenced plugin).

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <prerequisites>
        <maven>2.0.6</maven>
      </prerequisites>
      ...
    </project>

## Repositories

Repositories are collections of artifacts which adhere to the Maven repository
directory layout. In order to be a Maven repository artifact, a POM file must
live within the structure `$BASE_REPO/groupId/artifactId/version/artifactId-
version.pom`. `$BASE_REPO` can be local (file structure) or remote (base URL);
the remaining layout will be the same. Repositories exist as a place to
collect and store artifacts. Whenever a project has a dependency upon an
artifact, Maven will first attempt to use a local copy of the specified
artifact. If that artifact does not exist in the local repository, it will
then attempt to download from a remote repository. The repository elements
within a POM specify those alternate repositories to search.

The repository is one of the most powerful features of the Maven community. By
default Maven searches the central repository at
<https://repo.maven.apache.org/maven2/>. Additional repositories can be
configured in the pom.xml `repositories` element.

## Distribution Management

Distribution management acts precisely as it sounds: it manages the
distribution of the artifact and supporting files generated throughout the
build process.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <distributionManagement>
        <repository>...</repository>
        <snapshotRepository>...<snapshotRepository>
        <site>...</site>
        <relocation>...</relocation>
        <downloadUrl>...</downloadUrl>
        <status>...</status>
      </distributionManagement>
      ...
    </project>

### Repository

Whereas the repositories element specifies in the POM the location and manner
in which Maven may download remote artifacts for use by the current project,
distributionManagement specifies where (and how) this project will get to a
remote repository when it is deployed. The repository elements will be used
for snapshot distribution if the snapshotRepository is not defined.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <distributionManagement>
        <repository>
          <uniqueVersion>false</uniqueVersion>
          <id>corp1</id>
          <name>Corporate Repository</name>
          <url>scp://repo/maven2</url>
          <layout>default</layout>
        </repository>
        <snapshotRepository>
          <uniqueVersion>true</uniqueVersion>
          <id>propSnap</id>
          <name>Propellors Snapshots</name>
          <url>sftp://propellers.net/maven</url>
          <layout>legacy</layout>
        </snapshotRepository>
        ...
      </distributionManagement>
      ...
    </project>

  * **id** , **name** : The `id` is used to uniquely identify this repository amongst many, and the `name` is a human readable form.",Spring-Cloud-Platform,project.ModelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-nlp/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-sample/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""1. Check the Maven project files (pom.xml) in both ace-modules/ace-nlp and ace-modules/ace-sample for the configuration option project.ModelVersion.\n2. Verify that the type of this configuration option is VERSION_NUMBER and its value is modelVersion:4.0.0 in both projects.\n3. Since Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility, evaluate whether the project.ModelVersion needs to be the same across both modules."",
    ""rationale"": ""The 'project.ModelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.ModelVersion needs to be the same across both modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FN,True,"The configuration options have the same value 'ace-common' for artifactId, but this alone does not imply a direct dependency between them. The dependency exists only if they are part of the same Maven project hierarchy or if one project depends on the other explicitly or transitively.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",Spring-Cloud-Platform,project.dependencies.dependency_ace-common.artifactId,NAME,ace-common,maven,ace-dev-base/ace-auth-sdk/pom.xml,project.dependencies.dependency_ace-common.artifactId,NAME,ace-common,maven,ace-modules/ace-sample/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""To evaluate the dependency between the two configuration options, we need to analyze their values and usage in the Maven project. Firstly, identify the artifactId 'ace-common' in both pom.xml files (ace-dev-base/ace-auth-sdk/pom.xml and ace-modules/ace-sample/pom.xml). Check if they are part of the same project or have a parent-child relationship. If they share a common parent or are in the same project, it's likely that they depend on each other due to value-equality."",
    ""rationale"": ""The configuration options project.dependencies.dependency_ace-common.artifactId with the value ace-common in both pom.xml files suggest a possible dependency between them. Since they share the same artifactId and are part of Maven projects, it's likely that they depend on each other due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.build.finalName of type NAME with value ace-gate in ace-gate/pom.xml of technology maven depends on configuration option project.artifactId of type NAME with value ace-gate in 'ace-gate/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The configuration option project.build.finalName with the value ace-gate in ace-gate/pom.xml specifies the final name of the built artifact. The configuration option project.artifactId with the same value ace-gate in the same pom.xml identifies the artifact's unique ID within the project. Typically, the finalName is often derived from or set to match the artifactId. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-seata/pom.xml of technology maven depends on configuration option project.parent_pig-common.artifactId of type NAME with value pig-common in pig-common/pig-common-mybatis/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""Both, pig-common-seata and pig-common-mybatis are submodule in the pig project and inherit the artifactID from the parent module pig-common. Due to project inheritance, these options depend on each other due to value-equality."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Configuration Consistency,llama3:70b,config2,8.0,FP,False,"The configuration options depend on each other due to value equality. Since both POM files have the same version number for javax.servlet-api (3.1.0), it implies that they are dependent on each other.","[Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# javax.servlet-api

Used in 218651 components

pkg:maven/javax.servlet/javax.servlet-api@4.0.1

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

## Overview

### Description

Java.net - The Source for Java Technology Collaboration

### Snippets

Apache MavenGradleGradle (short)Gradle (Kotlin)sbtivygrapeleiningenbuildr

Copy to clipboard

    
    
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
    </dependency>

### Maven POM File

Copy to clipboard

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <!--
    
        DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
    
        Copyright (c) 1997-2017 Oracle and/or its affiliates. All rights reserved.
    
        The contents of this file are subject to the terms of either the GNU
        General Public License Version 2 only (""GPL"") or the Common Development
        and Distribution License(""CDDL"") (collectively, the ""License"").  You
        may not use this file except in compliance with the License.  You can
        obtain a copy of the License at
        https://oss.oracle.com/licenses/CDDL+GPL-1.1
        or LICENSE.txt.  See the License for the specific
        language governing permissions and limitations under the License.
    
        When distributing the software, include this License Header Notice in each
        file and include the License file at LICENSE.txt.
    
        GPL Classpath Exception:
        Oracle designates this particular file as subject to the ""Classpath""
        exception as provided by Oracle in the GPL Version 2 section of the License
        file that accompanied this code.

GPL Classpath Exception:
        Oracle designates this particular file as subject to the ""Classpath""
        exception as provided by Oracle in the GPL Version 2 section of the License
        file that accompanied this code.
    
        Modifications:
        If applicable, add the following below the License Header, with the fields
        enclosed by brackets [] replaced by your own identifying information:
        ""Portions Copyright [year] [name of copyright owner]""
    
        Contributor(s):
        If you wish your version of this file to be governed by only the CDDL or
        only the GPL Version 2, indicate your decision by adding ""[Contributor]
        elects to include this software in this distribution under the [CDDL or GPL
        Version 2] license.""  If you don't indicate a single choice of license, a
        recipient has the option to distribute your version of this file under
        either the CDDL, the GPL Version 2 or to extend the choice of license to
        its licensees as provided above.  However, if you add GPL Version 2 code
        and therefore, elected the GPL Version 2 license, then the option applies
        only if the new code is made subject to such option by the copyright
        holder.
    
    -->
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>net.java</groupId>
            <artifactId>jvnet-parent</artifactId>
            <version>3</version>
        </parent>
    
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <packaging>jar</packaging>
        <version>4.0.1</version>
    
        <properties>
            <spec.version>4.0</spec.version>
            <extension.name>javax.servlet</extension.name>
            <bundle.symbolicName>javax.servlet-api</bundle.symbolicName>
            <bundle.version>4.

threshold}</threshold>
                        <excludeFilterFile>${findbugs.exclude}</excludeFilterFile>
                    </configuration>
                </plugin>
            </plugins>
        </reporting>
    </project>
    

![Sonatype Developer For Free](/sonatype-developer-logo.svg)

### Get recommended versions right in your IDE with SCA built for teams

Sonatype Developer Team makes coding faster and safer, and provides real-time
guidance to developers to make your job easier.

[Try Developer Team For Free](https://www.sonatype.com/request-sonatype-
developer-team-
trial/?utm_campaign=Central%20Developer%20Team%20Trial&utm_source=Central&utm_medium=Product&utm_content=central&utm_term=artifact)

OSS Index

Loading...

[View](https://ossindex.sonatype.org/component/pkg:maven/javax.servlet/javax.servlet-
api@4.0.1)

### Metadata

6 years ago

Licenses

  * CDDL + GPLv2 with classpath exception

12.3 kB

* * *

### Organization

[javax.servlet](/namespace/javax.servlet)

* * *

### External Resources

[Project URL](https://javaee.github.io/servlet-spec/)

[Issue Tracker URL](https://github.com/javaee/servlet-spec/issues)

[Source Control](https://github.com/javaee/servlet-spec)

* * *

### Known Contributors

Ed BurnsShing Wai Chan

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)

# Jakarta EE

In recent years, Oracle transferred the Java EE technologies to the [Eclipse
Foundation](https://en.wikipedia.org/wiki/Eclipse_Foundation). There the
technologies have been renamed to [_Jakarta EE_](https://jakarta.ee/). So
_Java Servlet_ is now known as [_Jakarta
Servlet_](https://projects.eclipse.org/projects/ee4j.servlet).

This name change was done to respect Oracle’s trademarks. Do a Web search to
find many articles and videos discussing this transition.

This name change includes changing the package naming of the classes from
`javax.*` to `jakarta.*`. This is a breaking change, though updating your
project may be as simple as merely changing your `import` statements. But
check that any libraries you depend on have versions available using the new
naming as well.

# Servlet 5

This transition has brought new versions of the Servlet specification.
[Version 5](https://jakarta.ee/specifications/servlet/5.0/) of the spec is the
same as [Servlet 4](https://jakarta.ee/specifications/servlet/4.0/) but with
the new naming.

For the current version, edit your
[POM](https://en.m.wikipedia.org/wiki/Apache_Maven#Project_Object_Model) file
to use the following Maven dependency. [Check for updates in a Maven
repository](https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-
api) of your choice in the version numbering.

You can deploy web apps built with Servlet 5 to web containers such as Tomcat
10.0.x, Jetty 11.0.x, Glassfish 6, and several more.

    
    
    <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>5.0.0</version>
        <scope>provided</scope>
    </dependency>
    

# Servlet 6

[Jakarta Servlet 6](https://jakarta.ee/specifications/servlet/6.0/)
specification is currently in development, and will contain significant
changes. The spec will be finalized later this year 2022.

javax.servlet.jsp.tagext. How to
import?](/questions/41470826/gradle-finds-the-servlet-library-but-not-jsp-i-e-
javax-servlet-jsp-tagext-how?noredirect=1)

[ 0 ](/q/71180424 ""Question score \(upvotes - downvotes\)"") [IntelliJ servlet
errors, unable to open servlet](/questions/71180424/intellij-servlet-errors-
unable-to-open-servlet?noredirect=1)

#### Related

[ 10 ](/q/3223935 ""Question score \(upvotes - downvotes\)"") [maven + eclipse +
servlet-api.jar](/questions/3223935/maven-eclipse-servlet-api-jar)

[ 1 ](/q/5616498 ""Question score \(upvotes - downvotes\)"") [Problems with
servlets and maven](/questions/5616498/problems-with-servlets-and-maven)

[ 3 ](/q/13982955 ""Question score \(upvotes - downvotes\)"") [Setting up
Servlet / JSP jars in pom.xml for Tomcat 7](/questions/13982955/setting-up-
servlet-jsp-jars-in-pom-xml-for-tomcat-7)

[ 1 ](/q/16903758 ""Question score \(upvotes - downvotes\)"") [How to include
servlet-api.jar in my Java solution?](/questions/16903758/how-to-include-
servlet-api-jar-in-my-java-solution)

[ 0 ](/q/22994142 ""Question score \(upvotes - downvotes\)"") [servlet-api
missing from Maven project](/questions/22994142/servlet-api-missing-from-
maven-project)

[ 0 ](/q/23011247 ""Question score \(upvotes - downvotes\)"") [Maven dependency
javax.servlet must be included in POM for new build
server](/questions/23011247/maven-dependency-javax-servlet-must-be-included-
in-pom-for-new-build-server)

[ 0 ](/q/36534275 ""Question score \(upvotes - downvotes\)"") [Servlet call
failing.",Spring-Cloud-Platform,project.dependencies.dependency_javax.servlet-api.version,VERSION_NUMBER,javax.servlet-api:3.1.0,maven,ace-modules/ace-admin/pom.xml,project.dependencies.dependency_javax.servlet-api.version,VERSION_NUMBER,javax.servlet-api:3.1.0,maven,ace-modules/ace-sample/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Check if both Maven projects (ace-modules/ace-admin/pom.xml and ace-modules/ace-sample/pom.xml) have the same version of javax.servlet-api dependency. 2. Verify that the version number is consistent across both projects. 3. If the versions are identical, then a dependency exists due to value-equality."",
    ""rationale"": ""The 'version' in Maven dependencies specifies the specific version of a library to be used in the project. Since both projects have the same groupId and artifactId for javax.servlet-api, having the same version number ensures compatibility and consistency across modules. Therefore, the configuration options depend on each other due to value-equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId of type NAME with value org.linlinjava in pom.xml of technology maven depends on configuration option project.parent_litemall.groupId of type NAME with value org.linlinjava in litemall-core/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options depend on each other as litemall-admin-api is a specific module in the litemall project and therefore needs to specificy the same groupID used in the project to identify all modules."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
Context Uilization and Retrieval,llama3:70b,config2,8.0,FN,True,"The configuration options project.modelVersion in both POMs have the same value (4.0.0), which indicates that they are compatible with each other. However, this does not necessarily imply a dependency between them. A dependency would exist if one of the projects aggregates the other or if they share a common parent project.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",Spring-Cloud-Platform,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-dev-base/ace-auth-sdk/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-generator/pom.xml,Version Numbers,POM Version,"{
    ""plan"": ""To evaluate the dependency between the configuration options project.modelVersion in ace-dev-base/ace-auth-sdk/pom.xml and ace-modules/ace-generator/pom.xml, follow these steps:\n1. Check if both Maven projects use the same model version (4.0.0).\n2. Verify that the value of project.modelVersion is consistent across both modules.\n3. If the values are equal, a dependency exists due to value-equality."",
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-all/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in litemall-admin-api/pom.xml of technology maven or vice versa.

{
    ""rationale"": ""The 'project.modelVersion' in a Maven project typically specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0 and this is required all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, creatiing a dependency based on value-equality."",
    ""isDependency"": true
}

Carefully evaluate whether configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-security/pom.xml of technology maven depends on configuration option project.modelVersion of type VERSION_NUMBER with value modelVersion:4.0.0 in mall-search/pom.xml of technology maven or vice versa.

 {
    ""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
    ""isDependency"": true
}","Spring-Cloud-Platform is a microservice development platform based on Spring Cloud, featuring a unified authorization and authentication backend management system. 
It includes multiple modules such as user management, resource and permission management, and gateway API management 
The core technologies used are Spring Boot, Spring Cloud, and Spring Cloud Alibaba, Maven, Docker, and Docker-Compose.

In the Spring-Cloud-Platform project, Maven's project inheritance is implemented by defining a parent module that contains shared dependencies, plugins, and configuration settings in a centralized POM file, which all other modules reference in their <parent> element. 
Each module inherits these predefined configurations from the parent module, ensuring a consistent build environment and simplifying dependency management across the entire project.

The project structure of the first two levels of Spring-Cloud-Platform is as follows:

Spring-Cloud-Platform/
├── ace-api/ # Common data transfer object for cross-service calls
│   ├── pom.xml
│   └── src/
├── ace-dev-base/ # general scaffolding
│   ├── ace-auth-sdk/
│   ├── ace-common/
│   └── pom.xml
├── ace-gate/ # Gateway load center
│   ├── pom.xml
│   └── src/
├── ace-infrastructure/ # Operations and maintenance center
│   ├── ace-monitor/
│   ├── ace-nacos/
│   ├── ace-sentinel/
│   └── pom.xml
├── ace-modules/ # Common service modules
│   ├── ace-admin/
│   ├── ace-generator/
│   ├── ace-nlp/
│   ├── ace-sample/
│   ├── ace-tool/
│   └── pom.xml
├── docker-compose.yml
└── pom.xml"
