final_failure_category,llm,config,uncertainty,correct,rating,reasoning,context_str,project,option_name,option_type,option_value,option_technology,option_file,dependent_option_name,dependent_option_type,dependent_option_value,dependent_option_technology,dependent_option_file,final_category,sub_category,responses
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The 'modelVersion' in Maven POM files is a mandatory field that specifies the version of the POM model being used. According to the provided context, the 'modelVersion' is always set to 4.0.0 because it is the only supported version in Maven 2 and 3. This means that any Maven project using these versions must have 'modelVersion' set to 4.0.0. Therefore, the identical 'modelVersion' values in apollo-audit/apollo-audit-api/pom.xml and apollo-biz/pom.xml are not due to a direct dependency between these specific projects but rather a requirement imposed by the Maven framework itself. This indicates that the same 'modelVersion' values are a result of adhering to Maven's requirements rather than an inter-project dependency.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",apollo,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,apollo-audit/apollo-audit-api/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,apollo-biz/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'apollo-audit/apollo-audit-api/pom.xml' and 'apollo-biz/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Review the provided examples and rationale for similar dependencies, noting that Maven exclusively supports model version 4.0.0 and requires it to be consistent across all modules for compatibility.\n4. Determine if the same rationale applies to the given configuration options in the Apollo project.\n5. Conclude whether a dependency based on value-equality exists between the specified configuration options."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build system."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The groupId in Maven is used to uniquely identify a project across all projects. The fact that both groupId values are 'com.ctrip.framework.apollo' suggests they belong to the same organization or project family. However, this does not inherently mean they depend on each other due to value-equality. The groupId is more about organizational structure and namespace rather than a functional dependency. Therefore, while it is good practice for related projects to share a common groupId, it is not a strict requirement for functionality.","[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Click to view the value of grayscale."",
  ""Component.Namespace.Master.Items.Body.NewAdded"": ""New"",
  ""Component.Namespace.Master.Items.Body.NewAddedTips"": ""New Configuration"",
  ""Component.Namespace.Master.Items.Body.Modified"": ""Modified"",
  ""Component.Namespace.Master.Items.Body.ModifiedTips"": ""Modified Configuration"",
  ""Component.Namespace.Master.Items.Body.Deleted"": ""Deleted"",
  ""Component.Namespace.Master.Items.Body.DeletedTips"": ""Deleted Configuration"",
  ""Component.Namespace.Master.Items.Body.ModifyTips"": ""Modify"",
  ""Component.Namespace.Master.Items.Body.DeleteTips"": ""Delete"",
  ""Component.Namespace.Master.Items.Body.Link.Title"": ""Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Link.NoCoverLinkItem"": ""No Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Title"": ""Public Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Published"": ""Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublish"": ""Unreleased Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips1"": ""Owner of the current public namespace"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips2"": ""hasn't associated this namespace, please contact the owner of {{namespace.parentAppId}} to associate this namespace in the {{namespace.parentAppId}} project."",
  ""Component.Namespace.Master.Items.Body.Public.NoPublished"": ""No Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.PublishedAndCover"": ""Override this configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.Title"": ""No public configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.PublishedValue"": ""Released Value"",
  ""Component.Namespace.Master.Items.Body.NoPublished.NoPublishedValue"": ""Unreleased Value"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemType"": ""Type"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemOldValue"": ""Old Value"",
  ""Component.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.

Apollo client will not be able to fetch the configuration and will record 404 log information. Please release it in time."",
  ""Component.Namespace.Master.Items.Body.FilterByKey"": ""Input key to filter"",
  ""Component.Namespace.Master.Items.Body.PublishState"": ""Release Status"",
  ""Component.Namespace.Master.Items.Body.Sort"": ""Sort"",
  ""Component.Namespace.Master.Items.Body.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.ItemValue"": ""Value"",
  ""Component.Namespace.Master.Items.Body.ItemComment"": ""Comment"",
  ""Component.Namespace.Master.Items.Body.ItemLastModify"": ""Last Modifier"",
  ""Component.Namespace.Master.Items.Body.ItemLastModifyTime"": ""Last Modified Time"",
  ""Component.Namespace.Master.Items.Body.ItemOperator"": ""Operation"",
  ""Component.Namespace.Master.Items.Body.NoPublish"": ""Unreleased"",
  ""Component.Namespace.Master.Items.Body.NoPublishTitle"": ""Click to view released values"",
  ""Component.Namespace.Master.Items.Body.NoPublishTips"": ""New configuration, no released value"",
  ""Component.Namespace.Master.Items.Body.Published"": ""Released"",
  ""Component.Namespace.Master.Items.Body.PublishedTitle"": ""Effective configuration"",
  ""Component.Namespace.Master.Items.Body.ClickToSee"": ""Click to view"",
  ""Component.Namespace.Master.Items.Body.Grayscale"": ""Gray"",
  ""Component.Namespace.Master.Items.Body.HaveGrayscale"": ""This configuration has grayscale configuration. Click to view the value of grayscale.",apollo,project.parent_apollo-audit.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-audit/apollo-audit-api/pom.xml,project.parent_apollo.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-configservice/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_apollo-audit.groupId in apollo-audit/apollo-audit-api/pom.xml and project.parent_apollo.groupId in apollo-configservice/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is to uniquely identify a project across all projects. \n3. Compare the values of both configuration options, which are both 'com.ctrip.framework.apollo'. \n4. Determine if the identical values indicate a dependency by analyzing if one configuration option must have the same value as the other for the project to function correctly. \n5. Refer to the provided examples to see how similar dependencies are evaluated, particularly focusing on the rationale behind dependencies involving 'groupId'. \n6. Conclude whether the identical values are due to a dependency or merely for consistency within the project."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In this case, both configuration options have the value 'com.ctrip.framework.apollo', which indicates that they belong to the same project. The 'groupId' must be consistent across all modules of a project to ensure that they are correctly identified as part of the same project. Therefore, the configuration options depend on each other because they need to specify the same 'groupId' to maintain the project structure and identification."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration option 'project.version' in Maven can be set using a property like 'revision'. If both 'apollo-audit/apollo-audit-impl/pom.xml' and 'apollo-audit/apollo-audit-spring-boot-starter/pom.xml' use 'version:${revision}' and this 'revision' property is defined in a common parent POM, then they will have the same value. However, this does not necessarily mean they depend on each other unless the build process or dependency resolution explicitly requires them to be identical. The provided context suggests that using 'version:${revision}' is a common practice to ensure consistency across modules, but it does not indicate a strict dependency between the two specific files.","## Dependencies

In a multi module build you have often the case that you define dependencies
between module(s). The usual way of defining dependencies and their
appropriate versions has been to use `${project.version}` and this has not
been changed.

So the correct way to do such things can be seen in the following example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

The child will look like this:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
      <dependencies>
        <dependency>
          <groupId>org.apache.maven.ci</groupId>
          <artifactId>child2</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
    </project>
    

If you try to use `${revision}` instead of `${project.version}` your build
will fail.

## Install / Deploy

If you like to install or deploy artifacts by using the above setup you **have
to use** the [flatten-maven-plugin](https://www.mojohaus.org/flatten-maven-
plugin/) otherwise you will install/deploy artifacts in your repository which
will not be consumable by Maven anymore.

How is placeholder `${project.version}` resolved for managed properties from
parent pom? I've expected that it is resolved globally, so when the parent pom
has version 2, `${project.version}` would also be resolved to version 2.

In parent pom I have:

    
    
    <groupId>my.group</groupId>
    <artifactId>parent</artifactId>
    <version>2</version>
    <packaging>pom</packaging>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>my.group</groupId>
                <artifactId>dep</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>     
    

In child I use

    
    
    <parent>
        <groupId>my.group</groupId>
        <artifactId>parent</artifactId>
        <version>2</version>
    </parent>
    <version>1</version>
    <artifactId>child</artifactId>
    

But the artifact `my.group.dep.1.jar` is used, instead of
`my.group.dep.2.jar`. So the placeholder is resolved to the version of the
project **using** the managed dependency, and not those of the project
**defining** the dependency.

Is that expected behaviour? I'm using **maven 3.0.4.**

  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")
  * [build-dependencies](/questions/tagged/build-dependencies ""show questions tagged 'build-dependencies'"")

[Share](/q/16895555 ""Short permalink to this question"")

Follow

[edited Apr 11, 2014 at 10:29](/posts/16895555/revisions ""show all edits to
this post"")

[![Aritz's user
avatar](https://i.sstatic.net/55Hvn.jpg?s=64)](/users/1199132/aritz)

[Aritz](/users/1199132/aritz)

31.4k1616 gold badges142142 silver badges222222 bronze badges

asked Jun 3, 2013 at 11:21

[!

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is my setup for a 5V motor project faulty? ](https://electronics.stackexchange.com/questions/719669/is-my-setup-for-a-5v-motor-project-faulty)
  * [ Improved memory leads to writing success ](https://scifi.stackexchange.com/questions/289930/improved-memory-leads-to-writing-success)
  * [ He is ill/well/highly reputed of ](https://ell.stackexchange.com/questions/354985/he-is-ill-well-highly-reputed-of)
  * [ Journal I published is on the ESCI list, but can't find it in PubMed, is there a reason for that?

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.",apollo,project.version,VERSION_NUMBER,version:${revision},maven,apollo-audit/apollo-audit-impl/pom.xml,project.version,VERSION_NUMBER,version:${revision},maven,apollo-audit/apollo-audit-spring-boot-starter/pom.xml,Multi-Maven-Modules,Maven Properties,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.version' in 'apollo-audit/apollo-audit-impl/pom.xml' and 'project.version' in 'apollo-audit/apollo-audit-spring-boot-starter/pom.xml'.\n2. Note that both configuration options use the placeholder '${revision}' for their version values.\n3. Understand the role of '${revision}' in Maven projects, which is typically used to centralize version management in a parent POM.\n4. Compare this scenario with the provided examples to determine if the use of '${revision}' creates a dependency based on value-equality.\n5. Evaluate if the value of '${revision}' must be identical in both configuration options for the project to function correctly.\n6. Conclude whether the identical use of '${revision}' indicates a dependency or is merely a consistency measure."",
	""rationale"": ""The configuration option 'project.version' in both 'apollo-audit/apollo-audit-impl/pom.xml' and 'apollo-audit/apollo-audit-spring-boot-starter/pom.xml' uses the placeholder '${revision}'. This placeholder is typically defined in a parent POM to centralize version management across multiple modules. The use of '${revision}' ensures that all modules share the same version number, which is crucial for maintaining compatibility and consistency within the project. This scenario is similar to the example where 'project.modelVersion' must be consistent across all modules to ensure compatibility. Therefore, the use of '${revision}' in both configuration options creates a dependency based on value-equality, as the project would not function correctly if these values were different."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration option project.parent_apollo-audit.groupId defines the groupId for the parent POM of the apollo-audit module, while project.dependencies.dependency_apollo-common.groupId defines the groupId for a dependency in the apollo-biz module. These configurations are related to different aspects of the Maven project structure: one is for the parent POM and the other is for a dependency. The fact that they share the same value 'com.ctrip.framework.apollo' is likely due to the organizational structure of the project rather than a functional dependency. Therefore, the identical values do not imply a value-equality dependency.","For example you would have the Maven compiler plugin configured out of the box
with Java 8 and UTF-8 (that you can of course redefined in your child project)
:

    
    
    <properties>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <resource.delimiter>@</resource.delimiter>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>
    

Additionally, some other plugins potential useful by a Spring Boot project
will also be defined in the super pom and be inherited by your project such as
:

    
    
    <pluginManagement>
      <plugins>
         ...
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <mainClass>${start-class}</mainClass>
            </configuration>
        </plugin>
        ...
      </plugins>
    </pluginManagement>
    

Note that a parent pom may define `dependencies`, directly inherited by the
child projects but not necessary.  
For example the `spring-boot-starter-parent` doesn't define any `dependency`
directly inherited by child projects but instead of define `dependency` in
`<dependencyManagement><dependencies>`.  
It means that children of this parent pom may use the dependencies but they
have to explicitly state that in `dependencies`.  
For example :

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
    

Note that the version is not valued as inherited.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

So you should declare them explicitly in the pom.xml of your project.

For example to define the compiler version, used encoding and configure the
build to repackage the built component(to make it standalone executable), you
will will have to specify more things :

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <springboot.version>1.5.2.RELEASE</springboot.version>
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <build>
       <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                 <version>${springboot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>myClass</mainClass>
                </configuration>
            </plugin>      
       <plugins>
    </build>
    

[Share](/a/49716404 ""Short permalink to this answer"")

Follow

[edited Apr 8, 2018 at 9:54](/posts/49716404/revisions ""show all edits to this
post"")

answered Apr 8, 2018 at 9:27

[![davidxxx's user
avatar](https://i.sstatic.net/LSTUa.png?s=64)](/users/270371/davidxxx)

[davidxxx](/users/270371/davidxxx)davidxxx

130k2323 gold badges221221 silver badges223223 bronze badges

Add a comment  | 

2

[](/posts/49715866/timeline ""Show activity on this post."")

A parent POM can be declared with packaging `pom`. It is not meant to be
distributed because it is only referenced from other projects.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

Click to view the value of grayscale."",
  ""Component.Namespace.Master.Items.Body.NewAdded"": ""New"",
  ""Component.Namespace.Master.Items.Body.NewAddedTips"": ""New Configuration"",
  ""Component.Namespace.Master.Items.Body.Modified"": ""Modified"",
  ""Component.Namespace.Master.Items.Body.ModifiedTips"": ""Modified Configuration"",
  ""Component.Namespace.Master.Items.Body.Deleted"": ""Deleted"",
  ""Component.Namespace.Master.Items.Body.DeletedTips"": ""Deleted Configuration"",
  ""Component.Namespace.Master.Items.Body.ModifyTips"": ""Modify"",
  ""Component.Namespace.Master.Items.Body.DeleteTips"": ""Delete"",
  ""Component.Namespace.Master.Items.Body.Link.Title"": ""Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Link.NoCoverLinkItem"": ""No Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Title"": ""Public Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Published"": ""Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublish"": ""Unreleased Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips1"": ""Owner of the current public namespace"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips2"": ""hasn't associated this namespace, please contact the owner of {{namespace.parentAppId}} to associate this namespace in the {{namespace.parentAppId}} project."",
  ""Component.Namespace.Master.Items.Body.Public.NoPublished"": ""No Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.PublishedAndCover"": ""Override this configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.Title"": ""No public configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.PublishedValue"": ""Released Value"",
  ""Component.Namespace.Master.Items.Body.NoPublished.NoPublishedValue"": ""Unreleased Value"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemType"": ""Type"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemOldValue"": ""Old Value"",
  ""Component.",apollo,project.parent_apollo-audit.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-audit/apollo-audit-impl/pom.xml,project.dependencies.dependency_apollo-common.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-biz/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_apollo-audit.groupId in apollo-audit/apollo-audit-impl/pom.xml and project.dependencies.dependency_apollo-common.groupId in apollo-biz/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is to uniquely identify a project across all projects. \n3. Compare the values of both configuration options to see if they are identical. \n4. Determine if the identical values indicate a dependency by analyzing the context in which they are used. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The configuration option project.parent_apollo-audit.groupId with the value com.ctrip.framework.apollo in apollo-audit/apollo-audit-impl/pom.xml specifies the groupId for the parent project of the apollo-audit-impl module. The configuration option project.dependencies.dependency_apollo-common.groupId with the same value com.ctrip.framework.apollo in apollo-biz/pom.xml specifies the groupId for a dependency in the apollo-biz module. Since both groupIds are identical and refer to the same project, they are dependent on each other to maintain consistency across the project modules."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options project.parent_apollo.groupId and project.groupId both have the value com.ctrip.framework.apollo. In Maven, the groupId is a fundamental identifier for a project, and while it is common for parent and child projects to share the same groupId, it is not a strict requirement. The parent POM's groupId does not necessarily have to match the child POM's groupId for the project to function correctly. The provided context indicates that different groupIds can be used for parent and child POMs, suggesting that the identical values in this case are coincidental rather than indicative of a dependency.","[Share](/a/11786496 ""Short permalink to this answer"")

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.6k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"". I would
compare the groupId with the java package name which represent folders so your
idea of setting the groupId doesn't make sense.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Click to view the value of grayscale."",
  ""Component.Namespace.Master.Items.Body.NewAdded"": ""New"",
  ""Component.Namespace.Master.Items.Body.NewAddedTips"": ""New Configuration"",
  ""Component.Namespace.Master.Items.Body.Modified"": ""Modified"",
  ""Component.Namespace.Master.Items.Body.ModifiedTips"": ""Modified Configuration"",
  ""Component.Namespace.Master.Items.Body.Deleted"": ""Deleted"",
  ""Component.Namespace.Master.Items.Body.DeletedTips"": ""Deleted Configuration"",
  ""Component.Namespace.Master.Items.Body.ModifyTips"": ""Modify"",
  ""Component.Namespace.Master.Items.Body.DeleteTips"": ""Delete"",
  ""Component.Namespace.Master.Items.Body.Link.Title"": ""Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Link.NoCoverLinkItem"": ""No Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Title"": ""Public Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Published"": ""Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublish"": ""Unreleased Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips1"": ""Owner of the current public namespace"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips2"": ""hasn't associated this namespace, please contact the owner of {{namespace.parentAppId}} to associate this namespace in the {{namespace.parentAppId}} project."",
  ""Component.Namespace.Master.Items.Body.Public.NoPublished"": ""No Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.PublishedAndCover"": ""Override this configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.Title"": ""No public configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.PublishedValue"": ""Released Value"",
  ""Component.Namespace.Master.Items.Body.NoPublished.NoPublishedValue"": ""Unreleased Value"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemType"": ""Type"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemOldValue"": ""Old Value"",
  ""Component.",apollo,project.parent_apollo.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-configservice/pom.xml,project.groupId,NAME,com.ctrip.framework.apollo,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_apollo.groupId' in 'apollo-configservice/pom.xml' and 'project.groupId' in 'pom.xml'.\n2. Determine the values of these configuration options: both have the value 'com.ctrip.framework.apollo'.\n3. Analyze the role of 'groupId' in Maven projects, particularly in the context of parent and child POM relationships.\n4. Compare this scenario with the provided examples to understand if the identical values indicate a dependency.\n5. Conclude whether the identical values are due to a necessary dependency or merely for consistency within the project."",
	""rationale"": ""In Maven, the 'groupId' is used to uniquely identify a project across all projects. The 'project.parent_apollo.groupId' in 'apollo-configservice/pom.xml' specifies the groupId of the parent project, while 'project.groupId' in the root 'pom.xml' specifies the groupId of the entire project. The child module 'apollo-configservice' inherits from the parent POM, and thus must specify the same 'groupId' to maintain the hierarchical structure and ensure proper dependency management. This is similar to the example where 'project.dependencyManagement.dependencies.dependency_litemall-admin-api.groupId' depends on 'project.parent_litemall.groupId' because they need to specify the same groupId to identify all modules within the project."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options are set to ${project.build.directory}, which is a standard Maven property referring to the build output directory. This suggests that both configurations are using the same directory for their operations. However, this does not necessarily imply a functional dependency; it could simply be a common practice to use the build directory for various plugins. The equality of these values is likely coincidental and based on standard Maven configuration practices rather than a strict dependency.","build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring-boot-admin.version>3.3.2</spring-boot-admin.version>
        <spring.authorization.version>1.3.1</spring.authorization.version>
        <screw.version>0.0.3</screw.version>
        <captcha.version>2.2.3</captcha.version>
        <aws.version>1.12.675</aws.version>
        <velocity.version>2.3</velocity.version>
        <velocity.tool.version>3.1</velocity.tool.version>
        <configuration.version>1.10</configuration.version>
        <jasypt.version>3.0.5</jasypt.version>
        <jaxb.version>4.0.5</jaxb.version>
        <knife4j.version>3.0.5</knife4j.version>
        <swagger.fox.version>3.0.0</swagger.fox.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <docker.plugin.version>0.44.0</docker.plugin.version>
        <docker.host>http://192.168.0.100:2375</docker.host>
        <docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
        <docker.namespace>pig4cloud</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
        <git.commit.plugin>9.0.1</git.commit.plugin>
        <spring.checkstyle.plugin>0.0.41</spring.checkstyle.plugin>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.

shared.utils.io.IOUtil.copy (IOUtil.java:199)     at org.apache.maven.shared.utils.io.IOUtil.copy (IOUtil.java:181)     at org.apache.maven.shared.utils.io.FileUtils.copyFile (FileUtils.java:1908)     at org.apache.maven.shared.filtering.DefaultMavenFileFilter.copyFile (DefaultMavenFileFilter.java:98)     at org.apache.maven.shared.filtering.DefaultMavenResourcesFiltering.filterResources (DefaultMavenResourcesFiltering.java:262)     at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:356)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.

springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:136)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ContainerApi.start (DockerApi.java:264)     at org.springframework.boot.buildpack.platform.build.Lifecycle.run (Lifecycle.java:148)     at org.springframework.boot.buildpack.platform.build.Lifecycle.execute (Lifecycle.java:113)     at org.springframework.boot.buildpack.platform.build.Builder.executeLifecycle (Builder.java:133)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:72)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:152)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:144)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.

springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:136)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ContainerApi.start (DockerApi.java:264)     at org.springframework.boot.buildpack.platform.build.Lifecycle.run (Lifecycle.java:148)     at org.springframework.boot.buildpack.platform.build.Lifecycle.execute (Lifecycle.java:113)     at org.springframework.boot.buildpack.platform.build.Builder.executeLifecycle (Builder.java:133)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:72)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:152)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:144)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.

For instance, the Maven Antrun Plugin version 1.2 uses Ant version 1.6.5, if
you want to use the latest Ant version when running this plugin, you need to
add `<dependencies>` element like the following:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            ...
            <dependencies>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant</artifactId>
                <version>1.7.1</version>
              </dependency>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant-launcher</artifactId>
                <version>1.7.1</version>
              </dependency>
             </dependencies>
          </plugin>
        </plugins>
      </build>
      ...
    </project>

### Using the `<inherited>` Tag In Build Plugins

By default, plugin configuration should be propagated to child POMs, so to
break the inheritance, you could use the `<inherited>` tag:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            <inherited>false</inherited>
            ...
          </plugin>
        </plugins>
      </build>
      ...
    </project>

## Configuring Reporting Plugins

The following is only to configure Reporting plugins in the `<reporting>`
element.

### Using the `<reporting>` Tag VS `<build>` Tag

Configuring a reporting plugin in the `<reporting>` or `<build>` elements in
the pom does not exactly have the same results.

`mvn site`

    Since maven-site-plugin 3.4, it uses the parameters defined in the `<configuration>` element of each reporting Plugin specified in the `<reporting>` element, in addition to the parameters defined in the `<configuration>` element of each plugin specified in `<build>` (parameters from `<build>` section were previously ignored).",apollo,project.build.plugins.plugin_docker-maven-plugin.configuration.resources.resource.directory,PATH,${project.build.directory},maven,apollo-configservice/pom.xml,project.build.plugins.plugin_replacer.configuration.basedir,PATH,${project.build.directory},maven,apollo-portal/pom.xml,Multi-Maven-Modules,Maven Properties,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.build.plugins.plugin_docker-maven-plugin.configuration.resources.resource.directory in apollo-configservice/pom.xml and project.build.plugins.plugin_replacer.configuration.basedir in apollo-portal/pom.xml. 2. Determine the type and value of each configuration option: both are of type PATH with the value ${project.build.directory}. 3. Understand the purpose of each configuration option: the first option specifies the directory for Docker Maven Plugin resources, and the second option specifies the base directory for the Replacer plugin. 4. Compare the roles of these configuration options within their respective Maven build processes. 5. Evaluate if the identical values are due to a functional dependency or merely a coincidence. 6. Refer to the provided examples to understand how similar dependencies are evaluated. 7. Conclude whether the identical values indicate a dependency."",
	""rationale"": ""The configuration option project.build.plugins.plugin_docker-maven-plugin.configuration.resources.resource.directory in apollo-configservice/pom.xml specifies the directory for Docker Maven Plugin resources, while the option project.build.plugins.plugin_replacer.configuration.basedir in apollo-portal/pom.xml specifies the base directory for the Replacer plugin. Both options use the value ${project.build.directory}, which is a common Maven property representing the build directory. The use of this common property ensures consistency in the build process but does not create a functional dependency between the two configuration options. Each option independently uses the build directory for its specific purpose within the Maven build process."",
	""isDependency"": false
}"
Resource Sharing,gpt-4o-2024-05-13,config2,7.0,FP,False,"The configuration option 'eureka.instance.preferIpAddress' in both files is intended to register the service with its IP address instead of its hostname. The main resources file is typically used for the application's runtime configuration, while the test resources file is used for testing purposes. If the test configuration is meant to simulate the same environment as the runtime configuration, it is likely that the values need to be identical to ensure consistent behavior during testing and actual deployment. However, if the test configuration is independent and only used for isolated testing scenarios, the values do not necessarily need to be identical.","I want to register my micro services in Eureka with the IP address instead of
host name.

I have tried both **prefer-ip-address** and
**eureka.instance.preferIpAddress=true** properties. None of those worked for
me.

Here is my eureka service application .yml file.

[![enter image description
here](https://i.sstatic.net/LIRoU.png)](https://i.sstatic.net/LIRoU.png)

This is my Authorization-server micro-service application.yml

[![enter image description
here](https://i.sstatic.net/LYFip.png)](https://i.sstatic.net/LYFip.png)

But still eureka console showing my services registered with host
name(localhost) instead of IP address

[![enter image description
here](https://i.sstatic.net/LVzvQ.png)](https://i.sstatic.net/LVzvQ.png)

I am using Spring boot 2.2.2 version and Spring cloud Hoxton.RELEASE. I am
guessing the properties aren't working properly.

Is anyone experiencing the same problem?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [microservices](/questions/tagged/microservices ""show questions tagged 'microservices'"")
  * [netflix-eureka](/questions/tagged/netflix-eureka ""show questions tagged 'netflix-eureka'"")

[Share](/q/62229903 ""Short permalink to this question"")

Follow

asked Jun 6, 2020 at 9:40

[!

- [AleGallagher](/users/6833121/alegallagher ""1,825 reputation"")

Commented Mar 11, 2021 at 19:44

  * What purpose you need the IP address ?

- [Chamith Madusanka](/users/12774055/chamith-madusanka ""509 reputation"")

Commented Mar 13, 2021 at 6:28

  * Actually I need the IP of the Docker machine. I need the docker machne ip address for a service that sends emails. It has to send emails with some URLs related wth other services. How can I do to pass the Docker machine ip address to the emailService?

- [AleGallagher](/users/6833121/alegallagher ""1,825 reputation"")

Commented Mar 13, 2021 at 17:53

  * 1

You should use a service registry for this kind of scenarios. It's not good
practice to call services like that.

- [Chamith Madusanka](/users/12774055/chamith-madusanka ""509 reputation"")

Commented Mar 16, 2021 at 18:21

Add a comment  | 

3

[](/posts/62230540/timeline ""Show activity on this post."")

Well I am on mobile so do not see everything clearly but seems like a problem
In declaration

Correct syntax is

    
    
     eureka.instance.preferIpAddress
    

Whereas you are using

    
    
     eureka.instance.prefer-Ip-Address
    

See documentation: <https://github.com/spring-cloud/spring-cloud-
netflix/blob/a7398842078319dcaa353a708c12bb7b9fa85a4e/docs/src/main/asciidoc/spring-
cloud-netflix.adoc#prefer-ip-address>

eureka.instance.preferIpAddress=true will make instance register to Eureka
server with IP address. You do not need to provide IP address in any
configuration as that will be automatically picked up from system by the
application.

In worst case scenario you can define specific IP address.

You do not need to provide IP address in any
configuration as that will be automatically picked up from system by the
application.

In worst case scenario you can define specific IP address.

if you set either the eureka.instance.hostname or the
eureka.instance.ipAddress those will always be used in the
EurekaInstanceConfigBean so if those are not making it to the server in the
registration we need to look at how it is used to build the InstanceInfo.

[Share](/a/62230540 ""Short permalink to this answer"")

Follow

[edited Jun 6, 2020 at 10:51](/posts/62230540/revisions ""show all edits to
this post"")

answered Jun 6, 2020 at 10:44

[![Kunal Vohra's user
avatar](https://i.sstatic.net/Hw1qt.jpg?s=64)](/users/10915384/kunal-vohra)

[Kunal Vohra](/users/10915384/kunal-vohra)Kunal Vohra

2,79522 gold badges1616 silver badges3333 bronze badges

14

  * Hi @Kunal Vohra, i tried eureka.instance.preferIpAddress previously also. But same result.

- [Chamith Madusanka](/users/12774055/chamith-madusanka ""509 reputation"")

Commented Jun 6, 2020 at 11:37

  * Can you put a debug point on EurekaInstanceConfigBean and see what is passed on startup.

- [Kunal Vohra](/users/10915384/kunal-vohra ""2,795 reputation"")

Commented Jun 6, 2020 at 11:49

  * I debugged it. It's clearly returning IP address from the below method @Override public String getHostName(boolean refresh) { if (refresh && !this.hostInfo.override) { this.ipAddress = this.hostInfo.getIpAddress(); this.hostname = this.hostInfo.getHostname(); } return this.preferIpAddress ?

[Chamith Madusanka's user
avatar](https://i.sstatic.net/NhbEf.jpg?s=64)](/users/12774055/chamith-
madusanka)

[Chamith Madusanka](/users/12774055/chamith-madusanka)Chamith Madusanka

50922 gold badges44 silver badges1212 bronze badges

Add a comment  | 

##  2 Answers 2

Sorted by:  [ Reset to default ](/questions/62229903/eureka-service-always-
registers-instances-with-host-name-even-though-i-put-
pref?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

5

[](/posts/62241944/timeline ""Show activity on this post."")

Finally i figured out where i can see **preferIpAddress** property changes.
Hover your mouse to instance. Then in the bottom left corner you can see the
IP.

Before applying property **preferIpAddress = true**

[![enter image description
here](https://i.sstatic.net/KCXbA.png)](https://i.sstatic.net/KCXbA.png)

After applying property **preferIpAddress = true**

[![enter image description
here](https://i.sstatic.net/dbot1.png)](https://i.sstatic.net/dbot1.png)

[Share](/a/62241944 ""Short permalink to this answer"")

Follow

answered Jun 7, 2020 at 6:58

[![Chamith Madusanka's user
avatar](https://i.sstatic.net/NhbEf.jpg?s=64)](/users/12774055/chamith-
madusanka)

[Chamith Madusanka](/users/12774055/chamith-madusanka)Chamith Madusanka

50922 gold badges44 silver badges1212 bronze badges

4

  * How Could I do to get the IP address of the service from another one using LoadBalancerClient?

- [AleGallagher](/users/6833121/alegallagher ""1,825 reputation"")

Commented Mar 11, 2021 at 19:44

  * What purpose you need the IP address ?

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f58112543%2feureka-
preferipaddress-true-is-not-working-with-spring-boot-2-1-3-greenwich-re) or
[log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f58112543%2feureka-
preferipaddress-true-is-not-working-with-spring-boot-2-1-3-greenwich-re) to
customize your list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f58112543%2feureka-preferipaddress-true-is-not-working-with-spring-boot-2-1-3-greenwich-re)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f58112543%2feureka-preferipaddress-true-is-not-working-with-spring-boot-2-1-3-greenwich-re)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9.",apollo,eureka.instance.preferIpAddress,BOOLEAN,TRUE,spring,apollo-adminservice/src/main/resources/application.yml,eureka.instance.preferIpAddress,BOOLEAN,TRUE,spring,apollo-adminservice/src/test/resources/application.yml,Boolean,Boolean,"{
	""plan"": ""1. Identify the configuration options to be evaluated: eureka.instance.preferIpAddress in apollo-adminservice/src/main/resources/application.yml and eureka.instance.preferIpAddress in apollo-adminservice/src/test/resources/application.yml.\n2. Determine the type and value of each configuration option: both are of type BOOLEAN with value TRUE.\n3. Analyze the context in which each configuration option is used: one is in the main application configuration, and the other is in the test configuration.\n4. Compare the usage scenarios to see if the values must be identical for the system to function correctly.\n5. Refer to the provided examples to understand how similar dependencies are evaluated.\n6. Conclude whether the identical values indicate a dependency or are merely coincidental."",
	""rationale"": ""The configuration option eureka.instance.preferIpAddress in both apollo-adminservice/src/main/resources/application.yml and apollo-adminservice/src/test/resources/application.yml is used to determine whether the service should register with its IP address instead of its hostname. The main application configuration and the test configuration are separate contexts: one is for the actual running application, and the other is for testing purposes. The identical values in these contexts do not inherently depend on each other; they are set to TRUE independently to ensure consistent behavior in both environments. This is similar to the example where the Maven module name and the Spring application name are aligned but do not indicate a dependency."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The groupId in Maven projects is used to uniquely identify the project or organization. In this case, both configuration options have the same groupId 'com.ctrip.framework.apollo', which suggests they belong to the same organization or project. However, this does not necessarily imply a value-equality dependency. The groupId being the same could be coincidental, as it is common for related projects to share the same groupId. There is no explicit indication that these values must be identical for the configurations to function correctly. Therefore, the identical values are likely due to organizational naming conventions rather than a strict dependency.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

The aggregator would then use the dependencies in the child modules
to actually find out the order in which the projects are to be built)

    
    
    <project>
       ...
       <artifactId>myparentproject</artifactId>
       <groupId>...</groupId>
       <version>...</version>
    
       <packaging>pom</packaging>
       ...
       <modules>
         <module>MyEJBModule</module>
         <module>MyWarModule</module>
       </modules>
       ...
    </project>
    

That way the projects can relate to each other but (once they are installed in
the local repository) still be used independently as artifacts in other
projects

* * *

Finally, if your projects are not in related directories, you might try to
give them as relative modules:

    
    
    filesystem
     |- mywarproject
     |   `pom.xml
     |- myejbproject
     |   `pom.xml
     `- parent
         `pom.xml
    

now you could just do this (worked in maven 2, just tried it):

    
    
    <!--parent-->
    <project>
      <modules>
        <module>../mywarproject</module>
        <module>../myejbproject</module>
      </modules>
    </project>
    

[Share](/a/15383584 ""Short permalink to this answer"")

Follow

[edited Apr 25, 2018 at 16:01](/posts/15383584/revisions ""show all edits to
this post"")

[![Neuron's user
avatar](https://lh5.googleusercontent.com/-HcKtiretO2g/AAAAAAAAAAI/AAAAAAAAAH0/IXGAL7MX8sQ/photo.jpg?sz=64)](/users/4298200/neuron)

[Neuron](/users/4298200/neuron)

5,63555 gold badges4242 silver badges6161 bronze badges

answered Mar 13, 2013 at 11:08

[!

](/questions/29738773/how-to-use-
dependency-of-projecta-in-projectb-in-maven)

[ 12 ](/q/33208765 ""Question score \(upvotes - downvotes\)"") [how to add
dependency of other maven project to my current maven project in java
eclipse?](/questions/33208765/how-to-add-dependency-of-other-maven-project-to-
my-current-maven-project-in-java)

[ 1 ](/q/48964699 ""Question score \(upvotes - downvotes\)"") [How to add a
maven project as a dependency to another one](/questions/48964699/how-to-add-
a-maven-project-as-a-dependency-to-another-one)

[ 2 ](/q/51871832 ""Question score \(upvotes - downvotes\)"") [How non maven
project can be added as a dependency in maven
project](/questions/51871832/how-non-maven-project-can-be-added-as-a-
dependency-in-maven-project)

[ 0 ](/q/56878639 ""Question score \(upvotes - downvotes\)"") [Adding a local
Maven project as a dependency in another local Maven
project](/questions/56878639/adding-a-local-maven-project-as-a-dependency-in-
another-local-maven-project)

[ 2 ](/q/70950337 ""Question score \(upvotes - downvotes\)"") [how do I add a
Maven dependency on another existing project in
Eclipse](/questions/70950337/how-do-i-add-a-maven-dependency-on-another-
existing-project-in-eclipse)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is increasing Average Product(AP) always implying increasing Marginal Product(MP) in microeconomics? ](https://economics.stackexchange.com/questions/58818/is-increasing-average-productap-always-implying-increasing-marginal-productmp)
  * [ How could double damage be explained in-universe? ](https://worldbuilding.stackexchange.com/questions/260058/how-could-double-damage-be-explained-in-universe)
  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines?

Click to view the value of grayscale."",
  ""Component.Namespace.Master.Items.Body.NewAdded"": ""New"",
  ""Component.Namespace.Master.Items.Body.NewAddedTips"": ""New Configuration"",
  ""Component.Namespace.Master.Items.Body.Modified"": ""Modified"",
  ""Component.Namespace.Master.Items.Body.ModifiedTips"": ""Modified Configuration"",
  ""Component.Namespace.Master.Items.Body.Deleted"": ""Deleted"",
  ""Component.Namespace.Master.Items.Body.DeletedTips"": ""Deleted Configuration"",
  ""Component.Namespace.Master.Items.Body.ModifyTips"": ""Modify"",
  ""Component.Namespace.Master.Items.Body.DeleteTips"": ""Delete"",
  ""Component.Namespace.Master.Items.Body.Link.Title"": ""Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Link.NoCoverLinkItem"": ""No Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Title"": ""Public Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Published"": ""Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublish"": ""Unreleased Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips1"": ""Owner of the current public namespace"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips2"": ""hasn't associated this namespace, please contact the owner of {{namespace.parentAppId}} to associate this namespace in the {{namespace.parentAppId}} project."",
  ""Component.Namespace.Master.Items.Body.Public.NoPublished"": ""No Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.PublishedAndCover"": ""Override this configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.Title"": ""No public configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.PublishedValue"": ""Released Value"",
  ""Component.Namespace.Master.Items.Body.NoPublished.NoPublishedValue"": ""Unreleased Value"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemType"": ""Type"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemOldValue"": ""Old Value"",
  ""Component.

Browse other questions tagged

  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/57372999 ""Question score \(upvotes - downvotes\)"") [How to add a
project as a maven dependency to another project](/questions/57372999/how-to-
add-a-project-as-a-maven-dependency-to-another-project?noredirect=1)

[ 2 ](/q/19963848 ""Question score \(upvotes - downvotes\)"") [Another own Maven
project as dependency - how to solve it?](/questions/19963848/another-own-
maven-project-as-dependency-how-to-solve-it?noredirect=1)

[ 1 ](/q/67386685 ""Question score \(upvotes - downvotes\)"") [Spring Boot
Monolithic to Microservices](/questions/67386685/spring-boot-monolithic-to-
microservices?noredirect=1)

[ 0 ](/q/22097088 ""Question score \(upvotes - downvotes\)"") [How to configure
settings.xml to use custom application in maven
project](/questions/22097088/how-to-configure-settings-xml-to-use-custom-
application-in-maven-project?noredirect=1)

[ 0 ](/q/72446669 ""Question score \(upvotes - downvotes\)"") [How to let a
Maven module have dependency on another Maven module through the pom of a
master project?",apollo,project.dependencies.dependency_apollo-configservice.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-assembly/pom.xml,project.parent_apollo-audit.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-audit/apollo-audit-annotation/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_apollo-configservice.groupId in apollo-assembly/pom.xml and project.parent_apollo-audit.groupId in apollo-audit/apollo-audit-annotation/pom.xml. \n2. Understand the purpose of each configuration option: \n   - project.dependencies.dependency_apollo-configservice.groupId specifies the groupId for a dependency in the apollo-assembly module. \n   - project.parent_apollo-audit.groupId specifies the groupId for the parent project in the apollo-audit-annotation module. \n3. Compare the values of both configuration options: both have the value com.ctrip.framework.apollo. \n4. Determine if the identical values indicate a dependency by analyzing the context and purpose of each configuration option. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Conclude whether the identical values are due to a dependency or merely for consistency within the project."",
	""rationale"": ""The configuration option project.dependencies.dependency_apollo-configservice.groupId in apollo-assembly/pom.xml specifies the groupId for a dependency, indicating that the apollo-assembly module depends on a module with the groupId com.ctrip.framework.apollo. The configuration option project.parent_apollo-audit.groupId in apollo-audit/apollo-audit-annotation/pom.xml specifies the groupId for the parent project, indicating that the apollo-audit-annotation module is part of a larger project with the same groupId. The identical values of com.ctrip.framework.apollo indicate that both modules are part of the same project and need to reference the same groupId to maintain consistency. This is similar to the example where the groupId in Maven is used to uniquely identify a project across all modules. Therefore, the identical values indicate a dependency."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"In Maven, the groupId is a unique identifier for a project or a set of projects. The project.parent_apollo.groupId refers to the groupId of the parent project, while project.dependencyManagement.dependencies.dependency_apollo-common.groupId refers to the groupId of a dependency managed by the dependencyManagement section. These two groupIds being identical suggests that the parent project and the dependency belong to the same organization or project group. However, Maven does not inherently require the groupId of a parent project to match the groupId of a dependency for the build to function correctly. The identical values are likely due to organizational naming conventions rather than a technical requirement.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

![](https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae)

Now available on Stack Overflow for Teams! AI features where you work: search,
IDE, and chat.

[Learn
more](https://stackoverflow.co/teams/ai/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=overflowai-learn-more) [Explore
Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=explore-teams)

  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)

##### Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you
use most.

[ Learn more about Collectives ](/collectives)

**Teams**

Q&A for work

Connect and share knowledge within a single location that is structured and
easy to search.

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Maven - How to find correct groupId/artifactId to include dependency in
POM](/questions/3565889/maven-how-to-find-correct-groupid-artifactid-to-
include-dependency-in-pom)

[ Ask Question ](/questions/ask)

Asked 13 years, 11 months ago

Modified [7 years, 3 months ago](?lastactivity ""2017-04-03 08:45:39Z"")

Viewed 41k times

31

[](/posts/3565889/timeline ""Show activity on this post."")

* Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

Draft saved

Draft discarded

### Sign up or [log
in](/users/login?ssrc=question_page&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f3565889%2fmaven-
how-to-find-correct-groupid-artifactid-to-include-dependency-in-pom%23new-
answer)

Sign up using Google

Sign up using Email and Password

Submit

### Post as a guest

Name

Email

Required, but never shown

### Post as a guest

Name

Email

Required, but never shown

Post Your Answer  Discard

By clicking “Post Your Answer”, you agree to our [terms of
service](https://stackoverflow.com/legal/terms-of-service/public) and
acknowledge you have read our [privacy
policy](https://stackoverflow.com/legal/privacy-policy).

##

Not the answer you're looking for? Browse other questions tagged

  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/24279407 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies not found. How can I find them?

Click to view the value of grayscale."",
  ""Component.Namespace.Master.Items.Body.NewAdded"": ""New"",
  ""Component.Namespace.Master.Items.Body.NewAddedTips"": ""New Configuration"",
  ""Component.Namespace.Master.Items.Body.Modified"": ""Modified"",
  ""Component.Namespace.Master.Items.Body.ModifiedTips"": ""Modified Configuration"",
  ""Component.Namespace.Master.Items.Body.Deleted"": ""Deleted"",
  ""Component.Namespace.Master.Items.Body.DeletedTips"": ""Deleted Configuration"",
  ""Component.Namespace.Master.Items.Body.ModifyTips"": ""Modify"",
  ""Component.Namespace.Master.Items.Body.DeleteTips"": ""Delete"",
  ""Component.Namespace.Master.Items.Body.Link.Title"": ""Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Link.NoCoverLinkItem"": ""No Overridden Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Title"": ""Public Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.Published"": ""Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublish"": ""Unreleased Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips1"": ""Owner of the current public namespace"",
  ""Component.Namespace.Master.Items.Body.Public.NoPublicNamespaceTips2"": ""hasn't associated this namespace, please contact the owner of {{namespace.parentAppId}} to associate this namespace in the {{namespace.parentAppId}} project."",
  ""Component.Namespace.Master.Items.Body.Public.NoPublished"": ""No Released Configuration"",
  ""Component.Namespace.Master.Items.Body.Public.PublishedAndCover"": ""Override this configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.Title"": ""No public configuration"",
  ""Component.Namespace.Master.Items.Body.NoPublished.PublishedValue"": ""Released Value"",
  ""Component.Namespace.Master.Items.Body.NoPublished.NoPublishedValue"": ""Unreleased Value"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemType"": ""Type"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.HistoryView.ItemOldValue"": ""Old Value"",
  ""Component.

Apollo client will not be able to fetch the configuration and will record 404 log information. Please release it in time."",
  ""Component.Namespace.Master.Items.Body.FilterByKey"": ""Input key to filter"",
  ""Component.Namespace.Master.Items.Body.PublishState"": ""Release Status"",
  ""Component.Namespace.Master.Items.Body.Sort"": ""Sort"",
  ""Component.Namespace.Master.Items.Body.ItemKey"": ""Key"",
  ""Component.Namespace.Master.Items.Body.ItemValue"": ""Value"",
  ""Component.Namespace.Master.Items.Body.ItemComment"": ""Comment"",
  ""Component.Namespace.Master.Items.Body.ItemLastModify"": ""Last Modifier"",
  ""Component.Namespace.Master.Items.Body.ItemLastModifyTime"": ""Last Modified Time"",
  ""Component.Namespace.Master.Items.Body.ItemOperator"": ""Operation"",
  ""Component.Namespace.Master.Items.Body.NoPublish"": ""Unreleased"",
  ""Component.Namespace.Master.Items.Body.NoPublishTitle"": ""Click to view released values"",
  ""Component.Namespace.Master.Items.Body.NoPublishTips"": ""New configuration, no released value"",
  ""Component.Namespace.Master.Items.Body.Published"": ""Released"",
  ""Component.Namespace.Master.Items.Body.PublishedTitle"": ""Effective configuration"",
  ""Component.Namespace.Master.Items.Body.ClickToSee"": ""Click to view"",
  ""Component.Namespace.Master.Items.Body.Grayscale"": ""Gray"",
  ""Component.Namespace.Master.Items.Body.HaveGrayscale"": ""This configuration has grayscale configuration. Click to view the value of grayscale.",apollo,project.parent_apollo.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-buildtools/pom.xml,project.dependencyManagement.dependencies.dependency_apollo-common.groupId,NAME,com.ctrip.framework.apollo,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_apollo.groupId in apollo-buildtools/pom.xml and project.dependencyManagement.dependencies.dependency_apollo-common.groupId in pom.xml. \n2. Understand the role of each configuration option in the Maven project structure. \n3. Compare the values of the configuration options to determine if they are identical. \n4. Analyze the context and purpose of each configuration option to determine if the identical values indicate a dependency. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Formulate a rationale based on the analysis and examples. \n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration option project.parent_apollo.groupId with the value com.ctrip.framework.apollo in apollo-buildtools/pom.xml specifies the groupId of the parent project for the apollo-buildtools module. The configuration option project.dependencyManagement.dependencies.dependency_apollo-common.groupId with the same value com.ctrip.framework.apollo in the root pom.xml specifies the groupId for the apollo-common dependency. The groupId in Maven is used to uniquely identify a project across all projects. The identical values indicate that both the parent project and the dependency belong to the same project group, ensuring consistency in project identification. This alignment is necessary for the correct resolution of dependencies and inheritance in the Maven project structure, indicating a dependency."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'com.ctrip.framework.apollo'. In Maven, the groupId is used to uniquely identify a project or a set of related projects. The project.parent_apollo.groupId in the parent POM and the project.dependencyManagement.dependencies.dependency_apollo-biz.groupId in the dependency management section are likely to be the same because they belong to the same organization or project suite. However, the equality of these values does not necessarily imply a functional dependency. The parent POM's groupId is used for inheritance purposes, while the dependency's groupId is used for dependency resolution. These values being the same is more about organizational consistency rather than a strict functional requirement.","[Share](/a/11786496 ""Short permalink to this answer"")

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

Follow

answered Apr 12 at 8:45

[!

apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
        </parent>
    
        <groupId>com.ll</groupId>
        <artifactId>parent-module</artifactId>
        <packaging>pom</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <!-- child will inherit all content -->
        <dependencies>
            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>3.11.0</version>
            </dependency>
        </dependencies>
    
        <!-- child will inherit only version-->
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.apache.zookeeper</groupId>
                    <artifactId>zookeeper</artifactId>
                    <version>3.5.7</version>
                </dependency>
            </dependencies>
        </dependencyManagement>
    
        <modules>
            <module>sub-module1</module>
            <module>sub-module2</module>
        </modules>
    </project>
    

child pom.xml

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://maven.apache.org/POM/4.0.0""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>com.ll</groupId>
            <artifactId>parent-module</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.ll</groupId>
        <artifactId>sub-module1</artifactId>
        <version>1.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"". I would
compare the groupId with the java package name which represent folders so your
idea of setting the groupId doesn't make sense.",apollo,project.parent_apollo.groupId,NAME,com.ctrip.framework.apollo,maven,apollo-audit/pom.xml,project.dependencyManagement.dependencies.dependency_apollo-biz.groupId,NAME,com.ctrip.framework.apollo,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_apollo.groupId in apollo-audit/pom.xml and project.dependencyManagement.dependencies.dependency_apollo-biz.groupId in pom.xml. \n2. Understand the role of each configuration option: \n   - project.parent_apollo.groupId specifies the groupId of the parent POM for the apollo-audit module. \n   - project.dependencyManagement.dependencies.dependency_apollo-biz.groupId specifies the groupId for the apollo-biz dependency in the dependency management section of the parent POM. \n3. Compare the values of both configuration options: both have the value com.ctrip.framework.apollo. \n4. Analyze the context and purpose of these values: \n   - The groupId in Maven is used to uniquely identify a project or module. \n   - The parent POM's groupId is used to inherit common configurations, while the dependency's groupId is used to manage dependencies. \n5. Determine if the identical values indicate a dependency or if they are merely consistent identifiers within the same project."",
	""rationale"": ""The groupId in Maven is a unique identifier for a project or module. The project.parent_apollo.groupId in apollo-audit/pom.xml specifies the groupId of the parent POM, which is used to inherit common configurations. The project.dependencyManagement.dependencies.dependency_apollo-biz.groupId in pom.xml specifies the groupId for the apollo-biz dependency, which is used to manage dependencies. Both configuration options have the same value, com.ctrip.framework.apollo, because they belong to the same project. However, this does not indicate a dependency between the two options. The identical values are used to maintain consistency within the project, but they do not depend on each other for functionality."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The relativePath attribute in a Maven POM file specifies the location of the parent POM file relative to the current project. For both jetlinks-components/gateway-component/pom.xml and jetlinks-components/protocol-component/pom.xml, the relativePath is set to ../pom.xml. This indicates that both projects are referring to a parent POM file located one directory level up from their respective locations. The identical values suggest that both projects share the same parent POM file. However, this does not necessarily mean there is a value-equality dependency. Each project could independently specify the same relative path without requiring the other to have the same value. The dependency would only exist if changing the relativePath in one POM file necessitates a corresponding change in the other to maintain correct functionality.","This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

I have a fringe case. A fat finger case on my part.

My pom parent had this:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mygroup </groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>pom</packaging>
        <name>pom-parent</name>
    

and my (child) pom

    
    
    <parent>
        <groupId>com.mygroup</groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom-parent/pom.xml</relativePath>
    </parent>  
    

My group id in my parent had a fat finger space at the end of the name.
""com.mygroup "" instead of the correct ""com.mygroup"".

Because of this fat finger mistake........the ""groupId"" names did not
match....and I got the error.

Aka, check for fat finger mistakes before you go to too many extremes to
resolve.

error I got for internet-searching

> ""Project build error: 'parent.relativePath' of POM"" ""points at"" ""please
> verify your project structure""

[Share](/a/51485957 ""Short permalink to this answer"")

[Improve this answer](/posts/51485957/edit)

Follow

answered Jul 23, 2018 at 19:28

[![granadaCoder's user
avatar](https://i.sstatic.net/fmJRN.png?s=64)](/users/214977/granadacoder)

[granadaCoder](/users/214977/granadacoder)granadaCoder

27.5k1111 gold badges118118 silver badges160160 bronze badges

Add a comment  | 

1

[](/posts/42787205/timeline ""Show activity on this post."")

* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

Skip to content

[ ![HowToDoInJava](https://howtodoinjava.com/wp-
content/uploads/2023/12/HowToDoInJava-logo.png) ](https://howtodoinjava.com/)

Menu

Menu

  * [Java](https://howtodoinjava.com/series/java-tutorial/)
  * [Spring Boot](https://howtodoinjava.com/series/spring-boot/)
  * [Hibernate](https://howtodoinjava.com/series/hibernate-tutorials/)
  * [JUnit](https://howtodoinjava.com/series/junit/)
  * [Interview](https://howtodoinjava.com/series/interview-guides/)

# Maven Parent and Child POM Example

[Lokesh Gupta](https://howtodoinjava.com/author/lokeshgupta1981/)

December 25, 2022

[Maven](https://howtodoinjava.com/maven/)

[Maven](https://howtodoinjava.com/tag/maven/)

**Maven parent POM** (or super POM) is used to structure the project to
**avoid redundancies or duplicate configurations** using _inheritance between
pom files_. It helps in easy maintenance in long term.

Note that if any dependency or property is configured in both parent and child
POMs with different values then the child POM value will take priority.

## 1\. Contents of Parent POM

A parent POM can be declared with packaging `pom`. It is not meant to be
distributed because it is only referenced from other projects.

Maven parent pom can contain almost everything, and those can be inherited
into child pom files e.g

  * Common data - Developers' names, SCM address, distribution management etc.
  * Constants - Such as version numbers
  * Common dependencies - Common to all children. It has the same effect as writing them several times in individual pom files.
  * Properties - For example plugins, declarations, executions and IDs.
  * Configurations
  * Resources

## 2\. A simple Example of Parent POM and Child POM

To match a parent POM, Maven uses two rules:

  * There is a pom file in the project's root directory or in a given relative path.
  * Reference from the child POM file contains the same coordinates as stated in the parent POM file.",jetlinks-community,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/gateway-component/pom.xml,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/protocol-component/pom.xml,Multi-Maven-Modules,Project Structure,"{
	""plan"": ""1. Understand the role of the 'relativePath' configuration option in Maven POM files.\n2. Analyze the provided information and examples to determine the nature of dependencies based on 'relativePath'.\n3. Compare the 'relativePath' values in the given POM files to see if they must be identical for the project to function correctly.\n4. Evaluate whether the identical values are due to a necessary dependency or merely for consistency.\n5. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""The 'relativePath' configuration option in a Maven POM file specifies the path to the parent POM file relative to the current module. This path is crucial for Maven to correctly locate and inherit configurations from the parent POM. In the given case, both 'jetlinks-components/gateway-component/pom.xml' and 'jetlinks-components/protocol-component/pom.xml' have the 'relativePath' set to '../pom.xml'. This indicates that both modules are referring to the same parent POM file located one directory level up. The value of 'relativePath' must be identical in both POM files to ensure that they correctly inherit configurations from the same parent POM. Therefore, the identical values are not just for consistency but are necessary for the correct functioning of the project, establishing a dependency based on value-equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,9.0,FN,True,"The modelVersion in a Maven POM file specifies the version of the POM model being used. According to Maven documentation, the modelVersion should be set to '4.0.0' for all POM files. This is a standard requirement and not a project-specific dependency. Therefore, while both POM files must have the same modelVersion value ('4.0.0'), this is due to Maven's requirements rather than a direct dependency between the two specific POM files. Each POM file independently adheres to the Maven standard.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/device-manager/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-manager/device-manager/pom.xml' and 'project.modelVersion' in 'jetlinks-manager/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires this version to be consistent across all modules for compatibility.\n4. Compare the values of 'project.modelVersion' in both POM files to ensure they are identical.\n5. Determine if the identical values are due to a dependency based on value-equality or merely for consistency within the project.\n6. Conclude whether a dependency exists based on the need for compatibility across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build process."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options project.dependencies.dependency_notify-core.artifactId in both notify-dingtalk/pom.xml and notify-sms/pom.xml have the same value 'notify-core'. However, the context provided does not indicate that these values must be identical for the project to function correctly. The value 'notify-core' likely refers to a common dependency used by both modules, but this does not imply a direct dependency between the configuration options themselves. Each module can independently specify the same dependency without requiring the other to do so.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.",jetlinks-community,project.dependencies.dependency_notify-core.artifactId,NAME,notify-core,maven,jetlinks-components/notify-component/notify-dingtalk/pom.xml,project.dependencies.dependency_notify-core.artifactId,NAME,notify-core,maven,jetlinks-components/notify-component/notify-sms/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.dependencies.dependency_notify-core.artifactId' in 'jetlinks-components/notify-component/notify-dingtalk/pom.xml' and 'project.dependencies.dependency_notify-core.artifactId' in 'jetlinks-components/notify-component/notify-sms/pom.xml'.\n2. Understand the role of 'artifactId' in Maven, which uniquely identifies a specific artifact within a group.\n3. Compare the provided examples to see how similar dependencies are evaluated, focusing on the rationale behind their dependency status.\n4. Determine if the 'notify-core' artifact is a shared dependency that must be consistent across different modules within the same project.\n5. Evaluate if the 'notify-core' artifactId in both configurations must be identical to ensure the correct dependency is referenced and to maintain consistency within the project.\n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""In Maven, the 'artifactId' uniquely identifies a specific artifact within a group. The 'notify-core' artifactId in both 'jetlinks-components/notify-component/notify-dingtalk/pom.xml' and 'jetlinks-components/notify-component/notify-sms/pom.xml' refers to the same dependency. For the project to function correctly, both modules must reference the same 'notify-core' artifact to ensure consistency and correctness in dependency management. This indicates a value-equality dependency, as both configurations must have identical values to reference the correct dependency."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'relativePath' configuration in Maven POM files specifies the path to the parent POM file relative to the current POM file. This path is used by Maven to locate the parent POM and inherit its configurations. In the given context, both 'jetlinks-components/common-component/pom.xml' and 'jetlinks-components/elasticsearch-component/pom.xml' have the 'relativePath' set to '../pom.xml'. This indicates that both components are referring to a parent POM located one directory level up. However, the value equality here does not imply a dependency between the two configurations. Each 'relativePath' is independently pointing to the parent POM file, and their values being identical is a result of the directory structure rather than a functional dependency. Therefore, changing one 'relativePath' value does not necessitate changing the other, as long as each correctly points to its respective parent POM.","](/questions/21125358/maven-multi-
module-project-is-relativepath-necessary)

[ 8 ](/q/35608981 ""Question score \(upvotes - downvotes\)"") [Relative Path in
Maven parent definition](/questions/35608981/relative-path-in-maven-parent-
definition)

[ 59 ](/q/36450720 ""Question score \(upvotes - downvotes\)"") [Maven:Non-
resolvable parent POM and 'parent.relativePath' points at wrong local
POM](/questions/36450720/mavennon-resolvable-parent-pom-and-parent-
relativepath-points-at-wrong-local)

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path)

[ 5 ](/q/41540074 ""Question score \(upvotes - downvotes\)"") [Non resolvable
parent POM although relativePath set to existing parent
pom.xml](/questions/41540074/non-resolvable-parent-pom-although-relativepath-
set-to-existing-parent-pom-xml)

[ 4 ](/q/43741817 ""Question score \(upvotes - downvotes\)"") [Maven: Eclipse
not correctly configuring paths in a project with a parent
pom](/questions/43741817/maven-eclipse-not-correctly-configuring-paths-in-a-
project-with-a-parent-pom)

[ 0 ](/q/48808466 ""Question score \(upvotes - downvotes\)"") [Maven Project
Build Error : parent.relativePath points at no local
POM](/questions/48808466/maven-project-build-error-parent-relativepath-points-
at-no-local-pom)

[ 1 ](/q/53869863 ""Question score \(upvotes - downvotes\)"") [Maven insist
using local parent rather than remote WITHOUT relativePath
mentioned](/questions/53869863/maven-insist-using-local-parent-rather-than-
remote-without-relativepath-mentione)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What standards did velocipedes have when they were invented?

This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

I have a fringe case. A fat finger case on my part.

My pom parent had this:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mygroup </groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>pom</packaging>
        <name>pom-parent</name>
    

and my (child) pom

    
    
    <parent>
        <groupId>com.mygroup</groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom-parent/pom.xml</relativePath>
    </parent>  
    

My group id in my parent had a fat finger space at the end of the name.
""com.mygroup "" instead of the correct ""com.mygroup"".

Because of this fat finger mistake........the ""groupId"" names did not
match....and I got the error.

Aka, check for fat finger mistakes before you go to too many extremes to
resolve.

error I got for internet-searching

> ""Project build error: 'parent.relativePath' of POM"" ""points at"" ""please
> verify your project structure""

[Share](/a/51485957 ""Short permalink to this answer"")

[Improve this answer](/posts/51485957/edit)

Follow

answered Jul 23, 2018 at 19:28

[![granadaCoder's user
avatar](https://i.sstatic.net/fmJRN.png?s=64)](/users/214977/granadacoder)

[granadaCoder](/users/214977/granadacoder)granadaCoder

27.5k1111 gold badges118118 silver badges160160 bronze badges

Add a comment  | 

1

[](/posts/42787205/timeline ""Show activity on this post."")

* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.",jetlinks-community,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/common-component/pom.xml,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/elasticsearch-component/pom.xml,Multi-Maven-Modules,Project Structure,"{
	""plan"": ""1. Understand the role of the 'relativePath' configuration option in Maven POM files. \n2. Review the provided information and examples to see how similar dependencies are evaluated. \n3. Analyze the specific configuration options in question: 'project.parent_jetlinks-components.relativePath' in 'jetlinks-components/common-component/pom.xml' and 'jetlinks-components/elasticsearch-component/pom.xml'. \n4. Determine if these configuration options must have identical values to function correctly or if they are merely consistent by convention. \n5. Formulate a rationale based on the analysis. \n6. Conclude whether a dependency exists based on value-equality."",
	""rationale"": ""The 'relativePath' configuration option in a Maven POM file specifies the path to the parent POM file relative to the current module. This path is used by Maven to locate the parent POM and inherit its configurations. In the context of the 'jetlinks-components' modules, both 'common-component' and 'elasticsearch-component' reference the same parent POM file located at '../pom.xml'. This is necessary for Maven to correctly resolve the parent POM and apply its configurations to these modules. Therefore, the 'relativePath' values must be identical to ensure that both modules correctly inherit from the same parent POM, creating a dependency based on value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The groupId in a Maven project is used to uniquely identify a project or a set of related projects. In this case, both groupIds are set to 'org.jetlinks.community', which suggests that they belong to the same organization or project namespace. However, the fact that they are the same does not necessarily imply a functional dependency. It is common practice to use a consistent groupId across related projects for organizational purposes, but this does not mean that one configuration option depends on the other. They are likely the same due to organizational naming conventions rather than a technical requirement for them to be identical.","Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Overview

In this tutorial, we will review two important [Maven](/maven-guide) tags —
_dependencyManagement_ and  _dependencies_.

**These features are especially useful for multi-module projects.**

We'll review the similarities and differences of the two tags, and we'll also
look at some common mistakes that developers make when using them that can
cause confusion.

## 2\. Usage

In general, we use the _dependencyManagement_ tag to avoid repeating the
_version_ and _scope_ tags when we define our dependencies in the
_dependencies_ tag. In this way, the required dependency is declared in a
central POM file.

### 2.1. _dependencyManagement_

This tag consists of a _dependencies_ tag which itself might contain multiple
_dependency_ tags. Each _dependency_ is supposed to have at least three main
tags: _groupId_ , _artifactId,_ and _version_. Let's see an example:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-lang3</artifactId>
                        <version>3.14.0</version>
                    </dependency>
                </dependencies>
            </dependencyManagement>
            

The above code just declares the new artifact _commons-lang3_ , but it doesn't
really add it to the project dependency resource list.

### 2.2. _dependencies_

This tag contains a list of _dependency_ tags.

In this case, we will
encounter compile or runtime errors, depending on the mentioned _scope_.

Let's see an example:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.commons</groupId>
                        <artifactId>commons-lang3</artifactId>
                        <version>3.14.0</version>
                    </dependency>
                    ...
                </dependencies>
            </dependencyManagement>
            

Imagine the above POM code snippet. Then suppose we're going to use this
library in a sub-module source file:

            
                        import org.apache.commons.lang3.StringUtils;
            
            public class Main {
            
                public static void main(String[] args) {
                    StringUtils.isBlank("" "");
                }
            }
            

This code will not compile because of the missing library. The compiler
complains about an error:

            
                        [ERROR] Failed to execute goal compile (default-compile) on project sample-module: Compilation failure
            [ERROR] ~/sample-module/src/main/java/com/baeldung/Main.java:[3,32] package org.apache.commons.lang3 does not exist

To avoid this error, it's enough to add the below _dependencies_ tag to the
sub-module POM file:

            
                        <dependencies>
                <dependency>
                    <groupId>org.apache.commons</groupId>
                    <artifactId>commons-lang3</artifactId>
                </dependency>
            </dependencies>
            

## 8\. Conclusion

In this tutorial, we compared Maven's _dependencyManagement_ and
_dependencies_ tags. Then, we reviewed their similarities and differences and
saw how they work together.

As usual, the code for these examples is available [over on
GitHub](https://github.com/eugenp/tutorials/tree/master/maven-modules/maven-
simple/maven-dependency).

Partner - Aegik AB - NPI EA (cat= Persistence)

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)  

**Slow MySQL query performance** is all too common. Of course it is.

The Jet Profiler was **built entirely for MySQL** , so it's fine-tuned for it
and does advanced everything with relaly minimal impact and no server changes.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",jetlinks-community,project.dependencies.dependency_protocol-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-manager/network-manager/pom.xml,project.dependencies.dependency_tdengine-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-standalone/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_protocol-component.groupId in jetlinks-manager/network-manager/pom.xml and project.dependencies.dependency_tdengine-component.groupId in jetlinks-standalone/pom.xml. 2. Determine the type and value of each configuration option: both are of type NAME and have the value org.jetlinks.community. 3. Review the provided examples to understand how similar dependencies are evaluated. 4. Analyze the context and purpose of the groupId in Maven projects, particularly in multi-module projects. 5. Assess whether the equality of the groupId values indicates a dependency between the two configuration options. 6. Formulate a rationale based on the analysis. 7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In multi-module projects, different modules often share the same groupId to indicate that they belong to the same overall project. The configuration options project.dependencies.dependency_protocol-component.groupId and project.dependencies.dependency_tdengine-component.groupId both have the value org.jetlinks.community, indicating that they are part of the same JetLinks Community project. However, the equality of the groupId values alone does not imply a direct dependency between these two specific configuration options. They are simply part of the same project ecosystem, similar to the example where different Spring Boot dependencies share the same groupId but do not depend on each other."",
	""isDependency"": false
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The 'modelVersion' tag in Maven POM files specifies the version of the POM model being used. According to the provided context, 'modelVersion' is always set to 4.0.0 because it is the only supported version in Maven 2 and 3. This indicates that the value of 'modelVersion' is a standard requirement for all Maven POM files and not specific to the project structure. Therefore, the 'modelVersion' values in 'jetlinks-manager/authentication-manager/pom.xml' and 'jetlinks-manager/pom.xml' are not dependent on each other; they are both independently required to be 4.0.0 due to Maven's specifications.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/authentication-manager/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-manager/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-manager/authentication-manager/pom.xml' and 'project.modelVersion' in 'jetlinks-manager/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Note that Maven currently only supports model version 4.0.0, making it mandatory for all modules to use this version to ensure compatibility.\n4. Review the provided examples where similar dependencies were evaluated, noting that the 'project.modelVersion' must be consistent across all modules to maintain compatibility.\n5. Conclude whether the 'project.modelVersion' in 'jetlinks-manager/authentication-manager/pom.xml' depends on the 'project.modelVersion' in 'jetlinks-manager/pom.xml' based on the need for value-equality to ensure compatibility."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules within the project are compatible with the Maven build system."",
	""isDependency"": true
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Docker Compose, the 'ports' configuration typically maps an external port to an internal port for a service. The internal port (services.elasticsearch.ports.in) is the port on which the service inside the container listens, while the external port (services.elasticsearch.ports.out) is the port on the host machine that maps to the internal port. For Elasticsearch, the default internal port is 9300, which is used for node-to-node communication. If the external port is also set to 9300, it means that the host machine's port 9300 is directly mapped to the container's port 9300. This mapping is crucial for the service to be accessible correctly. Therefore, the internal and external ports must be identical to ensure proper communication and functionality.","[ Discuss the Elastic Stack ](/)

#  [Mapping ElasticSearch Port with ports: 92xx:9200 in Docker](/t/mapping-
elasticsearch-port-with-ports-92xx-9200-in-docker/133359)

[ Elastic Stack ](/c/elastic-stack/kibana/7) [ Kibana ](/c/elastic-
stack/kibana/7)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  May 25, 2018, 7:36pm
1

Is it possible to map the default port for an ElasticSearch docker container
from 9200 to 92XX (i.e. 9222) or some other port using -

elasticsearch:  
image:
[docker.elastic.co/elasticsearch/elasticsearch:6.2.4](http://docker.elastic.co/elasticsearch/elasticsearch:6.2.4)  
...  
ports:

  * 92xx:9200

When I attempt to do this and connect using Kibana, Kibana will only connect
if configured on port 9200, i.e. ->  
ELASTICSEARCH_URL=http://elasticsearch:9200

and  
ELASTICSEARCH_URL=http://elasticsearch:96xx  
does not work.

docker container exec -i kibana curl elasticsearch:9200/_cat/health  
returns a valid connection, even though the port should be remapped to 96xx.

docker container exec -i kibana curl elasticsearch:92xx/_cat/health  
returns invalid connection data.

I have used docker container stop and rm to remove all prior container
instances.

[jen-huang](https://discuss.elastic.co/u/jen-huang) (Jen Huang)  May 25, 2018,
8:14pm  2

By default, Elasticsearch docker reserves the ports 9200 and 9300. [Example
base Docker Compose file showing both
ports.](https://github.com/deviantony/docker-elk/blob/master/docker-
compose.yml)

To change the ports (to 9299 and 9399, for example), add:

    
    
        ports:
          - ""9299:9200""
          - ""9399:9300""
    

which maps custom outside port to regular ES inside port.

docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.22

### Starting a single node cluster with
Docker[edit](https://github.com/elastic/elasticsearch/edit/7.17/docs/reference/setup/install/docker.asciidoc
""Edit this page on GitHub"")

To start a single-node Elasticsearch cluster for development or testing,
specify [single-node discovery](bootstrap-checks.html#single-node-discovery
""Single-node discovery"") to bypass the [bootstrap checks](bootstrap-
checks.html ""Bootstrap Checks""):

    
    
    docker run -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e ""discovery.type=single-node"" docker.elastic.co/elasticsearch/elasticsearch:7.17.22

### Starting a multi-node cluster with Docker
Compose[edit](https://github.com/elastic/elasticsearch/edit/7.17/docs/reference/setup/install/docker.asciidoc
""Edit this page on GitHub"")

To get a three-node Elasticsearch cluster up and running in Docker, you can
use Docker Compose:

  1. Create a `docker-compose.yml` file: 

    
    
    version: '2.2'
    services:
      es01:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
        container_name: es01
        environment:
          - node.name=es01
          - cluster.name=es-docker-cluster
          - discovery.seed_hosts=es02,es03
          - cluster.initial_master_nodes=es01,es02,es03
          - bootstrap.memory_lock=true
          - ""ES_JAVA_OPTS=-Xms512m -Xmx512m""
        ulimits:
          memlock:
            soft: -1
            hard: -1
        volumes:
          - data01:/usr/share/elasticsearch/data
        ports:
          - 9200:9200
        networks:
          - elastic
      es02:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
        container_name: es02
        environment:
          - node.name=es02
          - cluster.name=es-docker-cluster
          - discovery.seed_hosts=es01,es03
          - cluster.initial_master_nodes=es01,es02,

I have
edited my post as well.

So for your Elasticsearch service, it should be:

    
    
    ports:
        - ""9699:9200""
    

The rest of the configuration looks good.

(More about `ports` and `expose`: <https://stackoverflow.com/a/40801773>)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
6:54pm  8

I am getting errors when I try the following yml:

    
    
    version: ""3""
    
    volumes:
    elasticsearch-test-vol:
    
    networks:
    elasticsearch-test-net:
    
    services:
    
    elasticsearch-test-624-service:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
        container_name: elasticsearch-test-624
        restart: always
        networks:
            - elasticsearch-test-net
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - ""ES_JAVA_OPTS=-Xms512m -Xmx512m""
            - xpack.security.enabled=true
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
        - ""9699:9200""
        expose:
        - ""9699""
        volumes:
        - elasticsearch-test-vol:/usr/share/elasticsearch/data
    
    kibana-test-624-service:
        image: docker.elastic.co/kibana/kibana:6.2.4
        container_name: kibana-test-624
        hostname: kibana
        restart: always
        networks:
        - elasticsearch-test-net
        environment:
        - SERVER_NAME=kibana.localhost
        - ELASTICSEARCH_URL=http://elasticsearch-test-624:9699
        - ELASTICSEARCH_USERNAME=elastic
        - ELASTICSEARCH_HOST=elasticsearch-test-624
        - ELASTICSEARCH_PORT=9699
        - ELASTIC_PWD=changeme
        - KIBANA_PWD=changeme
        - xpack.security.enabled=true
        ports:
        - ""5699:5601""
        expose:
        - ""5699""
        depends_on:
        - elasticsearch-test-624-service
    

The error messages are as follows:  
Kibana console:

    
    
    Login is currently disabled.

Administrators should consult the Kibana logs for more details.
    

Logs to stdout:

    
    
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""Unable to revive connection: http://elasticsearch-test-624:9699/""}
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""No living connections""}
    
    $ docker-compose ps
         Name                   Command           State           Ports         
    --------------------------------------------------------------------------------
    elasticsearch-test-624   /usr/local/bin/docker-   Up      0.0.0.0:9699->9200/tcp
                         entr ...                         , 9300/tcp, 9699/tcp  
    kibana-test-624          /bin/bash                Up      0.0.0.0:5699->5601/tcp
                         /usr/local/bin/k ...             , 5699/tcp

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
7:00pm  9

As a point of reference, the identical YML with the default port mapping to
9200:9200 works without errors reported... I am explicitly trying to get the
port mappings working in this case.

version: ""3""
    
    volumes:
    elasticsearch-test-vol:
    
    networks:
    elasticsearch-test-net:
    
    services:
    
    elasticsearch-test-624-service:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
        container_name: elasticsearch-test-624
        restart: always
        networks:
            - elasticsearch-test-net
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - ""ES_JAVA_OPTS=-Xms512m -Xmx512m""
            - xpack.security.enabled=true
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
        - ""9200:9200""
        expose:
        - ""9200""
        volumes:
        - elasticsearch-test-vol:/usr/share/elasticsearch/data
    
    kibana-test-624-service:
        image: docker.elastic.co/kibana/kibana:6.2.4
        container_name: kibana-test-624
        hostname: kibana
        restart: always
        networks:
        - elasticsearch-test-net
        environment:
        - SERVER_NAME=kibana.localhost
        - ELASTICSEARCH_URL=http://elasticsearch-test-624:9200
        - ELASTICSEARCH_USERNAME=elastic
        - ELASTICSEARCH_HOST=elasticsearch-test-624
        - ELASTICSEARCH_PORT=9200
        - ELASTIC_PWD=changeme
        - KIBANA_PWD=changeme
        - xpack.security.enabled=true
        ports:
        - ""5699:5601""
        expose:
        - ""5699""
        depends_on:
        - elasticsearch-test-624-service

[system](https://discuss.elastic.co/u/system) (system) Closed  July 9, 2018,
7:00pm  10

This topic was automatically closed 28 days after the last reply. New replies
are no longer allowed.",jetlinks-community,services.elasticsearch.ports.in,PORT,9300,docker-compose,docker/dev-env/docker-compose.yml,services.elasticsearch.ports.out,PORT,9300,docker-compose,docker/dev-env/docker-compose.yml,Port,Port,"{
	""plan"": ""1. Identify the roles of the 'in' and 'out' ports in the Docker Compose configuration. \n2. Determine if the 'in' port (9300) refers to the internal port within the Elasticsearch container and the 'out' port (9300) refers to the external port on the host. \n3. Evaluate if the Elasticsearch service requires the internal and external ports to be the same for proper functionality. \n4. Compare this scenario with the provided examples to see if the ports must be identical for the service to function correctly. \n5. Conclude whether a dependency exists based on the necessity of value equality for the ports."",
	""rationale"": ""In Docker Compose, the 'ports' configuration typically maps an external port on the host to an internal port within the container. The 'in' port (9300) refers to the internal port within the Elasticsearch container, while the 'out' port (9300) refers to the external port on the host. For Elasticsearch, the internal port 9300 is used for node-to-node communication within a cluster. The external port can be different, but it is often mapped to the same port for simplicity. However, the service would still function if the ports were different, as long as the correct mapping is specified. Therefore, the value equality of these ports is not a strict requirement for the service to function correctly."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options project.dependencies.dependency_timeseries-component.groupId and project.parent_notify-component.groupId both have the value 'org.jetlinks.community'. However, the context in which they are used is different: one is specifying a dependency's groupId, and the other is specifying the parent project's groupId. These values being identical is likely coincidental and does not indicate a functional dependency. The dependency's groupId and the parent project's groupId do not need to be the same for the project to function correctly.","Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element. Else, {groupId, artifactId} would suffice if you
do not intend to override the defaults for classifier and type (jar and null
respectively). So default is a good keyword in that definition; any sub-
element(s) (other than groupId, artifactId, classifier and type, of course)
explicitly assigned value(s) at the point you reference a dependency override
the defaults in the dependencyManagement element.

So, any dependency element outside of dependencyManagement, whether as a
reference to some dependencyManagement element or as a standalone is
immediately resolved (i.e. installed to the local repository and available for
classpaths).

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",jetlinks-community,project.dependencies.dependency_timeseries-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/configure-component/pom.xml,project.parent_notify-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/notify-component/notify-email/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_timeseries-component.groupId in jetlinks-components/configure-component/pom.xml and project.parent_notify-component.groupId in jetlinks-components/notify-component/notify-email/pom.xml. \n2. Understand the context and purpose of each configuration option: The groupId in Maven is used to uniquely identify a project or module within a project. \n3. Compare the provided examples to see how similar dependencies are evaluated. \n4. Determine if the groupId values indicate a dependency between the two configuration options based on their roles and the project structure. \n5. Conclude whether the configuration options depend on each other based on the value-equality of their groupId values."",
	""rationale"": ""The groupId in Maven is used to uniquely identify a project or module within a project. In this case, both configuration options have the same groupId value 'org.jetlinks.community', indicating that they are part of the same project or organization. However, the equality of the groupId values alone does not imply a direct dependency between the two configuration options. The groupId is used to maintain consistency and organization within the project, but it does not create a dependency between the timeseries-component and the notify-component modules."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options are set to ${project.groupId}, which suggests they derive their values from the same property. If ${project.groupId} is defined in a shared parent POM, then the values will be identical due to inheritance, not because of a direct dependency. However, if ${project.groupId} is independently defined in each POM, then the equality of values is coincidental. Given the hierarchical nature of Maven projects, it is likely that ${project.groupId} is defined in a shared parent POM, making the value-equality a result of inheritance rather than a direct dependency.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>use</artifactId>
      <version>1.0.0</version>
      <packaging>jar</packaging>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>bom</artifactId>
            <version>1.0.0</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project1</artifactId>
        </dependency>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project2</artifactId>
        </dependency>
      </dependencies>
    </project>
    

Finally, when creating projects that import dependencies, beware of the
following:

  * Do not attempt to import a POM that is defined in a submodule of the current POM. Attempting to do that will result in the build failing since it won't be able to locate the POM.
  * Never declare the POM importing a POM as the parent (or grandparent, etc) of the target POM. There is no way to resolve the circularity and an exception will be thrown.
  * When referring to artifacts whose POMs have transitive dependencies, the project needs to specify versions of those artifacts as managed dependencies. Not doing so results in a build failure since the artifact may not have a version specified. (This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",jetlinks-community,project.dependencies.dependency_tcp-component.groupId,NAME,${project.groupId},maven,jetlinks-manager/network-manager/pom.xml,project.dependencies.dependency_authentication-manager.groupId,NAME,${project.groupId},maven,jetlinks-standalone/pom.xml,Multi-Maven-Modules,Maven Properties,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_tcp-component.groupId in jetlinks-manager/network-manager/pom.xml and project.dependencies.dependency_authentication-manager.groupId in jetlinks-standalone/pom.xml. 2. Determine the type and value of each configuration option: both are of type NAME and have the value ${project.groupId}. 3. Understand the context of ${project.groupId} in Maven: it is a placeholder for the groupId defined in the parent POM. 4. Check if both configuration options refer to the same parent POM and thus the same groupId value. 5. Compare this scenario with the provided examples to see if similar dependencies exist. 6. Conclude whether the configuration options depend on each other based on the equality of their values."",
	""rationale"": ""The configuration options project.dependencies.dependency_tcp-component.groupId and project.dependencies.dependency_authentication-manager.groupId both use the placeholder ${project.groupId}, which refers to the groupId defined in the parent POM. This means that both options will have the same value as defined in the parent POM. This is similar to the first example where the groupId is used to uniquely identify a project and its modules. Therefore, the options depend on each other as they both need to specify the same groupId to ensure consistency and correct identification within the Maven project structure."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion element in a Maven POM file specifies the version of the POM model itself, which is a fixed value (4.0.0) for all Maven projects using this version of the POM model. This value is not project-specific but rather a standard requirement for Maven POM files. Therefore, the modelVersion value being 4.0.0 in both pom.xml files is due to the standard requirement and not because of a dependency between the two files. Each POM file independently requires the modelVersion to be 4.0.0 to be valid, but they do not depend on each other for this value.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/configure-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/notify-component/notify-voice/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-components/configure-component/pom.xml' and 'project.modelVersion' in 'jetlinks-components/notify-component/notify-voice/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires it to be consistent across all modules for compatibility.\n4. Determine if the 'project.modelVersion' must be the same across all modules in the jetlinks-community project to ensure compatibility.\n5. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration options project.parent_jetlinks-components.version and project.parent_notify-component.version both have the value 'version:2.2.0-SNAPSHOT'. However, the provided context does not indicate that these values are explicitly required to be the same for the project to function correctly. They appear to be version numbers for different components within the same project, but there is no evidence that one depends on the other. The similarity in version numbers could be coincidental or a result of a common versioning scheme used across the project.","One of its most useful features is to control
versions of artifacts used as transitive dependencies.

With that in mind, let's create a _dependencyManagement_ configuration in our
parent  _pom_ :

            
                        <dependencyManagement>
               <dependencies>
                  <dependency>
                     <groupId>com.google.guava</groupId>
                     <artifactId>guava</artifactId>
                     <version>29.0-jre</version>
                  </dependency>
               </dependencies>
            </dependencyManagement>

As a result, Maven will make sure to use version _29.0-jre_ of
_com.google.guava_ artifact in all child modules:

            
                        % mvn dependency:tree -Dverbose
            
            [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ project-collision ---
            [INFO] com.baeldung:project-collision:jar:0.0.1-SNAPSHOT
            [INFO] +- com.baeldung:project-a:jar:0.0.1-SNAPSHOT:compile
            [INFO] |  \- com.google.guava:guava:jar:29.0-jre:compile (version managed from 22.0)
            [INFO] \- com.baeldung:project-b:jar:0.0.1-SNAPSHOT:compile
            [INFO]    \- (com.google.guava:guava:jar:29.0-jre:compile - version managed from 22.0; omitted for duplicate)

## 5\. Prevent Accidental Transitive Dependencies

The _maven-enforcer-plugin_ provides many built-in rules that**simplify the
management of a multi-module project**. One of them **bans the use of classes
and methods from transitive dependencies**.

Explicit dependency declaration removes the possibility of version collision
of artifacts.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

We've inherited
this from one of the other modules, but we can only compile our code if we got
the transitive dependency from _project-b._

### 2.3. Compilation Error Caused by Version Collision

Depending on the order of dependencies in the  _project-collision_ module, in
certain combinations Maven returns a compilation error:

            
                        [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile (default-testCompile) on project project-collision: Compilation failure
            [ERROR] /tutorials/maven-all/version-collision/project-collision/src/test/java/com/baeldung/version/collision/VersionCollisionUnitTest.java:[12,27] cannot find symbol
            [ERROR]   symbol:   method immediateVoidFuture()
            [ERROR]   location: class com.google.common.util.concurrent.Futures

That's the result of the version collision of the _com.google.guava_ artifact.
By default, for dependencies at the same level in a dependency tree, Maven
chooses the first library it finds. In our case, both _com.google.guava_
dependencies are at the same height and the older version is chosen.

### 2.4. Using _maven-dependency-plugin_

The _maven-dependency-plugin_ is a very helpful tool to present all
dependencies and their versions:

            
                        % mvn dependency:tree -Dverbose
            
            [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ project-collision ---
            [INFO] com.baeldung:project-collision:jar:0.0.1-SNAPSHOT
            [INFO] +- com.baeldung:project-a:jar:0.0.1-SNAPSHOT:compile
            [INFO] |  \- com.google.guava:guava:jar:22.0:compile
            [INFO] \- com.baeldung:project-b:jar:0.0.1-SNAPSHOT:compile
            [INFO]    \- (com.google.guava:guava:jar:29.0-jre:compile - omitted for conflict with 22.0)

The _-Dverbose_ flag displays conflicting artifacts.

example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-dependencies</artifactId>
                    <version>${spring.boot.dependencies.version}</version>
                    <scope>import</scope>
                    <type>pom</type>
                  </dependency>
                  <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>${spring.cloud-version}</version>
                    <type>pom</type>
                    <scope>import</scope>
                  </dependency>
                </dependencies>
              </dependencyManagement>
    

> And dependencies you want to be available for each child will come in
> ""dependencies"" tag
    
    
          <dependencies>
            <dependency>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.18.

In fact, we have a
_com.google.guava_ dependency in two versions: 22.0 and 29.0-jre. The latter
is the one we would like to use in the _project-collision_ module.

## 3\. Excluding a Transitive Dependency From an Artifact

One way to resolve a version collision is by**removing a conflicting
transitive dependency from specific artifacts**. In our example, we don't want
to have the _com.google.guava_ library transitively added from the  _project-
a_ artifact.

Therefore, we can exclude it in the _project-collision_ pom:

            
                        <dependencies>
                <dependency>
                    <groupId>com.baeldung</groupId>
                    <artifactId>project-a</artifactId>
                    <version>0.0.1-SNAPSHOT</version>
                    <exclusions>
                        <exclusion>
                            <groupId>com.google.guava</groupId>
                            <artifactId>guava</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>com.baeldung</groupId>
                    <artifactId>project-b</artifactId>
                    <version>0.0.1-SNAPSHOT</version>
                </dependency>
            </dependencies>

Now, when we run the _dependency:tree_ command, we can see that it's not there
anymore:

            
                        % mvn dependency:tree -Dverbose
            
            [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ project-collision ---
            [INFO] com.baeldung:project-collision:jar:0.0.1-SNAPSHOT
            [INFO] \- com.baeldung:project-b:jar:0.0.1-SNAPSHOT:compile
            [INFO]    \- com.google.guava:guava:jar:29.0-jre:compile

As a result, the compilation phase ends without an error and we can use the
classes and methods from version _29.0-jre_.

## 4\. Using the  _dependencyManagement_ Section

Maven's _dependencyManagement_ section is a **mechanism for centralizing
dependency information**. One of its most useful features is to control
versions of artifacts used as transitive dependencies.",jetlinks-community,project.parent_jetlinks-components.version,VERSION_NUMBER,version:2.2.0-SNAPSHOT,maven,jetlinks-components/gateway-component/pom.xml,project.parent_notify-component.version,VERSION_NUMBER,version:2.2.0-SNAPSHOT,maven,jetlinks-components/notify-component/notify-email/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_jetlinks-components.version' in 'jetlinks-components/gateway-component/pom.xml' and 'project.parent_notify-component.version' in 'jetlinks-components/notify-component/notify-email/pom.xml'.\n2. Determine the type and value of each configuration option: both are of type VERSION_NUMBER with value '2.2.0-SNAPSHOT'.\n3. Review the provided information and examples to understand the context and criteria for determining dependencies based on value-equality.\n4. Analyze whether these configuration options must have identical values to function correctly or if they are merely consistent by accident.\n5. Consider the role of the parent POM in Maven projects and how version consistency is typically managed across modules.\n6. Formulate a rationale based on the analysis and examples provided.\n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""In Maven projects, the parent POM version is crucial for ensuring consistent dependency management, plugin configurations, and other settings across all child modules. The 'project.parent_jetlinks-components.version' and 'project.parent_notify-component.version' both refer to the version of the parent POM that these modules inherit from. Given that both configuration options have the same value '2.2.0-SNAPSHOT', it indicates that they are intended to inherit the same configurations from the parent POM. This is necessary to maintain a consistent build environment and dependency management across the modules. Therefore, the configuration options must have identical values to function correctly, establishing a dependency based on value-equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,9.0,FN,True,"The modelVersion element in a Maven POM file specifies the version of the POM model itself. According to Maven documentation, the modelVersion should be set to 4.0.0, which is the only supported version. This requirement is universal for all Maven POM files and does not create a dependency between different POM files. Each POM file must independently set its modelVersion to 4.0.0, but this does not mean that one POM file's modelVersion depends on another's. The requirement for the modelVersion to be 4.0.0 is a global constraint imposed by Maven, not a cross-file dependency.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/common-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/network-component/mqtt-component/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-components/common-component/pom.xml' and 'project.modelVersion' in 'jetlinks-components/network-component/mqtt-component/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires this version to be consistent across all modules for compatibility.\n4. Compare the values of 'project.modelVersion' in both POM files to ensure they are identical.\n5. Determine if the identical values are due to a requirement for compatibility or merely for consistency.\n6. Conclude whether a value-equality dependency exists based on the need for compatibility."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration option project.parent_notify-component.version in jetlinks-components/notify-component/notify-voice/pom.xml and project.parent_jetlinks-manager.version in jetlinks-manager/notify-manager/pom.xml both have the same version number (2.2.0-SNAPSHOT). However, the provided information does not indicate any direct reference or inheritance relationship between these two POM files. The version numbers being the same could be coincidental or due to a common versioning strategy, but there is no evidence that they must be identical for the projects to function correctly. Therefore, there is no value-equality dependency between these configuration options.","To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Standard negative binomial regression when counts are mainly zeros? ](https://stats.stackexchange.com/questions/651155/standard-negative-binomial-regression-when-counts-are-mainly-zeros)
  * [ What causes a dandelion leaf to be dark red? ](https://gardening.stackexchange.com/questions/67025/what-causes-a-dandelion-leaf-to-be-dark-red)
  * [ Does a green card holder need a visa for a layover in Athens airport? ](https://travel.stackexchange.com/questions/190218/does-a-green-card-holder-need-a-visa-for-a-layover-in-athens-airport)
  * [ Command to disable all tcolorboxes without deleting / commenting out them in source code?

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",jetlinks-community,project.parent_notify-component.version,VERSION_NUMBER,version:2.2.0-SNAPSHOT,maven,jetlinks-components/notify-component/notify-voice/pom.xml,project.parent_jetlinks-manager.version,VERSION_NUMBER,version:2.2.0-SNAPSHOT,maven,jetlinks-manager/notify-manager/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options in question: 'project.parent_notify-component.version' in 'jetlinks-components/notify-component/notify-voice/pom.xml' and 'project.parent_jetlinks-manager.version' in 'jetlinks-manager/notify-manager/pom.xml'.\n2. Determine the role of these configuration options in their respective POM files.\n3. Compare the provided examples to understand the nature of dependencies based on value-equality.\n4. Evaluate whether the version numbers of the parent POMs need to be identical for the modules to function correctly.\n5. Conclude whether the identical version numbers create a dependency based on value-equality."",
	""rationale"": ""In Maven, the 'parent' section in a POM file specifies the parent POM from which the current project inherits configuration. The version number of the parent POM is crucial because it ensures that the child project inherits the correct dependencies, plugins, and configurations. If 'project.parent_notify-component.version' and 'project.parent_jetlinks-manager.version' both refer to the same parent POM version '2.2.0-SNAPSHOT', it indicates that these modules are intended to inherit the same configurations. This creates a dependency based on value-equality, as changing the version in one module would necessitate a corresponding change in the other to maintain consistency and functionality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion in a Maven POM file specifies the version of the POM model being used. According to the provided context, the only supported POM version is 4.0.0, and it is always required. This means that all Maven projects must use this version to be compatible with the Maven build system. Therefore, the identical values of modelVersion in the two POM files are not due to a direct dependency between the two projects but rather a requirement of the Maven system itself. Each project independently needs to set modelVersion to 4.0.0 to comply with Maven's requirements.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/notify-component/notify-sms/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/rule-engine-component/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-components/notify-component/notify-sms/pom.xml' and 'project.modelVersion' in 'jetlinks-components/rule-engine-component/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires this version to be consistent across all modules for compatibility.\n4. Determine if the 'project.modelVersion' in both POM files must be identical to ensure compatibility and proper functioning of the Maven build process.\n5. Conclude whether a value-equality dependency exists based on the need for consistency in the 'project.modelVersion' across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build process and can function correctly together."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'groupId' in Maven is used to uniquely identify a project or a set of related projects. The 'project.parent_jetlinks-components.groupId' specifies the groupId of the parent project, which is a common practice to ensure that all modules within a multi-module project share the same groupId. The 'project.dependencies.dependency_protocol-component.groupId' specifies the groupId of a dependency, which is necessary for Maven to correctly resolve and include the dependency. While both configuration options have the same value 'org.jetlinks.community', this is because they belong to the same organization or project structure. However, they do not depend on each other due to value-equality; rather, they are part of a consistent naming convention within the project.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

# org.jetlinks.community.device.entity.DeviceInstanceEntity
#org.jetlinks.community.device.entity.DeviceInstanceEntity.productName=Product Name

# enums
org.jetlinks.community.device.enums.DeviceState.notActive=Disabled
org.jetlinks.community.device.enums.DeviceState.offline=Offline
org.jetlinks.community.device.enums.DeviceState.online=Online

org.jetlinks.community.device.enums.DeviceProductState.unregistered=unpublished
org.jetlinks.community.device.enums.DeviceProductState.registered=have published
org.jetlinks.community.device.enums.DeviceProductState.other=other
org.jetlinks.community.device.enums.DeviceProductState.forbidden=forbidden

org.jetlinks.community.device.measurements.DeviceObjectDefinition.status=Equipment Status
org.jetlinks.community.device.measurements.DeviceObjectDefinition.message=Equipment news

org.jetlinks.community.device.web.protocol.TransportSupportType.ENCODE=encoding
org.jetlinks.community.device.web.protocol.TransportSupportType.DECODE=decode

org.jetlinks.community.device.enums.TaskState.wait=wait
org.jetlinks.community.device.enums.TaskState.processing=processing
org.jetlinks.community.device.enums.TaskState.success=success
org.jetlinks.community.device.enums.TaskState.fail=fail
org.jetlinks.community.device.enums.TaskState.cancel=cancel
org.jetlinks.community.device.enums.TaskState.sendError=sendError

org.jetlinks.community.device.enums.FirmwareUpgradeState.waiting=waiting
org.jetlinks.community.device.enums.FirmwareUpgradeState.processing=processing
org.jetlinks.community.device.enums.FirmwareUpgradeState.failed=failed
org.jetlinks.community.device.enums.FirmwareUpgradeState.

# org.jetlinks.community.device.entity.DeviceInstanceEntity
#org.jetlinks.community.device.entity.DeviceInstanceEntity.productName=\u4EA7\u54C1\u540D\u79F0

##\u679A\u4E3E

org.jetlinks.community.device.enums.DeviceState.notActive=\u7981\u7528
org.jetlinks.community.device.enums.DeviceState.offline=\u79BB\u7EBF
org.jetlinks.community.device.enums.DeviceState.online=\u5728\u7EBF

org.jetlinks.community.device.enums.DeviceProductState.unregistered=\u6B63\u5E38
org.jetlinks.community.device.enums.DeviceProductState.registered=\u7981\u7528
org.jetlinks.community.device.enums.DeviceProductState.other=\u5176\u5B83
org.jetlinks.community.device.enums.DeviceProductState.forbidden=\u7981\u7528

org.jetlinks.community.device.measurements.DeviceObjectDefinition.status=\u8BBE\u5907\u72B6\u6001
org.jetlinks.community.device.measurements.DeviceObjectDefinition.message=\u8BBE\u5907\u6D88\u606F

org.jetlinks.community.device.web.protocol.TransportSupportType.ENCODE=\u7F16\u7801
org.jetlinks.community.device.web.protocol.TransportSupportType.DECODE=\u89E3\u7801

org.jetlinks.community.device.enums.TaskState.wait=\u7B49\u5F85\u53D1\u9001
org.jetlinks.community.device.enums.TaskState.processing=\u53D1\u9001\u4E2D
org.jetlinks.community.device.enums.TaskState.",jetlinks-community,project.parent_jetlinks-components.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/timeseries-component/pom.xml,project.dependencies.dependency_protocol-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-manager/network-manager/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_jetlinks-components.groupId in jetlinks-components/timeseries-component/pom.xml and project.dependencies.dependency_protocol-component.groupId in jetlinks-manager/network-manager/pom.xml. \n2. Understand the context and purpose of each configuration option: \n   - project.parent_jetlinks-components.groupId specifies the groupId of the parent project for the timeseries-component module. \n   - project.dependencies.dependency_protocol-component.groupId specifies the groupId of a dependency in the network-manager module. \n3. Compare the values of the configuration options: Both have the value 'org.jetlinks.community'. \n4. Analyze the provided examples to understand the criteria for determining dependencies based on value-equality. \n5. Determine if the equality of the groupId values indicates a dependency or if it is merely a coincidence due to being part of the same project ecosystem. \n6. Conclude whether a dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.parent_jetlinks-components.groupId in jetlinks-components/timeseries-component/pom.xml specifies the groupId of the parent project for the timeseries-component module, indicating that it is part of the jetlinks-components module. The configuration option project.dependencies.dependency_protocol-component.groupId in jetlinks-manager/network-manager/pom.xml specifies the groupId of a dependency in the network-manager module, indicating that it is part of the jetlinks-manager module. While both configuration options have the same value 'org.jetlinks.community', this is because they are part of the same overall project ecosystem. The equality of the groupId values does not indicate a direct dependency between these specific configuration options, but rather that they belong to the same project. Therefore, there is no dependency based on value-equality."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options have the same value 'org.jetlinks.community' for their groupId. However, having the same groupId does not necessarily imply a dependency based on value-equality. In Maven, the groupId is used to uniquely identify a project or a set of related projects. It is common for different components of the same project to share the same groupId to indicate they belong to the same organization or project. Therefore, the identical values are likely a result of organizational naming conventions rather than a functional dependency.","html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.",jetlinks-community,project.dependencies.dependency_network-core.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/network-component/http-component/pom.xml,project.dependencies.dependency_rule-engine-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/notify-component/notify-core/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_network-core.groupId in jetlinks-components/network-component/http-component/pom.xml and project.dependencies.dependency_rule-engine-component.groupId in jetlinks-components/notify-component/notify-core/pom.xml. \n2. Understand the context and purpose of the 'groupId' in Maven, which is used to uniquely identify a project across all projects. \n3. Compare the provided examples to see how similar dependencies are evaluated. \n4. Determine if the equality of the 'groupId' values indicates a dependency between the two configuration options. \n5. Evaluate if the two configuration options must have identical values to function correctly or if they are merely part of the same project ecosystem without a direct dependency."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The configuration options project.dependencies.dependency_network-core.groupId and project.dependencies.dependency_rule-engine-component.groupId are located in different modules and indicate different Maven dependencies. The equality of the groupId values indicates that they are part of the same JetLinks Community project ecosystem, but there is no dependency between these two configuration options based on their groupId values. They are part of the same project but do not depend on each other due to value-equality."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The groupId in Maven is used to uniquely identify a project or a set of related projects. In this case, both configuration options have the same groupId 'org.jetlinks.community', which suggests that they belong to the same organization or project group. However, having the same groupId does not necessarily mean there is a value-equality dependency. It is common practice to use the same groupId for related projects, but it is not a strict requirement for them to function correctly. The provided context does not indicate that these values must be identical for any specific reason beyond organizational consistency.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

It defines the versions of all the
artifacts that will be created in the library. Other projects that wish to use
the library should import this POM into the dependencyManagement section of
their POM.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>pom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
     
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     
      <modules>
        <module>parent</module>
      </modules>
    </project>
    

The parent subproject has the BOM POM as its parent. It is a normal
multiproject pom.",jetlinks-community,project.parent_jetlinks-components.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/script-component/pom.xml,project.dependencies.dependency_common-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/things-component/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_jetlinks-components.groupId in jetlinks-components/script-component/pom.xml and project.dependencies.dependency_common-component.groupId in jetlinks-components/things-component/pom.xml. \n2. Understand the context and purpose of each configuration option: \n   - project.parent_jetlinks-components.groupId: This specifies the groupId of the parent POM for the script-component module. \n   - project.dependencies.dependency_common-component.groupId: This specifies the groupId of a dependency (common-component) in the things-component module. \n3. Compare the provided examples to understand how similar dependencies are evaluated. \n4. Determine if the equality of the groupId values indicates a dependency between the two configuration options. \n5. Provide a rationale based on the analysis and conclude whether a dependency exists."",
	""rationale"": ""The configuration option project.parent_jetlinks-components.groupId in jetlinks-components/script-component/pom.xml specifies the groupId of the parent POM for the script-component module, which is org.jetlinks.community. The configuration option project.dependencies.dependency_common-component.groupId in jetlinks-components/things-component/pom.xml specifies the groupId of a dependency (common-component) in the things-component module, which is also org.jetlinks.community. While both options share the same groupId value, this does not indicate a direct dependency between them. The groupId value is used to uniquely identify the project and its modules within the same organization or ecosystem. The equality of the groupId values indicates that both modules are part of the same project (jetlinks-community) but does not imply a dependency between the parent POM of one module and the dependency of another module."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration option project.dependencies.dependency_relation-component.groupId specifies the groupId for a dependency in the notify-core module, while project.parent_jetlinks-manager.groupId specifies the groupId for the parent project in the logging-manager module. In Maven, the groupId is a unique identifier for a project or a set of projects. The fact that both groupIds are 'org.jetlinks.community' suggests that they belong to the same organization or project suite. However, this does not inherently create a dependency between the two configuration options. The dependency in notify-core is related to the artifacts it needs to function, while the parent groupId in logging-manager is related to inheritance of configuration from the parent POM. These are separate concerns in Maven's structure.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) to customize your
list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.

](/questions/29738773/how-to-use-
dependency-of-projecta-in-projectb-in-maven)

[ 12 ](/q/33208765 ""Question score \(upvotes - downvotes\)"") [how to add
dependency of other maven project to my current maven project in java
eclipse?](/questions/33208765/how-to-add-dependency-of-other-maven-project-to-
my-current-maven-project-in-java)

[ 1 ](/q/48964699 ""Question score \(upvotes - downvotes\)"") [How to add a
maven project as a dependency to another one](/questions/48964699/how-to-add-
a-maven-project-as-a-dependency-to-another-one)

[ 2 ](/q/51871832 ""Question score \(upvotes - downvotes\)"") [How non maven
project can be added as a dependency in maven
project](/questions/51871832/how-non-maven-project-can-be-added-as-a-
dependency-in-maven-project)

[ 0 ](/q/56878639 ""Question score \(upvotes - downvotes\)"") [Adding a local
Maven project as a dependency in another local Maven
project](/questions/56878639/adding-a-local-maven-project-as-a-dependency-in-
another-local-maven-project)

[ 2 ](/q/70950337 ""Question score \(upvotes - downvotes\)"") [how do I add a
Maven dependency on another existing project in
Eclipse](/questions/70950337/how-do-i-add-a-maven-dependency-on-another-
existing-project-in-eclipse)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is there any way to check the originality of Windows OS? ](https://superuser.com/questions/1849264/is-there-any-way-to-check-the-originality-of-windows-os)
  * [ Objects proven finiteness yet no algorithm discovered? ](https://mathoverflow.net/questions/475211/objects-proven-finiteness-yet-no-algorithm-discovered)
  * [ Determine if N is zibbable ](https://puzzling.stackexchange.com/questions/127439/determine-if-n-is-zibbable)
  * [ Do programs within which a computable function runs a random number of times always halt, as in the halting problem?",jetlinks-community,project.dependencies.dependency_relation-component.groupId,NAME,org.jetlinks.community,maven,jetlinks-components/notify-component/notify-core/pom.xml,project.parent_jetlinks-manager.groupId,NAME,org.jetlinks.community,maven,jetlinks-manager/logging-manager/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_relation-component.groupId in jetlinks-components/notify-component/notify-core/pom.xml and project.parent_jetlinks-manager.groupId in jetlinks-manager/logging-manager/pom.xml. 2. Understand the role of 'groupId' in Maven, which is to uniquely identify a project across all projects. 3. Compare the provided examples to see how similar dependencies are evaluated. 4. Determine if the 'groupId' values being identical implies a dependency between the two configuration options. 5. Evaluate if the 'groupId' values being identical is necessary for the correct functioning of the project or if it is merely a coincidence."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In this case, both configuration options have the same 'groupId' value of 'org.jetlinks.community', indicating that they are part of the same project ecosystem. However, the equality of the 'groupId' values does not imply a direct dependency between these two specific configuration options. The 'groupId' value is used to maintain consistency across the project modules, but it does not create a functional dependency between the notify-component and the logging-manager modules."",
	""isDependency"": false
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion in a Maven POM file specifies the version of the POM model being used. According to the provided context, the only supported POM version is 4.0.0, and this is a standard requirement for all Maven projects. This means that all Maven projects must use modelVersion 4.0.0 to be compatible with the Maven build system. Therefore, the identical values of modelVersion:4.0.0 in both jetlinks-components/logging-component/pom.xml and jetlinks-components/timeseries-component/pom.xml are due to this standard requirement and not because of a specific dependency between these two components.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",jetlinks-community,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/logging-component/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,jetlinks-components/timeseries-component/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'jetlinks-components/logging-component/pom.xml' and 'project.modelVersion' in 'jetlinks-components/timeseries-component/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires it to be consistent across all modules for compatibility.\n4. Evaluate whether the 'project.modelVersion' in both POM files must be identical to ensure compatibility and proper functioning of the Maven build process.\n5. Conclude whether a value-equality dependency exists based on the need for consistency in 'project.modelVersion' across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build process and can function correctly together."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'relativePath' configuration in Maven POM files specifies the path to the parent POM file relative to the current POM file. In a multi-module Maven project, each child module typically references the same parent POM file. Therefore, the 'relativePath' values in different child modules often point to the same parent POM file. This is not due to a direct dependency between the child modules but rather a shared dependency on the same parent POM file. The identical 'relativePath' values in the two specified POM files are a result of both modules needing to reference the same parent POM file, not because they depend on each other.","](/questions/21125358/maven-multi-
module-project-is-relativepath-necessary)

[ 8 ](/q/35608981 ""Question score \(upvotes - downvotes\)"") [Relative Path in
Maven parent definition](/questions/35608981/relative-path-in-maven-parent-
definition)

[ 59 ](/q/36450720 ""Question score \(upvotes - downvotes\)"") [Maven:Non-
resolvable parent POM and 'parent.relativePath' points at wrong local
POM](/questions/36450720/mavennon-resolvable-parent-pom-and-parent-
relativepath-points-at-wrong-local)

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path)

[ 5 ](/q/41540074 ""Question score \(upvotes - downvotes\)"") [Non resolvable
parent POM although relativePath set to existing parent
pom.xml](/questions/41540074/non-resolvable-parent-pom-although-relativepath-
set-to-existing-parent-pom-xml)

[ 4 ](/q/43741817 ""Question score \(upvotes - downvotes\)"") [Maven: Eclipse
not correctly configuring paths in a project with a parent
pom](/questions/43741817/maven-eclipse-not-correctly-configuring-paths-in-a-
project-with-a-parent-pom)

[ 0 ](/q/48808466 ""Question score \(upvotes - downvotes\)"") [Maven Project
Build Error : parent.relativePath points at no local
POM](/questions/48808466/maven-project-build-error-parent-relativepath-points-
at-no-local-pom)

[ 1 ](/q/53869863 ""Question score \(upvotes - downvotes\)"") [Maven insist
using local parent rather than remote WITHOUT relativePath
mentioned](/questions/53869863/maven-insist-using-local-parent-rather-than-
remote-without-relativepath-mentione)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Are hardware benchmark results copyrighted?

This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.
    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../baseapp/pom.xml</relativePath>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
    </project>

## 4\. Demo

Let's learn to create maven projects with the parent-child relationships.

### 4.1. Create Parent Project

Project creation wizard.

![Create Maven Project Wizard](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Project-Wizard.png)Create Maven Project
Wizard

Select Project Archetype.

![Maven Quick Start Archtype](//howtodoinjava.com/wp-
content/uploads/2017/05/Maven-Quick-Start-Archtype.png)Maven Quick Start
Archetype

Fill in the details and create a project.

![Create Maven Parent Project](//howtodoinjava.com/wp-
content/uploads/2017/05/Create-Maven-Parent-Project.png)Create Maven Parent
Project

Now **change packaging from jar to pom** in `pom.xml`.

    
    
    <packaging>jar</packaging> //previous
     
    <packaging>pom</packaging> //New

Additionally, add project properties and dependencies.

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.

I have a fringe case. A fat finger case on my part.

My pom parent had this:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mygroup </groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>pom</packaging>
        <name>pom-parent</name>
    

and my (child) pom

    
    
    <parent>
        <groupId>com.mygroup</groupId>
        <artifactId>pom-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom-parent/pom.xml</relativePath>
    </parent>  
    

My group id in my parent had a fat finger space at the end of the name.
""com.mygroup "" instead of the correct ""com.mygroup"".

Because of this fat finger mistake........the ""groupId"" names did not
match....and I got the error.

Aka, check for fat finger mistakes before you go to too many extremes to
resolve.

error I got for internet-searching

> ""Project build error: 'parent.relativePath' of POM"" ""points at"" ""please
> verify your project structure""

[Share](/a/51485957 ""Short permalink to this answer"")

[Improve this answer](/posts/51485957/edit)

Follow

answered Jul 23, 2018 at 19:28

[![granadaCoder's user
avatar](https://i.sstatic.net/fmJRN.png?s=64)](/users/214977/granadacoder)

[granadaCoder](/users/214977/granadacoder)granadaCoder

27.5k1111 gold badges118118 silver badges160160 bronze badges

Add a comment  | 

1

[](/posts/42787205/timeline ""Show activity on this post."")

* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.",jetlinks-community,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/dashboard-component/pom.xml,project.parent_jetlinks-components.relativePath,PATH,../pom.xml,maven,jetlinks-components/protocol-component/pom.xml,Multi-Maven-Modules,Project Structure,"{
	""plan"": ""1. Understand the role of the 'relativePath' configuration option in Maven POM files. \n2. Review the provided information and examples to identify how 'relativePath' is used and whether it creates dependencies based on value-equality. \n3. Compare the 'relativePath' values in the given POM files (jetlinks-components/dashboard-component/pom.xml and jetlinks-components/protocol-component/pom.xml) to determine if they must be identical for the project to function correctly. \n4. Evaluate if the identical values are necessary for the correct resolution of the parent POM or if they are coincidentally the same. \n5. Formulate a rationale based on the findings and determine if a dependency exists."",
	""rationale"": ""The 'relativePath' configuration option in a Maven POM file specifies the path to the parent POM file relative to the current module. This path is used by Maven to locate the parent POM and inherit its configurations. In the given case, both 'jetlinks-components/dashboard-component/pom.xml' and 'jetlinks-components/protocol-component/pom.xml' have the 'relativePath' set to '../pom.xml'. This indicates that both modules are referring to the same parent POM located one directory level up. The value-equality of 'relativePath' is essential for Maven to correctly resolve the parent POM and ensure consistent configuration inheritance across these modules. Therefore, the identical 'relativePath' values create a dependency based on value-equality."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FP,False,"The configuration options 'logging.level.org.linlinjava.litemall' in both 'litemall-admin-api' and 'litemall-wx-api' are setting the logging level for the same package 'org.linlinjava.litemall'. If these configurations are meant to control the logging behavior for the same package across different modules, it is likely that they need to have the same value to ensure consistent logging behavior. However, without explicit documentation or code references indicating that these values must be identical, it is also possible that the identical values are coincidental.","[Reload]() to refresh your session.
You signed out in another tab or window. [Reload]() to refresh your session.
You switched accounts on another tab or window. [Reload]() to refresh your
session. Dismiss alert

{{ message }}

[ linlinjava ](/linlinjava) / **[litemall](/linlinjava/litemall) ** Public

  * [ Notifications ](/login?return_to=%2Flinlinjava%2Flitemall) You must be signed in to change notification settings
  * [ Fork 7.1k ](/login?return_to=%2Flinlinjava%2Flitemall)
  * [ Star  19k ](/login?return_to=%2Flinlinjava%2Flitemall)

  * [ Code ](/linlinjava/litemall)
  * [ Issues 31 ](/linlinjava/litemall/issues)
  * [ Pull requests 1 ](/linlinjava/litemall/pulls)
  * [ Actions ](/linlinjava/litemall/actions)
  * [ Projects 0 ](/linlinjava/litemall/projects)
  * [ Security ](/linlinjava/litemall/security)
  * [ Insights ](/linlinjava/litemall/pulse)

Additional navigation options

  * [ Code ](/linlinjava/litemall)
  * [ Issues ](/linlinjava/litemall/issues)
  * [ Pull requests ](/linlinjava/litemall/pulls)
  * [ Actions ](/linlinjava/litemall/actions)
  * [ Projects ](/linlinjava/litemall/projects)
  * [ Security ](/linlinjava/litemall/security)
  * [ Insights ](/linlinjava/litemall/pulse)

New issue

**Have a question about this project?** Sign up for a free GitHub account to
open an issue and contact its maintainers and the community.

[ Sign up for GitHub
](/signup?return_to=%2Flinlinjava%2Flitemall%2Fissues%2Fnew%2Fchoose)

By clicking ""Sign up for GitHub"", you agree to our [terms of
service](https://docs.github.com/terms) and [privacy
statement](https://docs.github.com/privacy). We’ll occasionally send you
account related emails.

Already on GitHub?

Try checking your
property files or IDE run configuration for this property. Enabling debug
logging could help as well.

    
    
    Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'logging.level.org.quartz' to org.springframework.boot.logging.LogLevel
    
    Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
    

[Share](/a/58834754 ""Short permalink to this answer"")

[Improve this answer](/posts/58834754/edit)

Follow

answered Nov 13, 2019 at 10:12

[![alexmagnus's user
avatar](https://www.gravatar.com/avatar/3315b391fd78b5c188c6df7a3febd296?s=64&d=identicon&r=PG)](/users/1774076/alexmagnus)

[alexmagnus](/users/1774076/alexmagnus)alexmagnus

98655 silver badges77 bronze badges

2

  * It is set in application-dev.properties, as it should be - `logging.level.org.quartz=ON`

- [borgmater](/users/3446931/borgmater ""696 reputation"")

Commented Nov 13, 2019 at 10:16

  * 2

I was so blinded by the exceptions that I didn't realize ""ON"" is not a valid
logging level ..

- [borgmater](/users/3446931/borgmater ""696 reputation"")

Commented Nov 13, 2019 at 10:39

Add a comment  | 

0

[](/posts/61153312/timeline ""Show activity on this post."")

The valid options for debugging level are:

<https://docs.spring.io/spring-
boot/docs/1.1.2.RELEASE/api/index.html?org/springframework/boot/logging/LogLevel.html>

ON is not a valid level.

[Share](/a/61153312 ""Short permalink to this answer"")

[Improve this answer](/posts/61153312/edit)

Follow

answered Apr 11, 2020 at 7:18

[!

springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>com.company.MainApp</mainClass>
                        <fork>true</fork>
                        <skip>false</skip>
                        <profiles>dev,ng</profiles>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M3</version>
                    <configuration>
              <forkCount>0</forkCount>
                    </configuration>
                </plugin>
            </plugins>
        </build>
        <reporting>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                </plugin>
            </plugins>
        </reporting>
    </project>
    
    

Application.properties:

    
    
    # WARN|DEBUG|ERROR|FATAL|TRACE|INFO|OFF
    logging.level.root=WARN
    logging.level.org.springframework=WARN
    logging.level.org.hibernate=WARN
    logging.level.org.sejda=ERROR
    logging.level.org.quartz=OFF
    
    

. and my Quartz config class:

    
    
    /**
     * Configuration of the Quartz scheduled.
     */
    @Configuration
    public class QuartzConfiguration {
    
      /**
       * Application's context.
       */
      @Autowired
      private ApplicationContext applicationContext;
    
      /**
       * Creates {@link SpringBeanJobFactory} that adds auto-wiring to Quartz jobs.
       *
       * @return Created {@link SpringBeanJobFactory}.
       */
      @Bean
      public SpringBeanJobFactory springBeanJobFactory() {
        AutoWiringSpringBeanJobFactory jobFactory = new AutoWiringSpringBeanJobFactory();
        jobFactory.setApplicationContext(applicationContext);
        return jobFactory;
      }
    
      /**
       * Creates {@link SchedulerFactoryBean} used by Quartz for scheduling.
       *
       * @return Created {@link SchedulerFactoryBean}.

After migrating to the latest release of Spring Boot 2.2.1 from 2.1, my tests
started to fail due to binding exceptions involving Quartz Scheduler logging
(btw, using Java 8). I have defined the log levels in my app properties file
in compliance with [Spring Boot docs](https://docs.spring.io/spring-
boot/docs/current/reference/htmlsingle/#boot-features-custom-log-levels), so I
fail to see why the error is popping up. I am pretty sure there is some
misconfiguration in the logging props or in the configuration class, since ALL
the tests are failing on the same error, but simply cannot find it. Below are
my error outputs and relevant files.

Error log from Intellij:

    
    
    java.lang.IllegalStateException: Failed to load ApplicationContext
    
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
        at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
        at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
        at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
        at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.

java:76)
        at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)
        at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:345)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
        at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:125)
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
        at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
        . 43 more
    Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [org.springframework.boot.logging.LogLevel] for value 'ON'; nested exception is java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
        at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191)
        at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:170)
        at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:96)
        at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:88)
        at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:435)
        at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:380)
        at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:320)
        . 78 more
    Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.ON
        at org.springframework.boot.convert.",litemall,logging.level.org.linlinjava.litemall,UNKNOWN,ERROR,spring,litemall-admin-api/src/main/resources/application.yml,logging.level.org.linlinjava.litemall,UNKNOWN,ERROR,spring,litemall-wx-api/src/main/resources/application.yml,Others,Logging Level,"{
	""plan"": ""1. Identify the purpose of the configuration option 'logging.level.org.linlinjava.litemall' in both 'litemall-admin-api/src/main/resources/application.yml' and 'litemall-wx-api/src/main/resources/application.yml'.\n2. Determine if these configurations serve the same or different purposes within their respective modules.\n3. Evaluate if the value 'ERROR' for these configurations must be identical for the system to function correctly.\n4. Compare this scenario with the provided examples to see if the dependency is similar to the examples where dependencies were identified or not.\n5. Conclude whether the configurations depend on each other based on the analysis."",
	""rationale"": ""The configuration option 'logging.level.org.linlinjava.litemall' in both 'litemall-admin-api' and 'litemall-wx-api' is used to set the logging level for the 'org.linlinjava.litemall' package. These configurations are likely intended to control the logging behavior for the same package across different modules. However, the logging level settings in Spring applications are typically module-specific and do not need to be identical across different modules for the system to function correctly. The value 'ERROR' being the same in both configurations is likely coincidental and intended for consistency rather than a functional dependency. This is similar to the example where 'project.parent_litemall.artifactId' and 'services.litemall.container_name' had the same value but served different purposes and were not dependent on each other."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'org.linlinjava'. However, the mere fact that they share the same value does not necessarily imply a dependency. In Maven projects, it is common for multiple modules to share the same groupId, especially if they are part of the same organization or project. This is often done for organizational purposes rather than functional dependencies. There is no explicit indication in the provided context that these values must be identical for the project to function correctly. Therefore, it is likely that the identical values are coincidental and used for organizational consistency.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",litemall,project.dependencies.dependency_litemall-db.groupId,NAME,org.linlinjava,maven,litemall-admin-api/pom.xml,project.dependencies.dependency_litemall-wx-api.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_litemall-db.groupId in litemall-admin-api/pom.xml and project.dependencies.dependency_litemall-wx-api.groupId in litemall-all-war/pom.xml. \n2. Understand the purpose of the 'groupId' in Maven, which is to uniquely identify a project across all projects. \n3. Check if both configuration options belong to the same project or module hierarchy. \n4. Determine if the 'groupId' values need to be identical for the modules to function correctly within the same project. \n5. Compare the provided examples to see if similar dependencies exist and how they were evaluated. \n6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. Both configuration options, project.dependencies.dependency_litemall-db.groupId in litemall-admin-api/pom.xml and project.dependencies.dependency_litemall-wx-api.groupId in litemall-all-war/pom.xml, belong to the same project 'litemall' and share the same 'groupId' value 'org.linlinjava'. This indicates that they are part of the same project hierarchy and need to have identical 'groupId' values to ensure consistency and correct functioning within the project. Therefore, these configuration options depend on each other due to value-equality."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FP,False,"The groupId 'org.springframework.boot' is used to identify dependencies provided by the Spring Boot project. In Maven, the groupId is a fundamental part of the dependency coordinates, which include groupId, artifactId, and version. Dependencies with the same groupId are typically related or provided by the same organization. In this case, both 'spring-boot-starter-json' and 'spring-boot-starter-test' are part of the Spring Boot ecosystem, and their groupId being 'org.springframework.boot' is necessary for Maven to correctly resolve and download these dependencies from the appropriate repository. Therefore, the identical groupId values are not coincidental but required for the correct functioning of the project.","Here is a FULL file as an example: (this is the ROOT build.gradle) (If you
code a monolith, you'll only have a root build.gradle, if you write multiple
""gradle modules"", you'll have a root and subproject build.gradle files) (if
you have no idea what i'm talking about see link to docs.gradle.org at bottom)

(you can remove the dependencies, but i prefer to give a full working)

    
    
    plugins {
        id 'org.springframework.boot' version '2.6.2'
        id 'io.spring.dependency-management' version '1.0.11.RELEASE'
        id 'java'
    }
    
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
        implementation 'org.springframework.boot:spring-boot-starter-integration'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-web-services'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'com.h2database:h2'
        implementation 'mysql:mysql-connector-java'
    
    
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.batch:spring-batch-test'
        testImplementation 'org.springframework.integration:spring-integration-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }
    
    test {
        useJUnitPlatform()
    }
    
    
    allprojects {
    
        /* custom task to show dependencies.  run ""gradle printAllDependencies"" from commandline.

The primary benefit of the former is that it offers property-based
customization of managed versions, while using the latter will likely result
in faster builds.

## Managing Dependencies with the Dependency Management Plugin

When you apply the [`io.spring.dependency-
management`](https://github.com/spring-gradle-plugins/dependency-management-
plugin) plugin, Spring Boot's plugin will automatically [import the `spring-
boot-dependencies` bom](reacting.html#reacting-to-other-plugins.dependency-
management) from the version of Spring Boot that you are using. This provides
a similar dependency management experience to the one that's enjoyed by Maven
users. For example, it allows you to omit version numbers when declaring
dependencies that are managed in the bom. To make use of this functionality,
declare dependencies in the usual way but omit the version number:

  * Groovy

  * Kotlin

    
    
    dependencies {
    	implementation('org.springframework.boot:spring-boot-starter-web')
    	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    }
    
    
    dependencies {
    	implementation(""org.springframework.boot:spring-boot-starter-web"")
    	implementation(""org.springframework.boot:spring-boot-starter-data-jpa"")
    }

### Customizing Managed Versions

The `spring-boot-dependencies` bom that is automatically imported when the
dependency management plugin is applied uses properties to control the
versions of the dependencies that it manages. Browse the [Dependency Versions
Properties](../appendix/dependency-versions/properties.html) section in the
Spring Boot reference for a complete list of these properties.

To customize a managed version you set its corresponding property. For
example, to customize the version of SLF4J which is controlled by the
`slf4j.version` property:

  * Groovy

  * Kotlin

    
    
    ext['slf4j.version'] = '1.7.20'
    
    
    extra[""slf4j.version""] = ""1.7.20""

__ |  Each Spring Boot release is designed and tested against a specific set of third-party dependencies. Overriding versions may cause compatibility issues and should be done with care.   
---|---  
  
### Using Spring Boot's Dependency Management in Isolation

Spring Boot's dependency management can be used in a project without applying
Spring Boot's plugin to that project.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

I follow the instructions
[here](https://plugins.gradle.org/plugin/org.springframework.boot) for the
latest `spring.framework.boot` plugin.

My `build.gradle` has

    
    
    plugins {
      id 'java-library'
      id 'eclipse'
      id 'io.spring.dependency-management' version '1.0.11.RELEASE'
      id 'org.springframework.boot' version '2.6.2'
      id 'org.springframework.boot.experimental.thin-launcher' version '1.0.23.RELEASE'
    }
    

but gradle tasks have the error

    
    
    > Could not resolve all dependencies for configuration ':detachedConfiguration1'.
       > Could not find org.springframework.boot:spring-boot-dependencies:2.6.2.
    

_UPDATE_ I neglected to add the final lines of the error description, which
were in fact important to answer it.

    
    
     Searched in the following locations:
       - https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
       - https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/2.6.2/spring-boot-dependencies-2.6.2.pom
    

  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [gradle](/questions/tagged/gradle ""show questions tagged 'gradle'"")

[Share](/q/70624098 ""Short permalink to this question"")

[Improve this question](/posts/70624098/edit)

Follow

[edited Jan 11, 2022 at 15:18](/posts/70624098/revisions ""show all edits to
this post"")

rupweb

asked Jan 7, 2022 at 16:10

[!

/specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](./specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](./specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](./specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](./appendix/application-properties/index.html)
      * [Auto-configuration Classes](./appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](./appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](./appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](./appendix/test-auto-configuration/index.html)
        * [Test Slices](./appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](./appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](./appendix/dependency-versions/coordinates.html)
        * [Version Properties](./appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-tools/spring-boot-gradle-
plugin/src/docs/antora/modules/gradle-plugin/pages/managing-dependencies.adoc)
[ GitHub Project ](https://github.com/spring-projects/spring-boot ""GitHub"") [
Stack Overflow ](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](./index.html)
  * [Build Tool Plugins](./build-tool-plugin/index.html)
  * [Gradle Plugin](index.html)
  * [Managing Dependencies](managing-dependencies.html)

# Managing Dependencies

To manage dependencies in your Spring Boot application, you can either apply
the [`io.spring.dependency-management`](https://github.com/spring-gradle-
plugins/dependency-management-plugin) plugin or use Gradle's native bom
support. The primary benefit of the former is that it offers property-based
customization of managed versions, while using the latter will likely result
in faster builds.",litemall,project.dependencies.dependency_spring-boot-starter-json.groupId,NAME,org.springframework.boot,maven,litemall-db/pom.xml,project.dependencies.dependency_spring-boot-starter-test.groupId,NAME,org.springframework.boot,maven,pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-boot-starter-json.groupId in litemall-db/pom.xml and project.dependencies.dependency_spring-boot-starter-test.groupId in pom.xml. \n2. Determine the type and value of each configuration option: both are of type NAME and have the value org.springframework.boot. \n3. Analyze the context and purpose of each configuration option: both options specify the groupId for different Spring Boot dependencies in Maven POM files. \n4. Compare the provided examples to understand the criteria for dependency determination: dependencies with the same groupId within the same ecosystem (e.g., Spring Boot) do not necessarily depend on each other unless they are part of the same module or project structure. \n5. Evaluate whether the equality of the groupId values indicates a dependency: consider if the modules (litemall-db and the root project) need to have identical groupId values for functional reasons. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-json.groupId in litemall-db/pom.xml and the option project.dependencies.dependency_spring-boot-starter-test.groupId in pom.xml both specify the groupId for different Spring Boot dependencies. While they share the same groupId value (org.springframework.boot), this indicates that they are part of the same Spring Boot ecosystem. However, there is no direct dependency between these two configuration options based on their groupId values alone. The equality of the groupId values is to ensure consistency within the Spring Boot ecosystem, but it does not imply a functional dependency between the two modules."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FP,False,"The 'spring.messages.encoding' configuration option specifies the character encoding for message properties files in a Spring application. If 'litemall-admin-api' and 'litemall-core' are separate modules that do not share message properties files or do not interact in a way that requires consistent encoding settings, then there is no dependency. However, if they share message properties files or interact in a way that requires consistent encoding, then a dependency exists.","](/questions/27882191/spring-boot-default-
properties-encoding-change?noredirect=1)

[ 4 ](/q/50225180 ""Question score \(upvotes - downvotes\)"")
[Internationalization (locale) not working with accents in java spring
boot](/questions/50225180/internationalization-locale-not-working-with-
accents-in-java-spring-boot?noredirect=1)

[ 4 ](/q/65343072 ""Question score \(upvotes - downvotes\)"") [Spring Boot CRUD
Application with Thymeleaf -UTF-8 in property
files](/questions/65343072/spring-boot-crud-application-with-thymeleaf-
utf-8-in-property-files?noredirect=1)

[ 1 ](/q/33048628 ""Question score \(upvotes - downvotes\)"") [Spring MVC with
Thymeleaf and Tomcat 8 UTF-8 Encoding Issue](/questions/33048628/spring-mvc-
with-thymeleaf-and-tomcat-8-utf-8-encoding-issue?noredirect=1)

[ 1 ](/q/56147137 ""Question score \(upvotes - downvotes\)"") [UTF-8 encoding
issue with Thymeleaf Spring MVC](/questions/56147137/utf-8-encoding-issue-
with-thymeleaf-spring-mvc?noredirect=1)

#### Related

[ 12 ](/q/26432479 ""Question score \(upvotes - downvotes\)"") [Messages from
.

properties file do not display UTF-8
characters](/questions/26432479/messages-from-properties-file-do-not-display-
utf-8-characters)

[ 4 ](/q/33108990 ""Question score \(upvotes - downvotes\)"") [spring boot +
thymeleaf cannot correctly encode UTF-8 characters form
POST](/questions/33108990/spring-boot-thymeleaf-cannot-correctly-encode-
utf-8-characters-form-post)

[ 9 ](/q/33768500 ""Question score \(upvotes - downvotes\)"") [Spring Boot
Thymeleaf Character Encoding to UTF-8](/questions/33768500/spring-boot-
thymeleaf-character-encoding-to-utf-8)

[ 1 ](/q/33837993 ""Question score \(upvotes - downvotes\)"") [Spring Boot
internationalization (messages.properties)](/questions/33837993/spring-boot-
internationalization-messages-properties)

[ 2 ](/q/40244649 ""Question score \(upvotes - downvotes\)"") [Spring Boot
(1.4.1) and Thymeleaf (3) MessageSource single
quotes](/questions/40244649/spring-boot-1-4-1-and-thymeleaf-3-messagesource-
single-quotes)

[ 3 ](/q/42874927 ""Question score \(upvotes - downvotes\)"") [Thymeleaf
encoding issue](/questions/42874927/thymeleaf-encoding-issue)

[ 1 ](/q/47495904 ""Question score \(upvotes - downvotes\)"")
[Internationalization with spring boot.

## **¿What's the problem?**

I can't display in UTF-8 the messages I got in messages.properties.

An example

    
    
    <h1 id=""logo"">Electrónico</h1>
    

this works okay but when I try to use my message source like this

    
    
    <h1 id=""logo"" th:text=""#{titulo.electronico}"">Electrónico</h1>
    

I get ""Electr�nico"" instead of Electrónico

This is my configuration

**application.properties**

    
    
    spring.messages.encoding=UTF-8
    server.tomcat.uri-encoding=UTF-8
    spring.http.encoding.charset=UTF-8
    spring.thymeleaf.mode=HTML5
    spring.thymeleaf.encoding=UTF-8
    

**pom.xml**

    
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <start-class>demo.Demo</start-class>
        <java.version>1.7</java.version>
    </properties>
    

**Demo class**

    
    
    @SpringBootApplication
    public class Demo {
    
        public static void main(String[] args) {
            SpringApplication.run(Demo.class, args);
        }
    }
    

**ServletInitializer.class**

    
    
    @Configuration
    public class ServletInitializer extends SpringBootServletInitializer {
    
        @Override
        protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
            return application.sources(Demo.class);
        }
    
        @Bean
        public ServletRegistrationBean h2servletRegistration() {
            ServletRegistrationBean registration = new ServletRegistrationBean(new WebServlet());
            registration.addUrlMappings(""/console/*"");
            return registration;
        }
    
        @Bean
        @Order(Ordered.HIGHEST_PRECEDENCE)
        CharacterEncodingFilter characterEncodingFilter() {
          CharacterEncodingFilter filter = new CharacterEncodingFilter();
          filter.setEncoding(""UTF-8"");
          filter.setForceEncoding(true);
          return filter;
        }
    }
    

If you need more information about my configuration I can edit it. Thanks.

I guess the problem is that the UTF-8 encoding is untenable while when I use
IntelliJ IDEA I don't face this problem.

I run the application using:

    
    
    mvn spring-boot:run

and I added this option but still not working

    
    
    mvn spring-boot:run -Dfile.encoding=UTF-8

I updated the properties file also, but no difference

    
    
    server.servlet.encoding.charset=UTF-8
    server.tomcat.uri-encoding=UTF-8

Is there a specific way to enable the UTF-8 encoding, so the text will show in
the right language?

[
](https://preview.redd.it/4hyoe5qjnue81.png?width=1351&format=png&auto=webp&s=c5a56923326b6b876dbd0af399627e00503d2430
""Image from r/SpringBoot - UTF-8 encoding is not enabled when running Spring
Boot from the command line"")

Read more

**Top 4%** [ Rank by size
](https://www.reddit.com/best/communities/49/#t5_3nmxx/)

##  Top Posts

* * *

  * [ Reddit  reReddit: Top posts of January 30, 2022

* * * ](https://www.reddit.com/posts/2022/january-30-1/)
  * [ Reddit  reReddit: Top posts of January 2022

* * * ](https://www.reddit.com/posts/2022/january/)
  * [ Reddit  reReddit: Top posts of 2022

* * * ](https://www.reddit.com/posts/2022/)

* &nbsp;

* * *

* TOPICS

* Internet Culture (Viral)

  * [ Amazing ](https://reddit.com/t/amazing/)
  * [ Animals & Pets ](https://reddit.com/t/animals_and_pets/)
  * [ Cringe & Facepalm ](https://reddit.com/t/cringe_and_facepalm/)
  * [ Funny ](https://reddit.com/t/funny/)
  * [ Interesting ](https://reddit.com/t/interesting/)
  * [ Memes ](https://reddit.com/t/memes/)
  * [ Oddly Satisfying ](https://reddit.

##

Not the answer you're looking for? Browse other questions tagged

  * [spring](/questions/tagged/spring ""show questions tagged 'spring'"")
  * [utf-8](/questions/tagged/utf-8 ""show questions tagged 'utf-8'"")
  * [thymeleaf](/questions/tagged/thymeleaf ""show questions tagged 'thymeleaf'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 15 ](/q/55640629 ""Question score \(upvotes - downvotes\)"") [How to make
spring boot default to application/json;charset=utf-8 instead of
application/json;charset=iso-8859-1](/questions/55640629/how-to-make-spring-
boot-default-to-application-jsoncharset-utf-8-instead-of-app?noredirect=1)

[ 12 ](/q/26432479 ""Question score \(upvotes - downvotes\)"") [Messages from
.properties file do not display UTF-8
characters](/questions/26432479/messages-from-properties-file-do-not-display-
utf-8-characters?noredirect=1)

[ 6 ](/q/27882191 ""Question score \(upvotes - downvotes\)"") [Spring Boot
default properties encoding change?",litemall,spring.messages.encoding,UNKNOWN,UTF-8,spring,litemall-admin-api/src/main/resources/application.yml,spring.messages.encoding,UNKNOWN,UTF-8,spring,litemall-core/src/main/resources/application.yml,Others,Encoding,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'spring.messages.encoding' in 'litemall-admin-api/src/main/resources/application.yml' and 'spring.messages.encoding' in 'litemall-core/src/main/resources/application.yml'.\n2. Determine the context and purpose of each configuration option within their respective modules.\n3. Assess whether these configuration options are likely to be independently defined for their specific modules or if they need to be consistent across modules to function correctly.\n4. Compare the provided examples to understand the criteria for determining dependencies based on value-equality.\n5. Formulate a rationale based on the context and purpose of the configuration options, and decide if a dependency exists."",
	""rationale"": ""The configuration option 'spring.messages.encoding' in both 'litemall-admin-api/src/main/resources/application.yml' and 'litemall-core/src/main/resources/application.yml' is used to specify the encoding for message properties files in a Spring application. Given that both modules are part of the same project and likely share common internationalization and localization settings, it is crucial for these encoding settings to be consistent across the project to ensure proper handling of message properties files. Unlike the examples provided, where the configuration options were specific to different environments or modules with independent data sources, the encoding setting here must be uniform to avoid issues with character encoding in messages. Therefore, these configuration options depend on each other to maintain consistent behavior across the project."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'org.springframework.boot' for the groupId. In Maven, the dependencyManagement section is used to manage versions of dependencies in a multi-module project. Dependencies declared in the dependencyManagement section are not automatically included in the child modules; they need to be explicitly declared in the dependencies section of the child module. The groupId 'org.springframework.boot' is a common identifier for Spring Boot dependencies, and having the same groupId in both sections ensures consistency across the project. However, this does not necessarily imply a strict value-equality dependency, as the groupId is a standard identifier and not a unique configuration value that must be identical for functionality.","This is what I have at this point, and it works, but are there others I should
have instead or in addition to:

    
    
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
            </dependency>
    
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    

I've noticed that some examples in tutorials show version, which I don't have
any of.

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [rest](/questions/tagged/rest ""show questions tagged 'rest'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")

[Share](/q/63000875 ""Short permalink to this question"")

[Improve this question](/posts/63000875/edit)

Follow

asked Jul 20, 2020 at 17:31

[![baumli's user
avatar](https://www.gravatar.com/avatar/d5c649e140ffebdea2370bfab370ed2f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/9216629/baumli)

[baumli](/users/9216629/baumli)baumli

47155 silver badges2424 bronze badges

5

  * To include version, go to [mvnrepository.com](https://mvnrepository.com) and select the required repository and add that snippet. If your application is working with those dependencies, why would you need to add any others?

This is what I was asking, since this is a very basic app, was just looking for validation for correctness.

- [baumli](/users/9216629/baumli ""471 reputation"")

Commented Jul 20, 2020 at 18:40

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/63000875/which-dependencies-are-
required-for-a-spring-boot-maven-rest-application?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

1

[](/posts/63000995/timeline ""Show activity on this post."")

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.0.RELEASE</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.springboot.testapplication</groupId>
    <artifactId>testapplication</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>testapplication</name>
    <description>Spring Boot Application</description>
    <dependencies>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/63000995 ""Short permalink to this answer"")

[Improve this answer](/posts/63000995/edit)

Follow

answered Jul 20, 2020 at 17:39

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/8626894/what-are-the-minimum-jars-needed-for-spring-
to-be-used-in-a-standalone-applicati)

[ 0 ](/q/23553046 ""Question score \(upvotes - downvotes\)"") [Which
dependencies to create REST services on Tomcat7 (Netbeans project with
Maven)](/questions/23553046/which-dependencies-to-create-rest-services-on-
tomcat7-netbeans-project-with-mav)

[ 1 ](/q/24947439 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies for Spring beans & Hibernate](/questions/24947439/maven-
dependencies-for-spring-beans-hibernate)

[ 3 ](/q/30428264 ""Question score \(upvotes - downvotes\)"") [Spring REST
Data](/questions/30428264/spring-rest-data)

[ 4 ](/q/34961808 ""Question score \(upvotes - downvotes\)"") [Maven and spring-
boot-dependencies](/questions/34961808/maven-and-spring-boot-dependencies)

[ 0 ](/q/58030559 ""Question score \(upvotes - downvotes\)"") [Simple REST
service with Spring framework not using Spring
Boot](/questions/58030559/simple-rest-service-with-spring-framework-not-using-
spring-boot)

[ 2 ](/q/59524665 ""Question score \(upvotes - downvotes\)"") [Spring boot
RESTful - three tier architecture](/questions/59524665/spring-boot-restful-
three-tier-architecture)

[ 0 ](/q/67036003 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies and how they actually work in Java
projects](/questions/67036003/maven-dependencies-and-how-they-actually-work-
in-java-projects)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines? ](https://retrocomputing.stackexchange.com/questions/30344/could-todays-flash-memory-be-used-instead-of-ram-in-1980s-8-bit-machines)
  * [ Holding *west* on the 090 radial?

[DEBUG] MBean server at port 9001 is not up yet. [DEBUG] Spring application is not ready yet, waiting 500ms (attempt 60) . [INFO] backend . FAILURE [33:37 min] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 33:47 min [INFO] Finished at: 2019-06-12T16:06:05+02:00 [INFO] Final Memory: 238M/6637M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started: Failed to connect to MBean server at port 9001: Spring application did not start before the configured timeout (60000ms -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.5.RELEASE:start (pre-integration-test) on project backend: Could not figure out if the application has started     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.",litemall,project.dependencies.dependency_spring-boot-starter-json.groupId,NAME,org.springframework.boot,maven,litemall-db/pom.xml,project.dependencyManagement.dependencies.dependency_spring-boot-starter-json.groupId,NAME,org.springframework.boot,maven,pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.dependencies.dependency_spring-boot-starter-json.groupId' in 'litemall-db/pom.xml' and 'project.dependencyManagement.dependencies.dependency_spring-boot-starter-json.groupId' in 'pom.xml'.\n2. Determine the type and value of each configuration option: both are of type 'NAME' with the value 'org.springframework.boot'.\n3. Analyze the context in which these configuration options are used: 'litemall-db/pom.xml' is a module-specific POM file, while 'pom.xml' is the parent POM file.\n4. Compare the provided examples to understand how similar dependencies are evaluated.\n5. Evaluate whether the equality of the 'groupId' values indicates a dependency based on the context and usage.\n6. Formulate a rationale based on the analysis and examples.\n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In this case, both configuration options have the same 'groupId' value 'org.springframework.boot', indicating that they are part of the same Spring Boot ecosystem. The 'project.dependencyManagement.dependencies.dependency_spring-boot-starter-json.groupId' in the parent POM file ('pom.xml') is used to manage dependencies for all modules, including 'litemall-db'. Therefore, the 'project.dependencies.dependency_spring-boot-starter-json.groupId' in 'litemall-db/pom.xml' inherits and depends on the 'groupId' specified in the parent POM file to ensure consistency and proper dependency management across the project."",
	""isDependency"": true
}"
Inferring Dependencies,gpt-4o-2024-05-13,config2,10.0,FP,False,"In a Dockerfile, the COPY command is used to copy files from the source path (COPY.src) to the destination path (COPY.dest). The values 'application.yml' for both options indicate that the same file is being copied from one location to another. This is a direct dependency because the destination file (COPY.dest) will not exist without the source file (COPY.src). The dependency is due to the Dockerfile syntax and the need to have the 'application.yml' file in the specified destination for the application to function correctly.","When first deployed, the properties that are currently in `my-
server/src/main/resources/application.yml` are loaded and used by the
application as expected. All works fine.

However, my problem is that I need these properties to be updatable as needed,
so I need access to the `application.yml` file once on the Docker container.
But at this point, it's not included in the `build/docker/` directory before
running the `buildDocker` task, so won't be copied over or accessible after
first deployment.

So, what I have tried is to copy the Yaml file into the `docker/` build
directory, copy it to an accessible directory
(`/opt/meanwhileinhell/myapp/conf`), and use the `spring.config.location`
property to pass a location of the config to the Jar in my Dockerfile:

    
    
    ENTRYPOINT  [""java"",\
    ...
    ""-jar"", ""/app.jar"",\
    ""--spring.config.location=classpath:${configDirectory}""]
    

Looking at the Command running on the Docker container I can see that this is
as expected:

    
    
    /app.jar --spring.config.location=classpath:/opt/meanwhileinhell/myapp/conf]
    

However, when I update a property in this file and restart the Docker
container, it isn't picking up the changes. File permissions are:

    
    
    -rw-r--r-- 1 root root  618 Sep  5 13:59 application.yml
    

The [documentation](https://docs.spring.io/spring-
boot/docs/current/reference/html/boot-features-external-config.html) states:

> When custom config locations are configured, they are used in addition to
> the default locations. Custom locations are searched before the default
> locations.

I can't seem to figure out what I'm doing wrong or misinterpreting, but
probably more importantly, is this the correct way to externalise the config
for this type of Docker scenario?

Containers should be immutable and all environment configuration
should be externalized.

For spring boot, there is very powerful project that allows you to externalize
configuration. Its called [Spring Cloud
Config](https://spring.io/guides/gs/centralized-configuration/). The config
server allows you to save your environment specific configuration in a git
repository and serve the configuration to applications that need it. You
basically just save the same application.yml in git and point the config
server to the repository location.

Following this approach you can define multiple configuration files for
different environments and keep your docker container immutable.

[Share](/a/46058572 ""Short permalink to this answer"")

Follow

answered Sep 5, 2017 at 15:26

[![yamenk's user
avatar](https://www.gravatar.com/avatar/8f02529297334913bf57f13edee1689c?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/6603816/yamenk)

[yamenk](/users/6603816/yamenk)yamenk

50.5k1010 gold badges100100 silver badges9393 bronze badges

Add a comment  | 

1

[](/posts/76407807/timeline ""Show activity on this post."")

Set `spring.config.additional-location` as ENTRYPOINT (ending with /) on
**Dockerfile** and mount the volume to the host folder where `application.yml`
is

**Dockerfile**

    
    
    RUN mkdir /opt/meanwhileinhell/myapp/conf
      (...)
    ENTRYPOINT [""java"", ""-Dspring.config.additional-location=/opt/meanwhileinhell/myapp/conf/"", ""-jar"", ""/opt/meanwhileinhell/myapp/app.jar""]
    

> When we want to specify a directory location then we must make sure that the
> value of spring.config.location ends with / (for example
> spring.config.location=classpath:/config/) and that the configuration file
> name is the default.

<https://springframework.guru/spring-external-
> configuration-data/>

To change on restarts need that `application.yml` will be located on the host
machine, referenced it with a volume

**docker-compose.yml**

    
    
    ...
    volumes:
         - my-server/src/main/resources:/opt/meanwhileinhell/myapp/conf
    ...
    

Other alternative is as environment on **docker-compose.yml** : ...
environment: -spring.config.additional-
location=/opt/meanwhileinhell/myapp/conf/ volumes: \- my-
server/src/main/resources:/opt/meanwhileinhell/myapp/conf ...

For **Spring < 2.x** use `spring.config.location` instead of
`spring.config.additional-location`

[Share](/a/76407807 ""Short permalink to this answer"")

Follow

[edited Jun 10, 2023 at 15:22](/posts/76407807/revisions ""show all edits to
this post"")

answered Jun 5, 2023 at 15:12

[![pdorgambide's user
avatar](https://www.gravatar.com/avatar/36559d59d3d75e442c83e348acdd0bcc?s=64&d=identicon&r=PG)](/users/1203628/pdorgambide)

[pdorgambide](/users/1203628/pdorgambide)pdorgambide

1,8572121 silver badges3434 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow. [Learn more](/help/gen-ai-policy)

Thanks for contributing an answer to Stack Overflow!

  * Please be sure to _answer the question_. Provide details and share your research!

But _avoid_ …

  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).

I need to load a property from a `.yml` file, which contains the path to a
folder where the application can read files from.

I'm using the following code to inject the property:

    
    
    @Value(""${files.upload.baseDir}"")
    private String pathToFileFolder;
    

The `.yml` file for development is located under
`src/main/resources/config/application.yml`, im running the application with
the following command in production, to override the development settings:

    
    
    java -jar app.jar --spring.config.location=/path/to/application-production.yml
    

The Spring Boot documentation says:

> SpringApplication will load properties from application.properties files in
> the following locations and add them to the Spring Environment:
>
>   1. A /config subdirectory of the current directory.
>
>   2. The current directory
>
>   3. A classpath /config package
>
>   4. The classpath root
>
>

As well as:

> You can also use YAML ('.yml') files as an alternative to '.properties'.

The `.yml` file contains:

    
    
    {...}
    files:
          upload:
            baseDir: /Users/Thomas/Code/IdeaProjects/project1/files
    {...}
    

And my `Application` class is annotated with:

    
    
    @SpringBootApplication
    @EnableCaching
    

When I run the application, i get an exception:

    
    
    Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'files.upload.baseDir' in string value ""${files.upload.baseDir}""
    

Do I have to use the `YamlPropertySourceLoader` class or add a special
annotation to enable the support for `.yml` in Spring Boot?

Edit: The `.yml` file contains some other properties, which get successfully
loaded by Spring Boot like `dataSource.XXX`or `hibernate.XXX`.

Each stage can have its own
set of instructions and dependencies, and the final image only includes the
files and dependencies from the last stage. Here’s an example Dockerfile that
uses multi-stage builds to create a slim Spring Boot image:

    
    
    # First stage: build the application  
    FROM maven:3.8.3-jdk-11 AS build  
    COPY . /app  
    WORKDIR /app  
    RUN mvn package -DskipTests  
      
    # Second stage: create a slim image  
    FROM openjdk:11-jre-slim  
    COPY --from=build /app/target/my-application.jar /app.jar  
    ENTRYPOINT [""java"", ""-jar"", ""/app.jar""]

In this example, the first stage uses a Maven base image to build the Spring
Boot application and generate a jar file. The second stage uses an OpenJDK
slim base image, which is a smaller version of the base image that only
includes the Java runtime environment.

The `COPY --from=build` instruction copies the jar file from the first stage
to the second stage, and the `ENTRYPOINT` instruction specifies the command
that should be run when the container is started.

> Using multi-stage builds in this way allows us to create a slim Docker image
> that only includes the required dependencies and files for running the
> Spring Boot application. By doing so, we can reduce the size of the image
> and improve the performance of the application.

# Use environment variables

When Dockerizing a Spring Boot application, it’s important to use environment
variables to configure your application. Using environment variables allows
you to change the configuration of your application without having to rebuild
the Docker image.

Spring Boot applications can use the `application.properties` or
`application.yml` file to specify configuration properties. These properties
can be overridden at runtime using environment variables, which Spring Boot
automatically maps to properties. Here’s an example Dockerfile that sets an
environment variable to configure the active profile for the Spring Boot
application:

    
    
    FROM openjdk:11  
    ENV SPRING_PROFILES_ACTIVE=production  
    COPY target/my-application.jar app.jar  
    ENTRYPOINT [""java"", ""-jar"", ""/app.jar""]

In this example, we’re setting the `SPRING_PROFILES_ACTIVE` environment
variable to `production`, which will activate the `production` profile in the
Spring Boot application.",litemall,COPY.dest,PATH,application.yml,docker,docker/litemall/Dockerfile,COPY.src,PATH,application.yml,docker,docker/litemall/Dockerfile,Others,Others,"{
	""plan"": ""1. Identify the configuration options to be evaluated: COPY.dest and COPY.src in docker/litemall/Dockerfile. \n2. Understand the purpose of these options: COPY.dest specifies the destination path in the Docker image, and COPY.src specifies the source path on the host machine. \n3. Compare the values of these options: both have the value 'application.yml'. \n4. Determine if the values being identical is necessary for the correct functioning of the Dockerfile. \n5. Evaluate if the purpose of these options inherently requires them to have the same value. \n6. Refer to the provided examples to understand how similar dependencies are evaluated. \n7. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration options COPY.dest and COPY.src in docker/litemall/Dockerfile both have the value 'application.yml'. The purpose of COPY.src is to specify the source file on the host machine, and COPY.dest is to specify the destination path in the Docker image. For the Dockerfile to correctly copy the 'application.yml' file from the host to the Docker image, these values must be identical. This is because the COPY instruction in Docker requires a source and destination path, and the source file must match the destination file name to ensure the correct file is copied. Therefore, the identical values are not coincidental but necessary for the correct functioning of the Dockerfile."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FP,False,"Both configuration options have the same value 'io.springfox' for their groupId. This suggests that they are part of the same library ecosystem (Springfox). For the application to function correctly, it is likely necessary for all Springfox-related dependencies to have the same groupId to ensure compatibility and proper integration. This is a common practice in Maven projects to avoid conflicts and ensure that all related dependencies are correctly resolved.","Application was working with Springfox Swagger 3.0 few days back. Suddenly it
is stopped working. The Jar file which was created before a week is still
working but now when we try to build a new Jar file, which is not working,
even without any code/library changes. I have even referred the below URL but
still facing issue.

[404 error with swagger-ui and spring
webflux](https://stackoverflow.com/questions/59440108/404-error-with-swagger-
ui-and-spring-webflux)

Below given my configuration:

POM file:

    
    
    <properties>
        <java.version>1.8</java.version>
        <springfox.version>3.0.0-SNAPSHOT</springfox.version>
        <spring.version>2.3.1.RELEASE</spring.version>
    </properties>
    <repositories>
        <repository>
            <id>spring-libs-milestone</id>
            <name>Spring Milestone Maven Repository</name>
            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </repository>
    </repositories>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-spring-webflux</artifactId>
            <version>${springfox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox.version}</version>
        </dependency>
    </dependencies>
    

Config Files:

    
    
    @Configuration
    @EnableSwagger2WebFlux
    public class SwaggerConfiguration implements WebFluxConfigurer {
    
        @Bean
        public Docket createRestApi() {
            return new Docket(DocumentationType.SWAGGER_2)
                    .apiInfo(new ApiInfoBuilder()
                            .description(""My Reactive API"")
                            .

Gradle

    
    
    dependencies {
        implementation ""io.springfox:springfox-data-rest:3.0.0""
    }

#### 3.3.2. Maven

    
    
    <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-data-rest</artifactId>
        <version>3.0.0</version>
    </dependency>

#### 3.3.3. java config

    
    
    //For java config
    @Import({ ... springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration.class, ...})

#### 3.3.4. xml config

Import the bean in your xml configuration by defining a bean of the following
type

    
    
    <bean class=""springfox.documentation.spring.data.rest.configuration.SpringDataRestConfiguration.class"" />

__ |  for spring boot, this section is not needed. Springfox will autoconfigure itself based on the detection of spring data rest components.   
---|---  
  
### 3.4. Springfox Support for JSR-303

In version greater than 2.3.2, support for bean validation annotations was
added, specifically for @NotNull, @Min, @Max, and @Size.

In order to use it

  * add the `springfox-bean-validators` dependency.

#### 3.4.1. Gradle

    
    
    dependencies {
        implementation ""io.springfox:springfox-bean-validators:3.0.0""
    }

#### 3.4.2. Maven

    
    
    <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-bean-validators</artifactId>
        <version>3.0.0</version>
    </dependency>

  * Import the configuration from the `springfox-bean-validators` module as shown below

#### 3.4.3. java config

    
    
    //For java config
    @Import({ ... springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration.class, ...})

#### 3.4.4. xml config

Import the bean in your xml configuration by defining a bean of the following
type

    
    
    <bean class=""springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration"" />

### 3.5.

# Springfox Reference Documentation

Dilip Krishnan  
Adrian Kelly  
version 3.0.0-SNAPSHOT

Table of Contents

  * 1\. Introduction
    * 1.1. History
    * 1.2. Goals
    * 1.3. What it's not
    * 1.4. Development Environment
      * 1.4.1. Pre-Commit Build
      * 1.4.2. Building reference documentation
      * 1.4.3. Updating the contract tests
      * 1.4.4. CI Environment
    * 1.5. Releasing
      * 1.5.1. Snapshot
      * 1.5.2. Override deploy
      * 1.5.3. Releasing documentation
      * 1.5.4. Contributing
    * 1.6. Support
  * 2\. Getting Started
    * 2.1. Dependencies
      * 2.1.1. Gradle
      * 2.1.2. Maven
      * 2.1.3. Migrating from existing 2.x version
  * 3\. Quick start guides
    * 3.1. Springfox Spring MVC and Spring Boot
    * 3.2. Configuration explained
    * 3.3. Springfox Spring Data Rest
      * 3.3.1. Gradle
      * 3.3.2. Maven
      * 3.3.3. java config
      * 3.3.4. xml config
    * 3.4. Springfox Support for JSR-303
      * 3.4.1. Gradle
      * 3.4.2. Maven
      * 3.4.3. java config
      * 3.4.4. xml config
    * 3.5. Springfox Swagger UI
    * 3.6. Springfox RFC6570 support
    * 3.7. Springfox Spring-Integration Support **incubating**
    * 3.8.

version>
        <pagehelper.version>5.3.2</pagehelper.version>
        <druid.version>1.2.14</druid.version>
        <hutool.version>5.8.9</hutool.version>
        <springfox-swagger.version>3.0.0</springfox-swagger.version>
        <swagger-models.version>1.6.0</swagger-models.version>
        <swagger-annotations.version>1.6.0</swagger-annotations.version>
        <mybatis-generator.version>1.4.1</mybatis-generator.version>
        <mybatis.version>3.5.10</mybatis.version>
        <mysql-connector.version>8.0.29</mysql-connector.version>
        <spring-data-commons.version>2.7.5</spring-data-commons.version>
        <jjwt.version>0.9.1</jjwt.version>
        <aliyun-oss.version>2.5.0</aliyun-oss.version>
        <alipay-sdk.version>4.38.61.ALL</alipay-sdk.version>
        <logstash-logback.version>7.2</logstash-logback.version>
        <minio.version>8.4.5</minio.version>
        <jaxb-api.version>2.3.1</jaxb-api.version>
        <mall-common.version>1.0-SNAPSHOT</mall-common.version>
        <mall-mbg.version>1.0-SNAPSHOT</mall-mbg.version>
        <mall-security.version>1.0-SNAPSHOT</mall-security.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.

### 3.6. Springfox RFC6570 support

__ |  Support has been dropped experimental feature as swagger-ui and the spec itself has better support for this.   
---|---  
  
  * Turn enableUrlTemplating `OFF`; ([see #21](http://springfox.github.io/springfox/docs/current/#springfox-swagger2-with-spring-mvc-and-spring-boot))

### 3.7. Springfox Spring-Integration Support **incubating**

__ |  _Keep in mind this is experimental_!   
---|---  
  
As of Springfox 3.0 we offer experimental support for Spring Integration http
inbound endpoints.

The current implementation produces documentation for your endpoints, as far
as possible automatically, based on static code analysis. Since the ultimate
http responses in spring-integration cannot be determined statically from an
http inbound endpoint, we use spring-restdocs to provide response body
examples.

We consider the support experimental because it has not been tested with a
wide range of spring-integration applications and because we have only started
to evaluate the possibilities we have with spring-restdocs.

Depending on which web technology you choose, you need to include the
appropriate `springfox-spring-integration-webflux` or `springfox-spring-
integration-webmvc` dependency and use its respective tooling to produce
documentation for your http responses, based on [spring-
restdocs](https://spring.io/projects/spring-restdocs).

See the readme for [springfox-spring-integration-
webmvc](https://github.com/springfox/springfox/tree/master/springfox-spring-
integration-webmvc) and [springfox-spring-integration-
webflux](https://github.com/springfox/springfox/tree/master/springfox-spring-
integration-webflux) for details.

### 3.8. Securing swagger-ui

[The user contributed
example](https://github.com/springfox/springfox/issues/2191#issuecomment-359159833)
uses OAuth2 and cookies-based auth in the browser. (Credit:
[@evser](https://github.com/evser))

    
    
           protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .anyRequest().authenticated()
            .and().exceptionHandling().accessDeniedHandler(new AccessDeniedHandlerImpl())
            .and().logout().",litemall,project.dependencies.dependency_springfox-swagger-ui.groupId,NAME,io.springfox,maven,litemall-admin-api/pom.xml,project.dependencyManagement.dependencies.dependency_springfox-swagger2.groupId,NAME,io.springfox,maven,pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.dependencies.dependency_springfox-swagger-ui.groupId' in 'litemall-admin-api/pom.xml' and 'project.dependencyManagement.dependencies.dependency_springfox-swagger2.groupId' in 'pom.xml'.\n2. Determine the type and value of each configuration option: both are of type NAME with value 'io.springfox'.\n3. Analyze the context and purpose of each configuration option: 'springfox-swagger-ui' and 'springfox-swagger2' are dependencies related to the Springfox library for Swagger integration.\n4. Compare the provided examples to understand the criteria for dependency determination based on value-equality.\n5. Evaluate whether the equality of the 'groupId' values indicates a dependency between the two configuration options.\n6. Formulate a rationale based on the analysis and examples.\n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project or a set of related projects. In this case, both 'springfox-swagger-ui' and 'springfox-swagger2' are part of the Springfox library, which is identified by the 'io.springfox' groupId. However, the equality of the 'groupId' values alone does not indicate a direct dependency between these two specific configuration options. They are separate dependencies within the same ecosystem but do not depend on each other based on their 'groupId' values. The provided examples show that dependencies are determined by the specific role and relationship of the modules or dependencies within the project, not just by having the same 'groupId'."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,6.0,FN,True,"Both configuration options have the same value '../litemall-admin/dist'. This suggests that they might be intended to point to the same directory. However, without additional context or documentation explicitly stating that these values must be identical for the project to function correctly, it is difficult to definitively conclude that a dependency exists. The identical values could be coincidental, especially if the directory structure is consistent across different modules.","apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:362)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.

To clean up the
downloaded artifacts as part the build, set _localRepositoryDirectory_ 's
value to a location in your project's target directory.

This use case also applies to **dependency:unpack** goal.

    
    
    <project>
      [...]
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.7.1</version>
            <executions>
              <execution>
                <id>copy-with-alternalte-repo</id>
                <phase>install</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      [...]
                    </artifactItem>
                    [...]
                  </artifactItems>
                  <localRepositoryDirectory>${project.build.directory}/localrepo</localRepositoryDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      [...]
    </project>

## Copying from the command line

If you intend to configure this mojo for execution on the command line using:

    
    
    mvn dependency:copy

you must not put the configuration inside the _executions_ tag. Your
configuration should look like this:

    
    
    <project>
      [...]
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.7.1</version>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>[ groupId ]</groupId>
                  <artifactId>[ artifactId ]</artifactId>
                  <version>[ version ]</version>
                  <type>[ packaging ]</type>
                  <overWrite>[ true or false ]</overWrite>
                  <outputDirectory>[ output directory ]</outputDirectory>
                  <destFileName>[ filename ]</destFileName>
                </artifactItem>
              </artifactItems>
              <!-- other configurations here -->
            </configuration>
          </plugin>
        </plugins>
      </build>
      [...]
    </project>

* * *

(C) 2002-2024 [The Apache Software Foundation](https://www.apache.org/)

Now that we have a POM, some application sources, and some test sources you
are probably asking...

## How do I compile my application sources?

Change to the directory where `pom.xml` is created by archetype:generate and
execute the following command to compile your application sources:

    
    
    mvn compile

Upon executing this command you should see output like the following:

    
    
    [INFO] Scanning for projects...
    [INFO]
    [INFO] ----------------------< com.mycompany.app:my-app >----------------------
    [INFO] Building my-app 1.0-SNAPSHOT
    [INFO] --------------------------------[ jar ]---------------------------------
    [INFO]
    [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ my-app ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] skip non existing resourceDirectory <dir>/my-app/src/main/resources
    [INFO]
    [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ my-app ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 1 source file to <dir>/my-app/target/classes
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time:  0.899 s
    [INFO] Finished at: 2020-07-12T11:31:54+01:00
    [INFO] ------------------------------------------------------------------------

The first time you execute this (or any other) command, Maven will need to
download all the plugins and related dependencies it needs to fulfill the
command. From a clean installation of Maven, this can take quite a while (in
the output above, it took almost 4 minutes). If you execute the command again,
Maven will now have what it needs, so it won't need to download anything new
and will be able to execute the command much more quickly.

As you can see from the output, the compiled classes were placed in
`${project.basedir}/target/classes`, which is another standard convention
employed by Maven.

<resources>
              <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <targetPath>${basedir}/target</targetPath>
              </resource>
              <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <targetPath>${basedir}/target/classes</targetPath>
              </resource>
           </resources>
    
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>jks</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                    <executions>
                        <execution>
                            <id>copy-resources-1</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                        </execution>
                    </executions>
                </configuration>
            </plugin>
       </plugins>
    

[![Maven - Copying resources into multiple
targets](https://i.sstatic.net/diM64.png)](https://i.sstatic.net/diM64.png)

[Share](/a/56656530 ""Short permalink to this answer"")

[Improve this answer](/posts/56656530/edit)

Follow

answered Jun 18, 2019 at 20:22

[![Felix Aballi's user
avatar](https://i.sstatic.net/56i5i.jpg?s=64)](/users/1990698/felix-aballi)

[Felix Aballi](/users/1990698/felix-aballi)Felix Aballi

92911 gold badge1414 silver badges3131 bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow.

/./wagon/index.html ""Wagon"")
  * ASF
  * [How Apache Works](https://www.apache.org/foundation/how-it-works.html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

## Copying specific artifacts

In copying specific artifacts, you need to bind the `dependency:copy` mojo to
a lifecycle, configure the plugin and specify the artifacts you want to copy.
See the following example:

    
    
    <project>
      [...]
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.7.1</version>
            <executions>
              <execution>
                <id>copy</id>
                <phase>package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>junit</groupId>
                  <artifactId>junit</artifactId>
                  <version>3.8.1</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>
                  <destFileName>optional-new-name.jar</destFileName>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.directory}/wars</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </plugin>
        </plugins>
      </build>
      [...]
    </project>

Then after executing `mvn package`, the artifact (junit) is copied to the
given alternate location.",litemall,project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.configuration.resources.resource.directory,PATH,../litemall-admin/dist,maven,litemall-all-war/pom.xml,project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.configuration.resources.resource.directory,PATH,../litemall-admin/dist,maven,litemall-all/pom.xml,Libraries,Maven Plugins,"{
	""plan"": ""1. Identify the configuration options in question: 'project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.configuration.resources.resource.directory' in both 'litemall-all-war/pom.xml' and 'litemall-all/pom.xml'.\n2. Determine the purpose of these configuration options: both specify the directory path for resources to be copied by the Maven Resources Plugin.\n3. Compare the values of these configuration options: both have the value '../litemall-admin/dist'.\n4. Evaluate whether these values need to be identical for the project to function correctly or if they are coincidentally the same.\n5. Consider the context and purpose of these configurations: both are likely referring to the same resource directory for consistency in the build process.\n6. Conclude whether the identical values indicate a dependency or are merely for consistency."",
	""rationale"": ""The configuration options 'project.build.plugins.plugin_maven-resources-plugin.executions.execution_copy-resources.configuration.resources.resource.directory' in both 'litemall-all-war/pom.xml' and 'litemall-all/pom.xml' specify the directory path for resources to be copied by the Maven Resources Plugin. Both options have the value '../litemall-admin/dist', indicating that they refer to the same resource directory. This suggests that the values need to be identical to ensure that the resources are correctly copied from the same location in both modules. Therefore, the identical values indicate a dependency due to value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'org.linlinjava' and are located in the same Maven POM file. In Maven, the groupId is used to uniquely identify a project across all projects. If multiple dependencies share the same groupId, it typically means they are part of the same project or organization. However, having the same groupId does not necessarily imply a functional dependency between the two configuration options; it simply indicates they belong to the same group. Therefore, the identical values are more likely a result of organizational naming conventions rather than a strict functional dependency.","We’ll occasionally send you
account related emails.

Already on GitHub? [Sign
in](/login?return_to=%2Flinlinjava%2Flitemall%2Fissues%2Fnew%2Fchoose) to your
account

Jump to bottom

#  Could not resolve dependencies for project org.linlinjava:litemall-
all:jar:0.1.0: The following artifacts could not be resolved:
org.linlinjava:litemall-core:jar:0.1.0, org.linlinjava:litemall-db:jar:0.1.0,
org.linlinjava:litemall-wx-api:jar:0.1.0, org.linlinjava:litemall-admin-
api:jar:0.1.0: Failure to find org.linlinjava:litemall-core:jar:0.1.0 in
http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the
local repository, resolution will not be reattempted until the update interval
of alimaven has elapsed or updates are forced -> #142

Closed

[hemingyang](/hemingyang) opened this issue Mar 19, 2019 * 1 comment

Closed

#  Could not resolve dependencies for project org.linlinjava:litemall-
all:jar:0.1.0: The following artifacts could not be resolved:
org.linlinjava:litemall-core:jar:0.1.0, org.linlinjava:litemall-db:jar:0.1.0,
org.linlinjava:litemall-wx-api:jar:0.1.0, org.linlinjava:litemall-admin-
api:jar:0.1.0: Failure to find org.linlinjava:litemall-core:jar:0.1.0 in
http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the
local repository, resolution will not be reattempted until the update interval
of alimaven has elapsed or updates are forced -> #142

[hemingyang](/hemingyang) opened this issue Mar 19, 2019 * 1 comment

## Comments

[!

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.",litemall,project.dependencies.dependency_litemall-admin-api.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,project.dependencies.dependency_litemall-db.groupId,NAME,org.linlinjava,maven,litemall-all-war/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_litemall-admin-api.groupId and project.dependencies.dependency_litemall-db.groupId, both located in litemall-all-war/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is used to uniquely identify a project across all projects. \n3. Compare the provided examples to see how similar dependencies are evaluated. \n4. Determine if the equality of the 'groupId' values indicates a dependency between the two configuration options. \n5. Provide a rationale based on the analysis and conclude whether a dependency exists."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. Both configuration options project.dependencies.dependency_litemall-admin-api.groupId and project.dependencies.dependency_litemall-db.groupId are located in the same POM file (litemall-all-war/pom.xml) and have the same value 'org.linlinjava'. This indicates that they are part of the same project ecosystem. However, the equality of the 'groupId' values alone does not imply a direct dependency between these two configuration options. They are simply part of the same project and need to specify the same 'groupId' to be correctly identified as part of the litemall project. Therefore, there is no dependency between these two configuration options based on their 'groupId' values."",
	""isDependency"": false
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion element in a Maven POM file specifies the version of the POM model being used. According to the provided information, 4.0.0 is the only supported POM version and is always required. This means that any Maven project using a POM file must use modelVersion 4.0.0. Therefore, the identical values of modelVersion in mall-common/pom.xml and mall-portal/pom.xml are due to the requirement of the Maven POM model and not because of a direct dependency between the two configuration options. Both POM files must use modelVersion 4.0.0 independently to be valid Maven POM files.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-common/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-portal/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.modelVersion in mall-common/pom.xml and project.modelVersion in mall-portal/pom.xml. 2. Understand the role of project.modelVersion in a Maven project, which specifies the version of the POM model being used. 3. Verify that Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. 4. Compare the provided examples where project.modelVersion must be consistent across all modules to ensure compatibility. 5. Conclude whether the project.modelVersion in mall-common/pom.xml depends on the project.modelVersion in mall-portal/pom.xml or vice versa based on the need for consistency across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Maven projects, it is common for child projects to inherit version numbers from parent projects to maintain consistency across the project. The project.parent_mall-swarm.version in mall-gateway/pom.xml likely refers to the parent POM's version, which is set to 1.0-SNAPSHOT. The project.version in mall-mbg/pom.xml being the same suggests that mall-mbg is either a sibling or another module within the same parent project. This alignment ensures that all modules and submodules are using the same version, which is crucial for dependency management and project coherence. Therefore, the identical values are not coincidental but a result of intentional configuration to maintain consistency.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?",mall-swarm,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-gateway/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-mbg/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_mall-swarm.version' in mall-gateway/pom.xml and 'project.version' in mall-mbg/pom.xml. \n2. Determine the type and value of each configuration option: both are of type VERSION_NUMBER with value '1.0-SNAPSHOT'. \n3. Analyze the role of each configuration option within the Maven project structure. \n4. Compare the roles and usages of these configuration options to see if they must have identical values to function correctly. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The 'project.parent_mall-swarm.version' in mall-gateway/pom.xml specifies the version of the parent POM that mall-gateway inherits from. The 'project.version' in mall-mbg/pom.xml specifies the version of the mall-mbg module itself. In a typical Maven multi-module project, the parent POM version must be consistent across all child modules to ensure they inherit the correct configurations and dependencies. Therefore, the 'project.parent_mall-swarm.version' in mall-gateway/pom.xml must match the 'project.version' in the parent POM (which is mall-swarm/pom.xml). Since mall-mbg is also a module within the same project structure, its version must align with the parent POM version to maintain consistency. This creates a dependency based on value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Maven, the 'groupId' is a fundamental identifier for a project and its dependencies. The 'project.dependencies.dependency_mall-common.groupId' in 'mall-gateway/pom.xml' specifies the groupId for a dependency, while 'project.groupId' in 'mall-search/pom.xml' specifies the groupId for the project itself. For the 'mall-gateway' project to correctly resolve and use the 'mall-common' dependency, the groupId specified in 'mall-gateway/pom.xml' must match the groupId of the 'mall-common' project. Therefore, the values of these configuration options must be identical for the dependency resolution to work correctly, indicating a value-equality dependency.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

One solution to this new requirement is to define dependency management and
versioning at the `app1` and `app2` projects.

So, `app1` POM can include this for version 1.

    
    
    <properties>          
    <report.version>1.0.0</report.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.protectsoft.company</groupId>
          <artifactId>jasper-report-ejb</artifactId>
          <version>${report.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>

  

And `app2` POM includes the following:

    
    
    <properties>          
    <report.version>2.0.0</report.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.protectsoft.company</groupId>
          <artifactId>jasper-report-ejb</artifactId>
          <version>${report.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>

  

`App1` and `App2` are responsible and in control of the context of the sub-
module projects. Furthermore, changes can take place more easily.

## Last But Not Least, the Profile Section

At this point, we have to mention the
[profile](https://maven.apache.org/guides/introduction/introduction-to-
profiles.html) section and its use. A lot of the staff being said above can be
grouped into different profiles. For example, we can have one profile for the
**X** version of our commons library and another profile for the **Y** version
of commons. Another example would be two have different profiles for the
**environments** like **test** environment and a **demo** environment.

We are going to modify the parent root `pom.xml` and add two profiles. One is
versioning for Java EE 7 and the other for Java EE 8.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

So, the QA department wants everyone working in any project to use the JUnit 4
version with the test scope, which defines what is needed only in test phases
and not the normal use of the app). This is done in the `company-root`pom.xml

First, set the desired version for the JUnit in the `properties ` section.

    
    
    <properties>     
        <junit.version>4.12</junit.version>
    </properties>

  

And then, the dependency:

    
    
    <dependencyManagement>
        <dependencies>      
          <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
          </dependency>
        </dependencies>      
    </dependencyManagement>    

  

With the above declaration, everyone will be using JUnit 4.12 with a test
scope.

The declaration of JUnit on child projects is as simple as that.

    
    
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
    </dependency>

  

Now, let's assume the DevOps engineer wants to test everything with the new
JUnit 5 Framework. The only action required for him would be to change the
property version on company-root pom from 4.12 to 5.0 and run the tests.

More info on the Maven dependency mechanism can be found
[here](https://maven.apache.org/guides/introduction/introduction-to-
dependency-mechanism.html).

### Versioning

Let's not forget the versioning numbers and the role they have to play:

![Image title](https://dz2cdn1.dzone.com/storage/temp/11997985-version.png)

Also, let's take a moment for a quick recap:

  * Bug fix: just bug fixes and related stuff.
  * Minor: Improvements, new features, deprecation notices, don't break user code (backward-compatibility). Same API.
  * Major: new features, to complete API changes.

More info for software versioning can be found [here](https://semver.org/)

### A Common Project

In the next step, we want to create a base framework with core functionality
or a library with common utilities for all of our projects to use, extend, or
explore whatever the usage is.",mall-swarm,project.dependencies.dependency_mall-common.groupId,NAME,com.macro.mall,maven,mall-gateway/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.dependencies.dependency_mall-common.groupId' in 'mall-gateway/pom.xml' and 'project.groupId' in 'mall-search/pom.xml'.\n2. Understand the role of 'groupId' in Maven projects, which is to uniquely identify a project across all projects.\n3. Compare the provided examples to see if similar dependencies exist and how they are evaluated.\n4. Determine if 'mall-gateway' and 'mall-search' are part of the same project and if they need to share the same 'groupId' to maintain consistency and proper identification within the project.\n5. Conclude whether the 'groupId' values must be identical for the configurations to function correctly, establishing a dependency based on value equality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In this case, 'mall-gateway' and 'mall-search' are modules within the same 'mall-swarm' project. The 'groupId' for 'mall-common' in 'mall-gateway/pom.xml' and the 'groupId' in 'mall-search/pom.xml' must be the same to ensure that all modules are correctly identified as part of the same project. This establishes a dependency based on value equality, as the 'groupId' must be consistent across all modules within the project."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"The groupId in a Maven POM file uniquely identifies a project across all projects. The project.parent_mall-swarm.groupId in mall-mbg/pom.xml indicates the groupId of the parent project, while the project.groupId in mall-portal/pom.xml indicates the groupId of the current project. If mall-mbg is a child module of mall-portal, it would inherit the groupId from the parent unless explicitly overridden. Given that both values are 'com.macro.mall', it suggests that mall-mbg is intended to be part of the same project structure as mall-portal. This value equality is necessary for the correct inheritance and resolution of dependencies and plugins.","12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.parent_mall-swarm.groupId,NAME,com.macro.mall,maven,mall-mbg/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_mall-swarm.groupId' in mall-mbg/pom.xml and 'project.groupId' in mall-portal/pom.xml.\n2. Understand the role of 'groupId' in Maven projects, which is to uniquely identify a project across all projects.\n3. Review the provided examples to understand how similar dependencies are evaluated, particularly focusing on the dependency between 'groupId' values in parent and child POMs.\n4. Determine if the 'groupId' in mall-mbg/pom.xml must match the 'groupId' in mall-portal/pom.xml for the project to function correctly.\n5. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In the context of a multi-module project like mall-swarm, the 'groupId' of the parent POM (project.parent_mall-swarm.groupId) is typically inherited by child modules unless explicitly overridden. The 'groupId' in mall-portal/pom.xml is used to identify the mall-portal module. However, the 'groupId' in mall-mbg/pom.xml referencing the parent POM's 'groupId' does not inherently depend on the 'groupId' in mall-portal/pom.xml. These values are equal to maintain consistency within the project, but they do not depend on each other for functionality."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Maven, a child project can inherit properties, including the version, from its parent POM. If 'mall-auth' specifies 'mall-monitor' as its parent, or if both projects share a common parent POM with the same version, then the version values must be identical to ensure consistency and proper dependency resolution. Given that both 'mall-auth' and 'mall-monitor' have the same version '1.0-SNAPSHOT', it is likely that they share a common parent POM or one is the parent of the other, creating a dependency based on value-equality.","Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?",mall-swarm,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-auth/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-monitor/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options in question: 'project.parent_mall-swarm.version' in mall-auth/pom.xml and 'project.version' in mall-monitor/pom.xml. \n2. Determine the context and role of each configuration option within their respective POM files. \n3. Compare the values of these configuration options to see if they are identical. \n4. Evaluate whether the identical values are necessary for the correct functioning of the project or if they are coincidental. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Conclude whether a value-equality dependency exists based on the necessity of the values being identical for the project to function correctly."",
	""rationale"": ""The 'project.parent_mall-swarm.version' in mall-auth/pom.xml specifies the version of the parent POM from which mall-auth inherits its configurations. The 'project.version' in mall-monitor/pom.xml specifies the version of the mall-monitor module itself. If both values are '1.0-SNAPSHOT', it indicates that both modules are intended to be part of the same versioned release of the project. This consistency is crucial for ensuring that all modules are compatible and can work together seamlessly. Therefore, the identical values are not coincidental but necessary for the correct functioning of the project, establishing a dependency based on value-equality."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FP,False,"The configuration option 'spring.mvc.pathmatch.matching-strategy' determines the strategy used for matching URL paths in a Spring MVC application. If 'mall-admin' and 'mall-portal' are part of the same application or system, having different path matching strategies could lead to inconsistent behavior in how URLs are routed to controllers. This could cause functional issues, especially if the two modules need to interact or if users expect consistent URL behavior across the application. Therefore, it is likely that these configuration options need to have the same value to ensure consistent and correct functionality.","In C++, vectors
are implemented as a templated class, which means that they can store elements
of any type. This makes them extremely versatile, and they can be used to
store anything…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

### [Spark GC Overhead Limit Exceeded: Causes and
Solutions](https://hatchjs.com/gc-overhead-limit-exceeded-spark/)

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

Spark GC Overhead Limit Exceeded: What It Is and How to Fix It Spark is a
popular distributed computing framework that can be used to process large
amounts of data. However, one common issue that Spark users encounter is the
""GC overhead limit exceeded"" error. This error occurs when the Spark garbage
collector (GC) spends…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

## You Can Also Read

  * ### [Catkin: Command not found - How to fix it](https://hatchjs.com/catkin-command-not-found/)

  * ### [How to Fix the Cannot Build Player While Editor Is Importing Error](https://hatchjs.com/cannot-build-player-while-editor-is-importing/)

  * ### [Pandas DataFrame Minimum of Two Columns](https://hatchjs.com/pandas-minimum-of-two-columns/)

  * ### [How to Fix the Failed to Validate the Signature of the Actionable Message Card Error](https://hatchjs.com/failed-to-validate-the-signature-of-the-actionable-message-card/)

  * ### [What Does Mendigo Mean in Spanish?

We will start by discussing the basic syntax of the Ant Path Matcher, and then
we will look at some of the more advanced features that it offers. Finally, we
will put the Ant Path Matcher to work by creating a simple Spring MVC
application that uses it to route requests to controllers.

Column 1 | Column 2 | Column 3  
---|---|---  
Spring MVC PathMatch Matching Strategy | Ant Path Matcher | A regular expression-based path matching strategy  
Usage | To use the Ant Path Matcher, you can either set the `pathMatcher` property on the `DispatcherServlet` or you can create a `PathMatcherFactoryBean` and register it with the `ApplicationContext`. | For more information on using the Ant Path Matcher, please see the [Spring MVC documentation](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.htmlmvc-ann-pathmatch).  
  
****

In Spring MVC, the `RequestMappingHandlerMapping` class is responsible for
mapping URIs to controller methods. By default, the
`RequestMappingHandlerMapping` class uses the Ant Path Matcher to perform this
mapping.

The Ant Path Matcher is a regular expression-based matching strategy that is
designed to be flexible and easy to use. It supports a variety of matching
patterns, including wildcards, regular expressions, and path segments.

The Ant Path Matcher is the default matching strategy for Spring MVC, but it
can be overridden by specifying a different matching strategy in the ``
element.

**What is the Ant Path Matcher?**

The Ant Path Matcher is a regular expression-based matching strategy that is
used by Spring MVC to match URIs to controller methods. It is designed to be
flexible and easy to use, and it supports a variety of matching patterns,
including wildcards, regular expressions, and path segments.

The Ant Path Matcher uses a simple syntax to define matching patterns. The
following are some of the most common matching patterns:

  * `*`: Matches any character or sequence of characters.
  * `?`: Matches any single character.
  * `[]`: Matches any character within the specified set.
  * `{}`: Matches any character that matches the specified regular expression.
  * `^`: Matches the beginning of the string.
  * `$`: Matches the end of the string.

[Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

Hudson.AbortException: Script Returned Exit Code 1 Have you ever been working
on a Jenkins job, only to have it fail with the following error:
hudson.AbortException: Script returned exit code 1 This error can be
frustrating, especially if you're not sure what caused it. In this article,
we'll take a look at what this error means,…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

### [Where is your OneNote saved? A simple guide](https://hatchjs.com/where-
is-my-onenote-saved/)

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

Where is My OneNote Saved? OneNote is a powerful note-taking app that can be
used to save everything from meeting minutes to grocery lists. But where is
your OneNote saved? If you're not sure, don't worry, you're not alone. In this
article, we'll take a look at where OneNote is saved on different devices, so…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

### [2D Vectors in C++: A Comprehensive Guide](https://hatchjs.com/2d-vectors-
in-c/)

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

2D Vectors in C++ Vectors are a fundamental data structure in computer
science, and they are used in a wide variety of applications. In C++, vectors
are implemented as a templated class, which means that they can store elements
of any type.

Skip to content

[![HatchJS Logo](https://hatchjs.com/wp-content/uploads/2023/11/HatchJS-
Logo.png)HatchJS.comCracking the Shell of Mystery](https://hatchjs.com/)

  * [Home](https://hatchjs.com/)
  * [About Us](https://hatchjs.com/about-us/)
  * [JavaScript](https://hatchjs.com/category/javascript/)
  * [Error Fixing](https://hatchjs.com/category/error-fixing/)
  * [How To Guides](https://hatchjs.com/category/how-to-guides/)
  * [Troubleshooting](https://hatchjs.com/category/troubleshooting/)
  * [JSON Issues](https://hatchjs.com/category/json-issues/)
  * [General Blog](https://hatchjs.com/category/general-blog/)

[![HatchJS Logo](https://hatchjs.com/wp-content/uploads/2023/11/HatchJS-
Logo.png)HatchJS.comCracking the Shell of Mystery](https://hatchjs.com/)

Toggle Menu

# Spring MVC PathMatch Matching Strategy: Ant Path Matcher

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

**Spring MVC PathMatch Matching Strategy: Ant Path Matcher**

Spring MVC is a popular framework for building web applications in Java. One
of the key features of Spring MVC is its flexible routing system, which allows
you to map requests to controllers based on their URL path. The Spring MVC
framework provides a number of different matching strategies for matching URL
paths to controllers, and one of the most commonly used strategies is the Ant
Path Matcher.

The Ant Path Matcher is a powerful and flexible matching strategy that can be
used to match a wide variety of URL paths. It supports a number of different
pattern matching characters, including wildcards, regular expressions, and
negations. In this article, we will take a closer look at the Ant Path Matcher
and how it can be used to route requests to controllers in Spring MVC.

We will start by discussing the basic syntax of the Ant Path Matcher, and then
we will look at some of the more advanced features that it offers.

| Benchmarked and Explained](https://hatchjs.com/does-usb-hub-add-latency/)

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

Does a USB Hub Add Latency? USB hubs are a convenient way to expand the number
of USB devices you can connect to your computer. But do they come with a
performance penalty? In this article, we'll take a closer look at the issue of
USB hub latency and see if there's any truth to…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

### [What is a Stud (Urban Dictionary)?](https://hatchjs.com/what-is-a-stud-
urban-dictionary/)

![Avatar](https://hatchjs.com/wp-content/uploads/2023/11/Marcus-
Greenwood-45x45.jpeg)ByMarcus Greenwood [General
Blog](https://hatchjs.com/category/general-blog/)

What is a Stud? Urban Dictionary Definition and Explanation The term ""stud""
has a variety of meanings, depending on the context in which it is used. In
the most general sense, a stud is a man who is considered to be sexually
attractive and desirable. However, the term can also be used to describe a…

[ Read More Spring MVC PathMatch Matching Strategy: Ant Path MatcherContinue
](https://hatchjs.com/spring-mvc-pathmatch-matching-strategy-
ant_path_matcher/)

### [Hudson AbortException: Script Returned Exit Code
1](https://hatchjs.com/hudson-abortexception-script-returned-exit-code-1-3/)

!",mall-swarm,spring.mvc.pathmatch.matching-strategy,PATH,ant_path_matcher,spring,mall-admin/src/main/resources/application.yml,spring.mvc.pathmatch.matching-strategy,PATH,ant_path_matcher,spring,mall-portal/src/main/resources/application.yml,Others,URL Handling,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'spring.mvc.pathmatch.matching-strategy' in 'mall-admin/src/main/resources/application.yml' and 'spring.mvc.pathmatch.matching-strategy' in 'mall-portal/src/main/resources/application.yml'.\n2. Determine the type and value of each configuration option: both are of type PATH with the value 'ant_path_matcher'.\n3. Analyze the context and purpose of these configuration options within their respective modules.\n4. Compare the provided examples to understand the criteria for determining dependencies based on value-equality.\n5. Evaluate whether the identical values of these configuration options indicate an inherent dependency or if they are independently defined for their specific modules.\n6. Formulate a rationale based on the analysis and examples.\n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration options 'spring.mvc.pathmatch.matching-strategy' in 'mall-admin/src/main/resources/application.yml' and 'spring.mvc.pathmatch.matching-strategy' in 'mall-portal/src/main/resources/application.yml' both have the value 'ant_path_matcher'. This value specifies the path matching strategy used by Spring MVC to map URIs to controller methods. While both modules use the same matching strategy, this does not inherently indicate a dependency between them. Each module can independently choose the 'ant_path_matcher' strategy based on its own requirements. The similarity in their values is likely due to a common preference for this strategy within the project rather than an inter-module dependency."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options project.build.plugins.plugin_docker-maven-plugin.groupId in both mall-monitor/pom.xml and mall-search/pom.xml have the same value 'io.fabric8'. This value specifies the groupId for the Docker Maven Plugin used in both projects. However, having the same groupId does not inherently create a dependency between the two configurations. Each project can independently use the Docker Maven Plugin with the same groupId without affecting the other. The value-equality here is likely due to both projects using the same plugin from the same group, rather than a functional dependency.","It works with Maven 3.0.5 and Docker 1.6.0 or later.

#### Goals

Goal | Description | Default Lifecycle Phase  
---|---|---  
[`docker:start`](https://fabric8io.github.io/docker-maven-plugin/#docker:start) | Create and start containers | pre-integration-test  
[`docker:stop`](https://fabric8io.github.io/docker-maven-plugin/#docker:stop) | Stop and destroy containers | post-integration-test  
[`docker:build`](https://fabric8io.github.io/docker-maven-plugin/#docker:build) | Build images | install  
[`docker:watch`](https://fabric8io.github.io/docker-maven-plugin/#docker:watch) | Watch for doing rebuilds and restarts |   
[`docker:push`](https://fabric8io.github.io/docker-maven-plugin/#docker:push) | Push images to a registry | deploy  
[`docker:remove`](https://fabric8io.github.io/docker-maven-plugin/#docker:remove) | Remove images from local docker host | post-integration-test  
[`docker:logs`](https://fabric8io.github.io/docker-maven-plugin/#docker:logs) | Show container logs |   
[`docker:source`](https://fabric8io.github.io/docker-maven-plugin/#docker:source) | Attach docker build archive to Maven project | package  
[`docker:save`](https://fabric8io.github.io/docker-maven-plugin/#docker:save) | Save image to a file |   
[`docker:volume-create`](https://fabric8io.github.io/docker-maven-plugin/#docker:volume-create) | Create a volume to share data between containers | pre-integration-test  
[`docker:volume-remove`](https://fabric8io.github.io/docker-maven-plugin/#docker:volume-remove) | Remove a created volume | post-integration-test  
[`docker:copy`](https://fabric8io.github.io/docker-maven-plugin/#docker:copy) | Copy files and directories from a container | post-integration-test  
  
#### Documentation

  * The **[User Manual](https://fabric8io.github.io/docker-maven-plugin)** [[PDF](https://fabric8io.github.io/docker-maven-plugin/docker-maven-plugin.pdf)] has a detailed reference for all and everything.

if you don't have to use that plugin, I recommend spotify's `docker-maven-
plugin`. after you setup, you can do `mvn clean package docker:build` to build
the docker image.

your `pom.xml` looks like this:

    
    
    ...
    <properties>
       <docker.image.prefix>springio</docker.image.prefix>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.11</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <buildArgs>
                        <finalName>${project.build.finalName}.jar</finalName>
                    </buildArgs>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
    ...
    

Your `Dockerfile` in `src/main/docker` looks something like this:

    
    
    FROM openjdk:8u102-jre
    ARG finalName
    ADD $finalName /my-app.jar
    ENTRYPOINT [""java"",""-jar"",""/my-app.jar""]
    

References:

<https://spring.io/guides/gs/spring-boot-docker>

<https://github.com/spotify/docker-maven-plugin>

[Share](/a/40432611 ""Short permalink to this answer"")

[Improve this answer](/posts/40432611/edit)

Follow

answered Nov 4, 2016 at 22:31

[!

](/questions/50609434/how-just-build-docker-image-from-dockerfile-with-
fabric8-docker-maven-plugin)

[ 1 ](/q/52324396 ""Question score \(upvotes - downvotes\)"") [Fabric8: Fail to
execute goal - docker:build](/questions/52324396/fabric8-fail-to-execute-goal-
dockerbuild)

[ 1 ](/q/54594731 ""Question score \(upvotes - downvotes\)"")
[io.fabric8:docker-maven-plugin:0.15.3:build failed](/questions/54594731/io-
fabric8docker-maven-plugin0-15-3build-failed)

[ 2 ](/q/55555421 ""Question score \(upvotes - downvotes\)"") [using fabric8
docker-maven-plugin in a Jenkins docker container](/questions/55555421/using-
fabric8-docker-maven-plugin-in-a-jenkins-docker-container)

[ 0 ](/q/55627223 ""Question score \(upvotes - downvotes\)"") [Problem with
Docker plugin for Java (fabric8io)](/questions/55627223/problem-with-docker-
plugin-for-java-fabric8io)

[ 1 ](/q/63441418 ""Question score \(upvotes - downvotes\)"") [docker-compose in
fabric8's docker-maven-plugin not working](/questions/63441418/docker-compose-
in-fabric8s-docker-maven-plugin-not-working)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is increasing Average Product(AP) always implying increasing Marginal Product(MP) in microeconomics?

io](https://dmp.fabric8.io ""https://dmp.fabric8.io"")

### License

[ Apache-2.0 license ](/fabric8io/docker-maven-plugin/blob/master/LICENSE)

[ 1.9k stars ](/fabric8io/docker-maven-plugin/stargazers) [ 635 forks
](/fabric8io/docker-maven-plugin/forks) [ Branches ](/fabric8io/docker-maven-
plugin/branches) [ Tags ](/fabric8io/docker-maven-plugin/tags) [ Activity
](/fabric8io/docker-maven-plugin/activity)

[ Star  ](/login?return_to=%2Ffabric8io%2Fdocker-maven-plugin)

[ Notifications ](/login?return_to=%2Ffabric8io%2Fdocker-maven-plugin) You
must be signed in to change notification settings

  * [ Code ](/fabric8io/docker-maven-plugin)
  * [ Issues 473 ](/fabric8io/docker-maven-plugin/issues)
  * [ Pull requests 11 ](/fabric8io/docker-maven-plugin/pulls)
  * [ Discussions ](/fabric8io/docker-maven-plugin/discussions)
  * [ Actions ](/fabric8io/docker-maven-plugin/actions)
  * [ Projects 1 ](/fabric8io/docker-maven-plugin/projects)
  * [ Wiki ](/fabric8io/docker-maven-plugin/wiki)
  * [ Security ](/fabric8io/docker-maven-plugin/security)
  * [ Insights ](/fabric8io/docker-maven-plugin/pulse)

Additional navigation options

  * [ Code ](/fabric8io/docker-maven-plugin)
  * [ Issues ](/fabric8io/docker-maven-plugin/issues)
  * [ Pull requests ](/fabric8io/docker-maven-plugin/pulls)
  * [ Discussions ](/fabric8io/docker-maven-plugin/discussions)
  * [ Actions ](/fabric8io/docker-maven-plugin/actions)
  * [ Projects ](/fabric8io/docker-maven-plugin/projects)
  * [ Wiki ](/fabric8io/docker-maven-plugin/wiki)
  * [ Security ](/fabric8io/docker-maven-plugin/security)
  * [ Insights ](/fabric8io/docker-maven-plugin/pulse)

# fabric8io/docker-maven-plugin

This commit does not belong to any branch on this repository, and may belong
to a fork outside of the repository.

## About

Maven plugin for running and creating Docker images

[dmp.fabric8.io](https://dmp.fabric8.io ""https://dmp.fabric8.io"")

### Topics

[ java ](/topics/java ""Topic: java"") [ docker ](/topics/docker ""Topic:
docker"") [ fabric8 ](/topics/fabric8 ""Topic: fabric8"") [ maven ](/topics/maven
""Topic: maven"")

### Resources

Readme

### License

Apache-2.0 license

[ Activity ](/fabric8io/docker-maven-plugin/activity)

[ Custom properties ](/fabric8io/docker-maven-plugin/custom-properties)

### Stars

[ **1.9k** stars ](/fabric8io/docker-maven-plugin/stargazers)

### Watchers

[ **75** watching ](/fabric8io/docker-maven-plugin/watchers)

### Forks

[ **635** forks ](/fabric8io/docker-maven-plugin/forks)

[ Report repository ](/contact/report-
content?content_url=https%3A%2F%2Fgithub.com%2Ffabric8io%2Fdocker-maven-
plugin&report=fabric8io+%28user%29)

##  [ Releases 26 ](/fabric8io/docker-maven-plugin/releases)

[ 0.44.0 (2024-02-17) Latest  Feb 17, 2024 ](/fabric8io/docker-maven-
plugin/releases/tag/v0.44.0)

[ \+ 25 releases ](/fabric8io/docker-maven-plugin/releases)

##  [ Packages 0 ](/orgs/fabric8io/packages?repo_name=docker-maven-plugin)







##  [ Contributors 216 ](/fabric8io/docker-maven-plugin/graphs/contributors)

  * [ ![@rhuss](https://avatars.githubusercontent.com/u/99080?s=64&v=4) ](https://github.com/rhuss)
  * [ ![@rohanKanojia](https://avatars.githubusercontent.com/u/13834498?s=64&v=4) ](https://github.com/rohanKanojia)
  * [ ![@jgangemi](https://avatars.githubusercontent.com/u/1831839?s=64&v=4) ](https://github.com/jgangemi)
  * [ !",mall-swarm,project.build.plugins.plugin_docker-maven-plugin.groupId,NAME,io.fabric8,maven,mall-monitor/pom.xml,project.build.plugins.plugin_docker-maven-plugin.groupId,NAME,io.fabric8,maven,mall-search/pom.xml,Libraries,Maven Plugins,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.build.plugins.plugin_docker-maven-plugin.groupId in mall-monitor/pom.xml and project.build.plugins.plugin_docker-maven-plugin.groupId in mall-search/pom.xml. \n2. Determine the type and value of each configuration option: both are of type NAME with value io.fabric8. \n3. Compare the provided examples to understand the context in which dependencies are established based on value equality. \n4. Analyze the role of the 'groupId' in Maven, particularly in the context of plugins. \n5. Evaluate whether the 'groupId' values must be identical for the plugins to function correctly or if they are merely consistent by convention. \n6. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a plugin across all projects. In this case, both mall-monitor and mall-search are using the same Docker Maven plugin identified by the groupId 'io.fabric8'. The groupId must be the same to ensure that the correct plugin is referenced and used in both modules. This is not just a matter of consistency but a requirement for the correct functioning of the plugin. Therefore, the configuration options depend on each other due to value equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,9.0,FN,True,"The modelVersion in a Maven POM file specifies the version of the POM model being used. According to the provided information, the modelVersion should be set to 4.0.0, which is the only supported version. This requirement is consistent across all Maven projects, meaning that any Maven project must use modelVersion:4.0.0 to be valid. Therefore, the identical values of modelVersion:4.0.0 in mall-gateway/pom.xml and mall-monitor/pom.xml are not due to a direct dependency between these two specific projects but rather a common requirement imposed by Maven itself. This means that the value-equality is a result of adhering to Maven's standards rather than an inter-project dependency.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-gateway/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-monitor/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used. 2. Review the provided examples and rationale to see how 'project.modelVersion' dependencies are evaluated. 3. Verify that Maven exclusively supports model version 4.0.0 and requires this version across all modules for compatibility. 4. Apply this understanding to the specific case of 'project.modelVersion' in mall-gateway/pom.xml and mall-monitor/pom.xml. 5. Determine if the need for consistency in 'project.modelVersion' across all modules creates a dependency based on value-equality."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build process."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"The 'version' configuration in Maven typically indicates the version of the project or module. In a multi-module Maven project, child modules often inherit the version from the parent POM. If 'mall-search/pom.xml' is a child module of the parent POM defined in 'pom.xml', then the version '1.0-SNAPSHOT' in both files is likely due to inheritance, indicating a dependency. This dependency ensures that all modules are versioned consistently, which is crucial for managing releases and dependencies within the project. Given the provided context, it appears that 'mall-search/pom.xml' inherits the version from 'pom.xml', making the identical values a result of this dependency.","Snapshot simply means depending on your configuration Maven will check latest
changes on a special dependency. Snapshot is unstable because it is under
development but if on a special project needs to has a latest changes you must
configure your dependency version to snapshot version. This scenario occurs in
big organizations with multiple products that these products related to each
other very closely.

[Share](/a/56912101 ""Short permalink to this answer"")

[Improve this answer](/posts/56912101/edit)

Follow

answered Jul 6, 2019 at 7:30

[![Mahdi Soltani's user
avatar](https://i.sstatic.net/lkHpe.jpg?s=64)](/users/4253500/mahdi-soltani)

[Mahdi Soltani](/users/4253500/mahdi-soltani)Mahdi Soltani

3122 bronze badges

Add a comment  | 

2

[](/posts/75375946/timeline ""Show activity on this post."")

The SNAPSHOT value refers to the 'latest' code along a development branch and
provides no guarantee the code is stable or unchanging. Conversely, the code
in a 'release' version (any version value without the suffix SNAPSHOT) is
unchanging.

In other words, a SNAPSHOT version is the 'development' version before the
final 'release' version. The SNAPSHOT is ""older"" than its release.

During the release process, a version of x.y-SNAPSHOT changes to x.y. The
release process also increments the development version to x.(y+1)-SNAPSHOT.
For example, version 1.0-SNAPSHOT is released as version 1.0, and the new
development version is version 1.1-SNAPSHOT.

[Share](/a/75375946 ""Short permalink to this answer"")

[Improve this answer](/posts/75375946/edit)

Follow

answered Feb 7, 2023 at 15:58

[![SM. Hosseini's user
avatar](https://i.sstatic.net/wZe3B.jpg?s=64)](/users/8423371/sm-hosseini)

[SM. Hosseini](/users/8423371/sm-hosseini)SM.

First in general you can't use properties in versions:

ProjectA/pom.xml

    
    
      <groupId>com.org</groupId>
      <artifactId>projectA</artifactId>
      <packaging>pom</packaging>
      <version>1.0.0-SNAPSHOT</version>
    

Second you shouldn't need to use relative path in your childs: core/pom.xml

    
    
    <parent>
      <artifactId>projectA</artifactId>
      <groupId>com.org</groupId>
      <version>1.0.0-SNAPSHOT</version>
    </parent>
    <artifactId>core</artifactId>
    

This brings me to the point if you have a persistence/pom.xml

core com.org 1.0.0-SNAPSHOT

Done use things like `<relativePath>../../</relativePath>` this is usually an
indicator that your structure is wrong.

BUT: [Starting with Maven 3.2.1 you can use special
properties](http://maven.apache.org/docs/3.2.1/release-notes.html) to define
the versions you like. [The following placeholders are allowed in
versions:](https://jira.codehaus.org/browse/MNG-5576)

    
    
    ${revision}, ${changelist}, and ${sha1}
    

This means if you like you can use them but only with Maven 3.2.1 so you need
to change it to things like this:

ProjectA/pom.xml

    
    
      <groupId>com.org</groupId>
      <artifactId>projectA</artifactId>
      <packaging>pom</packaging>
      <version>${revision}</version>
    

and in core:

    
    
    <parent>
      <artifactId>projectA</artifactId>
      <groupId>com.org</groupId>
      <version>${revision}</version>
    </parent>
    <artifactId>core</artifactId>
    

But this means you need to call maven everytime like this:

    
    
    mvn -Drevision=1.0.0-SNAPSHOT clean package
    

which will work. You have to be carefull if you use your project within
Eclipse etc. Apart from the above i can not recommend to use it this way.

Below is the sample gitlab-ci.yml file to implement these changes,

    
    
    stages: - build - test - update_dependencies - deploy variables: MAVEN_CLI_OPTS: ""-s .m2/settings.xml --batch-mode"" MAVEN_OPTS: ""-Dmaven.repo.local=.m2/repository"" maven_build: stage: build script: - mvn $MAVEN_CLI_OPTS clean compile maven_test: stage: test script: - mvn $MAVEN_CLI_OPTS test update_dependencies: stage: update_dependencies script: - sed -i 's/SNAPSHOT/RELEASE/g' pom.xml - mvn $MAVEN_CLI_OPTS clean install only: - /release-*/ # Only deploy on branches that start with release (adjust as needed) maven_deploy: stage: deploy script: - mvn $MAVEN_CLI_OPTS deploy only: - /release-*/ # Only deploy on branches that start with release (adjust as needed)

Now, the other way of implementing the same is by using Maven commands.

Below are the usages of Maven version commands to manipulate the dependency
versions in your Maven projects:

1.This command is used with the Maven Versions Plugin to display a list of
dependencies in your project and indicate if newer versions are available in
the remote repositories.

**_mvn versions:display-dependency-updates_**

2\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to their latest non-SNAPSHOT (release) versions.

**_mvn versions:use-releases_**

3\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to the next non-SNAPSHOT (release) versions.

**_mvn versions:use-next-releases_**

4\. This command is used with the Maven Versions Plugin to update your
project’s dependencies to the latest non-SNAPSHOT (release) versions available
in the remote repositories.

**_mvn versions:use-latest-releases_**

Let me know if this helps!!

For any support connect with me at [topmate](https://topmate.io/pooja_bolla).

**_mvn versions:use-latest-releases_**

Let me know if this helps!!

For any support connect with me at [topmate](https://topmate.io/pooja_bolla).

_Originally published at_[
_https://www.inkedintutions.com_](https://www.inkedintutions.com/2023/09/how-
to-handle-maven-dependency-versions.html) _on September 10, 2023._

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&user=TechIntutions&userId=9c7f3259aec2&source=-----faee36a338ec
---------------------clap_footer-----------)

\--

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&user=TechIntutions&userId=9c7f3259aec2&source=-----faee36a338ec
---------------------clap_footer-----------)

\--

[](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2Ffaee36a338ec&operation=register&redirect=https%3A%2F%2Ftechintutions.medium.com%2Fhow-
to-handle-maven-dependency-versions-snapshot-and-release-
faee36a338ec&source=--------------------------bookmark_footer-----------)

[![TechIntutions](https://miro.medium.com/v2/resize:fill:144:144/1*dmbNkD5D-u45r44go_cf0g.png)](/?source=post_page
-----faee36a338ec--------------------------------)

Follow

[](https://medium.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-search/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Understand the role of the 'project.version' configuration option in a Maven project. This option specifies the version of the project being built. 2. Review the provided information and examples to understand how version dependencies are typically evaluated in Maven projects. 3. Determine if the 'project.version' in 'mall-search/pom.xml' with value '1.0-SNAPSHOT' must be identical to the 'project.version' in the parent 'pom.xml' with the same value for the project to function correctly. 4. Consider whether the identical values are necessary for the build and dependency management processes or if they are coincidentally the same. 5. Formulate a rationale based on the analysis and decide if a dependency exists."",
	""rationale"": ""In a Maven project, the 'project.version' specifies the version of the project. When a module inherits from a parent POM, it can either inherit the version specified in the parent or override it. In this case, 'mall-search/pom.xml' has the version '1.0-SNAPSHOT', which matches the version in the parent 'pom.xml'. This versioning scheme is often used to ensure that all modules are in sync during development. The 'SNAPSHOT' suffix indicates that the version is under development and can change frequently. For the project to function correctly, especially in a multi-module setup, it is crucial that all modules share the same version to avoid conflicts and ensure compatibility. Therefore, the 'project.version' in 'mall-search/pom.xml' depends on the 'project.version' in the parent 'pom.xml' due to value-equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion in a Maven POM file specifies the version of the POM model being used. In this case, both mall-auth/pom.xml and mall-gateway/pom.xml use '4.0.0', which is the standard and currently only supported version for Maven 2.x and 3.x. This value must be '4.0.0' for the POM to be valid and is not specific to any particular project but rather to the Maven tool itself. Therefore, the identical values are due to the requirements of Maven and not because of a direct dependency between the two POM files.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

The Correct answer should be the combination of the answers by @Toumi and
@Boj. Also have a look at
<https://cwiki.apache.org/confluence/display/MAVEN/POM+Model+Version+5.0.0>
for more background of this.

[Share](/a/46438174 ""Short permalink to this answer"")

[Improve this answer](/posts/46438174/edit)

Follow

answered Sep 27, 2017 at 1:37

[![Asanke's user
avatar](https://i.sstatic.net/NrPNs.jpg?s=64)](/users/2935910/asanke)

[Asanke](/users/2935910/asanke)Asanke

59122 gold badges1111 silver badges3232 bronze badges

1

  * Well, this should have been a comment.

- [nbro](/users/3924118/nbro ""15,849 reputation"")

Commented Apr 5, 2022 at 10:20

Add a comment  | 

4

[](/posts/59064455/timeline ""Show activity on this post."")

**modelVersion** \- containing the model version of the POM. Maven 1.x used a
model which contained a 3.0.0 element as an immediate child of the root. Maven
2.x / 3.x has used a 4.0.0 element.

**version** \- containing the version of the project. If this attribute is
missing then the parent element must be present and the version will be
inherited from the parent project.

[Share](/a/59064455 ""Short permalink to this answer"")

[Improve this answer](/posts/59064455/edit)

Follow

[edited Nov 27, 2019 at 8:37](/posts/59064455/revisions ""show all edits to
this post"")

answered Nov 27, 2019 at 6:42

[!",mall-swarm,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-auth/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,mall-gateway/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'mall-auth/pom.xml' and 'project.modelVersion' in 'mall-gateway/pom.xml'.\n2. Determine the type and value of these configuration options: both are of type VERSION_NUMBER with value 'modelVersion:4.0.0'.\n3. Review the provided examples to understand the dependency rationale for similar configurations.\n4. Analyze the role of 'project.modelVersion' in a Maven project, specifically its requirement for compatibility across all modules.\n5. Conclude whether the 'project.modelVersion' in 'mall-auth/pom.xml' depends on the 'project.modelVersion' in 'mall-gateway/pom.xml' or vice versa based on the need for consistent model versioning in Maven projects."",
	""rationale"": ""The 'project.modelVersion' in a Maven project specifies the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. This ensures that all modules are compatible with the Maven build lifecycle and tools."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"The project.dependencies.dependency_mall-mbg.groupId in mall-portal/pom.xml specifies the groupId for a dependency, while project.groupId in mall-search/pom.xml specifies the groupId for the project itself. In Maven, dependencies are resolved based on groupId, artifactId, and version. If mall-portal depends on mall-search, the groupId specified in the dependency must match the groupId of the project it depends on. Therefore, these values must be identical for the dependency resolution to work correctly, indicating a value-equality dependency.","[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

After working with Maven for a while, I am thrilled by the many features that
Maven brings into the build architecture, particularly the dependency
management. However, I have run into one issue again and again - how Maven
resolves dependencies between multi-module projects. I am wondering if this is
the big flaw of the current Maven implementation and/or if there is any
satisfactory workaround.

Let's say I have a multi-module Maven project. The Parent pom contains three
modules -- moduleA (jar), moduleB (jar), and moduleC(war). B depends on A and
C depends on B. Simple enough? Now that I want to run the `mvn dependency:go-
offline` at the parent project, which is supposed to resolve all the
dependencies and bring them into the local .m2 directory. It fails because
Maven complains that it cannot solve dependency for moduleA when it is acting
on moduleB. Because all these modules belong to one groupId, I even try to use
`-DexcludeGroupIds=x.y.z` to exclude these module dependencies, but it still
fails at the same point.

I understand why Maven is complaining - moduleA is not built yet and thus
there is no moduleA:jar artifact in my local or internal repository when go-
offline goal is executed. But IMHO the plugin should treat these inter-module
dependencies differently. In this case, it should simply ignore it. One might
argues that I can simply do `mvn clean install`, which will install
moduleA:jar into the local repository. After that, running `mvn dependency:go-
offline` will work for sure. But that workaround defeats the purpose of this
go-offline goal. This plugin allows us to resolve and pull dependencies into
our local repository without building the whole project. I used
`dependency:copy-dependencies` goal in another case and it has the same issue.

I also ran into similar issue in other scenarios: [""mvn clean generate-source""
could not resolve
dependencies](https://stackoverflow.com/questions/12942782/mvn-clean-generate-
source-could-not-resolve-dependencies). When I ran `mvn clean compile`,
everything works fine, but when I ran `mvn clean generate-source`, it fails
because Maven cannot resolve inter-module dependency.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

###  [current community](https://stackoverflow.com)

     * [ Stack Overflow  ](https://stackoverflow.com)

[help](https://stackoverflow.com/help)
[chat](https://chat.stackoverflow.com/?tab=site&host=stackoverflow.com)

     * [ Meta Stack Overflow  ](https://meta.stackoverflow.com)

###  your communities

[Sign
up](https://stackoverflow.com/users/signup?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) or [log
in](https://stackoverflow.com/users/login?ssrc=site_switcher&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-
between-dependencymanagement-and-dependencies-in-maven) to customize your
list.

### [more stack exchange communities](https://stackexchange.com/sites)

[company blog](https://stackoverflow.blog)

  2.   3. [Log in](https://stackoverflow.com/users/login?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)
  4. [Sign up](https://stackoverflow.com/users/signup?ssrc=head&returnurl=https%3a%2f%2fstackoverflow.com%2fquestions%2f2619598%2fdifferences-between-dependencymanagement-and-dependencies-in-maven)

  1.     1. [ Home ](/)
    2. [ Questions ](/questions)
    3. [ Tags ](/tags)
    4.     5. [ Users ](/users)
    6. [ Companies ](https://stackoverflow.com/jobs/companies?so_medium=stackoverflow&so_source=SiteNav)
    7. [ Labs ](javascript:void\(0\))
    8. [ Jobs ](/jobs?source=so-left-nav)
    9. [ Discussions ](/beta/discussions)
    10. [ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies.",mall-swarm,project.dependencies.dependency_mall-mbg.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-search/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.dependencies.dependency_mall-mbg.groupId' in mall-portal/pom.xml and 'project.groupId' in mall-search/pom.xml.\n2. Understand the role of 'groupId' in Maven projects, which is to uniquely identify a project or module.\n3. Compare the provided examples to see how 'groupId' dependencies are evaluated.\n4. Determine if the 'groupId' in mall-portal/pom.xml must match the 'groupId' in mall-search/pom.xml for the project to function correctly.\n5. Evaluate if the 'groupId' values are identical by necessity or by coincidence.\n6. Conclude whether a value-equality dependency exists based on the necessity of identical 'groupId' values for project functionality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project or module. In the provided examples, it is shown that modules within the same project must share the same 'groupId' to maintain a consistent project identity. The 'project.dependencies.dependency_mall-mbg.groupId' in mall-portal/pom.xml specifies the groupId for a dependency, which should match the 'project.groupId' in mall-search/pom.xml if they are part of the same project. This ensures that all modules and dependencies are correctly identified and resolved within the same project namespace."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FN,True,"The configuration options 'project.build.plugins.plugin_docker-maven-plugin.groupId' in both 'mall-admin/pom.xml' and 'mall-auth/pom.xml' have the same value 'io.fabric8'. This could indicate a dependency if both projects require the 'docker-maven-plugin' from the 'io.fabric8' group to function correctly. However, without additional context or documentation explicitly stating that the 'docker-maven-plugin' from 'io.fabric8' is necessary for both projects, it is also possible that the identical values are coincidental.","followed some maven docker examples, came up with following code, run mvn
package dockerfile:build but get these errors: [ERROR] No plugin found for
prefix 'dockerfile' in the current project and in the plugin groups
[org.apache.maven.plugins, org.codehaus.mojo] available from the repositories
...

    
    
    <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
    
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mycompnay.learning</groupId>
        <artifactId>my-app-base-pom</artifactId>
        <version>0.0.1</version>
    
    
        <properties>
            <dockerfile.version>0.0.1</dockerfile.version>
            <docker.image.prefix>AdminService</docker.image.prefix>
        </properties>
    
        <build>
            <plugins>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>0.0.1</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                            </goals>
                            <configuration>
                                <repository>docker.io/kkapelon/docker-maven-comparsion</repository>
                                <tag>projectVersion</tag>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </build>
    
    </project>
    

Where should i go from here pls ?

It works with Maven 3.0.5 and Docker 1.6.0 or later.

#### Goals

Goal | Description | Default Lifecycle Phase  
---|---|---  
[`docker:start`](https://fabric8io.github.io/docker-maven-plugin/#docker:start) | Create and start containers | pre-integration-test  
[`docker:stop`](https://fabric8io.github.io/docker-maven-plugin/#docker:stop) | Stop and destroy containers | post-integration-test  
[`docker:build`](https://fabric8io.github.io/docker-maven-plugin/#docker:build) | Build images | install  
[`docker:watch`](https://fabric8io.github.io/docker-maven-plugin/#docker:watch) | Watch for doing rebuilds and restarts |   
[`docker:push`](https://fabric8io.github.io/docker-maven-plugin/#docker:push) | Push images to a registry | deploy  
[`docker:remove`](https://fabric8io.github.io/docker-maven-plugin/#docker:remove) | Remove images from local docker host | post-integration-test  
[`docker:logs`](https://fabric8io.github.io/docker-maven-plugin/#docker:logs) | Show container logs |   
[`docker:source`](https://fabric8io.github.io/docker-maven-plugin/#docker:source) | Attach docker build archive to Maven project | package  
[`docker:save`](https://fabric8io.github.io/docker-maven-plugin/#docker:save) | Save image to a file |   
[`docker:volume-create`](https://fabric8io.github.io/docker-maven-plugin/#docker:volume-create) | Create a volume to share data between containers | pre-integration-test  
[`docker:volume-remove`](https://fabric8io.github.io/docker-maven-plugin/#docker:volume-remove) | Remove a created volume | post-integration-test  
[`docker:copy`](https://fabric8io.github.io/docker-maven-plugin/#docker:copy) | Copy files and directories from a container | post-integration-test  
  
#### Documentation

  * The **[User Manual](https://fabric8io.github.io/docker-maven-plugin)** [[PDF](https://fabric8io.github.io/docker-maven-plugin/docker-maven-plugin.pdf)] has a detailed reference for all and everything.

deploy `Spring Cloud` project with `docker`, some code in the `pom.xml`:

    
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- tag::plugin[] -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <!-- end::plugin[] -->
        </plugins>
    </build>
    

when i execute the command: `mvn package docker:build`, it throws the above
errors:

    
    
        Downloaded: http://3.2.4.2:8888/repository/maven-public/org/apache/maven/plugins/maven-metadata.xml (14 KB at 5.7 KB/sec)
        Downloaded: http://3.2.4.2:8888/repository/maven-public/org/codehaus/mojo/maven-metadata.xml (21 KB at 7.3 KB/sec)
        [INFO] ------------------------------------------------------------------------
        [INFO] Reactor Summary:
        [INFO] 
        [INFO] eureka-server . SUCCESS [ 26.279 s]
        [INFO] service-1 . SUCCESS [ 14.649 s]
        [INFO] demo1 . FAILURE [  2.850 s]
        [INFO] ------------------------------------------------------------------------
        [INFO] BUILD FAILURE
        [INFO] ------------------------------------------------------------------------
        [INFO] Total time: 45.535 s
        [INFO] Finished at: 2017-11-15T14:28:05+08:00
        [INFO] Final Memory: 47M/532M
        [INFO] ------------------------------------------------------------------------
        [ERROR] No plugin found for prefix 'docker' in the current project 
    and in the plugin groups [org.sonatype.plugins, org.apache.

This configuration is
stored in the plugin's path on the `maven` repository

> The conventional artifact ID formats to use are:
>
>   * **`maven-${prefix}-plugin`** \- for official plugins maintained by the
> Apache Maven team itself (you must not use this naming pattern for your
> plugin, see this note for more informations)
>   * **`${prefix}-maven-plugin`** for plugins from other sources.
>

>
> If your plugin's artifactId fits this pattern, Maven will automatically map
> your plugin to the correct prefix in the metadata stored within your
> plugin's groupId path on the repository.

More about plugin prefix resolution
[here](https://maven.apache.org/guides/introduction/introduction-to-plugin-
prefix-mapping.html)

For version [1.4.0](http://repo1.maven.org/maven2/com/spotify/dockerfile-
maven-plugin/1.4.0/dockerfile-maven-plugin-1.4.0.pom), for example, the
descriptor (i.e. `pom` file) has a configuration section:

    
    
    <configuration>
        <goalPrefix>dockerfile</goalPrefix>
        <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound> 
    </configuration> 
    

Changing the version to something more recent (>1.2.0) should fix the error.

    
    
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.0</version>
                ...
            </plugin>
    

Run with:

    
    
    mvn package dockerfile:build
    

[Share](/a/57071333 ""Short permalink to this answer"")

[Improve this answer](/posts/57071333/edit)

Follow

[edited Jul 17, 2019 at 10:29](/posts/57071333/revisions ""show all edits to
this post"")

answered Jul 17, 2019 at 8:09

[!

io](https://dmp.fabric8.io ""https://dmp.fabric8.io"")

### License

[ Apache-2.0 license ](/fabric8io/docker-maven-plugin/blob/master/LICENSE)

[ 1.9k stars ](/fabric8io/docker-maven-plugin/stargazers) [ 635 forks
](/fabric8io/docker-maven-plugin/forks) [ Branches ](/fabric8io/docker-maven-
plugin/branches) [ Tags ](/fabric8io/docker-maven-plugin/tags) [ Activity
](/fabric8io/docker-maven-plugin/activity)

[ Star  ](/login?return_to=%2Ffabric8io%2Fdocker-maven-plugin)

[ Notifications ](/login?return_to=%2Ffabric8io%2Fdocker-maven-plugin) You
must be signed in to change notification settings

  * [ Code ](/fabric8io/docker-maven-plugin)
  * [ Issues 473 ](/fabric8io/docker-maven-plugin/issues)
  * [ Pull requests 11 ](/fabric8io/docker-maven-plugin/pulls)
  * [ Discussions ](/fabric8io/docker-maven-plugin/discussions)
  * [ Actions ](/fabric8io/docker-maven-plugin/actions)
  * [ Projects 1 ](/fabric8io/docker-maven-plugin/projects)
  * [ Wiki ](/fabric8io/docker-maven-plugin/wiki)
  * [ Security ](/fabric8io/docker-maven-plugin/security)
  * [ Insights ](/fabric8io/docker-maven-plugin/pulse)

Additional navigation options

  * [ Code ](/fabric8io/docker-maven-plugin)
  * [ Issues ](/fabric8io/docker-maven-plugin/issues)
  * [ Pull requests ](/fabric8io/docker-maven-plugin/pulls)
  * [ Discussions ](/fabric8io/docker-maven-plugin/discussions)
  * [ Actions ](/fabric8io/docker-maven-plugin/actions)
  * [ Projects ](/fabric8io/docker-maven-plugin/projects)
  * [ Wiki ](/fabric8io/docker-maven-plugin/wiki)
  * [ Security ](/fabric8io/docker-maven-plugin/security)
  * [ Insights ](/fabric8io/docker-maven-plugin/pulse)

# fabric8io/docker-maven-plugin

This commit does not belong to any branch on this repository, and may belong
to a fork outside of the repository.",mall-swarm,project.build.plugins.plugin_docker-maven-plugin.groupId,NAME,io.fabric8,maven,mall-admin/pom.xml,project.build.plugins.plugin_docker-maven-plugin.groupId,NAME,io.fabric8,maven,mall-auth/pom.xml,Libraries,Maven Plugin,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.build.plugins.plugin_docker-maven-plugin.groupId in mall-admin/pom.xml and project.build.plugins.plugin_docker-maven-plugin.groupId in mall-auth/pom.xml. \n2. Understand the role of the 'groupId' in Maven plugin configuration. \n3. Compare the provided examples to see how similar dependencies are evaluated. \n4. Determine if the 'groupId' values must be identical for the plugins to function correctly. \n5. Assess if the identical values are due to a necessary dependency or merely for consistency. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The 'groupId' in Maven plugin configuration is used to uniquely identify the plugin's source. In this case, both mall-admin and mall-auth modules are using the same plugin from the same groupId 'io.fabric8'. This indicates that they are using the same plugin from the same source, which is necessary for the plugin to function correctly across different modules. The examples provided show that when a configuration option like 'groupId' is used to identify a specific plugin or project, it creates a dependency based on value equality. Therefore, the 'groupId' values in both mall-admin and mall-auth must be identical to ensure they are using the same plugin from the same source."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FP,False,"In Maven, the project.version in a POM file typically specifies the version of the project itself, while the project.parent.version (or similar) in another POM file specifies the version of the parent project it inherits from. If mall-demo/pom.xml specifies its version as 1.0-SNAPSHOT and mall-monitor/pom.xml specifies its parent version as 1.0-SNAPSHOT, it suggests that mall-demo might be inheriting from mall-monitor or vice versa. However, without explicit inheritance or reference, the identical values could be coincidental. Given the context, it is likely that these values need to be the same to maintain consistency across the project versions, indicating a dependency.","To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is increasing Average Product(AP) always implying increasing Marginal Product(MP) in microeconomics? ](https://economics.stackexchange.com/questions/58818/is-increasing-average-productap-always-implying-increasing-marginal-productmp)
  * [ How could double damage be explained in-universe?",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-demo/pom.xml,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-monitor/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.version' in mall-demo/pom.xml and 'project.parent_mall-swarm.version' in mall-monitor/pom.xml. \n2. Understand the role of these configuration options in the Maven project structure. \n3. Compare the provided examples to see if they are similar to the current scenario. \n4. Determine if the values of these configuration options must be identical for the project to function correctly. \n5. Evaluate if the identical values are due to an inherent dependency or just for consistency. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""In a Maven multi-module project, the 'project.version' in a child module's POM file typically inherits the version from its parent POM. The 'project.parent_mall-swarm.version' in mall-monitor/pom.xml indicates the version of the parent POM that mall-monitor is inheriting from. If mall-demo is also inheriting from the same parent POM (mall-swarm), then its 'project.version' would need to match the parent's version to ensure consistency and correct dependency resolution. This creates a dependency based on value-equality because the child modules must align with the parent's version to function correctly."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Maven, the version specified in the parent section of a POM file (project.parent_mall-swarm.version) is used to inherit configurations from the parent project. If the child project (mall-admin) specifies the same version for its project.version, it is likely to be intentional to maintain consistency and ensure proper inheritance of configurations. Given that both values are '1.0-SNAPSHOT', it suggests that mall-admin is inheriting from mall-swarm, and thus, there is a dependency based on value-equality.","Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 0 ](/q/31058184 ""Question score \(upvotes - downvotes\)"") [Resolve maven
dependencies from child pom](/questions/31058184/resolve-maven-dependencies-
from-child-pom)

[ 51 ](/q/31654589 ""Question score \(upvotes - downvotes\)"") [maven dependency
tree - version managed](/questions/31654589/maven-dependency-tree-version-
managed)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 1 ](/q/58202579 ""Question score \(upvotes - downvotes\)"") [Referencing
version of a dependency from parent pom in child
pom](/questions/58202579/referencing-version-of-a-dependency-from-parent-pom-
in-child-pom)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ ""Des fini ton plat""? ](https://french.stackexchange.com/questions/54834/des-fini-ton-plat)
  * [ Teaching students how to check the validity of their proofs ](https://matheducators.stackexchange.com/questions/27972/teaching-students-how-to-check-the-validity-of-their-proofs)
  * [ Mass driver - reducing required length using loop? ](https://space.stackexchange.com/questions/66472/mass-driver-reducing-required-length-using-loop)
  * [ Wording clarification for remastered powerful shove feat ](https://rpg.stackexchange.com/questions/212744/wording-clarification-for-remastered-powerful-shove-feat)
  * [ Why not use computers to evaluate strength of players?",mall-swarm,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-admin/pom.xml,project.parent_mall-swarm.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-demo/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.version' in mall-admin/pom.xml and 'project.parent_mall-swarm.version' in mall-demo/pom.xml.\n2. Understand the role of these configuration options in the Maven project structure.\n3. Compare the provided examples to see if they are similar to the current scenario.\n4. Determine if the values of these configuration options must be identical for the project to function correctly.\n5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""In a Maven multi-module project, the 'project.version' in a child module's POM file typically inherits the version from its parent POM file. The 'project.parent_mall-swarm.version' in mall-demo/pom.xml indicates that mall-demo is inheriting the version from the parent mall-swarm POM. If mall-admin/pom.xml also specifies 'version:1.0-SNAPSHOT', it is likely inheriting this version from the same parent POM. This creates a dependency based on value-equality because both modules must have the same version to ensure compatibility and proper inheritance of configurations."",
	""isDependency"": true
}"
Port Mapping,gpt-4o-2024-05-13,config2,10.0,FP,False,"In Docker Compose, the 'ports' configuration option maps a port on the host machine to a port on the container. The 'services.redis.ports.in' (6379) and 'services.redis.ports.out' (6379) indicate that port 6379 on the host is mapped to port 6379 on the Redis container. This mapping is crucial for the host to communicate with the Redis service running inside the container. If these values were not identical, the host would not be able to correctly route traffic to the Redis service, leading to connectivity issues. Therefore, these configuration options must have identical values to ensure proper functionality.","**docker-compose.yml**

    
    
    version: '3.7'
    
    services:
      redis_1:
        image: 'redis:6.0.6'
        ports:
          - '6371:6379'
      redis_2:
        image: 'redis:6.0.6'
        ports:
          - '6372:6379'
    

In your host machine:

    
    
    docker compose up
    
    
    
    redis-cli -p 6371 ping
    redis-cli -p 6372 ping
    

[Share](/a/76279121 ""Short permalink to this answer"")

[Improve this answer](/posts/76279121/edit)

Follow

answered May 18, 2023 at 8:42

[![Gayan Weerakutti's user
avatar](https://i.sstatic.net/WR7iJ.jpg?s=64)](/users/3647002/gayan-
weerakutti)

[Gayan Weerakutti](/users/3647002/gayan-weerakutti)Gayan Weerakutti

13.2k44 gold badges7373 silver badges7373 bronze badges

Add a comment  | 

0

[](/posts/72147912/timeline ""Show activity on this post."")

Found many articles, questions, github-issues about not being able to connect
from Windows host to redis running as a docker container on wsl2, with many
suggested fixes involving IP mappings. However, with recent (2022-ish)
versions of wsl2 and redis image I had a similar issue but the fix was simple.
I was using `docker-compose` and skeleton setup was

    
    
    services:
      redis:
        image: redis:7.0
        ports:
          - ""6379:6379""
        volumes:
          - redis-data:/data
    

but, as copy and paste from a non-WSL docker environment, I also had

    
    
        network_mode: host
    

and that was preventing me from connecting from the Windows host to the
container running under WSL. As soon as I removed that line, docker created a
default network for the service and I could connect (using `127.0.0.1:6379`).

](/questions/42376867/how-to-
connect-to-a-redis-container-using-docker-compose)

[ 1 ](/q/43039501 ""Question score \(upvotes - downvotes\)"") [connection
refused when trying to connect redis using docker compose
file](/questions/43039501/connection-refused-when-trying-to-connect-redis-
using-docker-compose-file)

[ 1 ](/q/46006260 ""Question score \(upvotes - downvotes\)"") [Docker Compose:
Cannot connect to Redis](/questions/46006260/docker-compose-cannot-connect-to-
redis)

[ 1 ](/q/48709862 ""Question score \(upvotes - downvotes\)"") [Why docker-
compose do not use port binding as expected?](/questions/48709862/why-docker-
compose-do-not-use-port-binding-as-expected)

[ 1 ](/q/50278066 ""Question score \(upvotes - downvotes\)"") [Redis and docker-
compose connect 127.0.0.1:6379](/questions/50278066/redis-and-docker-compose-
connect-127-0-0-16379)

[ 3 ](/q/53222660 ""Question score \(upvotes - downvotes\)"") [Redis server
refused to connect while using docker image](/questions/53222660/redis-server-
refused-to-connect-while-using-docker-image)

[ 2 ](/q/53583036 ""Question score \(upvotes - downvotes\)"") [Unable to connect
to Redis from Docker](/questions/53583036/unable-to-connect-to-redis-from-
docker)

[ 0 ](/q/59854159 ""Question score \(upvotes - downvotes\)"") [Cannot start
Redis service when I running on docker](/questions/59854159/cannot-start-
redis-service-when-i-running-on-docker)

[ 4 ](/q/62672325 ""Question score \(upvotes - downvotes\)"") [Why do I not get
connection to port of the Redis Docker component?

Using the default Redis port 6379 works fine. After changing the
Redis port to `6380` Redis Commander cannot connect to Redis anymore.

Error:

    
    
    setUpConnection Redis error Error: connect ECONNREFUSED 172.19.0.2:6380
    

This is the `docker-compose.yml` file:

    
    
    version: '3.7'
    services:
      redis:
        container_name: redis
        hostname: redis
        image: sameersbn/redis:4.0.9-2
        ports:
          - ""6380:6379""
        expose:
          - ""6380""
        volumes:
          - type: volume
            source: redis-data
            target: /data
        restart: always
      redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        environment:
          - REDIS_HOSTS=local:redis:6380
        ports:
          - ""8082:8081""
    volumes:
      redis-data: {}
    

I can connect to Redis on port `6380` using the following Node code:

    
    
    import redis from 'redis'
    
    const config = {
      host: '127.0.0.1',
      port: 6380,
      no_ready_check: true
    }
    
    const client = redis.createClient(config.port, config.host)
    
    client.set('expireName', 'nidkil', (err, reply) => {
      if (err) {
        console.error('Error occurred:', err)
      } else {
        console.log('Response:', reply)
      }
    })
    

If I change the port back to `6379` in the `docker-compose.yml` then Redis
Commander can connect.

Any suggestions how I can make Redis Commander connect to Redis on port
`6380`?

Here are some instructions to make this work properly.

## Install Official Docker not Distro repo.

    
    
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    systemctl enable docker ; systemctl start docker; systemctl status docker
    

Refer to [Install using the convenience
script](https://docs.docker.com/install/linux/docker-ce/centos/#install-using-
the-convenience-script)

## Connect to Redis container from host

    
    
    mkdir -p /etc/redis/
    chown -R 1000:1000 /etc/redis
    sudo docker run -d --name redis -p 6379:6379 --restart unless-stopped -v /etc/redis/:/data redis redis-server /data
    

NOTE: The important part that is key to your solution is to have port expose
(-p 6379:6379) to your docker host and route to container port. Refer to
[Redis Docker Documentation](https://hub.docker.com/_/redis/)

## Install ""redis-tools"" in your docker host. Centos install redis via epel
release.

[Share](/a/51996242 ""Short permalink to this answer"")

[Improve this answer](/posts/51996242/edit)

Follow

answered Aug 24, 2018 at 1:18

[![Randy Lerma's user
avatar](https://www.gravatar.com/avatar/4936cfabe3dc4e5335fa2eacc2fbf227?s=64&d=identicon&r=PG)](/users/10267364/randy-
lerma)

[Randy Lerma](/users/10267364/randy-lerma)Randy Lerma

6911 silver badge11 bronze badge

Add a comment  | 

4

[](/posts/62446567/timeline ""Show activity on this post."")

create Redis container using below command

    
    
    sudo docker run -d --name redis-test -p 6379:6379  -v /redis/redis.conf:/redis.conf redis redis-server /redis.conf --appendonly yes --requirepass ""redis""
    

you can access the Redis in the same machine using `Redis-CLI` and if you are
using other machines use `host machine IP`. if you are accessing Redis
container in the same host another docker container uses the `private IP` of
the machine.

**

The default setting is `bind 127.0.0.1` and this setting will cause `redis` to
only listen on loopback interface, and it will be only accessible from inside
the container. (for security)

To run redis with custom configuration file:

    
    
    sudo docker run -d --name redis-test -p 6379:6379 \
         -v /path/to/redisconf/redis.conf:/redis.conf \
         redis redis-server /redis.conf
    

Now to verify on docker host with `redis-tools` installed:

    
    
    redis-cli                           
    127.0.0.1:6379> 
    127.0.0.1:6379> set farhad likes:stackoverflow
    OK
    127.0.0.1:6379> get farhad
    ""likes:stackoverflow""
    127.0.0.1:6379> 
    

You can also connnect to your `redis` container from an external host via:

    
    
    redis-cli -h 'IP-address-of-dockerhost-running-redis-container'
    

[Share](/a/41374703 ""Short permalink to this answer"")

[Improve this answer](/posts/41374703/edit)

Follow

[edited Jan 9 at 20:39](/posts/41374703/revisions ""show all edits to this
post"")

[![Alexis Wilke's user
avatar](https://www.gravatar.com/avatar/185aae2d842026d2eefa7528b00b394b?s=64&d=identicon&r=PG)](/users/212378/alexis-
wilke)

[Alexis Wilke](/users/212378/alexis-wilke)

20.2k1111 gold badges101101 silver badges169169 bronze badges

answered Dec 29, 2016 at 7:01

[![Farhad Farahi's user
avatar](https://i.sstatic.net/dROn5.jpg?s=64)](/users/5867722/farhad-farahi)

[Farhad Farahi](/users/5867722/farhad-farahi)Farhad Farahi

38.1k77 gold badges7878 silver badges7474 bronze badges

7

  * Thank you for your help, didn't quite get me there.",mall-swarm,services.redis.ports.in,PORT,6379,docker-compose,document/docker/docker-compose-env.yml,services.redis.ports.out,PORT,6379,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
	""plan"": ""1. Identify the configuration options to be evaluated: services.redis.ports.in and services.redis.ports.out, both with the value 6379 in the docker-compose-env.yml file. 2. Understand the context and purpose of these options within the Docker Compose setup. 3. Compare the provided examples to determine if similar dependencies exist. 4. Analyze whether the internal port (services.redis.ports.in) and the external port (services.redis.ports.out) need to be identical for the service to function correctly. 5. Determine if the value equality is necessary for the configuration to work or if it is coincidental."",
	""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different. Therefore, the value equality of 6379 for both services.redis.ports.in and services.redis.ports.out is not necessary for the service to function correctly."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FP,False,"The project.parent_mall.groupId in mall-portal/pom.xml and project.groupId in mall-security/pom.xml both have the value 'com.macro.mall'. In Maven, the groupId is a unique identifier for a project or a set of projects. If mall-portal/pom.xml is a child POM that inherits from mall-security/pom.xml, then the groupId values being the same could be a requirement for proper inheritance and dependency management. However, if there is no direct inheritance or dependency relationship, the identical values could be coincidental and not indicative of a dependency.","* Reference from the child POM file contains the same coordinates as stated in the parent POM file.

### 2.1. Parent POM

In the following example, parent POM has configured basic project information
and two [dependencies](//howtodoinjava.com/maven/maven-dependency-management/)
for JUnit and spring framework.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd;
      <modelVersion>4.0.0</modelVersion>
     
      <groupId>com.howtodoinjava.demo</groupId>
      <artifactId>MavenExamples</artifactId>
      <version>0.0.1-SNAPSHOT</version>
      <packaging>pom</packaging>
     
      <name>MavenExamples Parent</name>
      <url>http://maven.apache.org</url>
     
      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>3.8.1</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
      </properties>
     
      <dependencies>
       
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
         
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
        </dependency>
         
      </dependencies>
    </project>

### 2.2. Child POM

Now child POM needs to refer to the parent POM using the parent tag and
specifying _groupId/artifactId/version_ attributes. This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

How is placeholder `${project.version}` resolved for managed properties from
parent pom? I've expected that it is resolved globally, so when the parent pom
has version 2, `${project.version}` would also be resolved to version 2.

In parent pom I have:

    
    
    <groupId>my.group</groupId>
    <artifactId>parent</artifactId>
    <version>2</version>
    <packaging>pom</packaging>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>my.group</groupId>
                <artifactId>dep</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>     
    

In child I use

    
    
    <parent>
        <groupId>my.group</groupId>
        <artifactId>parent</artifactId>
        <version>2</version>
    </parent>
    <version>1</version>
    <artifactId>child</artifactId>
    

But the artifact `my.group.dep.1.jar` is used, instead of
`my.group.dep.2.jar`. So the placeholder is resolved to the version of the
project **using** the managed dependency, and not those of the project
**defining** the dependency.

Is that expected behaviour? I'm using **maven 3.0.4.**

  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")
  * [build-dependencies](/questions/tagged/build-dependencies ""show questions tagged 'build-dependencies'"")

[Share](/q/16895555 ""Short permalink to this question"")

[Improve this question](/posts/16895555/edit)

Follow

[edited Apr 11, 2014 at 10:29](/posts/16895555/revisions ""show all edits to
this post"")

[![Aritz's user
avatar](https://i.sstatic.net/55Hvn.jpg?s=64)](/users/1199132/aritz)

[Aritz](/users/1199132/aritz)

31.4k1616 gold badges142142 silver badges222222 bronze badges

asked Jun 3, 2013 at 11:21

[!

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

This pom file will inherit
all properties and dependencies from the parent POM and can also include extra
sub-project-specific dependencies.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
     
      <!--The identifier of the parent POM-->
      <parent>
        <groupId>com.howtodoinjava.demo</groupId>
        <artifactId>MavenExamples</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
     
      <modelVersion>4.0.0</modelVersion>
      <artifactId>MavenExamples</artifactId>
      <name>MavenExamples Child POM</name>
      <packaging>jar</packaging>
     
      <dependencies>    
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-security</artifactId>
          <version>${spring.version}</version>
        </dependency>
      </dependencies>
     
    </project>

## 3\. Relative Path to Parent

By default, Maven looks for the parent POM first at the project's root, then
the local repository, and lastly in the remote repository. If the parent POM
file is not located in any other place, then you can use the code tag. This
**relative path shall be relative to project root**.

> The relative path, if not given explicitly, defaults to `..`, i.e. the pom
> in the parent directory of the current project.",mall,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-portal/pom.xml,project.groupId,NAME,com.macro.mall,maven,mall-security/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_mall.groupId' in mall-portal/pom.xml and 'project.groupId' in mall-security/pom.xml.\n2. Understand the role of 'groupId' in Maven projects, which is to uniquely identify a project across all projects.\n3. Review the provided examples and rationale to understand how dependencies are established based on value equality.\n4. Compare the 'groupId' values in both configuration options to determine if they must be identical for the project to function correctly.\n5. Evaluate if the 'groupId' in mall-portal/pom.xml depends on the 'groupId' in mall-security/pom.xml or vice versa, based on the need for consistent identification across modules."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In the provided examples, it is shown that modules within the same project need to have consistent 'groupId' values to ensure proper identification and organization. Since 'mall-portal' and 'mall-security' are both modules within the 'mall' project, they must share the same 'groupId' to maintain consistency and proper identification within the project structure. Therefore, the 'groupId' values in both configuration options depend on each other to ensure the project functions correctly."",
	""isDependency"": true
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FP,False,"The configuration options 'services.mysql.ports.in' and 'services.mysql.ports.out' both have the value 3306. In a typical Docker Compose setup, the 'ports' configuration maps a container's internal port to an external port. The internal port (in) and the external port (out) must match to ensure proper communication. Therefore, these options depend on each other to function correctly, as they must have identical values to map the MySQL service's port correctly.","mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    . 37 common frames omitted discovery-app_1    | Caused by: java.net.ConnectException: Connection refused discovery-app_1    |    at java.base/sun.nio.ch.Net.

reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) ~[na:na]     at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source) ~[na:na]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     . 58 common frames omitted Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method) ~[na:na]     at java.base/java.net.AbstractPlainSocketImpl.

jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1040)
    hackernews_1  |     at org.mariadb.jdbc.internal.util.Utils.retrieveProxy(Utils.java:490)
    hackernews_1  |     at org.mariadb.jdbc.MariaDbConnection.newConnection(MariaDbConnection.java:144)
    hackernews_1  |     at org.mariadb.jdbc.Driver.connect(Driver.java:90)
    hackernews_1  |     at slick.jdbc.DriverDataSource.getConnection(DriverDataSource.scala:101)
    hackernews_1  |     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:341)
    hackernews_1  |     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:193)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:430)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool.access$500(HikariPool.java:64)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:570)
    hackernews_1  |     at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:563)
    hackernews_1  |     at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    

docker ps

    
    
    CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                                  PORTS                              NAMES
    ab721996469d        mysql:5.7                  ""docker-entrypoint.s…""   42 minutes ago      Up 55 seconds                           3306/tcp, 0.0.0.0:3307->3307/tcp   two_mysql_1
    7aab98e2b8d7        prismagraphql/prisma:1.

slingacademy.com/article/multicolumn-indices-in-
mysql-8-a-practical-guide/) [ Handling Redundant MySQL Indices
](https://www.slingacademy.com/article/mysql-how-to-deal-with-redundant-and-
duplicate-indices/) [ Clean Unused MySQL 8 Indices
](https://www.slingacademy.com/article/mysql-8-how-to-clean-unused-indices-in-
a-database/) [ MySQL Table Repair Guide
](https://www.slingacademy.com/article/mysql-8-find-replace-table-corruption/)
[ MySQL 8 Table Partitioning Guide
](https://www.slingacademy.com/article/table-partitioning-in-
mysql-8-a-practical-guide/) [ MySQL 8 UNION Operator Guide
](https://www.slingacademy.com/article/using-union-operator-in-mysql-8-the-
complete-guide/) [ Cursor-based Pagination in MySQL
](https://www.slingacademy.com/article/how-to-implement-cursor-based-
pagination-in-mysql-3-examples/) [ MySQL 8 Subqueries Tutorial
](https://www.slingacademy.com/article/execute-subqueries-mysql-8-practical-
guide/) [ MySQL: IS NULL & IS NOT NULL Ops
](https://www.slingacademy.com/article/mysql-is-null-and-is-not-null-
operators-explained-with-examples/) [ MySQL 8 BETWEEN Operator Guide
](https://www.slingacademy.com/article/using-between-operator-in-
mysql-8-a-practical-guide/) [ MySQL Date Range Selection
](https://www.slingacademy.com/article/mysql-selecting-rows-between-dates-
times/) [ MySQL: IN and NOT IN Explained
](https://www.slingacademy.com/article/mysql-in-and-not-in-operators-
explained-with-examples/) [ Mastering MySQL 8 CHECK Constraint
](https://www.slingacademy.com/article/understanding-check-constraint-in-
mysql-8-a-practical-guide/) [ MySQL 8: One-to-Many Guide
](https://www.slingacademy.com/article/one-to-many-relationship-in-
mysql-8-a-practical-guide/) [ FOREIGN KEY in MySQL 8 Guide
](https://www.slingacademy.

ms = 540000 enable.auto.commit = true exclude.internal.topics = true fetch.max.bytes = 52428800 fetch.max.wait.ms = 500 fetch.min.bytes = 1 group.id = WorkUnitApp heartbeat.interval.ms = 3000 interceptor.classes = null key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer max.partition.fetch.bytes = 1048576 max.poll.interval.ms = 300000 max.poll.records = 500 metadata.max.age.ms = 300000 metric.reporters = [] metrics.num.samples = 2 metrics.sample.window.ms = 30000 partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor] receive.buffer.bytes = 65536 reconnect.backoff.ms = 50 request.timeout.ms = 305000 retry.backoff.ms = 100 sasl.kerberos.kinit.cmd = /usr/bin/kinit sasl.kerberos.min.time.before.relogin = 60000 sasl.kerberos.service.name = null sasl.kerberos.ticket.renew.jitter = 0.05 sasl.kerberos.ticket.renew.window.factor = 0.8 sasl.mechanism = GSSAPI security.protocol = PLAINTEXT send.buffer.bytes = 131072 session.timeout.ms = 10000 ssl.cipher.suites = null ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1] ssl.endpoint.identification.algorithm = null ssl.key.password = null ssl.keymanager.algorithm = SunX509 ssl.keystore.location = null ssl.keystore.password = null ssl.keystore.type = JKS ssl.protocol = TLS ssl.provider = null ssl.secure.random.implementation = null ssl.trustmanager.algorithm = PKIX ssl.truststore.location = null ssl.truststore.password = null ssl.truststore.",mall,services.mysql.ports.in,PORT,3306,docker-compose,document/docker/docker-compose-env.yml,services.mysql.ports.out,PORT,3306,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
	""plan"": ""1. Identify the roles of 'services.mysql.ports.in' and 'services.mysql.ports.out' in the docker-compose configuration. 2. Determine if 'services.mysql.ports.in' refers to the internal port within the MySQL container and 'services.mysql.ports.out' refers to the external port on the host. 3. Evaluate if the internal port (3306) and the external port (3306) must be the same for the MySQL service to function correctly. 4. Compare this scenario with the provided examples to see if the ports need to be identical or if they can be different without affecting functionality. 5. Conclude whether there is a dependency based on the necessity of value equality for correct operation."",
	""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different. This is similar to the first example provided, where the internal and external ports do not need to be the same."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FP,False,"The project.parent_mall.version in mall-portal/pom.xml and project.version in mall-security/pom.xml both have the value '1.0-SNAPSHOT'. To determine if there is a dependency, we need to see if mall-portal is explicitly set to inherit or reference the version from mall-security. If mall-portal is a child module of mall-security and is set to inherit the version, then a dependency exists. If the version values are set independently and just happen to be the same, then there is no dependency.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",mall,project.parent_mall.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-portal/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-security/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_mall.version' in mall-portal/pom.xml and 'project.version' in mall-security/pom.xml.\n2. Determine the type and value of each configuration option: both are of type VERSION_NUMBER with value '1.0-SNAPSHOT'.\n3. Review the provided examples and rationale to understand how similar dependencies are evaluated, particularly focusing on the need for consistency across modules in a Maven project.\n4. Analyze whether the 'project.parent_mall.version' in mall-portal/pom.xml is intended to inherit or align with the 'project.version' in mall-security/pom.xml.\n5. Consider the role of the parent POM in Maven projects and how version consistency is typically managed.\n6. Conclude whether the identical values are due to an actual dependency or merely for consistency within the project."",
	""rationale"": ""In a Maven multi-module project, the parent POM often defines shared configurations, including version numbers, which are inherited by child modules. The 'project.parent_mall.version' in mall-portal/pom.xml likely refers to the version of the parent POM that mall-portal is inheriting from. Similarly, 'project.version' in mall-security/pom.xml specifies the version of the mall-security module. If both values are '1.0-SNAPSHOT', it suggests that mall-portal is inheriting from the same parent POM version as mall-security. This creates a dependency based on value-equality because the child module (mall-portal) must align with the parent POM version to ensure compatibility and proper inheritance of configurations."",
	""isDependency"": true
}"
Resource Sharing,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration options spring.datasource.url in both mall-admin and mall-portal have identical values: jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false. This indicates that both services are configured to connect to the same MySQL database instance. However, the identical values alone do not necessarily imply a dependency. It could be a coincidence that both services are configured to use the same database. To determine if there is a dependency, we need to consider if the system's functionality relies on these URLs being identical. Given the context, it is common for different services within a microservices architecture to connect to the same database, but this does not inherently create a dependency between the configuration options themselves.","server:
  port: 8848
  tomcat:
    basedir: logs
  error:
    include-message: always
db:
  num: 1
  user: ${MYSQL_USER:root}
  password: ${MYSQL_PWD:root}
  url:
    0: jdbc:mysql://${MYSQL_HOST:pig-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:pig_config}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
  pool:
    config:
      connectionTimeout: 30000
      validationTimeout: 10000

nacos:
  core:
    auth:
      server:
        identity:
          key: serverIdentity
          value: security
      system.type: nacos
      plugin.nacos.token.secret.key: SecretKey012345678901234567890123456789012345678901234567890123456789
  security:
    ignore:
      urls: /actuator/**,/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**

spring:
  application:
    name: @project.artifactId@
  datasource:
    platform: mysql  #这个过期属性不能修改，nacos 代码对此有硬编码
  security:
    enabled: true
  boot: # 接入 spring boot admin
    admin:
      client:
        url: http://pig-monitor:5001
        username: pig
        password: pig
        instance:
          service-host-type: ip

useAddressServer: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      influx:
        enabled: false
      elastic:
        enabled: false

[ApolloApplication-Mysql-VM-Options](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/local-development/ApolloApplication-Mysql-VM-Options.png)

```
-Dspring.config-datasource.url=jdbc:mysql://your-mysql-server:3306/ApolloConfigDB?useUnicode=true&characterEncoding=UTF8
-Dspring.config-datasource.username=apollo-username
-Dspring.config-datasource.password=apollo-password

-Dspring.portal-datasource.url=jdbc:mysql://your-mysql-server:3306/ApolloPortalDB?useUnicode=true&characterEncoding=UTF8
-Dspring.portal-datasource.username=apollo-username
-Dspring.portal-datasource.password=apollo-password

```
The initialization script for the MySQL database can be found in the scripts/sql/profiles/mysql-default directory of this project.
[apolloconfigdb.sql](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/scripts/sql/profiles/mysql-default/apolloconfigdb.sql)
[apolloportaldb.sql](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/scripts/sql/profiles/mysql-default/apolloportaldb.sql)

>Note 3: The default log output of the program is /opt/logs/100003171/apollo-assembly.log, if you need to modify the log file path, you can add the `logging.file.name` parameter, as follows.
>
>-Dlogging.file.name=/your-path/apollo-assembly.log

### 2.1.4 Run

Click Run or Debug for the new run configuration.

![ApolloApplication-Run](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/local-development/ApolloApplication-Run.png)

After starting, open [http://localhost:8080](http://localhost:8080) to see that both `apollo-configservice` and `apollo-adminservice` have been started and registered to Eureka.

![ConfigAdminApplication-Eureka](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/local-development/ConfigAdminApplication-Eureka.png)

> Note: In addition to confirming the service status in Eureka, you can also confirm the service health through the health check interface at.

[ApolloApplication-Mysql-VM-Options](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/local-development/ApolloApplication-Mysql-VM-Options.png)

```
-Dspring.config-datasource.url=jdbc:mysql://your-mysql-server:3306/ApolloConfigDB?useUnicode=true&characterEncoding=UTF8
-Dspring.config-datasource.username=apollo-username
-Dspring.config-datasource.password=apollo-password

-Dspring.portal-datasource.url=jdbc:mysql://your-mysql-server:3306/ApolloPortalDB?useUnicode=true&characterEncoding=UTF8
-Dspring.portal-datasource.username=apollo-username
-Dspring.portal-datasource.password=apollo-password

```
mysql 数据库初始化脚本见 本项目 scripts/sql/profiles/mysql-default 目录下的文件
[apolloconfigdb.sql](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/scripts/sql/profiles/mysql-default/apolloconfigdb.sql)
[apolloportaldb.sql](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/scripts/sql/profiles/mysql-default/apolloportaldb.sql)

>注3：程序默认日志输出为/opt/logs/100003171/apollo-assembly.log，如果需要修改日志文件路径，可以增加`logging.file.name`参数，如下：
>
>-Dlogging.file.name=/your-path/apollo-assembly.log

### 2.1.4 运行
对新建的运行配置点击Run或Debug皆可。

![ApolloApplication-Run](https://cdn.jsdelivr.net/gh/apolloconfig/apollo@master/doc/images/local-development/ApolloApplication-Run.png)

启动完后，打开[http://localhost:8080](http://localhost:8080)可以看到`apollo-configservice`和`apollo-adminservice`都已经启动完成并注册到Eureka。

!

server:
  port: 8201
spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true #使用小写service-id
      routes: #配置路由路径
        - id: mall-auth
          uri: lb://mall-auth
          predicates:
            - Path=/mall-auth/**
          filters:
            - StripPrefix=1
        - id: mall-admin
          uri: lb://mall-admin
          predicates:
            - Path=/mall-admin/**
          filters:
            - StripPrefix=1
        - id: mall-portal
          uri: lb://mall-portal
          predicates:
            - Path=/mall-portal/**
          filters:
            - StripPrefix=1
        - id: mall-search
          uri: lb://mall-search
          predicates:
            - Path=/mall-search/**
          filters:
            - StripPrefix=1
        - id: mall-demo
          uri: lb://mall-demo
          predicates:
            - Path=/mall-demo/**
          filters:
            - StripPrefix=1
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: 'http://localhost:8201/mall-auth/rsa/publicKey' #配置RSA的公钥访问地址
  redis:
    database: 0
    port: 6379
    host: localhost
    password:
secure:
  ignore:
    urls: #配置白名单路径
      - ""/doc.html""
      - ""/swagger-resources/**""
      - ""/swagger/**""
      - ""/*/v2/api-docs""
      - ""/*/*.js""
      - ""/*/*.css""
      - ""/*/*.png""
      - ""/*/*.

0.0.1
      jedis:
        pool:
            max-active: 20
  rabbitmq:
      host: ${RABBIT_MQ_HOST:localhost}
      port:  ${RABBIT_MQ_PORT:5672}
      username: guest
      password: guest
  sleuth:
    enabled: false
    http:
      legacy:
        enabled: true
  cloud:
    gateway:
      default-filters:
         - DedupeResponseHeader=Access-Control-Allow-Origin
      globalcors:
         add-to-simple-url-handler-mapping: true
         corsConfigurations:
           '[/**]':
             allowed-origins: ""http://localhost:9572""
             allowed-methods: ""*""
             allowed-headers: ""*""
             allow-credentials: true
      discovery:
        locator:
          lowerCaseServiceId: true
          enabled: true
      routes:
        # =====================================
        - id: ace-auth
          uri: lb://ace-admin
          order: 8000
          predicates:
          - RequestBody=true
          - Path=/api/auth/**
          filters:
          - StripPrefix=2
        - id: ace-admin
          uri: lb://ace-admin
          order: 8001
          predicates:
          - RequestBody=true
          - Path=/api/admin/**
          filters:
          - StripPrefix=2
        - id: ace-generator
          uri: lb://ace-generator
          order: 8001
          predicates:
            - Path=/api/code/**
          filters:
            - StripPrefix=1
        - id: ace-sample
          uri: lb://ace-sample
          order: 8001
          predicates:
            - RequestBody=true
            - Path=/api/sample/**
          filters:
            - StripPrefix=2
    sentinel:
      transport:
        dashboard: localhost:8080

logging:
  level:
    com.github.wxiaoqi.security.gate.v2: info

management:
  endpoints:
    web:
      exposure:
        include: '*'
        exclude: heapdump,dump,threaddump,configprops,env

  security:
    enabled: false",mall,spring.datasource.url,URL,jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false,spring,mall-admin/src/main/resources/application-dev.yml,spring.datasource.url,URL,jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false,spring,mall-portal/src/main/resources/application-dev.yml,Datasource,Datasource,"{
	""plan"": ""1. Identify the configuration options to be evaluated: spring.datasource.url in mall-admin/src/main/resources/application-dev.yml and spring.datasource.url in mall-portal/src/main/resources/application-dev.yml. \n2. Compare the values of these configuration options to check if they are identical. \n3. Analyze the context in which these configuration options are used, considering the provided examples and the typical usage of such configurations in a Spring Boot project. \n4. Determine if the identical values are due to a necessary dependency or if they are coincidentally the same. \n5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration options spring.datasource.url in mall-admin/src/main/resources/application-dev.yml and spring.datasource.url in mall-portal/src/main/resources/application-dev.yml both have the value jdbc:mysql://localhost:3306/mall?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false. These options are used to configure the datasource URL for different modules (mall-admin and mall-portal) within the same project. Typically, each module in a project can have its own datasource configuration, but in this case, both modules are pointing to the same database instance. This suggests that the modules are intended to share the same database configuration, indicating a dependency based on value-equality. Unlike the examples provided, where different environments or modules had independent configurations, the identical values here are likely intentional to ensure consistency and proper functioning across the modules."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"The 'groupId' in Maven is used to uniquely identify a project across all projects. In a multi-module project, it is common practice to have submodules inherit the 'groupId' from the parent project to maintain a consistent namespace. Given that 'mall-admin' and 'mall-mbg' are likely part of the same multi-module project, it is reasonable to assume that 'project.groupId' in 'mall-admin/pom.xml' and 'project.parent_mall.groupId' in 'mall-mbg/pom.xml' are intended to be the same to ensure consistency and proper identification within the Maven ecosystem. This suggests a value-equality dependency.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

[Manwal's user
avatar](https://www.gravatar.com/avatar/a10f1a3257dce18a4b77dcbf1e7041e6?s=64&d=identicon&r=PG)](/users/2236219/manwal)

[Manwal](/users/2236219/manwal)Manwal

23.7k1515 gold badges6464 silver badges9494 bronze badges

4

  * As a work for hire should I use `com.my.company.project` as `groupId` or `com.client.company.project`?

- [Giacomo Alzetta](/users/8718773/giacomo-alzetta ""2,469 reputation"")

Commented Oct 4, 2018 at 14:02

  * @GiacomoAlzetta you can use any of formate suits you better. Some examples ‘com.companyName.hirePortal’ or ‘org.compnayName.hirePortal’.

- [Manwal](/users/2236219/manwal ""23,718 reputation"")

Commented Oct 4, 2018 at 15:41

  * 8

groupId should be com.companyname not com.companyname.project

- [Kamil Nękanowicz](/users/3871754/kamil-n%c4%99kanowicz ""6,432 reputation"")

Commented Oct 16, 2018 at 11:34

  * 2

Not really how it was designed, Apache encourages to add the project/module
name in the groupId: [maven.apache.org/guides/mini/guide-naming-
conventions.html](https://maven.apache.org/guides/mini/guide-naming-
conventions.html)

- [Olix](/users/812061/olix ""81 reputation"")

Commented Jul 11, 2023 at 10:12

Add a comment  | 

0

[](/posts/52921676/timeline ""Show activity on this post."")

However, I disagree the official definition of [Guide to naming conventions on
groupId, artifactId, and version](http://maven.apache.org/guides/mini/guide-
naming-conventions.html) which proposes the groupId must start with a reversed
domain name you control.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

`com` means this project belongs to a company, and `org` means this project
belongs to a social organization. These are alright, but for those strange
domain like xxx.tv, xxx.uk, xxx.cn, it does not make sense to name the groupId
started with ""tv."",""cn."", the groupId should deliver the basic information of
the project rather than the domain.

[Share](/a/52921676 ""Short permalink to this answer"")

[Improve this answer](/posts/52921676/edit)

Follow

[edited Oct 22, 2018 at 2:46](/posts/52921676/revisions ""show all edits to
this post"")

[![Stephen Rauch's user
avatar](https://i.sstatic.net/13Fpq.png?s=64)](/users/7311767/stephen-rauch)

[Stephen Rauch](/users/7311767/stephen-rauch)♦

49.3k3131 gold badges113113 silver badges139139 bronze badges

answered Oct 22, 2018 at 2:28

[![Tommy.Tang's user
avatar](https://i.sstatic.net/N0Tpf.jpg?s=64)](/users/10538298/tommy-tang)

[Tommy.Tang](/users/10538298/tommy-tang)Tommy.Tang

15777 bronze badges

5

  * 7

This convention is preventing developers using maven due to that you must
possess a domain before deploying your artifacts to the central maven
repository. It is ridiculous. Possessing a domain could be a pretty cost year
by year.

- [Tommy.Tang](/users/10538298/tommy-tang ""157 reputation"")

Commented Oct 28, 2018 at 3:54

  * 10

A good practice is to derive package names from the repository URL. If you're
using GitHub, your account is called `myuser` and your repository is called
`myrepo`, then simply use the package name `com.github.myuser.myrepo`. That's
free and still unique.",mall,project.groupId,NAME,com.macro.mall,maven,mall-admin/pom.xml,project.parent_mall.groupId,NAME,com.macro.mall,maven,mall-mbg/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Understand the role of 'groupId' in Maven projects: It uniquely identifies a project across all projects and follows Java's package naming conventions. \n2. Review the provided examples to understand how dependencies are evaluated based on 'groupId'. \n3. Compare the 'groupId' values in the given configuration options: 'com.macro.mall' in mall-admin/pom.xml and 'com.macro.mall' in mall-mbg/pom.xml. \n4. Determine if the 'groupId' in mall-admin/pom.xml depends on the 'groupId' in mall-mbg/pom.xml or vice versa, based on the need for consistency in identifying modules within the same project. \n5. Formulate a rationale based on the comparison and the examples provided. \n6. Conclude whether a dependency exists based on value equality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In a multi-module project like 'mall', it is essential for all modules to share the same 'groupId' to ensure they are recognized as part of the same project. The 'groupId' in mall-admin/pom.xml and mall-mbg/pom.xml both have the value 'com.macro.mall', indicating that they are part of the same project. This consistency is necessary for the correct functioning of the project, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Docker Compose, the 'ports' configuration maps a container's internal port to an external port on the host machine. The internal port (services.minio.ports.in) is the port on which the MinIO service listens inside the container, while the external port (services.minio.ports.out) is the port exposed on the host machine. For MinIO to be accessible from outside the container, these ports need to be mapped correctly. Given that both ports are set to 9001, it suggests that the MinIO console is intended to be accessible on port 9001 both inside and outside the container. This indicates a functional requirement for these ports to be the same, establishing a value-equality dependency.","when I run a MinIO container the console ip is picked randomly, here are my
configs :

docker-compose

    
    
    services:
      minio:
        container_name: my-minio
        image: bitnami/minio:latest
        ports:
          - ""9000:9000""
        environment:
          MINIO_ROOT_USER: a-good-username
          MINIO_ROOT_PASSWORD: a-good-password
          MINIO_DEFAULT_BUCKETS: my-bucket
    
    
    
    $ docker logs my-minio --follow
    [...]
    minio 08:39:51.67 INFO  ==> ** Starting MinIO **
    API: http://localhost:9000 
    Finished loading IAM sub-system (took 0.0s of 0.0s to load data).
    
    Console: http://172.18.0.10:9001 http://127.0.0.1:9001 
    

I can access it with rclone :

    
    
    [minio-local]
    type = s3
    provider = Minio
    access_key_id = a-good-username
    secret_access_key = a-good-password
    endpoint = http://172.18.0.10:9000
    

I'd like to have the ip address `http://172.18.0.10` configurable and fixed,
is this possible? I've seen similar topics for example with the
`MINIO_SERVER_URL: 127.0.0.1` env var, but no success on my side

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [minio](/questions/tagged/minio ""show questions tagged 'minio'"")

[Share](/q/74066778 ""Short permalink to this question"")

[Improve this question](/posts/74066778/edit)

Follow

asked Oct 14, 2022 at 8:57

[!

**For those who are looking for s3 with minio object server integration test.
Specially for JAVA implementation.**

_**docker-compose file:**_

    
    
    version: '3.7'
    services:
      minio-service:
        image: quay.io/minio/minio
        command: minio server /data
        ports:
          - ""9000:9000""
        environment:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    

_**The actual IntegrationTest class:**_

    
    
    import com.amazonaws.auth.AWSStaticCredentialsProvider;
    import com.amazonaws.auth.BasicAWSCredentials;
    import com.amazonaws.client.builder.AwsClientBuilder;
    import com.amazonaws.regions.Regions;
    import com.amazonaws.services.s3.AmazonS3;
    import com.amazonaws.services.s3.AmazonS3ClientBuilder;
    import com.amazonaws.services.s3.model.S3Object;
    import org.junit.jupiter.api.

Note that
Docker Compose pulls the MinIO Docker image, so there is no need to explicitly
download MinIO binary. Then run one of the below commands

### GNU/Linux and macOS

    
    
    docker-compose pull
    docker-compose up

or

    
    
    docker stack deploy --compose-file docker-compose.yaml minio

### Windows

    
    
    docker-compose.exe pull
    docker-compose.exe up

or

    
    
    docker stack deploy --compose-file docker-compose.yaml minio

Distributed instances are now accessible on the host using the Minio CLI on
port 9000 and the Minio Web Console on port 9001. Proceed to access the Web
browser at <http://127.0.0.1:9001/>. Here 4 MinIO server instances are reverse
proxied through Nginx load balancing.

### Notes

  * By default the Docker Compose file uses the Docker image for latest MinIO server release. You can change the image tag to pull a specific [MinIO Docker image](https://hub.docker.com/r/minio/minio/).

  * There are 4 minio distributed instances created by default. You can add more MinIO services (up to total 16) to your MinIO Compose deployment. To add a service

    * Replicate a service definition and change the name of the new service appropriately.
    * Update the command section in each service.
    * Add a new MinIO server instance to the upstream directive in the Nginx configuration file.

Read more about distributed MinIO
[here](https://min.io/docs/minio/container/operations/install-deploy-
manage/deploy-minio-single-node-multi-drive.html).

### Explore Further

  * [Overview of Docker Compose](https://docs.docker.com/compose/overview/)
  * [MinIO Docker Quickstart Guide](https://min.io/docs/minio/container/index.html#quickstart-for-containers)
  * [MinIO Erasure Code QuickStart Guide](https://min.io/docs/minio/container/operations/concepts/erasure-coding.html)

## Footer

[ ](https://github.com ""GitHub"") (C) 2024 GitHub, Inc.

[Docker
Pulls](https://camo.githubusercontent.com/d1b542148045f449d475aedcc841b126c405076f9b58ef82122edc5d9527c8d5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6d696e696f2f6d696e696f2e7376673f6d61784167653d363034383030)](https://hub.docker.com/r/minio/minio/)

Docker Compose allows defining and running single host, multi-container Docker
applications.

With Compose, you use a Compose file to configure MinIO services. Then, using
a single command, you can create and launch all the Distributed MinIO
instances from your configuration. Distributed MinIO instances will be
deployed in multiple containers on the same host. This is a great way to set
up development, testing, and staging environments, based on Distributed MinIO.

## 1\. Prerequisites

  * Familiarity with [Docker Compose](https://docs.docker.com/compose/overview/).
  * Docker installed on your machine. Download the relevant installer from [here](https://www.docker.com/community-edition#/download).

## 2\. Run Distributed MinIO on Docker Compose

To deploy Distributed MinIO on Docker Compose, please download [docker-
compose.yaml](https://github.com/minio/minio/blob/master/docs/orchestration/docker-
compose/docker-compose.yaml?raw=true) and
[nginx.conf](https://github.com/minio/minio/blob/master/docs/orchestration/docker-
compose/nginx.conf?raw=true) to your current working directory. Note that
Docker Compose pulls the MinIO Docker image, so there is no need to explicitly
download MinIO binary.

##

Not the answer you're looking for? Browse other questions tagged

  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")
  * [minio](/questions/tagged/minio ""show questions tagged 'minio'"")

or [ask your own question](/questions/ask).

  * Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 187 ](/q/39493490 ""Question score \(upvotes - downvotes\)"") [Provide static
IP to docker containers via docker-compose](/questions/39493490/provide-
static-ip-to-docker-containers-via-docker-compose)

[ 15 ](/q/46461977 ""Question score \(upvotes - downvotes\)"") [Docker-Compose
v3 - static ip](/questions/46461977/docker-compose-v3-static-ip)

[ 8 ](/q/55402610 ""Question score \(upvotes - downvotes\)"") [Configuring Minio
server for use with Testcontainers](/questions/55402610/configuring-minio-
server-for-use-with-testcontainers)

[ 5 ](/q/55423376 ""Question score \(upvotes - downvotes\)"") [How to make
Minio-client (from host) talk with Minio-server(docker
container)?",mall,services.minio.ports.in,PORT,9001,docker-compose,document/docker/docker-compose-env.yml,services.minio.ports.out,PORT,9001,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
	""plan"": ""1. Identify the configuration options in question: services.minio.ports.in and services.minio.ports.out, both with the value 9001 in the docker-compose-env.yml file. 2. Understand the role of these configuration options in the context of Docker Compose. 3. Compare this scenario with the provided examples to determine if a dependency exists based on value-equality. 4. Evaluate if the internal port (services.minio.ports.in) and the external port (services.minio.ports.out) must be identical for the service to function correctly. 5. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""In Docker Compose, the 'ports' configuration typically maps an external port on the host to an internal port within the container. The internal port (services.minio.ports.in) refers to the port within the container, while the external port (services.minio.ports.out) refers to the port on the host. These ports do not need to be the same for the service to function correctly; they can be different. The service would still function if the ports were different, as the mapping ensures that traffic is correctly routed from the host to the container. This is similar to the first example provided, where the internal and external ports do not need to be the same."",
	""isDependency"": false
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Docker Compose, the 'ports' configuration option is used to map a port on the host to a port on the container. The 'services.elasticsearch.ports.in' with value 9200 refers to the internal port of the Elasticsearch container, while 'services.elasticsearch.ports.out' with value 9200 refers to the external port on the host. These values must match to ensure that the service is accessible on the expected port. If these values are not identical, the service may not function correctly as the external port would not map to the correct internal port, leading to connection issues.","I'm in the process of attempting to containerize our development environment
with docker. This includes a mix of Google Appengine projects as well as
services that are being eventually hosted in Google Compute engine within a
containerized vm.

Our current development environment bootstrapping scripts bring up
elasticsearch and nginx within boot2docker and the other applications run on
localhost:{product port} within the dev_appserver appengine sandbox. This
process is proving hard to manage and maintain as it takes a lot of insight
into how our applications communicate.

I'm getting an error with docker-compose that is detecting a circular
dependency between containers.

> Circular import between cs and vbc and aa and sr.

As this configuration is only for development environments (mac osx), does
anyone have an suggestions or ideas on a different approach to take when
linking all of the product suites dependencies together.

A portion of docker-compose.yml:

    
    
    elasticsearch:
      build: ./compute/containers/elasticsearch/elasticsearch
      ports:
        - ""9200:9200""
      environment:
        - PROJECT_ID=localhost
    nginx:
      build: ./compute/containers/elasticsearch/nginx
      links:
        - elasticsearch:localhost
      ports:
        - ""9201:9201""
    cs:
      build: ./CS
      command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8080 --admin_port=9080 --storage_path=/data/
      ports:
        - ""8080:8080""
        - ""9080:9080"" 
      volumes:
       - /Users/source/CS/src:/src
       - /Users/source/CS/data:/data 
    aa:
      build: ./AA
      command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.

[ Discuss the Elastic Stack ](/)

#  [Mapping ElasticSearch Port with ports: 92xx:9200 in Docker](/t/mapping-
elasticsearch-port-with-ports-92xx-9200-in-docker/133359)

[ Elastic Stack ](/c/elastic-stack/kibana/7) [ Kibana ](/c/elastic-
stack/kibana/7)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  May 25, 2018, 7:36pm
1

Is it possible to map the default port for an ElasticSearch docker container
from 9200 to 92XX (i.e. 9222) or some other port using -

elasticsearch:  
image:
[docker.elastic.co/elasticsearch/elasticsearch:6.2.4](http://docker.elastic.co/elasticsearch/elasticsearch:6.2.4)  
...  
ports:

  * 92xx:9200

When I attempt to do this and connect using Kibana, Kibana will only connect
if configured on port 9200, i.e. ->  
ELASTICSEARCH_URL=http://elasticsearch:9200

and  
ELASTICSEARCH_URL=http://elasticsearch:96xx  
does not work.

docker container exec -i kibana curl elasticsearch:9200/_cat/health  
returns a valid connection, even though the port should be remapped to 96xx.

docker container exec -i kibana curl elasticsearch:92xx/_cat/health  
returns invalid connection data.

I have used docker container stop and rm to remove all prior container
instances.

[jen-huang](https://discuss.elastic.co/u/jen-huang) (Jen Huang)  May 25, 2018,
8:14pm  2

By default, Elasticsearch docker reserves the ports 9200 and 9300. [Example
base Docker Compose file showing both
ports.](https://github.com/deviantony/docker-elk/blob/master/docker-
compose.yml)

To change the ports (to 9299 and 9399, for example), add:

    
    
        ports:
          - ""9299:9200""
          - ""9399:9300""
    

which maps custom outside port to regular ES inside port.

If you want to see more, the networking api is no longer experimental:
<https://github.com/docker/compose/blob/master/docs/networking.md>

This is your docker-compose file in v2 without unnecessary links:

    
    
    version: '2'
    
    services:
      elasticsearch:
        build: ./compute/containers/elasticsearch/elasticsearch
        ports:
          - ""9200:9200""
        environment:
          - PROJECT_ID=localhost
      nginx:
        build: ./compute/containers/elasticsearch/nginx
        ports:
          - ""9201:9201""
      cs:
        build: ./CS
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8080 --admin_port=9080 --storage_path=/data/
        ports:
          - ""8080:8080""
          - ""9080:9080"" 
        volumes:
         - /Users/source/CS/src:/src
         - /Users/source/CS/data:/data 
      aa:
        build: ./AA
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8081 --admin_port=9081 --storage_path=/data/
        ports:
          - ""8081:8081""
          - ""9081:9081"" 
        volumes:
         - /Users/source/AA/src:/src
         - /Users/source/AA/data:/data 
      vbc:
        image: google/cloud-sdk
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.0 --port=8082 --admin_port=9082 --storage_path=/data/
        ports:
          - ""8082:8082""
          - ""9082:9082"" 
        volumes:
         - /Users/source/VBC/src:/src
         - /Users/source/VBC/data:/data    
      sr:
        build: ./SR
        command: dev_appserver.py /src/ --host=0.0.0.0 --admin_host=0.0.0.

I have
edited my post as well.

So for your Elasticsearch service, it should be:

    
    
    ports:
        - ""9699:9200""
    

The rest of the configuration looks good.

(More about `ports` and `expose`: <https://stackoverflow.com/a/40801773>)

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
6:54pm  8

I am getting errors when I try the following yml:

    
    
    version: ""3""
    
    volumes:
    elasticsearch-test-vol:
    
    networks:
    elasticsearch-test-net:
    
    services:
    
    elasticsearch-test-624-service:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
        container_name: elasticsearch-test-624
        restart: always
        networks:
            - elasticsearch-test-net
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - ""ES_JAVA_OPTS=-Xms512m -Xmx512m""
            - xpack.security.enabled=true
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
        - ""9699:9200""
        expose:
        - ""9699""
        volumes:
        - elasticsearch-test-vol:/usr/share/elasticsearch/data
    
    kibana-test-624-service:
        image: docker.elastic.co/kibana/kibana:6.2.4
        container_name: kibana-test-624
        hostname: kibana
        restart: always
        networks:
        - elasticsearch-test-net
        environment:
        - SERVER_NAME=kibana.localhost
        - ELASTICSEARCH_URL=http://elasticsearch-test-624:9699
        - ELASTICSEARCH_USERNAME=elastic
        - ELASTICSEARCH_HOST=elasticsearch-test-624
        - ELASTICSEARCH_PORT=9699
        - ELASTIC_PWD=changeme
        - KIBANA_PWD=changeme
        - xpack.security.enabled=true
        ports:
        - ""5699:5601""
        expose:
        - ""5699""
        depends_on:
        - elasticsearch-test-624-service
    

The error messages are as follows:  
Kibana console:

    
    
    Login is currently disabled.

Administrators should consult the Kibana logs for more details.
    

Logs to stdout:

    
    
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""Unable to revive connection: http://elasticsearch-test-624:9699/""}
    kibana-test-624                   | {""type"":""log"",""@timestamp"":""2018-06-11T18:53:29Z"",""tags"":[""warning"",""elasticsearch"",""admin""],""pid"":1,""message"":""No living connections""}
    
    $ docker-compose ps
         Name                   Command           State           Ports         
    --------------------------------------------------------------------------------
    elasticsearch-test-624   /usr/local/bin/docker-   Up      0.0.0.0:9699->9200/tcp
                         entr ...                         , 9300/tcp, 9699/tcp  
    kibana-test-624          /bin/bash                Up      0.0.0.0:5699->5601/tcp
                         /usr/local/bin/k ...             , 5699/tcp

[chrisruel](https://discuss.elastic.co/u/chrisruel) (CR)  June 11, 2018,
7:00pm  9

As a point of reference, the identical YML with the default port mapping to
9200:9200 works without errors reported... I am explicitly trying to get the
port mappings working in this case.",mall,services.elasticsearch.ports.in,PORT,9200,docker-compose,document/docker/docker-compose-env.yml,services.elasticsearch.ports.out,PORT,9200,docker-compose,document/docker/docker-compose-env.yml,Port,Port,"{
	""plan"": ""1. Identify the roles of the 'in' and 'out' ports in the context of Docker Compose. \n2. Compare the provided example dependencies to understand the relationship between internal and external ports. \n3. Determine if the 'in' port (internal container port) and 'out' port (external host port) must have the same value for the service to function correctly. \n4. Evaluate if the value equality between 'in' and 'out' ports in the given configuration is necessary for the service's functionality or if it is merely for consistency. \n5. Conclude whether a dependency exists based on the necessity of value equality for correct operation."",
	""rationale"": ""In Docker Compose, the 'ports' configuration maps an external port on the host to an internal port within the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. The service would still function if the ports were different, as long as the correct mapping is provided. The value equality in this case is not a requirement for the service to function correctly but is often used for simplicity and consistency."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'jjwt' dependency in the project.dependencies.dependency_jjwt.artifactId of mall-security/pom.xml and the project.dependencyManagement.dependencies.dependency_jjwt.artifactId in pom.xml both refer to the same artifact 'jjwt'. However, the context indicates that 'jjwt' was split into 'jjwt-api' and 'jjwt-impl' starting from version 0.10.0. The presence of 'jjwt' with version 0.9.1 suggests it is an older version that predates this split. The newer dependencies (jjwt-api, jjwt-impl, jjwt-jackson) use the version specified in the properties (0.11.1). The older 'jjwt' dependency does not need to have the same version as the newer modular dependencies, indicating that the value-equality is not necessary for the project to function correctly. Therefore, the identical values are coincidental and do not indicate a dependency.","I inherited a java project that has this in the POM.xml:

    
    
    <properties>
        <jjwt.version>0.11.1</jjwt.version>
    </properties>
    
    // from https://github.com/jwtk/jjwt#maven
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-api</artifactId>
        <version>${jjwt.version}</version>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-impl</artifactId>
        <version>${jjwt.version}</version>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if Gson is preferred -->
        <version>${jjwt.version}</version>
        <scope>runtime</scope>
    </dependency>
    
    // what is this ""jjwt"" dep, and why might it be using a different version?
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.9.1</version> 
    </dependency>
    

what is this ""jjwt"" dep, and why might it be using a different version?

I don't see any mention of it at <https://github.com/jwtk/jjwt>

but it is here: <https://mvnrepository.com/artifact/io.jsonwebtoken>

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [jwt](/questions/tagged/jwt ""show questions tagged 'jwt'"")
  * [jjwt](/questions/tagged/jjwt ""show questions tagged 'jjwt'"")

[Share](/q/63346655 ""Short permalink to this question"")

[Improve this question](/posts/63346655/edit)

Follow

asked Aug 10, 2020 at 19:18

[!

In this session, we’ll delve into the foundational
elements that construct a secure environment for web applications. Our journey
will be comprehensive, covering critical aspects from dependencies to
configuration, ensuring a robust understanding of the mechanisms at play.
Prepare to enhance your knowledge of securing applications effectively using
industry-standard practices. Let’s begin our focused and detailed examination.

# Spring Security and JWT Dependencies: The Cornerstones of Security

In any Spring Boot application, security is paramount, and integrating JWT for
authentication adds a robust layer of protection. But before we can harness
this power, we need to introduce some key players in the form of Maven
dependencies.

## **_Spring Boot Starter Security_**

    
    
     <dependency>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-security</artifactId>  
    </dependency>

This dependency is the backbone of our security setup. It integrates Spring
Security into our Spring Boot application, bringing with it a suite of
authentication, protection, and configuration mechanisms.

## JJWT (JSON Web Token for Java)

The JJWT library is our go-to toolkit for working with JWTs in Java. It
simplifies the creation, parsing, and validation of JWTs. However, JJWT is
modular, so we’ll need a few pieces to make it fully functional:

  * **API Module**

    
    
     <dependency>  
        <groupId>io.jsonwebtoken</groupId>  
        <artifactId>jjwt-api</artifactId>  
        <version>0.11.5</version>  
    </dependency>

This is where all the JWT standards and interfaces live. It’s the core that
defines how we interact with JWTs

  * **Implementation Module**

    
    
     <dependency>  
        <groupId>io.jsonwebtoken</groupId>  
        <artifactId>jjwt-impl</artifactId>  
        <version>0.11.5</version>  
    </dependency>

While the API gives us the rules, the implementation is where the action
happens. This module contains the machinery that processes JWTs according to
the definitions in the API.

This module contains the machinery that processes JWTs according to
the definitions in the API.

  * **Jackson Integration**

    
    
     <dependency>  
        <groupId>io.jsonwebtoken</groupId>  
        <artifactId>jjwt-jackson</artifactId>  
        <version>0.11.5</version>  
    </dependency>

For JWTs to work smoothly with JSON objects (which they inherently are), this
module integrates Jackson into the mix, allowing seamless conversion between
JWTs and JSON.

By integrating these dependencies into our Spring Boot application, we
establish a solid foundation for implementing JWT-based authentication. This
setup not only secures our application but also aligns it with modern security
standards, ensuring our application’s defenses are as formidable as a well-
fortified castle.

With our dependencies in place, we’re now equipped to build upon this
foundation, introducing entities and configurations that interact with these
security mechanisms. Let’s prepare to delve deeper into the world of Spring
Security and JWT, turning our focus towards the pivotal roles played by users
and role entities in our next section.

# The Heart of the Realm: User and Role Entities in Spring Security

In the realm of Spring Security, the core entities that uphold the kingdom’s
order are the `User` and `Role` classes. These are not just mere data
structures; they are the very backbone of our security model, ensuring that
each individual within our system is properly identified and granted the
correct level of access.

  * **User Class**

    
    
     @Data  
    @Builder  
    @Entity  
    @NoArgsConstructor  
    @AllArgsConstructor  
    @Table(name = ""users"")  
    public class User implements UserDetails {  
      
        @Id  
        @GeneratedValue(strategy = GenerationType.UUID)  
        private UUID id;  
      
        @Column(unique = true)  
        private String username;  
      
        @Column(unique = true)  
        private String email;  
      
        private String password; // Note: In real scenarios, exclude from JSON serialization with @JsonIgnore  
      
        private Set<Role> authorities; // Roles are simplified for illustration  
      
        private boolean accountNonExpired;  
        private boolean isEnabled;  
        private boolean accountNonLocked;  
        private boolean credentialsNonExpired;  
    }

In this revised `User` class, the attributes are tailored to fit the needs of
Spring Security.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Jason's user
avatar](https://i.sstatic.net/jsQUy.jpg?s=64)](/users/526664/jason)

[Jason](/users/526664/jason)Jason

2,60544 gold badges2626 silver badges3838 bronze badges

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/63346655/jjwt-dependency-
confusion?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

10

[](/posts/63346914/timeline ""Show activity on this post."")

Prior to the JJWT version 0.10.0, both the API and the implementation were
packaged as a single artifact, `io.jsonwebtoken:jjwt`.

Starting with version 0.10.0, API and implementation were split in two
different artifacts.

An excerpt from the [JJWT Release Notes, version
0.10.0](https://github.com/jwtk/jjwt/blob/master/CHANGELOG.md#0100):

> JJWT's new modular design utilizes distinctions between compile and runtime
> dependencies to ensure you only depend on the public APIs that are safe to
> use in your application. All internal/private implementation classes have
> been moved to a new jjwt-impl runtime dependency.
>
> If you depended on any internal implementation classes in the past, you have
> two choices:
>
>   * Refactor your code to use the public-only API classes and interfaces in
> the jjwt-api .jar. Any functionality you might have used in the internal
> implementation should be available via newer cleaner interfaces and helper
> classes in that .jar.
>
>   * Specify the new jjwt-impl .jar not as a runtime dependency but as a
> compile dependency. This would make your upgrade to JJWT 0.10.0 fully
> backwards compatible, but you do so at your own risk. JJWT will make NO
> semantic version compatibility guarantees in the jjwt-impl .jar moving
> forward. Semantic versioning will be very carefully adhered to in all other
> JJWT dependencies however.",mall,project.dependencies.dependency_jjwt.artifactId,NAME,jjwt,maven,mall-security/pom.xml,project.dependencyManagement.dependencies.dependency_jjwt.artifactId,NAME,jjwt,maven,pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_jjwt.artifactId in mall-security/pom.xml and project.dependencyManagement.dependencies.dependency_jjwt.artifactId in the parent pom.xml. 2. Understand the context and purpose of each configuration option. 3. Compare the artifactId values in both configurations to determine if they refer to the same Maven dependency. 4. Evaluate if the artifactId values must be identical for the project to function correctly. 5. Consider the provided examples to understand how similar dependencies are evaluated. 6. Formulate a rationale based on the comparison and examples. 7. Conclude whether a value-equality dependency exists between the configuration options."",
	""rationale"": ""The artifactId 'jjwt' in both configurations refers to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. The artifactId 'jjwt' in the parent POM's dependencyManagement section is intended to centralize the version management of the dependency, ensuring consistency across all modules that reference it. The artifactId 'jjwt' in the mall-security module's POM should ideally reference the same dependency to maintain consistency and avoid conflicts. Therefore, the artifactId values must be identical to ensure that the correct dependency is referenced, indicating a value-equality dependency."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FP,False,"In a multi-module Maven project, it is common for child modules to inherit the version number from the parent POM. This is typically done to ensure consistency across all modules. The presence of the same version number (1.0-SNAPSHOT) in both the parent POM (mall-admin/pom.xml) and the child POM (mall-portal/pom.xml) suggests that there is a value-equality dependency. This dependency ensures that all modules are built and released with the same version number, which is crucial for maintaining compatibility and coherence within the project.","[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

Since Maven 3.5.0 you can use the `${revision}` placeholder for that. The use
is documented here: [Maven CI Friendly
Versions](https://maven.apache.org/maven-ci-friendly.html).

In short the **parent pom** looks like this (quoted from the Apache
documentation):

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache</groupId>
        <artifactId>apache</artifactId>
        <version>18</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-parent</artifactId>
      <name>First CI Friendly</name>
      <version>${revision}</version>
      ...
      <properties>
        <revision>1.0.0-SNAPSHOT</revision>
      </properties>
      <modules>
        <module>child1</module>
        ..
      </modules>
    </project>
    

and the child pom like this

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>org.apache.maven.ci</groupId>
        <artifactId>ci-parent</artifactId>
        <version>${revision}</version>
      </parent>
      <groupId>org.apache.maven.ci</groupId>
      <artifactId>ci-child</artifactId>
       ...
    </project>
    

You also **have to** use the [Flatten Maven
Plugin](https://www.mojohaus.org/flatten-maven-plugin/) to generate pom
documents with the dedicated version number included for deployment. The HowTo
is documented in the linked documentation.

Also @khmarbaise wrote a nice blob post about this feature: [Maven: POM Files
Without a Version in
It?](https://blog.soebes.io/posts/2017/04/2017-04-02-maven-pom-files-without-
a-version-in-it/)

[Share](/a/51969067 ""Short permalink to this answer"")

[Improve this answer](/posts/51969067/edit)

Follow

[edited Sep 5, 2022 at 7:58](/posts/51969067/revisions ""show all edits to this
post"")

answered Aug 22, 2018 at 14:24

[!

](/questions/10582054/maven-project-version-inheritance-do-i-have-to-
specify-the-parent-version)

[ 0 ](/q/11773997 ""Question score \(upvotes - downvotes\)"") [maven version
dependency injection to sub modules](/questions/11773997/maven-version-
dependency-injection-to-sub-modules)

[ 3 ](/q/12699119 ""Question score \(upvotes - downvotes\)"") [In Maven 3 how
can I use project.version for the module as a dependency to another
project](/questions/12699119/in-maven-3-how-can-i-use-project-version-for-the-
module-as-a-dependency-to-anoth)

[ 3 ](/q/23261215 ""Question score \(upvotes - downvotes\)"") [Maven: How to
include ${project.version} in multi-module project](/questions/23261215/maven-
how-to-include-project-version-in-multi-module-project)

[ 10 ](/q/28154902 ""Question score \(upvotes - downvotes\)"") [How to use
versions-maven-plugin to set child module versions?](/questions/28154902/how-
to-use-versions-maven-plugin-to-set-child-module-versions)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 0 ](/q/48788971 ""Question score \(upvotes - downvotes\)"") [Maven's set
version plugin doesn't set parent version in child
module](/questions/48788971/mavens-set-version-plugin-doesnt-set-parent-
version-in-child-module)

[ 1 ](/q/53643783 ""Question score \(upvotes - downvotes\)"") [How to avoid
Maven Versions on Siblings Submodules?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",mall,project.parent_mall.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-admin/pom.xml,project.version,VERSION_NUMBER,version:1.0-SNAPSHOT,maven,mall-portal/pom.xml,Version Numbers,Project Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.parent_mall.version' in mall-admin/pom.xml and 'project.version' in mall-portal/pom.xml.\n2. Determine the context and purpose of each configuration option within their respective POM files.\n3. Compare the provided examples to understand how similar dependencies are evaluated.\n4. Assess whether the values of these configuration options must be identical for the project to function correctly.\n5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The 'project.parent_mall.version' in mall-admin/pom.xml specifies the version of the parent POM that mall-admin is inheriting from. The 'project.version' in mall-portal/pom.xml specifies the version of the mall-portal module itself. While both values are '1.0-SNAPSHOT', they serve different purposes: one is for inheritance and the other is for module versioning. The examples provided show dependencies based on the need for consistency in model versions across modules, which is not the case here. Therefore, the identical values are coincidental and do not establish a dependency."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration option project.properties.java.version is used to specify the Java version for the entire Maven project, often in the context of Spring Boot projects. The configuration option project.properties.maven.compiler.source is used to specify the source compatibility for the Maven compiler plugin. While both options can be set to the same value (e.g., 1.8), they serve different purposes and are used in different contexts. The java.version property is more general and can influence various plugins and settings, whereas maven.compiler.source specifically targets the Maven compiler plugin. There is no explicit requirement or documentation suggesting that these two properties must have identical values to function correctly. Therefore, they do not depend on each other based on value-equality.","Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

About the default values for `source` and `target`, note that [since the
`3.8.0` of the maven compiler, the default values have changed from `1.5` to
`1.6`](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12341563).

# `maven-compiler-plugin` with `release` instead of `source` & `target`

  3. The maven-compiler-plugin `3.6` and later versions provide a new way :

org.apache.maven.plugins maven-compiler-plugin 3.8.0 9

You could also declare just :

    
    
    <properties>
        <maven.compiler.release>9</maven.compiler.release>
    </properties>
    

But at this time it will not work as the `maven-compiler-plugin` default
version you use doesn't rely on a recent enough version.

The Maven `release` argument conveys `release` : a [new JVM standard option
](https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627) that we could
pass from Java 9 :

> Compiles against the public, supported and documented API for a specific VM
> version.

This way provides a standard way to specify the same version for the `source`,
the `target` and the `bootstrap` JVM options.  
Note that specifying the `bootstrap` is a good practice for cross compilations
and it will not hurt if you don't make cross compilations either.

* * *

**Which is the best way to specify the JDK version?**

The first way (`<java.version>`) is allowed only if you use Spring Boot.

**For Java 8 and below :**

About the two other ways : valuing the
`maven.compiler.source`/`maven.compiler.target` properties **or** using the
`maven-compiler-plugin`, you can use one or the other. It changes nothing in
the facts since finally the two solutions rely on the same properties and the
same mechanism : the maven core compiler plugin.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.source`.

> [**target**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#target)

> The `-target` argument for the Java compiler.  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

About the default values for `source` and `target`, note that [since the
`3.8.0` of the maven compiler, the default values have changed from `1.5` to
`1.6`](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12341563).

## `<release>` tag — new way to specify Java version in `maven-compiler-
plugin` 3.6

You can use [the `release` argument](https://maven.apache.org/plugins/maven-
compiler-plugin/compile-mojo.html#release) :

    
    
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
            <release>9</release>
        </configuration>
    </plugin>
    

You could also declare just the user property `maven.compiler.release`:

    
    
    <properties>
        <maven.compiler.release>9</maven.compiler.release>
    </properties>
    

But at this time the last one will not be enough as the `maven-compiler-
plugin` default version you use doesn't rely on a recent enough version.

The Maven `release` argument conveys `release` to the Java compiler to access
the [JVM standard
option](https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627) newly added
to Java 9, [_JEP 247: Compile for Older Platform
Versions_](http://openjdk.java.net/jeps/247).

> Compiles against the public, supported and documented API for a specific VM
> version.

I'm not very experienced with Maven and while experimenting with multi-module
project I started wondering how can I specify Java version for all my child
modules in parent Maven pom. Until today I was using just:

    
    
    <properties>
        <java.version>1.8</java.version>
    </properties>
    

...but when researching I found that you can also specify Java version in
Maven compiler plugin, like that:

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

And then wrap this into plugin management tag to enable child poms usage of
this. So the first question is this:

**What are the differences beetwen setting Java version in properties and in
Maven compiler plugin?**

I couldn't find clear answer but in process of researching I found that you
can also specify Java version in this way:

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

...which suggest that compiler plugin is there even if I don't explicit
declare it. Running `mvn package` outputs with

    
    
    maven-compiler-plugin:3.1:compile (default-compile) @ testproj ---
    

...and some other plugins that I didn't declare.

**So are those plugins default, hidden part of Maven pom? Are there any
differences between setting source/target in properties and in Maven plugin
configuration element?**

Some other questions are - which way should be used (and when if they are not
equal)? Which one is best for multi-module project and what happens if Java
version specified in pom is different than version pointed in `JAVA_HOME`?

I am talking about the
plugin version. you can find that through this link:
[mvnrepository.com/artifact/org.apache.maven.plugins/…](http://mvnrepository.com/artifact/org.apache.maven.plugins/maven-
compiler-plugin)

- [Sean Patrick Floyd](/users/342852/sean-patrick-floyd ""297,030 reputation"")

Commented Aug 11, 2015 at 13:23

 |  Show **7** more comments

23

[](/posts/52103890/timeline ""Show activity on this post."")

Generally you don't want to value only the `source` version (`javac -source
1.8` for example) but you want to value both the `source` and the `target`
version (`javac -source 1.8 -target 1.8` for example).  
Note that from Java 9, you have a way to convey both information and in a more
robust way for cross-compilation compatibility (`javac -release 9`).  
Maven that wraps the `javac` command provides multiple ways to convey all
these JVM standard options.

# How to specify the JDK version?

Using `maven-compiler-plugin` or
`maven.compiler.source`/`maven.compiler.target` properties to specify the
`source` and the `target` are equivalent.

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

and

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

are equivalent according to the [Maven documentation of the compiler
plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
mojo.html) since the `<source>` and the `<target>` elements in the compiler
configuration use the properties `maven.compiler.source` and
`maven.compiler.target` if they are defined.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.

# `maven-compiler-plugin` with `source` & `target`

  2. Using `maven-compiler-plugin` or `maven.compiler.source`/`maven.compiler.target` properties are equivalent.

That is indeed :

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

is equivalent to :

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

according to the [Maven documentation of the compiler
plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
mojo.html) since the `<source>` and the `<target>` elements in the compiler
configuration use the properties `maven.compiler.source` and
`maven.compiler.target` if they are defined.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: 1.7.  
>  User property is: `maven.compiler.source`.

> [**target**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#target)

> The `-target` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.",music-website,project.properties.java.version,VERSION_NUMBER,1.8,maven,music-server/pom.xml,project.properties.maven.compiler.source,VERSION_NUMBER,1.8,maven,music-server/pom.xml,Version Numbers,JAVA Version,"{
	""plan"": ""1. Identify the purpose and usage of the configuration option 'project.properties.java.version' in the Maven POM file. 2. Identify the purpose and usage of the configuration option 'project.properties.maven.compiler.source' in the Maven POM file. 3. Determine if these configuration options are used to specify the same or related settings in the Maven build process. 4. Check if the values of these configuration options must be identical for the project to function correctly. 5. Compare this situation with the provided examples to see if it aligns more with the example where a dependency exists or where it does not."",
	""rationale"": ""The 'project.properties.java.version' is typically used in Spring Boot projects to specify the Java version for the entire project. The 'project.properties.maven.compiler.source' is used to specify the source compatibility for the Java compiler in the Maven build process. Both of these properties are used to ensure that the project is built with a specific Java version. Since they both need to be consistent to avoid build issues and ensure compatibility, there is a dependency based on value-equality. This is similar to the example where 'project.modelVersion' must be consistent across all modules."",
	""isDependency"": true
}"
Resource Sharing,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options services.db.environment.MYSQL_PASSWORD and services.db.environment.MYSQL_ROOT_PASSWORD both have the value '123456'. However, these options serve different purposes: MYSQL_PASSWORD is typically used for a standard user, while MYSQL_ROOT_PASSWORD is for the root user. There is no inherent requirement for these passwords to be the same for the system to function correctly. The identical values appear to be coincidental rather than a necessity.","mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.25.jar!/:8.0.25] discovery-app_1    |    . 37 common frames omitted discovery-app_1    | Caused by: java.net.ConnectException: Connection refused discovery-app_1    |    at java.base/sun.nio.ch.Net.

reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source) ~[na:na]     at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source) ~[na:na]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:89) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:953) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:823) ~[mysql-connector-java-8.0.23.jar!/:8.0.23]     . 58 common frames omitted Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method) ~[na:na]     at java.base/java.net.AbstractPlainSocketImpl.

ms = 540000 enable.auto.commit = true exclude.internal.topics = true fetch.max.bytes = 52428800 fetch.max.wait.ms = 500 fetch.min.bytes = 1 group.id = WorkUnitApp heartbeat.interval.ms = 3000 interceptor.classes = null key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer max.partition.fetch.bytes = 1048576 max.poll.interval.ms = 300000 max.poll.records = 500 metadata.max.age.ms = 300000 metric.reporters = [] metrics.num.samples = 2 metrics.sample.window.ms = 30000 partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor] receive.buffer.bytes = 65536 reconnect.backoff.ms = 50 request.timeout.ms = 305000 retry.backoff.ms = 100 sasl.kerberos.kinit.cmd = /usr/bin/kinit sasl.kerberos.min.time.before.relogin = 60000 sasl.kerberos.service.name = null sasl.kerberos.ticket.renew.jitter = 0.05 sasl.kerberos.ticket.renew.window.factor = 0.8 sasl.mechanism = GSSAPI security.protocol = PLAINTEXT send.buffer.bytes = 131072 session.timeout.ms = 10000 ssl.cipher.suites = null ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1] ssl.endpoint.identification.algorithm = null ssl.key.password = null ssl.keymanager.algorithm = SunX509 ssl.keystore.location = null ssl.keystore.password = null ssl.keystore.type = JKS ssl.protocol = TLS ssl.provider = null ssl.secure.random.implementation = null ssl.trustmanager.algorithm = PKIX ssl.truststore.location = null ssl.truststore.password = null ssl.truststore.

|   
  
## RSocket Properties

Name | Description | Default Value  
---|---|---  
`spring.rsocket.server.address` | Network address to which the server should bind. |   
`spring.rsocket.server.fragment-size` | Maximum transmission unit. Frames larger than the specified value are fragmented. |   
`spring.rsocket.server.mapping-path` | Path under which RSocket handles requests (only works with websocket transport). |   
`spring.rsocket.server.port` | Server port. |   
`spring.rsocket.server.spec.compress` | Whether the websocket compression extension is enabled. | `false`  
`spring.rsocket.server.spec.handle-ping` | Whether to proxy websocket ping frames or respond to them. | `false`  
`spring.rsocket.server.spec.max-frame-payload-length` | Maximum allowable frame payload length. | `65536B`  
`spring.rsocket.server.spec.protocols` | Sub-protocols to use in websocket handshake signature. |   
`spring.rsocket.server.ssl.bundle` | The name of a configured SSL bundle. |   
`spring.rsocket.server.ssl.certificate` | Path to a PEM-encoded SSL certificate file. |   
`spring.rsocket.server.ssl.certificate-private-key` | Path to a PEM-encoded private key file for the SSL certificate. |   
`spring.rsocket.server.ssl.ciphers` | Supported SSL ciphers. |   
`spring.rsocket.server.ssl.client-auth` | Client authentication mode. Requires a trust store. |   
`spring.rsocket.server.ssl.enabled` | Whether to enable SSL support. | `true`  
`spring.rsocket.server.ssl.enabled-protocols` | Enabled SSL protocols. |   
`spring.rsocket.server.ssl.key-alias` | Alias that identifies the key in the key store. |   
`spring.rsocket.server.ssl.key-password` | Password used to access the key in the key store. |   
`spring.rsocket.server.ssl.key-store` | Path to the key store that holds the SSL certificate (typically a jks file). |   
`spring.rsocket.server.ssl.key-store-password` | Password used to access the key store. |   
`spring.rsocket.server.ssl.key-store-provider` | Provider for the key store. |   
`spring.rsocket.server.ssl.key-store-type` | Type of the key store.

build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring-boot-admin.version>3.3.2</spring-boot-admin.version>
        <spring.authorization.version>1.3.1</spring.authorization.version>
        <screw.version>0.0.3</screw.version>
        <captcha.version>2.2.3</captcha.version>
        <aws.version>1.12.675</aws.version>
        <velocity.version>2.3</velocity.version>
        <velocity.tool.version>3.1</velocity.tool.version>
        <configuration.version>1.10</configuration.version>
        <jasypt.version>3.0.5</jasypt.version>
        <jaxb.version>4.0.5</jaxb.version>
        <knife4j.version>3.0.5</knife4j.version>
        <swagger.fox.version>3.0.0</swagger.fox.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <docker.plugin.version>0.44.0</docker.plugin.version>
        <docker.host>http://192.168.0.100:2375</docker.host>
        <docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
        <docker.namespace>pig4cloud</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
        <git.commit.plugin>9.0.1</git.commit.plugin>
        <spring.checkstyle.plugin>0.0.41</spring.checkstyle.plugin>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.",music-website,services.db.environment.MYSQL_PASSWORD,PASSWORD,123456,docker-compose,music-server/docker-server/docker-compose.yml,services.db.environment.MYSQL_ROOT_PASSWORD,PASSWORD,123456,docker-compose,music-server/docker-server/docker-compose.yml,Datasource,Datasource,"{
	""plan"": ""1. Identify the configuration options to be evaluated: services.db.environment.MYSQL_PASSWORD and services.db.environment.MYSQL_ROOT_PASSWORD in music-server/docker-server/docker-compose.yml. 2. Determine the purpose and usage of each configuration option within the context of the docker-compose.yml file. 3. Compare the values of the configuration options to see if they are identical. 4. Evaluate whether the identical values imply a functional dependency or if they are independently set. 5. Consider the examples provided to understand how similar dependencies are evaluated. 6. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""The configuration options services.db.environment.MYSQL_PASSWORD and services.db.environment.MYSQL_ROOT_PASSWORD in music-server/docker-server/docker-compose.yml are used to set the passwords for the MySQL database user and the MySQL root user, respectively. These passwords are typically set independently to secure different user accounts within the MySQL database. The fact that they have identical values does not imply a functional dependency; it is more likely a coincidence or a simplification for the development environment. Each password serves a different purpose and can be changed independently without affecting the other."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FP,False,"The configuration option project.dependencies.dependency_spring-boot-starter-web.groupId specifies the groupId for a dependency, while project.parent_spring-boot-starter-parent.groupId specifies the groupId for the parent POM. In Maven, the parent POM often provides dependency management and shared configurations for its child projects. The fact that both have the same groupId 'org.springframework.boot' is not coincidental but rather intentional, as the Spring Boot parent POM is designed to manage Spring Boot dependencies, including 'spring-boot-starter-web'. Therefore, these configuration options must have identical values to ensure that the dependencies are correctly managed and resolved.","apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

I got that same error. My pom like bellow

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.thusitha</groupId>
    <artifactId>department-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>department-service</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

So I have to changed my pom like this.

I am developing a code from <https://www.dineshonjava.com/microservices-with-
spring-boot/>. When I update the spring-boot-starter-parent from
`1.5.4.RELEASE` to `2.0.4.RELEASE`, build got failed.

Could anyone please guide me what is the issue ?

> Project build error: 'dependencies.dependency.version' for
> org.springframework.cloud:spring-cloud-starter-eureka-server:jar is missing.

Another error:

    
    
    Multiple annotations found at this line:
        - For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. (org.apache.maven.plugins:maven-resources-plugin:3.0.2:resources:default-resources:process-
         resources) org.apache.maven.artifact.InvalidArtifactRTException: For artifact {org.springframework.cloud:spring-cloud-starter-eureka-server:null:jar}: The version cannot be empty. at 
         org.apache.maven.artifact.DefaultArtifact.validateIdentity(DefaultArtifact.java:148) at org.apache.maven.artifact.DefaultArtifact.<init>(DefaultArtifact.java:123) at 
         org.apache.maven.artifact.factory.DefaultArtifactFactory.createArtifact(DefaultArtifactFactory.java:157) at org.apache.maven.artifact.factory.DefaultArtifactFactory.createDependencyArtifact(DefaultArtifactFactory.java:
         57) at org.apache.maven.project.artifact.MavenMetadataSource.createDependencyArtifact(MavenMetadataSource.java:328) at 
         org.apache.maven.project.artifact.MavenMetadataSource.createArtifacts(MavenMetadataSource.java:503) at 
    

**pom.xml**

    
    
    <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.4.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
    
        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.

springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
    
        <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/61287791 ""Short permalink to this answer"")

[Improve this answer](/posts/61287791/edit)

Follow

answered Apr 18, 2020 at 10:40

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",music-website,project.dependencies.dependency_spring-boot-starter-web.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,project.parent_spring-boot-starter-parent.groupId,NAME,org.springframework.boot,maven,music-server/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options in question: project.dependencies.dependency_spring-boot-starter-web.groupId and project.parent_spring-boot-starter-parent.groupId in the music-server/pom.xml file. 2. Understand the role of each configuration option: project.dependencies.dependency_spring-boot-starter-web.groupId specifies the groupId for the spring-boot-starter-web dependency, while project.parent_spring-boot-starter-parent.groupId specifies the groupId for the parent POM. 3. Compare the values of these configuration options to determine if they are identical. 4. Evaluate whether the equality of these values indicates a dependency based on the provided examples and the role of groupId in Maven. 5. Conclude whether a value-equality dependency exists between these configuration options."",
	""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-web.groupId specifies the groupId for the spring-boot-starter-web dependency, which is part of the Spring Boot ecosystem. The configuration option project.parent_spring-boot-starter-parent.groupId specifies the groupId for the parent POM, which is also part of the Spring Boot ecosystem. While both options share the same groupId value (org.springframework.boot), this does not indicate a dependency between them. The groupId value is used to identify the organization or project that produces the artifact, and having the same groupId simply means that both artifacts are produced by the same organization (Spring Boot). This is similar to the example where project.dependencies.dependency_spring-boot-starter-test.groupId and project.dependencies.dependency_spring-boot-starter-security.groupId share the same groupId but do not depend on each other."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FP,False,"The configuration options in question are both specifying the version of @typescript-eslint/eslint-plugin. If both configurations specify the same version, it could be due to a requirement for compatibility or it could be coincidental. Given the error message related to ESLint and the plugin, it is likely that the versions need to be compatible. However, without explicit documentation or error messages indicating that these versions must be identical, it is not certain that a dependency exists.","Could you help me, I've got this error when I try building a project?

> Oops! Something went wrong! :(

> ESLint: 8.0.0

> TypeError: Failed to load plugin '@typescript-eslint' declared in
> 'src.eslintrc': Class extends value undefined is not a constructor or null
> Referenced from: src.eslintrc

package.json

    
    
        ""devDependencies"": {
            ""@typescript-eslint/eslint-plugin"": ""^4.33.0"",
            ""@typescript-eslint/parser"": ""^4.33.0"",
            ""browserslist"": ""^4.17.3"",
            ""eslint"": ""^8.0.0"",
            ""eslint-config-prettier"": ""^8.3.0"",
            ""eslint-plugin-import"": ""^2.24.2"",
            ""eslint-plugin-prettier"": ""^4.0.0"",
            ""eslint-plugin-react"": ""^7.26.1"",
            ""prettier"": ""^2.3.2"",
        }
    

.eslintrc

    
    
        ""parser"": ""@typescript-eslint/parser"",
        ""extends"": [
            ""eslint:recommended"",
            ""plugin:@typescript-eslint/eslint-recommended"",
            ""plugin:@typescript-eslint/recommended"",
            ""plugin:react/recommended"",
            ""plugin:@typescript-eslint/recommended"",
            ""plugin:prettier/recommended"",
            ""prettier""
        ],
        ""plugins"": [""@typescript-eslint""],
    

  * [javascript](/questions/tagged/javascript ""show questions tagged 'javascript'"")
  * [typescript](/questions/tagged/typescript ""show questions tagged 'typescript'"")
  * [eslint](/questions/tagged/eslint ""show questions tagged 'eslint'"")
  * [typescript-eslint](/questions/tagged/typescript-eslint ""show questions tagged 'typescript-eslint'"")

[Share](/q/69513869 ""Short permalink to this question"")

[Improve this question](/posts/69513869/edit)

Follow

[edited Oct 10, 2021 at 9:31](/posts/69513869/revisions ""show all edits to
this post"")

Alexei Delezhov

asked Oct 10, 2021 at 9:17

[!

We’ll occasionally send you
account related emails.

Already on GitHub? [Sign in](/login?return_to=%2Ftypescript-
eslint%2Ftypescript-eslint%2Fissues%2Fnew%2Fchoose) to your account

Jump to bottom

#  Fix peer dependency #747

Closed

[deser](/deser) opened this issue Jul 23, 2019 * 5 comments

Closed

#  Fix peer dependency  #747

[deser](/deser) opened this issue Jul 23, 2019 * 5 comments

Labels

[ package: eslint-plugin ](/typescript-eslint/typescript-
eslint/labels/package%3A%20eslint-plugin) Issues related to @typescript-
eslint/eslint-plugin [ working as intended ](/typescript-eslint/typescript-
eslint/labels/working%20as%20intended) Issues that are closed as they are
working as intended

## Comments

[![@deser](https://avatars.githubusercontent.com/u/3010698?s=80&u=b907a9835f8bd5d58933098e2325769d65ec4c61&v=4)](/deser)

Copy link

###

**[deser](/deser) ** commented Jul 23, 2019

@typescript-eslint/eslint-plugin@1.13.0 requires a peer of eslint@^5.0.0 but
none is installed. You must install peer dependencies yourself.  
---  
The text was updated successfully, but these errors were encountered:

  
  
All reactions

[![@deser](https://avatars.githubusercontent.com/u/3010698?s=40&u=b907a9835f8bd5d58933098e2325769d65ec4c61&v=4)](/deser)
[deser](/deser) added [ package: eslint-plugin ](/typescript-
eslint/typescript-eslint/labels/package%3A%20eslint-plugin) Issues related to
@typescript-eslint/eslint-plugin [ triage ](/typescript-eslint/typescript-
eslint/labels/triage) Waiting for maintainers to take a look labels Jul 23,
2019

[!

'](/questions/76900656/failed-to-load-plugin-typescript-eslint-declared-in-
eslintrc-cjs-unexpec?noredirect=1)

#### Related

[ 12 ](/q/59287268 ""Question score \(upvotes - downvotes\)"") [ESLint is not
recognizing ""@typescript-eslint/eslint-plugin""](/questions/59287268/eslint-is-
not-recognizing-typescript-eslint-eslint-plugin)

[ 5 ](/q/61024198 ""Question score \(upvotes - downvotes\)"") [ESLint conflicts
with eslint-plugin-import and typescript-eslint](/questions/61024198/eslint-
conflicts-with-eslint-plugin-import-and-typescript-eslint)

[ 10 ](/q/63170955 ""Question score \(upvotes - downvotes\)"") [eslint fails
with Cannot read config file: /some/path/node_modules/@typescript-
eslint/eslint-plugin/dist/configs/eslint-
recommended](/questions/63170955/eslint-fails-with-cannot-read-config-file-
some-path-node-modules-typescript-e)

[ 17 ](/q/63478122 ""Question score \(upvotes - downvotes\)"") [typescript-
eslint config: .eslintrc file 'module' is not
defined](/questions/63478122/typescript-eslint-config-eslintrc-file-module-is-
not-defined)

[ 4 ](/q/66273491 ""Question score \(upvotes - downvotes\)"") [Why I got error
Unable to resolve path to module?

[![@bradzacher](https://avatars.githubusercontent.com/u/7462525?s=80&u=e9348570a8def9214eef0dbc696a564be1da3ec2&v=4)](/bradzacher)

Copy link

Member

###

**[bradzacher](/bradzacher) ** commented Jul 24, 2019

[#735](https://github.com/typescript-eslint/typescript-eslint/issues/735)  
---  
  
All reactions

Sorry, something went wrong.

[![@github-
actions](https://avatars.githubusercontent.com/in/15368?s=40&v=4)](/apps/github-
actions) [github-actions](/apps/github-actions) bot locked as **resolved** and
limited conversation to collaborators Apr 21, 2020

[Sign up for free](/join?source=comment-repo) **to subscribe to this
conversation on GitHub**. Already have an account? [Sign
in](/login?return_to=https%3A%2F%2Fgithub.com%2Ftypescript-
eslint%2Ftypescript-eslint%2Fissues%2F747).

Assignees

No one assigned

Labels

[ package: eslint-plugin ](/typescript-eslint/typescript-
eslint/labels/package%3A%20eslint-plugin) Issues related to @typescript-
eslint/eslint-plugin [ working as intended ](/typescript-eslint/typescript-
eslint/labels/working%20as%20intended) Issues that are closed as they are
working as intended

Projects

None yet

Milestone

No milestone

Development

No branches or pull requests

4 participants

[ ![@deser](https://avatars.githubusercontent.com/u/3010698?s=52&v=4)
](/deser) [
![@bradzacher](https://avatars.githubusercontent.com/u/7462525?s=52&v=4)
](/bradzacher) [
![@crhistianramirez](https://avatars.githubusercontent.com/u/16483662?s=52&v=4)
](/crhistianramirez) [
![@alexkulikov101](https://avatars.githubusercontent.com/u/26524255?s=52&v=4)
](/alexkulikov101)

## Footer

[ ](https://github.com ""GitHub"") (C) 2024 GitHub, Inc.

[NPM
Downloads](https://camo.githubusercontent.com/a604f5b1ff56d234479968f6d649531312ed4d7700e047e375c2acce18efad88/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40747970657363726970742d65736c696e742f65736c696e742d706c7567696e2e7376673f7374796c653d666c61742d737175617265)](https://www.npmjs.com/package/@typescript-
eslint/eslint-plugin)

ð See **<https://typescript-eslint.io/getting-started>** for our Getting
Started docs.

> See <https://typescript-eslint.io> for general documentation on typescript-
> eslint, the tooling that allows you to run ESLint and Prettier on TypeScript
> code.

## Readme

### Keywords

  * [eslint](/search?q=keywords:eslint)
  * [eslintplugin](/search?q=keywords:eslintplugin)
  * [eslint-plugin](/search?q=keywords:eslint-plugin)
  * [typescript](/search?q=keywords:typescript)

## Package Sidebar

### Install

`npm i @typescript-eslint/eslint-plugin`

### Repository

[Gitgithub.com/typescript-eslint/typescript-
eslint](https://github.com/typescript-eslint/typescript-eslint)

### Homepage

[typescript-eslint.io/packages/eslint-plugin](https://typescript-
eslint.io/packages/eslint-plugin)

[**Fund** this package](https://opencollective.com/typescript-eslint)

### DownloadsWeekly Downloads

23,946,549

### Version

7.16.1

### License

MIT

### Unpacked Size

2.8 MB

### Total Files

560

### Last publish

a day ago

### Collaborators

  * [!",music-website,devDependencies.@typescript-eslint/eslint-plugin,VERSION_NUMBER,@typescript-eslint/eslint-plugin:^5.4.0,nodejs,music-client/package.json,devDependencies.@typescript-eslint/eslint-plugin,VERSION_NUMBER,@typescript-eslint/eslint-plugin:^5.4.0,nodejs,music-manage/package.json,Version Numbers,Library,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'devDependencies.@typescript-eslint/eslint-plugin' in 'music-client/package.json' and 'music-manage/package.json'.\n2. Compare the values of these configuration options to check if they are identical.\n3. Analyze the role and impact of '@typescript-eslint/eslint-plugin' in the context of the project to determine if having identical values is necessary for the project to function correctly.\n4. Refer to the provided examples to understand the criteria for establishing a dependency based on value-equality.\n5. Conclude whether the identical values of '@typescript-eslint/eslint-plugin' in both 'music-client/package.json' and 'music-manage/package.json' create a dependency based on value-equality."",
	""rationale"": ""The '@typescript-eslint/eslint-plugin' is a plugin for ESLint that provides linting rules for TypeScript code. In a project with multiple modules, such as 'music-client' and 'music-manage', it is crucial to maintain consistency in the linting rules to ensure uniform code quality and avoid conflicts. If different versions of '@typescript-eslint/eslint-plugin' are used in different modules, it could lead to inconsistencies in linting behavior and potential integration issues. Therefore, having identical values for '@typescript-eslint/eslint-plugin' in both 'music-client/package.json' and 'music-manage/package.json' is necessary to ensure compatibility and consistent linting across the project, creating a dependency based on value-equality."",
	""isDependency"": true
}"
Resource Sharing,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration option services.db.environment.MYSQL_PASSWORD in the docker-compose.yml file is used to set the password for the MySQL database in a Docker container. The configuration option spring.datasource.password in the application-prod.properties file is used to set the password for the Spring application's datasource. While both configurations have the same value (123456), this does not necessarily indicate a dependency. The value-equality could be coincidental, and there is no inherent requirement for these values to be the same for the system to function correctly. Each configuration serves a different purpose: one for the database container and the other for the Spring application to connect to the database.","I have docker-compose file

    
    
    version: '3.5'
    
    services:
      db:
        image: itaybeyder/mysql:2
        # secrets:
        #   - MYSQL_ROOT_PASSWORD
        hostname: mysql
        container_name: mysql
        environment:
          MYSQL_ROOT_PASSWORD: run/secrets/MYSQL_ROOT_PASSWORD.txt
    
          MYSQL_DATABASE: crud
        networks:
            - app
        ports:
          - ""3306:3306""
        command: --init-file /data/application/crud.sql
    
        volumes:
          - ./data/crud.sql:/data/application/crud.sql
          - ./data/MYSQL_ROOT_PASSWORD.txt:/run/secrets/MYSQL_ROOT_PASSWORD.txt
    networks:
        app:
            external: false
    
    # secrets:
    #   MYSQL_ROOT_PASSWORD:
    #     external: true
    

and in the volume ( local folder in my computer ) i have password for mysql
ROOT

    
    
    volumes:
          
          - ./data/MYSQL_ROOT_PASSWORD.txt:/run/secrets/MYSQL_ROOT_PASSWORD.txt
    

i'm trying to pass it to the env - MYSQL_ROOT_PASSWORD , but im getting error
:

    
    
    mysql  | 2021-12-26 16:27:10+00:00 [ERROR] [Entrypoint]: Both MYSQL_ROOT_PASSWORD and MYSQL_ROOT_PASSWORD_FILE are set (but are exclusive)
    

when im using **docker stack** its working but i want to use it with docker-
compose.

**MY QUESTION** : how can i pass , password of the ROOT with the ENV

environment: MYSQL_ROOT_PASSWORD

with file that will be sitting in the container himself!! , im coping file
from the host to the container and i want him to read if from the local path ,
is it possible ?

**other way** , simplest , how can i transfer local password i have in the
host to the ENV of MYSQL_ROOT_PASSWORD ?

  * [mysql](/questions/tagged/mysql ""show questions tagged 'mysql'"")
  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")

[Share](/q/70488081 ""Short permalink to this question"")

[Improve this question](/posts/70488081/edit)

Follow

asked Dec 26, 2021 at 16:35

[!

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Docker-compose mysql environment difference between PASSWORD and
ROOT_PASSWORD](/questions/49197640/docker-compose-mysql-environment-
difference-between-password-and-root-password)

[ Ask Question ](/questions/ask)

Asked 6 years, 4 months ago

Modified [6 years, 4 months ago](?lastactivity ""2018-03-09 16:07:21Z"")

Viewed 31k times

Part of [PHP](/collectives/php) Collective

11

[](/posts/49197640/timeline ""Show activity on this post."")

This is from my docker compose:

    
    
     db:
            image: mysql
            ports: 
                - ""3306:3306""
            environment:
                MYSQL_DATABASE: myDb
                MYSQL_USER: user
                MYSQL_PASSWORD: test
                MYSQL_ROOT_PASSWORD: test 
            volumes:
                - ./dump:/docker-entrypoint-initdb.d
                - persistent:/var/lib/mysql
    

When I change my user and both passwords to 'root', my database gets created
but it's empty. When I leave the credentials as above, my .sql script inside
my /dump dir populates the database as it is supposed to. How do the
credentials change affect data injection and how can I fix this?

[](/collectives/php ""PHP Collective"")

  * [php](/questions/tagged/php ""show questions tagged 'php'"")
  * [docker](/questions/tagged/docker ""show questions tagged 'docker'"")
  * [mysqli](/questions/tagged/mysqli ""show questions tagged 'mysqli'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")

[Share](/q/49197640 ""Short permalink to this question"")

[Improve this question](/posts/49197640/edit)

Follow

asked Mar 9, 2018 at 16:02

[!

[helloworld123's user
avatar](https://www.gravatar.com/avatar/c4eeb27a7b0f9828eb7c83fa72b78019?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/9328578/helloworld123)

[helloworld123](/users/9328578/helloworld123)helloworld123

16522 gold badges22 silver badges88 bronze badges

Add a comment  | 

##  1 Answer 1

Sorted by:  [ Reset to default ](/questions/49197640/docker-compose-mysql-
environment-difference-between-password-and-root-
password?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

13

[](/posts/49197728/timeline ""Show activity on this post."")

From the documentation(<https://hub.docker.com/_/mysql/>)...

> MYSQL_USER, MYSQL_PASSWORD
>
> These variables are optional, used in conjunction to create a new user and
> to set that user's password. This user will be granted superuser permissions
> (see above) for the database specified by the MYSQL_DATABASE variable. Both
> variables are required for a user to be created.

So this is to create a new user with a password. MYSQL_ROOT_PASSWORD is the
password for the root user of MySQL.

> MYSQL_ROOT_PASSWORD This variable is mandatory and specifies the password
> that will be set for the MySQL root superuser account. In the above example,
> it was set to my-secret-pw.

[Share](/a/49197728 ""Short permalink to this answer"")

[Improve this answer](/posts/49197728/edit)

Follow

answered Mar 9, 2018 at 16:07

[!

login error: ""The server requested authentication method
unknown to the client""](/questions/50481403/run-mysql-with-docker-compose-
login-error-the-server-requested-authentication)

[ 0 ](/q/54244085 ""Question score \(upvotes - downvotes\)"") [Docker Compose -
Creating and connecting to mysql container](/questions/54244085/docker-
compose-creating-and-connecting-to-mysql-container)

[ 3 ](/q/56247365 ""Question score \(upvotes - downvotes\)"") [Docker-compose
not reading environment variables
(MYSQL_DATABASE_PASSWORD)](/questions/56247365/docker-compose-not-reading-
environment-variables-mysql-database-password)

[ 2 ](/q/63852254 ""Question score \(upvotes - downvotes\)"") [Docker Compose -
MySQL - MYSQL_ROOT_PASSWORD](/questions/63852254/docker-compose-mysql-mysql-
root-password)

[ 0 ](/q/66569926 ""Question score \(upvotes - downvotes\)"") [mysql in docker
compose](/questions/66569926/mysql-in-docker-compose)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Can I cause a star to go supernova by altering the four fundamental forces? ](https://worldbuilding.stackexchange.com/questions/260079/can-i-cause-a-star-to-go-supernova-by-altering-the-four-fundamental-forces)
  * [ Character Combining 山 and 大 ](https://chinese.stackexchange.com/questions/58615/character-combining-%e5%b1%b1-and-%e5%a4%a7)
  * [ The Zentralblatt asked me to review a worthless paper, what to do? ](https://academia.stackexchange.com/questions/212304/the-zentralblatt-asked-me-to-review-a-worthless-paper-what-to-do)
  * [ Does a green card holder need a visa for a layover in Athens airport? ](https://travel.stackexchange.com/questions/190218/does-a-green-card-holder-need-a-visa-for-a-layover-in-athens-airport)
  * [ Why does ""They be naked"" use the base form of ""be""?

MYSQL_ROOT_PASSWORD do not work](/questions/40149880/docker-mysql-root-
password-do-not-work)

[ 9 ](/q/45711618 ""Question score \(upvotes - downvotes\)"") [Docker-compose
mysql does not seem to recognize environment variable
MYSQL_RANDOM_ROOT_PASSWORD](/questions/45711618/docker-compose-mysql-does-not-
seem-to-recognize-environment-variable-mysql-rando)

[ 10 ](/q/51367541 ""Question score \(upvotes - downvotes\)"") [Can't login as
root into MySQL container](/questions/51367541/cant-login-as-root-into-mysql-
container)

[ 3 ](/q/56247365 ""Question score \(upvotes - downvotes\)"") [Docker-compose
not reading environment variables
(MYSQL_DATABASE_PASSWORD)](/questions/56247365/docker-compose-not-reading-
environment-variables-mysql-database-password)

[ 108 ](/q/59838692 ""Question score \(upvotes - downvotes\)"")
[MYSQL_ROOT_PASSWORD is set but getting ""Access denied for user
'root'@'localhost' (using password: YES)"" in docker
container](/questions/59838692/mysql-root-password-is-set-but-getting-access-
denied-for-user-rootlocalhost)

[ 2 ](/q/63852254 ""Question score \(upvotes - downvotes\)"") [Docker Compose -
MySQL - MYSQL_ROOT_PASSWORD](/questions/63852254/docker-compose-mysql-mysql-
root-password)

[ 0 ](/q/69137818 ""Question score \(upvotes - downvotes\)"") [MySQL Docker
Compose password not working](/questions/69137818/mysql-docker-compose-
password-not-working)

[ 1 ](/q/70678655 ""Question score \(upvotes - downvotes\)"") [Docker : MySQL
password is not set despite setting environement variable (-e
MYSQL_ROOT_PASSWORD)](/questions/70678655/docker-mysql-password-is-not-set-
despite-setting-environement-variable-e-mys)

[ 1 ](/q/72089140 ""Question score \(upvotes - downvotes\)"") [Docker mysql root
or user won't login, just access denied.",music-website,services.db.environment.MYSQL_PASSWORD,PASSWORD,123456,docker-compose,music-server/docker-server/docker-compose.yml,spring.datasource.password,PASSWORD,123456,spring,music-server/src/main/resources/application-prod.properties,Datasource,Datasource,"{
	""plan"": ""1. Identify the purpose and context of each configuration option. The first option is 'services.db.environment.MYSQL_PASSWORD' in the Docker Compose file, which is used to set the MySQL password for the database service in a Docker container. The second option is 'spring.datasource.password' in the Spring Boot application properties file, which is used to configure the password for the datasource in the Spring Boot application. 2. Determine if these configuration options are used in the same context or environment. The Docker Compose configuration is used to set up the database service in a containerized environment, while the Spring Boot configuration is used to connect to a datasource, which could be the same database service set up by Docker Compose. 3. Evaluate if the values of these configuration options need to be identical for the system to function correctly. If the Spring Boot application connects to the MySQL database service set up by Docker Compose, the password values must match for successful authentication. 4. Compare this scenario with the provided examples to see if the dependency is similar. In the examples, dependencies were determined based on whether the configuration options were used in the same context and required identical values for correct functionality."",
	""rationale"": ""The configuration option 'services.db.environment.MYSQL_PASSWORD' in the Docker Compose file is used to set the MySQL password for the database service. The configuration option 'spring.datasource.password' in the Spring Boot application properties file is used to configure the password for the datasource. If the Spring Boot application is intended to connect to the MySQL database service set up by Docker Compose, the password values must be identical for successful authentication. Therefore, there is a dependency between these configuration options based on value-equality, as the Spring Boot application needs to use the same password to connect to the MySQL database service."",
	""isDependency"": true
}"
Resource Sharing,gpt-4o-2024-05-13,config2,7.0,FN,True,"The configuration options services.account-mongodb.environment.MONGODB_PASSWORD and services.notification-mongodb.environment.MONGODB_PASSWORD are both environment variables used to set the MongoDB password for their respective services. If these services are part of the same Docker Compose setup and share the same MongoDB instance or require the same credentials for authentication, then they would need to have identical values. However, if they are isolated services with separate MongoDB instances, there is no inherent dependency requiring the passwords to be the same.","I tried to change the mongodb password in docker-compose.yaml file directly by
changing the `- MONGO_INITDB_ROOT_PASSWORD` parameter within environment in
mongodb service.

Here is my docker-compose.yaml file before changing the password:

    
    
    mongo-dev:
     container_name: mongo-dev
     image: mongo
     restart: unless-stopped
     environment:
      - AUTH=yes
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=old-pass
     volumes:
      - /data/mongodb-dev:/data/db
     ports:
      - 27017:27017
    

I changed `MONGO_INITDB_ROOT_PASSWORD` value from ""old-pass"" to ""new-pass"" and
used `docker-compose up -d` command to re-create mongodb container:

    
    
    mongo-dev:
     container_name: mongo-dev
     image: mongo
     restart: unless-stopped
     environment:
      - AUTH=yes
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=new-pass
     volumes:
      - /data/mongodb-dev:/data/db
     ports:
      - 27017:27017
    

And when i tried to connect to DB with ""new-pass"" as password i got
authentication error but it still connecting to mongodb container with ""old-
pass"".

It seems to me that changing the `MONGO_INITDB_ROOT_PASSWORD` in docker-
compose file does not apply password changing in mongodb container.

  * [mongodb](/questions/tagged/mongodb ""show questions tagged 'mongodb'"")
  * [authentication](/questions/tagged/authentication ""show questions tagged 'authentication'"")
  * [docker-compose](/questions/tagged/docker-compose ""show questions tagged 'docker-compose'"")

[Share](/q/76201574 ""Short permalink to this question"")

[Improve this question](/posts/76201574/edit)

Follow

asked May 8, 2023 at 14:30

[!

We're copying **db/mongo-init.js** file to the container by running **\-
./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js.**

### **MongoDB JavaScript User/Pass Creation File**

_db/mongo-init.js_

    
    
    db = db.getSiblingDB('sample_db')
    
    
    db.createUser({
        user: 'some_user',
        pwd: 'random_pass',
        roles: [
          {
            role: 'dbOwner',
          db: 'sample_db',
        },
      ],
    });
    

  

### Makefile

    
    
    SHELL = /bin/bash
    
    DOCKER_MONGODB=docker exec -it mongodb-sample mongosh -u $(ADMIN_USER) -p $(ADMIN_PASSWORD) --authenticationDatabase admin
    DOCKER_MONGODB_WITH_CUSTOM_CREDS=docker exec -it mongodb-sample mongosh -u $(DB_USER) -p $(DB_PASS) --authenticationDatabase $(DB_NAME)
    
    .PHONY: help
    ## help: shows this help message
    help:
    	@ echo ""Usage: make [target]""
    	@ sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' |  sed -e 's/^/ /'
    
    .PHONY: setup-db
    ## setup-db: sets up MongoDB
    setup-db: export ADMIN_USER=admin
    setup-db: export ADMIN_PASSWORD=f3MdBEcz
    setup-db:
    	@ echo ""Setting up MongoDB...""
    	@ docker-compose up -d mongodb
    	@ until $(DOCKER_MONGODB) --eval 'db.getUsers()' >/dev/null 2>&1 && exit 0; do \
    	  >&2 echo ""MongoDB not ready, sleeping for 5 secs...""; \
    	  sleep 5 ; \
    	done
    	@ echo ""... MongoDB is up and running!""

I have a mongo container being created in Compose:

    
    
    version: '2'
    volumes:
      mongodata:
        driver: local
    services:
      mongo:
        image: mongo:latest
        hostname: ${MONGODB_HOST}
        restart: always
        ports: 
          - ""27017:27017""
        volumes:
          - mongodata:/data/db
    

This works perfectly, however now I want to put a password on the database. To
do so, firstly as I understand it I need to create the database, add a
password, then restart it with the `--auth` flag. My question is how to do
this process with docker-compose.

I can do this if I do everything without docker-compose. The issues that I can
see arising with compose are:

a) docker-compose works inside a docker network. b) docker-compose can't run
different commands at the beginning as during production. \- this is important
because although some people say that you can run `--auth` at the beginning
and it will allow you to set a password the first time, this doesn't seem to
be the case.

One solution I began working on was a shell script I would run on all my
servers before running docker-compose file:

    
    
    # start the temporary container
    docker run -d -v /tmp/mongodb --name tmpdb -e MONGODB_DBNAME=db_test mongo --auth
    # do the user creation
    docker run -it --link tmpdb --rm mongo sh -c 'mongo --host tmpdb --eval ""db.createUser({ user: \""admin\"", pwd: \""password\"", roles: [ { role: \""root\"", db: \""admin\"" } ] });""'
    # stop the server
    docker stop tmpdb
    # create new mongodb container, using the old ones data
    docker run -d -p 27017:27017 --name mongo2 -e MONGODB_DBNAME=db_test mongo --auth
    # clean up old container (we are using the volumes so they will stick around)
    docker rm tmpdb
    

This file creates a temporary container, sets a username/password on it, stops
the original container, creates a new one using the old ones volume container,
and deletes the original one. The new mongo container now has a password on.

So my conclusive question is, whats the best way to do this in docker-compose?

.PHONY: mongodb-console
    ## mongodb-console: opens MongoDB console
    mongodb-console: export DB_USER=some_user
    mongodb-console: export DB_PASS=random_pass
    mongodb-console: export DB_NAME=sample_db
    mongodb-console:
    	@ ${DOCKER_MONGODB_WITH_CUSTOM_CREDS}
    
    .PHONY: run
    ## run: runs the application
    run: setup-db
    	@ go run cmd/main.go
    
    .PHONY: cleanup
    ## cleanup: removes MongoDB and associated volumes
    cleanup:
    	@ docker-compose down
    	@ docker volume rm $$(docker volume ls -q)
    
    .PHONY: test
    ## test: runs unit tests
    test:
    	@ go test -v ./...
    

  

The **setup-db** target, which is invoked by the **run** target, keeps trying
to connect to [MongoDB](http://mongodb.com/?ref=hackernoon.com) so the main
[Go](http://go.dev/?ref=hackernoon.com) program can safely try to connect to
it.

### Connecting to MongoDB

  
_.env_

    
    
    MONGO_INITDB_ROOT_USERNAME=admin
    MONGO_INITDB_ROOT_PASSWORD=f3MdBEcz
    MONGODB_DATABASE=sample_db
    MONGODB_USER=some_user
    MONGODB_PASSWORD=random_pass
    MONGODB_HOST_NAME=localhost
    MONGODB_PORT=27017
    

  
_config/config.go_

    
    
    // Copyright (c) 2023 Tiago Melo. All rights reserved.
    // Use of this source code is governed by the MIT License that can be found in
    // the LICENSE file.
    package config
    
    import (
    	""github.com/joho/godotenv""
    	""github.com/kelseyhightower/envconfig""
    	""github.com/pkg/errors""
    )
    
    // Config holds all configuration needed by this app.

### docker-compose.yaml

    
    
    version: ""3.9""
    services:
      mongodb:
        container_name: mongodb-sample
        image: mongo:latest
        restart: always
        ports:
          - ""27017:27017""
        volumes:
          - mongodb-data:/data/db
          - ./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
        env_file:
          - .env
        command: [--auth]
    volumes:
      mongodb-data:
    

  

In a [Docker Compose](https://docs.docker.com/compose/?ref=hackernoon.com)
file, the **command** key is used to specify the command that should be
running inside the container when it starts up. For a
[MongoDB](http://mongodb.com/?ref=hackernoon.com) container, one common use of
the command key is to enable authentication by passing the **\--auth** option
to the **mongod** process.

  

When the **\--auth** option is passed to the mongod process, it enables
authentication for the [MongoDB](http://mongodb.com/?ref=hackernoon.com)
instance. This means that users will need to provide valid credentials
(username and password) to access the database.

  

Without authentication, anyone with access to the
[MongoDB](http://mongodb.com/?ref=hackernoon.com) instance could potentially
access, modify, or delete sensitive data, which could lead to serious security
breaches.

  

We're copying **db/mongo-init.js** file to the container by running **\-
./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js.",piggymetrics,services.account-mongodb.environment.MONGODB_PASSWORD,PASSWORD,$MONGODB_PASSWORD,docker-compose,docker-compose.yml,services.notification-mongodb.environment.MONGODB_PASSWORD,PASSWORD,$MONGODB_PASSWORD,docker-compose,docker-compose.yml,Datasource,Datasource,"{
	""plan"": ""1. Identify the configuration options to be evaluated: services.account-mongodb.environment.MONGODB_PASSWORD and services.notification-mongodb.environment.MONGODB_PASSWORD in docker-compose.yml. \n2. Determine the type and value of each configuration option: both are of type PASSWORD with value $MONGODB_PASSWORD. \n3. Analyze the context in which these configuration options are used to understand if they must have identical values to function correctly. \n4. Compare this scenario with the provided examples to see if the value equality indicates a dependency. \n5. Formulate a rationale based on the analysis and examples. \n6. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration options services.account-mongodb.environment.MONGODB_PASSWORD and services.notification-mongodb.environment.MONGODB_PASSWORD both specify the password for MongoDB instances used by the account and notification services, respectively. The value $MONGODB_PASSWORD is likely an environment variable that is used to set the password for MongoDB authentication. In this context, the value equality does not necessarily indicate a dependency between the two services. Each service can function independently with its own MongoDB instance, and the use of the same password is likely for consistency and ease of management rather than a functional dependency. This is similar to the example where the 'restart' option had the same value for different services but did not indicate a dependency."",
	""isDependency"": false
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FP,False,"In Docker Compose, the 'ports' configuration maps a port on the host (out) to a port on the container (in). For RabbitMQ to be accessible from outside the container, the host port (out) must be mapped to the container port (in) where RabbitMQ is listening. In this case, both the 'in' and 'out' values are set to 5672, which is the default port for RabbitMQ. This mapping ensures that RabbitMQ is accessible on port 5672 both inside and outside the container. Therefore, the values must be identical to ensure proper communication and functionality of the RabbitMQ service.","This might happen from a number of reasons - I'll name a few:

1) The IP of the RabbitMQ-server wasn't specified correctly.  
It might no passed has a environment variable (this is why its important to
add a check for that in the code).  
When working with [docker-compose](/questions/tagged/docker-compose ""show
questions tagged 'docker-compose'"") the IP of the RabbitMQ-server should be
replaced with the service DNS (which is the name of the service in the
`docker-compose.yml` file or the value of `hostname` property if specified).

2) The RabbitMQ workers/clients tried to reach the RabbitMQ-server before its
ready.  
**Notice that`depend_on` only express dependency between services, and wait
for services to _start_ but not to be _ready_**.  
So you can't rely on it by adding:

    
    
      depends_on:
        - rabbitmq-server
    

Because the RabbitMQ-server service bootstrap phase take time.  
See the reference below regarding the `depend_on` command.  
See the solutions I provided for this runtime dependency problem below.

3) There is a RabbitMQ-server service already running on the host which uses
the `5672` port.  
In this case you'll receive an explicit error when you try to start the
RabbitMQ-server service, but from the RabbitMQ-worker perspective its the same
problem.

* * *

You can solve the runtime dependency problem mentioned in the #2 by:  

A) Had a retry logic in the client - Consider using
[pluggins](https://www.rabbitmq.com/reliability.html#federation-and-shovel)
like [Shoval](https://www.rabbitmq.com/shovel.html) and
[Federation](https://www.rabbitmq.com/federation.html).

B) If the cause for the problem is #2 - you can use the
[restart_policy](https://docs.docker.com/compose/compose-file/#restart_policy)
option and the connection will succeed after a few retries.

C) Use a tool such as [wait-for-it](https://github.com/vishnubob/wait-for-it),
[dockerize](https://github.com/jwilder/dockerize), or sh-compatible [wait-
for](https://github.com/Eficode/wait-for).

I want to run RabbitMQ in one container, and a worker process in another. The
worker process needs to access RabbitMQ.

I'd like these to be managed through `docker-compose`.

This is my `docker-compose.yml` file so far:

    
    
    version: ""3""
    
    services:
    
      rabbitmq:
        image: rabbitmq
        command: rabbitmq-server
        expose:
          - ""5672""
          - ""15672""
    
      worker:
        build: ./worker
        depends_on:
          - rabbitmq
        # Allow access to docker daemon
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    

So I've exposed the RabbitMQ ports. The worker process accesses RabbitMQ using
the following URL:

    
    
    amqp://guest:guest@rabbitmq:5672/
    

Which is what they use in the official tutorial, but `localhost` has been
swapped for `rabbitmq`, since the the containers should be [discoverable with
a hostname identical to the container
name:](https://docs.docker.com/compose/networking/)

> By default Compose sets up a single network for your app. Each container for
> a service joins the default network and is both reachable by other
> containers on that network, and discoverable by them at a hostname identical
> to the container name.

Whenever I run this, I get an connection refused error:

    
    
    Recreating ci_rabbitmq_1 ... done                                                                                                                                                    
    Recreating ci_worker_1   ... done                                                                                                                                                    
    Attaching to ci_rabbitmq_1, ci_worker_1                                                                                                                                              
    worker_1    | dial tcp 127.0.0.1:5672: connect: connection refused                                                                                                                   
    ci_worker_1 exited with code 1        
    

I find this interesting because it's using the IP `127.0.0.1` which (I think)
is `localhost`, even though I specified `rabbitmq` as the hostname. I'm not an
expert on docker networking, so maybe this is desired.

I'm happy to supply more information if needed!

* * *

**Edit**

There is an almost identical question
[here](https://stackoverflow.com/questions/31746182/docker-compose-wait-for-
container-x-before-starting-y).

So my goal is to have several containers that interact among themselves using
rabbitmq messages(rabbitmq server is in a separate container)

rabbit.py

    
    
    class Rabbit:
        host = 'rabbitmq-host'
        userid = 'test'
        password = 'test'
    
    
    class Consumer(Rabbit):
    
        def __init__(self, exchange_name):
            self.exchange_name = exchange_name
            self.connection = None
            try:
                credentials = pika.PlainCredentials(self.userid, self.password)
                params = pika.ConnectionParameters(self.host, 5672, '/', credentials)
                self.connection = pika.BlockingConnection(params)
            except Exception as ex:
                print(ex)
                if self.connection is not None and self.connection.is_open:
                    self.connection.close()
                raise ex
    
            self.channel = self.connection.channel()
    

Credentials test:test exist, I re-checked.

Then from another file(main.py) the Consumer is created

    
    
    c = Consumer('media')
    

docker-compose.yml

    
    
    version: '3'
    services:
    
    rabbitmq-server:
      image: ""rabbitmq:3-management""
      hostname: ""rabbitmq-host""
      environment:
        RABBITMQ_ERLANG_COOKIE: ""SWQOKODSQALRPCLNMEQG""
        RABBITMQ_DEFAULT_USER: ""test""
        RABBITMQ_DEFAULT_PASS: ""test""
        RABBITMQ_DEFAULT_VHOST: ""/""
      ports:
        - ""15672:15672""
        - ""5672:5672""
      labels:
        NAME: ""rabbitmq1""
    
    
    info-getter:
      build: ./info-getter
      depends_on:
        - rabbitmq-server
      tty: true
      ports:
        - ""3000:3000""
    

When testing, I run rabbitmq server in a container, but the app from local
mechine, all is working, but when I run 'docker-compose up' I get this
exception:

    
    
    info-getter_1      | 
    info-getter_1      | Traceback (most recent call last):
    info-getter_1      |   File ""main.py"", line 10, in <module>
    info-getter_1      |     c = Consumer('media')
    info-getter_1      |   File ""libs/rabbit.py"", line 27,

](/questions/20345658/how-to-use-rabbitmqctl-to-connect-to-the-
rabbitmqserver-in-the-docker-container)

[ 2 ](/q/34611129 ""Question score \(upvotes - downvotes\)"") [accessing the
docker container for rabbitmq from ubuntu host](/questions/34611129/accessing-
the-docker-container-for-rabbitmq-from-ubuntu-host)

[ 5 ](/q/44925747 ""Question score \(upvotes - downvotes\)"") [RabbitMq refuses
connection when run in docker](/questions/44925747/rabbitmq-refuses-
connection-when-run-in-docker)

[ 1 ](/q/54002105 ""Question score \(upvotes - downvotes\)"") [Problem with
connection to RabbitMQ on container](/questions/54002105/problem-with-
connection-to-rabbitmq-on-container)

[ 6 ](/q/54146342 ""Question score \(upvotes - downvotes\)"") [docker-compose
with rabbitmq](/questions/54146342/docker-compose-with-rabbitmq)

[ 1 ](/q/55077073 ""Question score \(upvotes - downvotes\)"") [How to connect to
rabbitmq container from the application server
container](/questions/55077073/how-to-connect-to-rabbitmq-container-from-the-
application-server-container)

[ 11 ](/q/57262128 ""Question score \(upvotes - downvotes\)"") [Using rabbitmq
with docker in production](/questions/57262128/using-rabbitmq-with-docker-in-
production)

[ 3 ](/q/60657549 ""Question score \(upvotes - downvotes\)"") [How to connect to
the rabbitMQ docker container?](/questions/60657549/how-to-connect-to-the-
rabbitmq-docker-container)

[ 1 ](/q/64530217 ""Question score \(upvotes - downvotes\)"") [How to connect to
RabbitMQ (docker-compose)?

In this article, we're going to set up RabbitMQ with Docker Compose. Then,
we're going to write a message Sender and Receiver using Go. Before we start,
make sure you have the following installed:

  * [Docker](https://www.docker.com/get-started)
  * [Docker Compose](https://docs.docker.com/compose/)
  * [Go](https://golang.org/dl/)

### Setting Up Docker Compose

If you want to make your code more portable and share the same version of
RabbitMQ with your developer colleagues, I highly recommend using Docker.

In this case, we're going to use `docker-compose` to configure the container
name, the volumes and networks, and the ports that RabbitMQ will use. Doing so
ensures that everything is isolated and easy to modify.

To start, create a folder called `rabbitmq-go` in your Golang project folder.
Then, create a new file with the name `docker-compose.yml`. Inside that file,
add the following:

    
    
    version: ""3.2""
    services:
      rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: 'rabbitmq'
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - rabbitmq_go_net
    
    networks:
      rabbitmq_go_net:
        driver: bridge

Here's what we've just done:

  * **image** : where we tell Docker which image to pull. We're using an Alpine implementation of RabbitMQ with the `management` plugin. The Alpine distro is the one you'll want to use if you want to save disk space.
  * **container_name** : this represents the container created from the image above.
  * **ports** : the list of ports that will be mapped from the container to the outside world, for interacting with the queue and the web UI.
  * **volumes** : where we map the `log` and `data` from the container to our local folder. This allows us to view the files directly in their local folder structure instead of having to connect to the container.",piggymetrics,services.rabbitmq.ports.in,PORT,5672,docker-compose,docker-compose.dev.yml,services.rabbitmq.ports.out,PORT,5672,docker-compose,docker-compose.dev.yml,Port,Port,"{
	""plan"": ""1. Identify the roles of the 'in' and 'out' ports in the context of Docker Compose. \n2. Determine if the 'in' port refers to the internal port within the container and the 'out' port refers to the external port on the host. \n3. Evaluate if the service functionality depends on these ports being identical. \n4. Compare this scenario with the provided examples to see if the same logic applies. \n5. Conclude whether the configuration options depend on each other based on the necessity of value equality for correct functionality."",
	""rationale"": ""In Docker Compose, the 'ports' configuration typically maps a port on the host to a port on the container. The 'in' port refers to the internal port within the container, while the 'out' port refers to the external port on the host. These ports do not need to be the same for the service to function correctly; they can be different. It is common to map the same port on the host for simplicity. However, this is not a requirement, and the service would still function if the ports were different. This is similar to the first example provided, where the internal and external ports do not need to be the same for the service to function correctly."",
	""isDependency"": false
}"
Port Mapping,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'ports' configuration in docker-compose.yml is used to map a port on the host to a port on the container, making the service accessible from outside the container. The 'EXPOSE' instruction in Dockerfile is used to indicate that the container listens on the specified network ports at runtime. While 'EXPOSE' is more of a documentation feature and does not publish the port to the host, the 'ports' configuration in docker-compose.yml actually publishes the port. For the 'registry' service to be accessible on port 8761 from outside the container, the 'ports' configuration in docker-compose.yml must map this port. The 'EXPOSE' instruction in Dockerfile does not need to match the 'ports' configuration in docker-compose.yml for the service to function correctly, but it is a good practice to document the exposed ports. Therefore, there is no strict value-equality dependency between these configurations.","in docker-compose.yml,

What is the difference between in following ports notations?

    
    
    ports:
       - ""5000:5000""
    

resp:

    
    
    ports:
       - ""8080""
    

or no ports at all.

For example in following docker-compose.yml, the mongodb service must be
exposing a port to communicate with node service, but no port is specified

    
    
    services:
    
      node:
        build:
          context: .
          dockerfile: node.dockerfile
        ports:
          - ""3000:3000""
        networks:
          - nodeapp-network
        depends_on: 
          - mongodb
    
      mongodb:
        image: mongo
        networks:
          - nodeapp-network
    
    networks:
      nodeapp-network:
        driver: bridge
    

_source:<https://github.com/DanWahlin/NodeExpressMongoDBDockerApp>_

However in these docker-compose.yml, there are ports awlays specified with
either `27017:27017` or `8080` notation.

    
    
    services:
        nginx:
          container_name: nginx
          image: ${DOCKER_ACCT}/nginx
          build: 
            context: .
            dockerfile: .docker/nginx.${APP_ENV}.dockerfile
          links:
            - node1:node1
            - node2:node2
            - node3:node3
          ports:
            - ""80:80""
            - ""443:443""
          networks:
            - codewithdan-network
    
        node1:
          container_name: node-codewithdan-1
          image: ${DOCKER_ACCT}/node-codewithdan
          build: 
            context: .
            dockerfile: .docker/node-codewithdan.${APP_ENV}.dockerfile
          ports:
          - ""8080""
          volumes:
            - .:/var/www/codewithdan
          working_dir: /var/www/codewithdan
          env_file:
            - ./.docker/env/app.${APP_ENV}.env
          depends_on:
            - mongo
            - redis
          networks:
            - codewithdan-network
    
        node2:
          container_name: node-codewithdan-2
          image: ${DOCKER_ACCT}/node-codewithdan
          build: 
            context: .

According to the [docker-compose
reference](https://docs.docker.com/compose/compose-file/),

# [Ports](https://docs.docker.com/compose/compose-file/compose-file-v3/#ports)
is defined as:

> Expose **ports**. Either specify both ports (HOST:CONTAINER), or just the
> container port (a random host port will be chosen).

  * Ports mentioned in docker-compose.yml will be shared among different services started by the docker-compose.
  * Ports will be exposed to the host machine to a random port or a given port.

My `docker-compose.yml` looks like:

    
    
    mysql:
      image: mysql:5.7
      ports:
        - ""3306""
    

If I do `docker-compose ps`, it will look like:

    
    
      Name                     Command               State            Ports
    -------------------------------------------------------------------------------------
      mysql_1       docker-entrypoint.sh mysqld      Up      0.0.0.0:32769->3306/tcp
    

# [Expose](https://docs.docker.com/compose/compose-file/compose-
file-v3/#expose) is defined as:

> Expose ports without publishing them to the host machine - they’ll only be
> accessible to linked services. Only the internal port can be specified.

Ports are not exposed to host machines, only exposed to other services.

    
    
    mysql:
      image: mysql:5.7
      expose:
        - ""3306""
    

If I do `docker-compose ps`, it will look like:

    
    
      Name                  Command             State    Ports
    ---------------------------------------------------------------
     mysql_1      docker-entrypoint.sh mysqld   Up      3306/tcp
    

## Edit

In recent versions of Dockerfile, `EXPOSE`
[typically](https://docs.docker.com/engine/reference/builder/#expose) doesn't
have any operational impact anymore, it is just informative. ([see
also](https://stackoverflow.com/a/65785558/5075502))

[Share](/a/40801773 ""Short permalink to this answer"")

[Improve this answer](/posts/40801773/edit)

Follow

[edited Feb 14 at 5:15](/posts/40801773/revisions ""show all edits to this
post"")

[!

](/questions/35548843/does-ports-on-docker-compose-yml-have-the-
same-effect-as-expose-on-dockerfile)

[ 3 ](/q/37770718 ""Question score \(upvotes - downvotes\)"") [How do I
configure docker compose to expose ports correctly?](/questions/37770718/how-
do-i-configure-docker-compose-to-expose-ports-correctly)

[ 17 ](/q/45782600 ""Question score \(upvotes - downvotes\)"") [Difference
between using ""expose"" in dockerfile and docker-compose
file?](/questions/45782600/difference-between-using-expose-in-dockerfile-and-
docker-compose-file)

[ 6 ](/q/52481836 ""Question score \(upvotes - downvotes\)"") [How ports
notation in docker compose service works?](/questions/52481836/how-ports-
notation-in-docker-compose-service-works)

[ 6 ](/q/54411378 ""Question score \(upvotes - downvotes\)"") [Does docker
EXPOSE refer to the container port or the host
port?](/questions/54411378/does-docker-expose-refer-to-the-container-port-or-
the-host-port)

[ 0 ](/q/68509085 ""Question score \(upvotes - downvotes\)"") [Do I have to
expose the port if I am using the ports config?](/questions/68509085/do-i-
have-to-expose-the-port-if-i-am-using-the-ports-config)

[ 0 ](/q/69135125 ""Question score \(upvotes - downvotes\)"") [Docker expose
port internals](/questions/69135125/docker-expose-port-internals)

[ 2 ](/q/69594430 ""Question score \(upvotes - downvotes\)"") [What is the
difference between target and published ports into docker-compose.yml
container definition?

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 9 ](/q/29564268 ""Question score \(upvotes - downvotes\)"") [Understanding
ports and links in docker compose](/questions/29564268/understanding-ports-
and-links-in-docker-compose)

[ 3 ](/q/37770718 ""Question score \(upvotes - downvotes\)"") [How do I
configure docker compose to expose ports correctly?](/questions/37770718/how-
do-i-configure-docker-compose-to-expose-ports-correctly)

[ 982 ](/q/40801772 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ports and expose in docker-
compose?](/questions/40801772/what-is-the-difference-between-ports-and-expose-
in-docker-compose)

[ 1 ](/q/41683032 ""Question score \(upvotes - downvotes\)"") [Is second value
required when mapping ports in docker-compose file?](/questions/41683032/is-
second-value-required-when-mapping-ports-in-docker-compose-file)

[ 28 ](/q/44206827 ""Question score \(upvotes - downvotes\)"") [Why do ports
need to be specified twice separated by a colon?

In this case, youâre using the same `HOST_PORT:CONTAINER_PORT`
used in the `docker run` command.

  2. Open a terminal and navigate to the directory you created in the previous step.

  3. Use the `docker compose up` command to start the application.

  4. Open your browser to <http://localhost:8080>[](http://localhost:8080).

## Additional resources

If youâd like to dive in deeper on this topic, be sure to check out the
following resources:

  * [`docker container port` CLI reference](/reference/cli/docker/container/port/)
  * [Published ports](/network/#published-ports)

## Next steps

Now that you understand how to publish and expose ports, you're ready to learn
how to override the container defaults using the `docker run` command.

[Overriding container defaults](https://docs.docker.com/guides/docker-
concepts/running-containers/overriding-container-defaults/)

[Edit this
page](https://github.com/docker/docs/edit/main/content/guides/docker-
concepts/running-containers/publishing-ports.md)

[Request
changes](https://github.com/docker/docs/issues/new?template=doc_issue.yml&location=https%3a%2f%2fdocs.docker.com%2fguides%2fdocker-
concepts%2frunning-containers%2fpublishing-ports%2f&labels=status%2Ftriage)

Table of contents

  * Explanation
    * Publishing ports
    * Publishing to ephemeral ports
    * Publishing all ports
  * Try it out
    * Use the Docker CLI
    * Use Docker Compose
  * Additional resources
  * Next steps

[Product offerings](https://www.docker.com/)
[Pricing](https://www.docker.com/pricing/) [About
us](https://www.docker.com/company/)
[Support](https://www.docker.com/support/)
[Contribute](https://github.com/docker/docs/blob/main/CONTRIBUTING.md)

* * *

Copyright Â© 2013-2024 Docker Inc. All rights reserved.",piggymetrics,services.registry.ports.out,PORT,8761,docker-compose,docker-compose.yml,EXPOSE,PORT,8761,docker,registry/Dockerfile,Port,Port,"{
	""plan"": ""1. Identify the purpose of the 'services.registry.ports.out' configuration option in the docker-compose.yml file. 2. Identify the purpose of the 'EXPOSE' configuration option in the registry/Dockerfile. 3. Determine if the values of these configuration options (both set to 8761) are required to be identical for the services to function correctly. 4. Compare this scenario with the provided examples to see if the value equality indicates a dependency. 5. Conclude whether a dependency exists based on the analysis."",
	""rationale"": ""The 'services.registry.ports.out' option in docker-compose.yml specifies the external port (8761) exposed by the registry service container. The 'EXPOSE' option in the registry/Dockerfile indicates that the container will listen on port 8761 internally. The value equality (8761) suggests that the registry service is expected to be accessible on this specific port. This setup shows a dependency because the external port exposed by the registry service in docker-compose.yml must match the internal port specified in the Dockerfile for the service to be accessible correctly."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FN,True,"The configuration option 'finalName' in both POM files uses the placeholder '${project.name}', which suggests that the actual value is derived from the 'project.name' property. If 'project.name' is defined in a shared parent POM, then both configurations will inherently have the same value, indicating a dependency. However, if 'project.name' is defined separately in each POM file, the values could differ, and there would be no dependency. The dependency is only present if the build process requires 'project.name' to be identical in both configurations.","apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <file>${project.build.finalName}.${project.packaging}</file>
                            <generatePom>false</generatePom>
                            <pomFile>pom.xml</pomFile>
                            <version>${my.version}</version>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
    </plugins>
    </build>
    

**Commnad** `mvn clean install`

**Output**

    
    
    [INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ base ---
    [INFO] Building jar: D:\dev\project\base\target\my-base-project.jar
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install (default-install) @ base ---
    [INFO] Installing D:\dev\project\base\target\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.pom
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install-file (default) @ base ---
    [INFO] Installing D:\dev\project\base\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.pom
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    

  
[Reference](http://maven.

The `build-info` goal generates such file
with the coordinates of the project and the build time. It also allows you to
add an arbitrary number of additional properties, as shown in the following
example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<executions>
    					<execution>
    						<goals>
    							<goal>build-info</goal>
    						</goals>
    						<configuration>
    							<additionalProperties>
    								<encoding.source>UTF-8</encoding.source>
    								<encoding.reporting>UTF-8</encoding.reporting>
    								<java.source>${maven.compiler.source}</java.source>
    								<java.target>${maven.compiler.target}</java.target>
    							</additionalProperties>
    						</configuration>
    					</execution>
    				</executions>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will generate a `build-info.properties` at the expected
location with four additional keys. Note that `maven.compiler.source` and
`maven.compiler.target` are expected to be regular properties available in the
project. They will be interpolated as you would expect.

### 9.1. `spring-boot:build-info`

`org.springframework.boot:spring-boot-maven-plugin:2.3.0.RELEASE`

Generate a `build-info.properties` file based the content of the current
`MavenProject`.

#### 9.1.1. Optional parameters

Name | Type | Default  
---|---|---  
additionalProperties | `Map` |   
outputFile | `File` | `${project.build.outputDirectory}/META-INF/build-info.properties`  
time | `String` |   
  
#### 9.1.2. Parameter details

##### `additionalProperties`

Additional properties to store in the build-info.properties. Each entry is
prefixed by `build.` in the generated build-info.properties.

Alternative layouts implementations can be provided by
3rd parties.

Name | `layoutFactory`  
---|---  
Type | `org.springframework.boot.loader.tools.LayoutFactory`  
Default value |   
User property |   
Since | `1.5.0`  
  
##### `mainClass`

The name of the main class. If not specified the first compiled class found
that contains a 'main' method will be used.

Name | `mainClass`  
---|---  
Type | `java.lang.String`  
Default value |   
User property |   
Since | `1.0.0`  
  
##### `skip`

Skip the execution.

Name | `skip`  
---|---  
Type | `boolean`  
Default value | `false`  
User property | `spring-boot.build-image.skip`  
Since | `2.3.0`  
  
##### `sourceDirectory`

Directory containing the JAR.

Name | `sourceDirectory`  
---|---  
Type | `java.io.File`  
Default value | `${project.build.directory}`  
User property |   
Since | `2.3.0`  
  
### 6.4. Examples

#### 6.4.1. Custom Image Builder

If you need to customize the builder used to create the image, configure the
plugin as shown in the following example:

    
    
    <project>
    	<build>
    		<plugins>
    			<plugin>
    				<groupId>org.springframework.boot</groupId>
    				<artifactId>spring-boot-maven-plugin</artifactId>
    				<version>2.3.0.RELEASE</version>
    				<configuration>
    					<image>
    						<builder>mine/java-cnb-builder</builder>
    					</image>
    				</configuration>
    			</plugin>
    		</plugins>
    	</build>
    </project>

This configuration will use a builder image with the name `mine/java-cnb-
builder` and the tag `latest`.

The builder can be specified on the command line as well, as shown in this
example:

    
    
    $ mvn spring-boot:build-image -Dspring-boot.build-image.builder=mine/java-cnb-builder

#### 6.4.2. Builder Configuration

If the builder exposes configuration options using environment variables,
those can be set using the `env` attributes.

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.",piggymetrics,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName,NAME,${project.name},maven,registry/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName,NAME,${project.name},maven,turbine-stream-service/pom.xml,Multi-Maven-Modules,Maven Properties,"{
	""plan"": ""1. Identify the configuration options in question: project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName in registry/pom.xml and turbine-stream-service/pom.xml. 2. Understand the context and purpose of the finalName configuration option in Maven. 3. Determine if the value of finalName (${project.name}) in both configurations is derived from a common source or if it is independently set. 4. Compare this scenario with the provided examples to see if there is a similar pattern of dependency. 5. Conclude whether the finalName configuration options in both files depend on each other based on value-equality."",
	""rationale"": ""The configuration option project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName with the value ${project.name} in both registry/pom.xml and turbine-stream-service/pom.xml is set to the same value, which is a placeholder for the project's name. This value is typically derived from the project's name property, which is a common property in Maven projects. Since both configurations are using the same placeholder, they are not independently set but rather depend on the same project property. This is similar to the example where finalName depends on artifactId, as both are derived from a common source. Therefore, the finalName configuration options in both files depend on each other due to their reliance on the same project property."",
	""isDependency"": true
}"
Ambiguous Option Values,gpt-4o-2024-05-13,config2,9.0,FP,False,"The 'project.modules.module' configuration option in a Maven multi-module project typically lists the modules that are part of the build. The 'project.name' configuration option in a module's 'pom.xml' file specifies the name of that module. If the parent 'pom.xml' uses 'project.modules.module' to include 'turbine-stream-service', it is likely that the value must match the 'project.name' in 'turbine-stream-service/pom.xml' to correctly reference and include the module in the build process. This indicates a value-equality dependency.","[Maven multi
module dependency sharing](/questions/30027989/maven-multi-module-dependency-
sharing)

[ 3 ](/q/45655128 ""Question score \(upvotes - downvotes\)"") [In a Maven multi-
module project, how to specify dependency needed in more than one
module?](/questions/45655128/in-a-maven-multi-module-project-how-to-specify-
dependency-needed-in-more-than-o)

[ 3 ](/q/51438402 ""Question score \(upvotes - downvotes\)"") [Maven dependency
resolution between modules during a multi-module project
build](/questions/51438402/maven-dependency-resolution-between-modules-during-
a-multi-module-project-build)

[ 5 ](/q/55433668 ""Question score \(upvotes - downvotes\)"") [Maven multi-
module dependency resolution](/questions/55433668/maven-multi-module-
dependency-resolution)

[ 0 ](/q/64756878 ""Question score \(upvotes - downvotes\)"") [Handling
interdependencies in maven multi-module project](/questions/64756878/handling-
interdependencies-in-maven-multi-module-project)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Citing specific R functions in publications? ](https://academia.stackexchange.com/questions/212287/citing-specific-r-functions-in-publications)
  * [ Is the 7809 bad for a DC motor? ](https://electronics.stackexchange.com/questions/719671/is-the-7809-bad-for-a-dc-motor)
  * [ Dual boot - 2 windows instances - add EFI to secondary drive ](https://superuser.com/questions/1849393/dual-boot-2-windows-instances-add-efi-to-secondary-drive)
  * [ Is ""secco"" really used in piano music? ](https://music.stackexchange.com/questions/136827/is-secco-really-used-in-piano-music)
  * [ Was supposed to be co-signer on auto for daughter but I'm listed the buyer ](https://money.stackexchange.com/questions/163372/was-supposed-to-be-co-signer-on-auto-for-daughter-but-i-m-listed-the-buyer)
  * [ Wait, ASCII was 128 characters all along?

](/questions/14694139/how-to-resolve-dependencies-between-modules-within-
multi-module-project)

[ 4  Sharing dependencies between maven modules ](/questions/18660066/sharing-
dependencies-between-maven-modules)

[ 0  Maven dependency scopes for multi-module project
](/questions/18681692/maven-dependency-scopes-for-multi-module-project)

[ 0  How does Maven handle dependencies between modules?
](/questions/21415873/how-does-maven-handle-dependencies-between-modules)

[ 2  Maven multi module dependency sharing ](/questions/30027989/maven-multi-
module-dependency-sharing)

[ 1  Standard structure for multi-module java maven project
](/questions/38801423/standard-structure-for-multi-module-java-maven-project)

[ 3  In a Maven multi-module project, how to specify dependency needed in more
than one module? ](/questions/45655128/in-a-maven-multi-module-project-how-to-
specify-dependency-needed-in-more-than-o)

Load 7 more related questions  Show fewer related questions

##  0

Sorted by:  [ Reset to default ](/questions/58268204/how-should-dependencies-
between-modules-be-declared-in-a-maven-multi-module-
proj?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

##  Know someone who can answer?

Linked

[ 575 ](/q/1114026 ""Question score \(upvotes - downvotes\)"") [Maven Modules +
Building a Single Specific Module](/questions/1114026/maven-modules-building-
a-single-specific-module?noredirect=1)

[ 4 ](/q/12942782 ""Question score \(upvotes - downvotes\)"") [""mvn clean
generate-sources"" could not resolve dependencies](/questions/12942782/mvn-
clean-generate-sources-could-not-resolve-dependencies?noredirect=1)

[ 2 ](/q/57213350 ""Question score \(upvotes - downvotes\)"") [Docker and Maven
dependency offline](/questions/57213350/docker-and-maven-dependency-
offline?noredirect=1)

#### Related

[ 2 ](/q/3435130 ""Question score \(upvotes - downvotes\)"") [Aggregate
Dependencies in a Multi-Module Maven Project](/questions/3435130/aggregate-
dependencies-in-a-multi-module-maven-project)

[ 3 ](/q/4570229 ""Question score \(upvotes - downvotes\)"") [maven share
dependencies among different modules](/questions/4570229/maven-share-
dependencies-among-different-modules)

[ 1 ](/q/21305763 ""Question score \(upvotes - downvotes\)"") [Dependency
management does not work for multi-module
project](/questions/21305763/dependency-management-does-not-work-for-multi-
module-project)

[ 0 ](/q/21398391 ""Question score \(upvotes - downvotes\)"") [dealing with
Dependencies for a multimodule Maven Project](/questions/21398391/dealing-
with-dependencies-for-a-multimodule-maven-project)

[ 1 ](/q/22578814 ""Question score \(upvotes - downvotes\)"") [Resolving
dependencies ad-hoc in multi-module maven
project](/questions/22578814/resolving-dependencies-ad-hoc-in-multi-module-
maven-project)

[ 2 ](/q/30027989 ""Question score \(upvotes - downvotes\)"") [Maven multi
module dependency sharing](/questions/30027989/maven-multi-module-dependency-
sharing)

[ 3 ](/q/45655128 ""Question score \(upvotes - downvotes\)"") [In a

[SpaceTrucker's user
avatar](https://www.gravatar.com/avatar/c47d1f7544a8c4a1bb7a41d511f53604?s=64&d=identicon&r=PG)](/users/1466267/spacetrucker)

[SpaceTrucker](/users/1466267/spacetrucker)SpaceTrucker

13.4k66 gold badges6161 silver badges100100 bronze badges

1

  * 1

In the end is does not really matter which style you use...just use it
consistently...I prefer to use the one with using the version via
`${project.version}` and not using dependencyManagement it shows easier which
dependency is from within the project (in particular in larger multi module
builds) identified by the `<version>${project.version}</version>`...

- [khmarbaise](/users/296328/khmarbaise ""95,973 reputation"")

Commented Oct 7, 2019 at 12:19

Add a comment  | 

Related questions

[ 3  maven share dependencies among different modules
](/questions/4570229/maven-share-dependencies-among-different-modules)

[ 0  How are dependencies shared in a maven multi-module project?
](/questions/11254690/how-are-dependencies-shared-in-a-maven-multi-module-
project)

[ 0  Maven-2: Module depends upon another within same project (Two questions)
](/questions/14488627/maven-2-module-depends-upon-another-within-same-project-
two-questions)

Related questions

[ 3  maven share dependencies among different modules
](/questions/4570229/maven-share-dependencies-among-different-modules)

[ 0  How are dependencies shared in a maven multi-module project?
](/questions/11254690/how-are-dependencies-shared-in-a-maven-multi-module-
project)

[ 0  Maven-2: Module depends upon another within same project (Two questions)
](/questions/14488627/maven-2-module-depends-upon-another-within-same-project-
two-questions)

[ 24  How to resolve dependencies between modules within multi-module project?

test.skip=true [INFO] Scanning for projects. [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO]  [INFO] tdk-cloud [INFO] tdk-core [INFO] tdk-batch [INFO] tdk-web [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-cloud 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-cloud --- [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-core 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.h2database:h2:jar:1.4.194 is missing, no dependency information available [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-core --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-core --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO] Copying 1 resource [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-core --- [INFO] Changes detected - recompiling the module!",piggymetrics,project.modules.module,NAME,turbine-stream-service,maven,pom.xml,project.name,NAME,turbine-stream-service,maven,turbine-stream-service/pom.xml,Generic Names,Names,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modules.module' in the parent pom.xml and 'project.name' in the turbine-stream-service/pom.xml. \n2. Understand the role of each configuration option within the Maven multi-module project. \n3. Compare the values of these configuration options to determine if they are identical. \n4. Evaluate whether the identical values indicate a dependency or if they are merely consistent for organizational purposes. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Formulate a rationale based on the analysis and examples. \n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration option 'project.modules.module' with the value 'turbine-stream-service' in the parent pom.xml defines a module within the Maven multi-module project. The configuration option 'project.name' with the same value 'turbine-stream-service' in the turbine-stream-service/pom.xml specifies the name of the Maven project for that specific module. The identical values are used to maintain consistency and organization within the project structure, ensuring that the module name in the parent POM matches the project name in the module's POM. This alignment is a common practice in Maven multi-module projects to avoid confusion and maintain clarity. However, this does not indicate a dependency, as the values are identical for organizational purposes rather than functional interdependence."",
	""isDependency"": false
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The 'modelVersion' configuration option in Maven POM files is a mandatory field that specifies the version of the POM model being used. According to the provided information, the only supported value for 'modelVersion' is '4.0.0'. This means that all Maven POM files must have 'modelVersion' set to '4.0.0' for them to be valid. Since this value is mandated by Maven and there are no other supported values, the 'modelVersion' values in different POM files are not dependent on each other. They are simply required to be the same due to Maven's specifications, not because of any inter-file dependency.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Skip to content [Valuable Tech Notes](https://itecnotes.com/)

  * [Electrical](https://itecnotes.com/category/electrical/ ""Electrical"")
  * [WebApp](https://itecnotes.com/category/webapp/ ""WebApp"")
  * [Magento](https://itecnotes.com/category/magento/ ""Magento"")
  * [Software](https://itecnotes.com/category/software/ ""Software"")
  * [Network](https://itecnotes.com/category/network/ ""Network"")
  * [Server](https://itecnotes.com/category/server/ ""Server"")

# Maven - Why modelVersion of pom.xml is necessary and always set to 4.0.0

maven

I have noticed that Maven's `<modelVersion></modelVersion>` of pom.xml is
always set to 4.0.0.

Can you please help me understand what is the importance of this tag and why
it should be set to 4.0.0?

#### __Best Answer

It is always set to 4.0.0 in Maven 2 and 3, because, at present, there is no
other model.

> Notice that `modelVersion` contains 4.0.0. That is currently the only
> supported POM version, and is always required.
> [[source](https://maven.apache.org/pom.html#quick-overview)]

But it wouldn't necessarily _need_ to always be set to 4.0.0 if there was
another version of the model. A POM has to comply with a model. Let's say
Maven 4 comes up with model 4.1. If you write your pom to comply with 4.1, it
wouldn't be compatible with Maven 3 and model 4.0.0.

It's defined as a mandatory, possibly to enforce a specific XML model in case
new models are defined.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.

You'd just have to apply all three rules:

  * Specify in every child POM who their parent POM is.
  * Change the parent POMs packaging to the value ""pom"" .
  * Specify in the parent POM the directories of its modules (children POMs)

[[top]](./introduction-to-the-pom.html)

### Example 5

#### The Scenario

Given the previous original artifact POMs again,

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

and this **directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- parent
         `-- pom.xml

#### The Solution

To do both project inheritance and aggregation, you only have to apply all
three rules.

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>../my-module</module>
      </modules>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>com.mycompany.app</groupId>
        <artifactId>my-app</artifactId>
        <version>1</version>
        <relativePath>../parent/pom.xml</relativePath>
      </parent>
    
      <artifactId>my-module</artifactId>
    </project>

**NOTE:** Profile inheritance the same inheritance strategy as used for the
POM itself.",piggymetrics,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,monitoring/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,turbine-stream-service/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Understand the role of the 'project.modelVersion' configuration option in a Maven project. \n2. Review the provided information and examples to see how 'project.modelVersion' is used and its significance. \n3. Note that 'project.modelVersion' is always set to 4.0.0 in Maven 2 and 3 because it is the only supported model version. \n4. Recognize that this setting must be consistent across all modules in a Maven project to ensure compatibility. \n5. Compare the 'project.modelVersion' in monitoring/pom.xml and turbine-stream-service/pom.xml to see if they both use the value 4.0.0. \n6. Determine if the consistency of 'project.modelVersion' across these modules creates a dependency based on value-equality."",
	""rationale"": ""The 'project.modelVersion' in a Maven project specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0, and this is required across all modules to ensure compatibility. Therefore, the 'project.modelVersion' must be consistent across all modules, creating a dependency based on value-equality. Given that both monitoring/pom.xml and turbine-stream-service/pom.xml use the value 4.0.0 for 'project.modelVersion', they are dependent on each other to maintain this consistency."",
	""isDependency"": true
}"
Ambiguous Option Values,gpt-4o-2024-05-13,config2,7.0,FP,False,"The 'project.artifactId' typically defines the name of the artifact (e.g., JAR file) that will be produced by the Maven build. The 'project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName' specifies the final name of the built artifact. If the 'spring-boot-maven-plugin' is configured to use 'finalName' as the artifact name, then it is likely that these two values need to be the same to ensure consistency in the naming of the output artifact. However, without explicit documentation or references indicating that these values must be identical, it is not certain that a dependency exists.","apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.3.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <file>${project.build.finalName}.${project.packaging}</file>
                            <generatePom>false</generatePom>
                            <pomFile>pom.xml</pomFile>
                            <version>${my.version}</version>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
    </plugins>
    </build>
    

**Commnad** `mvn clean install`

**Output**

    
    
    [INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ base ---
    [INFO] Building jar: D:\dev\project\base\target\my-base-project.jar
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install (default-install) @ base ---
    [INFO] Installing D:\dev\project\base\target\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\1.0.0.SNAPSHOT\base-1.0.0.SNAPSHOT.pom
    [INFO]
    [INFO] --- maven-install-plugin:2.3.1:install-file (default) @ base ---
    [INFO] Installing D:\dev\project\base\my-base-project.jar to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.jar
    [INFO] Installing D:\dev\project\base\pom.xml to H:\dev\.m2\repository\org\opensource\base\4.0.8.8\base-4.0.8.8.pom
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    

  
[Reference](http://maven.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.",piggymetrics,project.artifactId,NAME,auth-service,maven,auth-service/pom.xml,project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName,NAME,auth-service,maven,auth-service/pom.xml,Generic Names,Names,"{
	""plan"": ""1. Identify the configuration options in question: project.artifactId and project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName, both located in auth-service/pom.xml. \n2. Understand the roles of these configuration options within a Maven project. \n3. Compare the values of these options to determine if they are identical. \n4. Evaluate if the value equality indicates a dependency, based on the roles and typical usage of these options. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""The configuration option project.artifactId with the value auth-service in auth-service/pom.xml specifies the unique identifier for the artifact within the Maven project. The configuration option project.build.plugins.plugin_spring-boot-maven-plugin.configuration.finalName with the same value auth-service in the same pom.xml specifies the final name of the built artifact as configured by the Spring Boot Maven Plugin. Typically, the finalName is often derived from or set to match the artifactId to ensure consistency in naming the built artifact. In this case, the finalName depends on the artifactId because the artifactId is a more fundamental identifier within the Maven project, and finalName is typically configured to reflect the artifactId."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The 'project.parent_pig.artifactId' in pig-boot/pom.xml and 'project.artifactId' in pom.xml both have the value 'pig'. In Maven, the 'artifactId' is used to uniquely identify a project within a group. The 'parent' section in a child POM typically references the parent POM's groupId, artifactId, and version to inherit its configurations. However, there is no inherent requirement in Maven that the 'artifactId' of a parent must match the 'artifactId' of the child. The identical values in this case are likely coincidental and do not indicate a dependency based on value-equality.","](/questions/15631436/missing-
artifactid-in-pom-and-error-in-find-parent)

[ 7 ](/q/26503589 ""Question score \(upvotes - downvotes\)"") [Duplicate
artifactId in child pom](/questions/26503589/duplicate-artifactid-in-child-
pom)

[ 5 ](/q/26858565 ""Question score \(upvotes - downvotes\)"") [Unable to resolve
${project.version} in child pom.xml from parent
pom.xml](/questions/26858565/unable-to-resolve-project-version-in-child-pom-
xml-from-parent-pom-xml)

[ 1 ](/q/30732384 ""Question score \(upvotes - downvotes\)"") [maven dependency
management from parent pom overrides
${project.version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 45 ](/q/38594036 ""Question score \(upvotes - downvotes\)"") [difference of
artifactId and name in maven POM](/questions/38594036/difference-of-
artifactid-and-name-in-maven-pom)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 3 ](/q/45946539 ""Question score \(upvotes - downvotes\)"") [Artifactory/JFrog
is producing the wrong parent artifactId in generated
POM](/questions/45946539/artifactory-jfrog-is-producing-the-wrong-parent-
artifactid-in-generated-pom)

[ 0 ](/q/61676718 ""Question score \(upvotes - downvotes\)"") [POM parent
artifact id same to original artifact is](/questions/61676718/pom-parent-
artifact-id-same-to-original-artifact-is)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Are the hangers on these joists sized and installed properly?

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

[Noarth's user
avatar](https://www.gravatar.com/avatar/e4f748f0cfad04663fcb9209c53eabec?s=64&d=identicon&r=PG)](/users/428828/noarth)

[Noarth](/users/428828/noarth)Noarth

4,07177 gold badges2323 silver badges1616 bronze badges

0

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/3724415/maven-artifact-and-
groupid-naming?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

288

[](/posts/3724851/timeline ""Show activity on this post."")

Weirdness is highly subjective, I just suggest to follow the official
recommendation:

> ### [Guide to naming conventions on groupId, artifactId and
> version](http://maven.apache.org/guides/mini/guide-naming-conventions.html)
>
>   * **`groupId`** will identify your project uniquely across all projects,
> so we need to enforce a naming schema. It has to follow the package name
> rules, what means that has to be at least as a domain name you control, and
> you can create as many subgroups as you want. [Look at More information
> about package
> names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7).
>
> eg. `org.apache.maven`, `org.apache.commons`
>
> A good way to determine the granularity of the groupId is to use the project
> structure. That is, if the current project is a multiple module project, it
> should append a new identifier to the parent's groupId.
>
> eg. `org.apache.maven`, `org.apache.maven.plugins`,
> `org.apache.maven.reporting`
>
>   * **`artifactId`** is the name of the jar without version. If you created
> it then you can choose whatever name you want with lowercase letters and no
> strange symbols. If it's a third party jar you have to take the name of the
> jar as it's distributed.
>
> eg.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

/developers/index.html ""Maven Developer Centre"")
  * [Maven Core ITs](./././core-its/index.html ""Maven Core ITs"")
  * Project Documentation
  * [Project Information](project-info.html ""Project Information"")
  * [Project Reports](project-reports.html ""Project Reports"")
  * Maven Projects
  * [Maven](././current ""Maven"")
  * [Archetypes](./././archetypes/index.html ""Archetypes"")
  * [Extensions](./././extensions/index.html ""Extensions"")
  * [Parent POMs](./././pom/index.html ""Parent POMs"")
  * [Plugins](./././plugins/index.html ""Plugins"")
  * [Skins](./././skins/index.html ""Skins"")
  * []()
    * [Archetype](./././archetype/index.html ""Archetype"")
    * [Artifact Resolver](./././resolver/index.html ""Artifact Resolver"")
    * [Doxia](./././doxia/index.html ""Doxia"")
    * [Indexer](./././maven-indexer/index.html ""Indexer"")
    * [JXR](./././jxr/index.html ""JXR"")
    * [Plugin Testing](./././plugin-testing/index.html ""Plugin Testing"")
    * [Plugin Tools](./././plugin-tools/index.html ""Plugin Tools"")
    * [Resource Bundles](./././apache-resource-bundles/index.html ""Resource Bundles"")
    * [SCM](./././scm/index.html ""SCM"")
    * [Shared Components](./././shared/index.html ""Shared Components"")
    * [Surefire](./././surefire/index.html ""Surefire"")
    * [Wagon](./././wagon/index.html ""Wagon"")
  * ASF
  * [How Apache Works](https://www.apache.org/foundation/how-it-works.html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.",pig,project.parent_pig.artifactId,NAME,pig,maven,pig-boot/pom.xml,project.artifactId,NAME,pig,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_pig.artifactId in pig-boot/pom.xml and project.artifactId in pom.xml. \n2. Determine the context and role of each configuration option within the Maven project structure. \n3. Analyze the relationship between the parent artifactId in pig-boot/pom.xml and the artifactId in the root pom.xml. \n4. Compare this relationship with the provided examples to see if a similar dependency exists. \n5. Conclude whether the configuration options depend on each other due to value-equality."",
	""rationale"": ""The configuration option project.parent_pig.artifactId in pig-boot/pom.xml specifies the artifactId of the parent project that pig-boot is inheriting from. The configuration option project.artifactId in the root pom.xml specifies the artifactId of the root project itself. In Maven, a child module (like pig-boot) references its parent module (the root project) using the parent element, which includes the parent's artifactId. This means that the child module's parent artifactId must match the root project's artifactId for the inheritance to work correctly. Therefore, the value of project.parent_pig.artifactId in pig-boot/pom.xml depends on the value of project.artifactId in the root pom.xml."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The 'modelVersion' in a Maven POM file specifies the version of the POM model being used. According to the provided context, the 'modelVersion' should be set to '4.0.0' for Maven projects. This is a standard requirement for Maven POM files and is not specific to any particular project. Therefore, the 'modelVersion' values being the same in pig-common/pig-common-core/pom.xml and pig-register/pom.xml is due to Maven's requirement for POM model versioning, not because of a direct dependency between these two specific projects. Each project independently adheres to the same Maven standard.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",pig,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-core/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-register/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'pig-common/pig-common-core/pom.xml' and 'project.modelVersion' in 'pig-register/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires this version to be consistent across all modules for compatibility.\n4. Determine if the 'project.modelVersion' in 'pig-common/pig-common-core/pom.xml' and 'pig-register/pom.xml' must be identical to ensure compatibility within the Maven build system.\n5. Conclude whether a value-equality dependency exists based on the need for consistency in 'project.modelVersion' across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality. Therefore, the 'project.modelVersion' in 'pig-common/pig-common-core/pom.xml' depends on the 'project.modelVersion' in 'pig-register/pom.xml' and vice versa."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The groupId in Maven is used to uniquely identify a project or a set of related projects. In this case, both configuration options have the same groupId 'com.pig4cloud', which suggests that they belong to the same organization or project namespace. However, having the same groupId does not necessarily imply a functional dependency between the two configuration options. It is common for different modules or dependencies within the same organization to share the same groupId without being directly dependent on each other. The provided context does not indicate any specific functional dependency that requires these two configuration options to have identical values. Therefore, the identical values are likely coincidental and do not indicate a necessary dependency.","- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",pig,project.dependencyManagement.dependencies.dependency_pig-common-mybatis.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_pig-common-xss.groupId,NAME,com.pig4cloud,maven,pig-upms/pig-upms-biz/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencyManagement.dependencies.dependency_pig-common-mybatis.groupId in pig-common/pig-common-bom/pom.xml and project.dependencies.dependency_pig-common-xss.groupId in pig-upms/pig-upms-biz/pom.xml. 2. Understand the context of each configuration option: - The first option is within the dependencyManagement section of the pig-common-bom module, which is used to manage versions of dependencies across multiple modules. - The second option is within the dependencies section of the pig-upms-biz module, which specifies the dependencies required by this module. 3. Compare the provided examples to see if they are similar to the current scenario: - Example 1 shows a dependency due to project inheritance where submodules inherit the artifactId from the parent module. - Example 2 shows a dependency where a specific module needs to specify the same groupId used in the project to identify all modules. 4. Determine if the groupId values in the current scenario must be identical for the project to function correctly. 5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The groupId in Maven is used to uniquely identify a project across all projects. In this case, both configuration options specify the groupId 'com.pig4cloud', which is used to identify the modules within the pig project. The pig-common-bom module manages the versions of dependencies across multiple modules, including pig-common-mybatis, while the pig-upms-biz module specifies its dependencies, including pig-common-xss. Since both modules are part of the same project and need to be identified under the same groupId, the configuration options depend on each other due to value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The groupId in a Maven project typically represents the organization or group that produces the project. The project.parent_pig.groupId in pig-upms/pom.xml and project.dependencies.dependency_pig-common-core.groupId in pig-visual/pig-codegen/pom.xml both have the value 'com.pig4cloud'. This suggests that both the parent project and the dependency belong to the same organization or group. However, this does not necessarily imply a value-equality dependency. The groupId values being the same is more likely a coincidence due to organizational naming conventions rather than a strict requirement for the project to function correctly. Therefore, the configuration options do not depend on each other based on value-equality.","(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.test</groupId>
      <artifactId>use</artifactId>
      <version>1.0.0</version>
      <packaging>jar</packaging>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>bom</artifactId>
            <version>1.0.0</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project1</artifactId>
        </dependency>
        <dependency>
          <groupId>com.test</groupId>
          <artifactId>project2</artifactId>
        </dependency>
      </dependencies>
    </project>
    

Finally, when creating projects that import dependencies, beware of the
following:

  * Do not attempt to import a POM that is defined in a submodule of the current POM. Attempting to do that will result in the build failing since it won't be able to locate the POM.
  * Never declare the POM importing a POM as the parent (or grandparent, etc) of the target POM. There is no way to resolve the circularity and an exception will be thrown.
  * When referring to artifacts whose POMs have transitive dependencies, the project needs to specify versions of those artifacts as managed dependencies. Not doing so results in a build failure since the artifact may not have a version specified. (This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced.

build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring-boot-admin.version>3.3.2</spring-boot-admin.version>
        <spring.authorization.version>1.3.1</spring.authorization.version>
        <screw.version>0.0.3</screw.version>
        <captcha.version>2.2.3</captcha.version>
        <aws.version>1.12.675</aws.version>
        <velocity.version>2.3</velocity.version>
        <velocity.tool.version>3.1</velocity.tool.version>
        <configuration.version>1.10</configuration.version>
        <jasypt.version>3.0.5</jasypt.version>
        <jaxb.version>4.0.5</jaxb.version>
        <knife4j.version>3.0.5</knife4j.version>
        <swagger.fox.version>3.0.0</swagger.fox.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <docker.plugin.version>0.44.0</docker.plugin.version>
        <docker.host>http://192.168.0.100:2375</docker.host>
        <docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
        <docker.namespace>pig4cloud</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
        <git.commit.plugin>9.0.1</git.commit.plugin>
        <spring.checkstyle.plugin>0.0.41</spring.checkstyle.plugin>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.",pig,project.parent_pig.groupId,NAME,com.pig4cloud,maven,pig-upms/pom.xml,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_pig.groupId in pig-upms/pom.xml and project.dependencies.dependency_pig-common-core.groupId in pig-visual/pig-codegen/pom.xml. 2. Understand the context and purpose of each configuration option: project.parent_pig.groupId specifies the groupId of the parent project for pig-upms, while project.dependencies.dependency_pig-common-core.groupId specifies the groupId of a dependency in pig-visual/pig-codegen. 3. Compare the provided examples to see if they share similar characteristics with the given configuration options. 4. Determine if the configuration options must have identical values to function correctly, based on their roles and relationships within the Maven project structure. 5. Conclude whether a value-equality dependency exists between the two configuration options."",
	""rationale"": ""The project.parent_pig.groupId in pig-upms/pom.xml specifies the groupId of the parent project, which is used to inherit common configurations and dependencies. The project.dependencies.dependency_pig-common-core.groupId in pig-visual/pig-codegen/pom.xml specifies the groupId of a dependency that pig-visual/pig-codegen relies on. While both configuration options share the same groupId value (com.pig4cloud), they serve different purposes: one is for inheritance and the other is for dependency management. The examples provided show dependencies based on project inheritance and groupId consistency within a project. However, in this case, the groupId values being identical is a result of consistent naming conventions within the project rather than a functional dependency. Therefore, the configuration options do not depend on each other due to value-equality."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The groupId in a Maven project is a unique identifier for a project. In this case, both groupIds are 'com.pig4cloud', which suggests they belong to the same organization or project structure. However, Maven does not require the groupId of a parent project to be the same as the groupId of a child project. The groupId is used to uniquely identify the project in a repository, and while it is common practice to keep them consistent for organizational purposes, it is not a technical requirement. Therefore, the identical values of these groupIds do not indicate a dependency based on value-equality; they are likely the same due to organizational naming conventions.","I would like to create a Maven Parent POM file with a groupId of
`com.company.maven`, which gives its children a default groupId of
`com.company`. Is this possible? If so, how can I accomplish this?

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven-2](/questions/tagged/maven-2 ""show questions tagged 'maven-2'"")

[Share](/q/11785587 ""Short permalink to this question"")

[Improve this question](/posts/11785587/edit)

Follow

asked Aug 2, 2012 at 20:53

[![David V's user
avatar](https://www.gravatar.com/avatar/4dd2e81ba25c27e9ee18d547c4761c59?s=64&d=identicon&r=PG)](/users/650176/david-v)

[David V](/users/650176/david-v)David V

11.7k55 gold badges4545 silver badges6969 bronze badges

Add a comment  | 

##  4 Answers 4

Sorted by:  [ Reset to default ](/questions/11785587/specify-different-
groupid-for-parent-pom-than-children?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

[](/posts/11810921/timeline ""Show activity on this post."")

Just create the parent pom like:

    
    
    <project...>
    
      <groupId>com.company.maven</groupId>
      <artifactId>parent</artifactId>
      <version>..</version>
    ...
    </project>
    

and define in the child pom:

    
    
    <project...>
      <parent>
        <groupId>com.company.maven</groupId>
        <artifactId>parent</artifactId>
        <version>..</version>
      </parent>
    
      <groupId>com.company</groupId>
    
    </project>
    

In other words it's possible to do so but i wouldn't do it cause i would have
named the parent ""com.company"" whereas the child ""com.company.maven"".

[Share](/a/11786496 ""Short permalink to this answer"")

[Improve this answer](/posts/11786496/edit)

Follow

answered Aug 2, 2012 at 22:03

[![Andreas Dolk's user
avatar](https://www.gravatar.com/avatar/1dc604233d8a0c48f0884769acb1fb93?s=64&d=identicon&r=PG)](/users/105224/andreas-
dolk)

[Andreas Dolk](/users/105224/andreas-dolk)Andreas Dolk

114k1919 gold badges182182 silver badges269269 bronze badges

Add a comment  | 

0

[](/posts/78315118/timeline ""Show activity on this post."")

In contradiction to the accepted anser **it's in fact possible** , that the
parent POM has a different `groupId` than the child POMs. This is a useful
feature in Maven that allows building a hierarchical project structure with
centrally managed configurations (such as dependencies, plugins, and other
common settings) while allowing individual modules or projects to maintain
their own `groupId`s.

### Example of Parent-Child Configuration in Maven

Here's a simple example to illustrate how a parent POM and child POMs can be
configured with different `groupId`s:

#### Parent POM (`pom.xml` of the parent)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>com.example.parent</groupId>
        <artifactId>parent-project</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>pom</packaging>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <version>4.

12</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    </project>
    

#### Child POM (`pom.xml` of a child module)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.example.parent</groupId>
            <artifactId>parent-project</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
        <groupId>com.example.child</groupId>
        <artifactId>child-module</artifactId>
        <version>1.0-SNAPSHOT</version>
        <packaging>jar</packaging>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </project>
    

### Key Points

  * **Group ID** : The `groupId` of the parent POM and the child POM can be different, which facilitates the organization of large projects where different teams or subprojects might use different naming conventions or repository structures.
  * **Inheritance** : Child POMs inherit settings from the parent POM, including dependencies, plugin configurations, and other specific settings defined in the `dependencyManagement` section.
  * **Overriding** : Child POMs can override certain inheritances (e.g., dependencies and plugins) to meet specific requirements.

This flexibility in configuration allows Maven to be effectively used in
diverse and complex project environments.

[Share](/a/78315118 ""Short permalink to this answer"")

[Improve this answer](/posts/78315118/edit)

Follow

answered Apr 12 at 8:45

[!

[Share](/a/62403691 ""Short permalink to this answer"")

[Improve this answer](/posts/62403691/edit)

Follow

answered Jun 16, 2020 at 7:57

[![Andy's user
avatar](https://www.gravatar.com/avatar/a0368e1783c6c9ac9275fc1473d8ce8f?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/4303072/andy)

[Andy](/users/4303072/andy)Andy

7744 bronze badges

Add a comment  | 

0

[](/posts/72490350/timeline ""Show activity on this post."")

On Maven 3.8.4 and on a windows machine here is what you have to do to inherit
versions from parent pom 1: Create the parent pom as below

    
    
              <groupId>com.example</groupId>
              <artifactId>example</artifactId>
              <packaging>pom</packaging>
              <version>1.0-SNAPSHOT</version>
            
              <modules>
                <module>module-1</module>
                  <module>module-2</module>
                <module>module-3</module>
              </modules>
            
              <name>example</name>
              <url>https://www.example.com</url>
            
              <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <maven.compiler.source>17</maven.compiler.source>
                <maven.compiler.target>17</maven.compiler.target>
                <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
                <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
                <spring.cloud-version>2020.0.3</spring.cloud-version>
              </properties>
    

> Dependencies that you want to get the child's dependencies version from them
> come in ""dependencyManagement"" tag; ""scope"" and ""type"" tags are the key to
> this goal
    
    
              <dependencyManagement>
                <dependencies>
                  <dependency>
                    <groupId>org.springframework.

As Yanflea mentioned, there is a way to go around this.

In Maven **3.5.0** you can use the following way of transferring the version
down from the parent project:

### Parent POM.xml

    
    
    <project ...>
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.mydomain</groupId>
        <artifactId>myprojectparent</artifactId>
        <packaging>pom</packaging>
        <version>${myversion}</version>
        <name>MyProjectParent</name>
    
        <properties>
            <myversion>0.1-SNAPSHOT</myversion>
        </properties>
    
        <modules>
            <module>modulefolder</module>
        </modules>
        ...
    </project>
    

### Module POM.xml

    
    
    <project ...>
        <modelVersion>4.0.0</modelVersion>
    
        <parent>
            <groupId>com.mydomain</groupId>
            <artifactId>myprojectmodule</artifactId>
            <version>${myversion}</version> <!-- This still needs to be set, but you can use properties from parent -->
        </parent>
    
        <groupId>se.car_o_liner</groupId>
        <artifactId>vinno</artifactId>
        <packaging>war</packaging>
        <name>Vinno</name>
        <!-- Note that there's no version specified; it's inherited from parent -->
        ...
    </project>
    

You are free to change `myversion` to whatever you want that isn't a reserved
property.

[Share](/a/46790857 ""Short permalink to this answer"")

[Improve this answer](/posts/46790857/edit)

Follow

[edited Dec 16, 2017 at 11:05](/posts/46790857/revisions ""show all edits to
this post"")

[![Zoe - Save the data dump's user
avatar](https://i.sstatic.net/WmJNSJwX.png?s=64)](/users/6296561/zoe-save-the-
data-dump)

[Zoe - Save the data dump](/users/6296561/zoe-save-the-data-dump)♦

28k2222 gold badges127127 silver badges157157 bronze badges

answered Oct 17, 2017 at 13:03

[!",pig,project.parent_pig-common.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-log/pom.xml,project.parent_pig.groupId,NAME,com.pig4cloud,maven,pig-upms/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_pig-common.groupId in pig-common/pig-common-log/pom.xml and project.parent_pig.groupId in pig-upms/pom.xml. \n2. Determine the context and purpose of each configuration option within their respective POM files. \n3. Analyze the relationship between the two configuration options, considering Maven's project inheritance and dependency management principles. \n4. Compare the provided examples to understand how similar dependencies are evaluated. \n5. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The configuration option project.parent_pig-common.groupId in pig-common/pig-common-log/pom.xml specifies the groupId for the parent module pig-common, while the configuration option project.parent_pig.groupId in pig-upms/pom.xml specifies the groupId for the parent module pig. Both groupIds are set to com.pig4cloud, indicating that they belong to the same organization or project. However, these groupIds are used to uniquely identify different parent modules within the same project. The groupId in Maven is a unique identifier for a project, and while they share the same value, they serve different purposes in identifying different parent modules. Therefore, the value-equality is coincidental and does not indicate a dependency between the two configuration options."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FP,False,"The configuration options project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId and project.dependencies.dependency_mybatis-plus-extension.groupId both have the value 'com.baomidou'. In Maven, dependency management is used to ensure consistent versions and configurations across multiple modules. Given that both dependencies share the same groupId, it is likely that they are part of the same project or organization (in this case, 'com.baomidou'). This suggests a logical dependency, as they are likely managed together to ensure compatibility and consistency. Therefore, the identical values are not coincidental but rather indicative of a dependency relationship.","- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/72128029/how-do-i-
resolve-could-not-find-artifact-javax-xml-bindjaxb-
apipom2-3-0-b1611?noredirect=1)

[ 7 ](/q/17300575 ""Question score \(upvotes - downvotes\)"") [Maven
dependencies vs dependency management for multiple
projects](/questions/17300575/maven-dependencies-vs-dependency-management-for-
multiple-projects?noredirect=1)

[ 7 ](/q/55954293 ""Question score \(upvotes - downvotes\)"") [Maven: child
module can not Inheritance parent module's
dependencies](/questions/55954293/maven-child-module-can-not-inheritance-
parent-modules-dependencies?noredirect=1)

[See more linked questions](/questions/linked/2619598)

#### Related

[ 164 ](/q/11778276 ""Question score \(upvotes - downvotes\)"") [What is the
difference between ""pom"" type dependency with scope ""import"" and without
""import""?](/questions/11778276/what-is-the-difference-between-pom-type-
dependency-with-scope-import-and-wit)

[ 178 ](/q/11881663 ""Question score \(upvotes - downvotes\)"") [What is the
difference in Maven between dependency and plugin tags in
pom.xml?](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 11 ](/q/15057138 ""Question score \(upvotes - downvotes\)"") [What is the
difference between repository and dependency in
Maven?](/questions/15057138/what-is-the-difference-between-repository-and-
dependency-in-maven)

[ 3 ](/q/31585387 ""Question score \(upvotes - downvotes\)"") [Dependencies in
Dependency Management vs Dependencies in Maven versions
plugin](/questions/31585387/dependencies-in-dependency-management-vs-
dependencies-in-maven-versions-plugin)

[ 0 ](/q/36766693 ""Question score \(upvotes - downvotes\)"") [Dependencies vs
DependenciesManagement?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

](/questions/58459171/why-are-slf4j-logger-and-loggerfactory-imports-
missing-from-maven-project?noredirect=1)

[ 111 ](/q/17325163 ""Question score \(upvotes - downvotes\)"")
['dependencies.dependency.version' is missing error, but version is managed in
parent](/questions/17325163/dependencies-dependency-version-is-missing-error-
but-version-is-managed-in-pa?noredirect=1)

[ 96 ](/q/5845990 ""Question score \(upvotes - downvotes\)"") [Maven 3 and JUnit
4 compilation problem: package org.junit does not
exist](/questions/5845990/maven-3-and-junit-4-compilation-problem-package-org-
junit-does-not-exist?noredirect=1)

[ 83 ](/q/31740785 ""Question score \(upvotes - downvotes\)"") [Why order of
Maven dependencies matter?](/questions/31740785/why-order-of-maven-
dependencies-matter?noredirect=1)

[ 17 ](/q/26506364 ""Question score \(upvotes - downvotes\)"") [maven- not
downloading new added dependency in pom.xml file](/questions/26506364/maven-
not-downloading-new-added-dependency-in-pom-xml-file?noredirect=1)

[ 22 ](/q/22870422 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of including the jersey-bom import scoped dependency in a jersey
project?](/questions/22870422/what-is-the-purpose-of-including-the-jersey-bom-
import-scoped-dependency-in-a-je?noredirect=1)

[ 12 ](/q/72128029 ""Question score \(upvotes - downvotes\)"") [How do I resolve
Could not find artifact javax.xml.bind:jaxb-api:pom:2.3.0-b161121.1438 in
central (https://repo1.maven.org/maven2)?",pig,project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId,NAME,com.baomidou,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_mybatis-plus-extension.groupId,NAME,com.baomidou,maven,pig-common/pig-common-mybatis/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId in pig-common/pig-common-bom/pom.xml and project.dependencies.dependency_mybatis-plus-extension.groupId in pig-common/pig-common-mybatis/pom.xml. \n2. Determine the context and purpose of each configuration option within their respective POM files. \n3. Analyze the relationship between the two configuration options, considering the examples provided. \n4. Evaluate whether the equality of the groupId values indicates a dependency based on value-equality or if it is merely a coincidence. \n5. Formulate a rationale based on the analysis and determine if a dependency exists."",
	""rationale"": ""The configuration option project.dependencyManagement.dependencies.dependency_mybatis-plus-spring-boot3-starter.groupId in pig-common/pig-common-bom/pom.xml and the option project.dependencies.dependency_mybatis-plus-extension.groupId in pig-common/pig-common-mybatis/pom.xml both have the value com.baomidou. The first option is part of the dependency management section, which defines versions and other properties for dependencies that can be inherited by child modules. The second option is a direct dependency in the pig-common-mybatis module. While both options share the same groupId, indicating they are part of the same ecosystem (MyBatis Plus), there is no direct dependency between these two configuration options based on their groupId values. The equality of the groupId values is to ensure consistency within the project but does not imply a value-equality dependency."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"In Maven, the artifactId is a unique identifier for a dependency within a groupId. If both pig-common/pig-common-feign/pom.xml and pig-gateway/pom.xml reference the same artifactId 'caffeine', it means they are referring to the same library. However, this does not inherently mean that they depend on each other due to value-equality. The dependency would only exist if there is a requirement or enforcement that these artifactIds must be identical for the project to function correctly. Based on the provided context, there is no explicit indication that such a requirement exists. Therefore, while they may coincidentally have the same value, it does not imply a dependency.","But project dependencies with an explicit version override the version in the
`dependencyManagement` section.

- [pnewhook](/users/71530/pnewhook ""4,068 reputation"")

Commented Dec 22, 2017 at 18:28

  * I had to add the following to dependencyManagement <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId>

- [anand](/users/6636772/anand ""166 reputation"")

Commented Jan 27, 2022 at 21:52

Add a comment  | 

40

[](/posts/7176103/timeline ""Show activity on this post."")

Maven can handle both situations without any conflict. Conflicts will exist
when two versions of a transitive dependency are required. The
`ClassNotFoundException` you describe results from the app (or a dependency)
attempting to use a class not available in the version of the conflicted
dependency that actually gets used. There are multiple ways to fix the
problem.

  1. Update the versions of the libraries you are using that depend on the conflicted dependency, so that they all depend on the same version of that dependency
  2. Declare the conflicted dependency as a direct dependency of your project with the version you want to be included (in the example, the one with the missing class included in it)
  3. Specify which version of the conflicted dependency that transitive dependencies should use, via the `<dependencyManagement>` section of the POM
  4. Explicitly exclude the unwanted versions of the conflicted dependency from being included with the dependencies that rely on them using an `<exclusion>`

[Share](/a/7176103 ""Short permalink to this answer"")

[Improve this answer](/posts/7176103/edit)

Follow

[edited May 11 at 6:18](/posts/7176103/revisions ""show all edits to this
post"")

[!

Just run the standardized `package`
phase and Maven will do the job (using the default goals bindings).

That was for the Maven theoretical part. Inside IDEs, things might be slightly
different to make working with Maven more convenient. IDEs may use **_project
dependencies_** (i.e. dependencies on code inside the IDE) instead of binary
dependencies so that changes made in one project are made visible in other
modules without having to run `mvn install`. This is the case of Eclipse +
M2Eclipse. And this applies also to NetBeans under the following condition
(see [Dependency
Management](http://wiki.netbeans.org/MavenBestPractices#Dependency_management)):

> **Hint:** If you open a project that other projects depend on, the icon in
> other projects changes to a ""maven project"" icon to denote that the IDE
> knows about link between the projects. However such a link is only
> established when the groupId, artifactId and version all match in the
> dependency and project declaration. Frequently occurring problem is that you
> change an API signature in your library project, but the application is not
> picking up. Often it's caused by the fact that the application is using an
> older version of the library artifact. The artifact icon can help you track
> down these problems.

[Share](/a/2512486 ""Short permalink to this answer"")

[Improve this answer](/posts/2512486/edit)

Follow

[edited Mar 25, 2010 at 1:25](/posts/2512486/revisions ""show all edits to this
post"")

answered Mar 25, 2010 at 0:56

[![Pascal Thivent's user
avatar](https://www.gravatar.com/avatar/dc1a5b5fdba36ae9cdcf6e267f1a86ca?s=64&d=identicon&r=PG)](/users/70604/pascal-
thivent)

[Pascal Thivent](/users/70604/pascal-thivent)Pascal Thivent

568k140140 gold badges1.1k1.1k silver badges1.1k1.1k bronze badges

3

  * Thanks.

Maven
2 is available in version 2.2.1 final.

- [reef](/users/148332/reef ""1,833 reputation"")

Commented Aug 24, 2011 at 12:31

  * 4

BTW, Maven 3.x has been stable for a while and is much faster and more
reliable than maven 2.x

- [Sean Patrick Floyd](/users/342852/sean-patrick-floyd ""297,030 reputation"")

Commented Aug 24, 2011 at 13:20

  * 3

Diamonds are a programmer's worst enemy...

- [Tony Lampada](/users/627684/tony-l%c3%a2mpada ""5,409 reputation"")

Commented Aug 2, 2012 at 6:39

  * @Sean Patrick Floyd all maven version are more stable than SNAPSHOT :)

- [MariuszS](/users/516167/mariuszs ""31,341 reputation"")

Commented Nov 15, 2013 at 14:00

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/7175398/maven-dependency-
resolution-conflicted?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

116

[](/posts/7176095/timeline ""Show activity on this post."")

The maven way of resolving situations like this is to include a
`<dependencyManagement>` section in your project's root pom, where you specify
which version of which library will be used.

EDIT:

    
    
    <dependencyManagement>
      <dependencies>
        <dependency>
            <groupId>foo</groupId>
            <artifactId>bar</artifactId>
            <version>1.2.3</version>
        </dependency>
       </dependencies>
    </dependencyManagement>
    

Now no matter which version of library foo:bar is requested by a dependency,
version 1.2.3 will always be used for this project and all sub-projects.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

You can [enforce](http://maven.apache.org/enforcer/maven-enforcer-plugin/)
consistent dependencies in whole project with rule [Dependency
Convergence](http://maven.apache.org/enforcer/enforcer-
rules/dependencyConvergence.html).

    
    
     <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-enforcer-plugin</artifactId>
         <version>1.3.1</version>
         <executions>
            <execution>
               <id>enforce</id>
               <configuration>
                  <rules>
                     <DependencyConvergence/>
                  </rules>
               </configuration>
               <goals>
                  <goal>enforce</goal>
               </goals>
            </execution>
         </executions>
      </plugin>
    

[Share](/a/20018193 ""Short permalink to this answer"")

[Improve this answer](/posts/20018193/edit)

Follow

answered Nov 16, 2013 at 12:02

[![MariuszS's user
avatar](https://i.sstatic.net/SYxJD.png?s=64)](/users/516167/mariuszs)

[MariuszS](/users/516167/mariuszs)MariuszS

31.3k1212 gold badges117117 silver badges159159 bronze badges

Add a comment  | 

9

[](/posts/7175963/timeline ""Show activity on this post."")

One possible strategy is to specify for main project, what version of D to use
(the newest one f.g.). However, if library D is not backward-compatible, you
have a problem as stated by kukudas - it's impossible to use both libaries in
your project.

In such situation there may be necessary to use either B or C in older
version, so that both would depend on compatibile versions of D.

[Share](/a/7175963 ""Short permalink to this answer"")

[Improve this answer](/posts/7175963/edit)

Follow

answered Aug 24, 2011 at 13:10

[!",pig,project.dependencies.dependency_caffeine.artifactId,NAME,caffeine,maven,pig-common/pig-common-feign/pom.xml,project.dependencies.dependency_caffeine.artifactId,NAME,caffeine,maven,pig-gateway/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_caffeine.artifactId in pig-common/pig-common-feign/pom.xml and project.dependencies.dependency_caffeine.artifactId in pig-gateway/pom.xml. 2. Determine the context of these configuration options within the Maven project structure. 3. Check if these configurations are part of the same Maven project and if they refer to the same dependency. 4. Evaluate if the artifactId 'caffeine' in both configurations must have identical values to ensure the correct dependency is referenced. 5. Compare this scenario with the provided examples to see if it matches the pattern of value-equality dependency."",
	""rationale"": ""The artifactId 'caffeine' in both configurations is referring to the same Maven dependency in different modules within the same project. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. This indicates a value-equality dependency, similar to the provided examples where dependencies in different modules must have identical values to function correctly."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options have the same value 'com.pig4cloud', but they are used in different contexts: one in the dependencies section and the other in the dependencyManagement section. The dependencyManagement section typically provides a central place to manage versions of dependencies, while the dependencies section lists the actual dependencies for a module. The fact that both values are 'com.pig4cloud' is likely due to the organization structure of the project rather than a strict requirement for them to be identical. Therefore, there is no inherent value-equality dependency between these two configuration options.","com</connection>
    		<developerConnection>https://pig4cloud.com</developerConnection>
    		<url>https://pig4cloud.com</url>
    	</scm>
    	<properties>
    		<pig.common.version>3.3.2</pig.common.version>
    		<spring-boot.version>2.5.2</spring-boot.version>
    		<spring-cloud.version>2020.0.3</spring-cloud.version>
    		<spring-cloud-alibaba.version>2021.1</spring-cloud-alibaba.version>
    		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    		<security.oauth.version>2.3.6.RELEASE</security.oauth.version>
    		<maven.compiler.source>1.8</maven.compiler.source>
    		<maven.compiler.target>1.8</maven.compiler.target>
    		<git.commit.plugin>2.2.5</git.commit.plugin>
    		<spring.checkstyle.plugin>0.0.23</spring.checkstyle.plugin>
    		<fastjson.version>1.2.75</fastjson.version>
    		<swagger.core.version>1.5.24</swagger.core.version>
    		<rocksdbjni.version>5.18.3</rocksdbjni.version>
    		<nacos.version>2.0.3</nacos.version>
    		<excel.version>1.0.0</excel.version>
    	</properties>
    
    	<dependencyManagement>
    		<dependencies>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-core</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-datasource</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.

pig4cloud/pig-cloud-dependencies-parent@3.3.2

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

## Overview

### Description

pig cloud parent

### Snippets

Apache MavenGradleGradle (short)Gradle (Kotlin)sbtivygrapeleiningenbuildr

Copy to clipboard

    
    
    <dependency>
        <groupId>com.pig4cloud</groupId>
        <artifactId>pig-cloud-dependencies-parent</artifactId>
        <version>3.3.2</version>
    </dependency>

### Maven POM File

Copy to clipboard

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    		 xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    	<modelVersion>4.0.0</modelVersion>
    
    	<groupId>com.pig4cloud</groupId>
    	<artifactId>pig-cloud-dependencies-parent</artifactId>
    	<version>3.3.2</version>
    	<packaging>pom</packaging>
    
    	<name>pig-cloud-dependencies-parent</name>
    	<url>pig cloud parent</url>
    	<description>pig cloud parent</description>
    	<licenses>
    		<license>
    			<name>The ApacheSoftware License, Version 2.0</name>
    			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
    			<distribution>repo</distribution>
    		</license>
    	</licenses>
    	<developers>
    		<developer>
    			<name>lengleng</name>
    			<email>wangiegie@gmail.com</email>
    		</developer>
    	</developers>
    	<scm>
    		<tag>master</tag>
    		<connection>https://pig4cloud.com</connection>
    		<developerConnection>https://pig4cloud.

common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-job</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-log</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-mybatis</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-security</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-feign</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-swagger</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-test</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-upms-api</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<!--稳定版本，替代spring security bom内置-->
    			<dependency>
    				<groupId>org.springframework.security.oauth</groupId>
    				<artifactId>spring-security-oauth2</artifactId>
    				<version>${security.oauth.version}</version>
    			</dependency>
    			<!--swagger 最新依赖内置版本-->
    			<dependency>
    				<groupId>io.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",pig,project.dependencies.dependency_pig-upms-api.groupId,NAME,com.pig4cloud,maven,pig-auth/pom.xml,project.dependencyManagement.dependencies.dependency_pig-common-swagger.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_pig-upms-api.groupId in pig-auth/pom.xml and project.dependencyManagement.dependencies.dependency_pig-common-swagger.groupId in pig-common/pig-common-bom/pom.xml. 2. Understand the context of each configuration option: both options are groupId values in Maven POM files. 3. Determine the role of groupId in Maven: it uniquely identifies a project or module within a project. 4. Check if both options belong to the same project or module hierarchy: both options belong to the pig project and share the same groupId value 'com.pig4cloud'. 5. Compare with the provided examples: similar dependencies show that groupId values within the same project or module hierarchy depend on each other to maintain consistency. 6. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project or module within a project. Both configuration options, project.dependencies.dependency_pig-upms-api.groupId in pig-auth/pom.xml and project.dependencyManagement.dependencies.dependency_pig-common-swagger.groupId in pig-common/pig-common-bom/pom.xml, belong to the same project (pig) and share the same groupId value 'com.pig4cloud'. This indicates that they depend on each other to maintain a consistent project identity across different modules. Similar to the provided examples, where groupId values within the same project hierarchy depend on each other, these options also exhibit a dependency due to value-equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'modelVersion' in a Maven POM file specifies the version of the POM model being used. According to the provided context, the 'modelVersion' should be set to '4.0.0' for all POM files. This is a standard requirement for Maven projects and is not specific to any particular project or module. Therefore, the 'modelVersion' values in pig-common/pig-common-core/pom.xml and pig-common/pig-common-feign/pom.xml are set to '4.0.0' because it is a Maven requirement, not because they depend on each other. Each POM file independently adheres to this requirement.","[](/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype) Bug 

  * **Status:** Closed

  * ** Priority: ** ![](/jira/images/icons/priorities/minor.svg) Minor 

  * **Resolution:** Fixed 

  * ** Affects Version/s: ** 3.9.3

  * ** Fix Version/s:  ** [3.9.5](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+3.9.5 ""3.9.5 Bugfix for 3.9.4""), [4.0.0-alpha-8](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0-alpha-8 ""4.0.0-alpha-8 ""), [4.0.0](/jira/issues/?jql=project+%3D+MNG+AND+fixVersion+%3D+4.0.0 ""4.0.0 Maven 4.0.0 GA"")

  * ** Component/s: ** [Core](/jira/issues/?jql=project+%3D+MNG+AND+component+%3D+Core ""Core "")

  * ** Labels: **

None

#### Description

When a pom with modelVersion 4.0 is referenced, such as this one:

    
    
    <project>
      <modelVersion>4.0</modelVersion>
      <groupId>foo</groupId>
      <artifactId>bar</artifactId>
      <version>0.1</version>
    </project>
    

The error message is:  
`'modelVersion' of '4.0' is newer than the versions supported by this version
of Maven: [4.0.0]. Building this project requires a newer version of Maven.`  
  
That's misleading.

A better error message would be:  
`'modelVersion' must be one of [4.0.0] but is '4.0'.`

#### Attachments

#### Issue Links

links to

    

![Web Link](https://github.com/favicon.ico) [GitHub Pull Request
#1210](https://github.com/apache/maven/pull/1210)

    

!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

When executing a task or goal, Maven
looks for the POM in the current directory. It reads the POM, gets the needed
configuration information, then executes the goal.

Some of the configuration that can be specified in the POM are the project
dependencies, the plugins or goals that can be executed, the build profiles,
and so on. Other information such as the project version, description,
developers, mailing lists and such can also be specified.

[[top]](./introduction-to-the-pom.html)

## Super POM

The Super POM is Maven's default POM. All POMs extend the Super POM unless
explicitly set, meaning the configuration specified in the Super POM is
inherited by the POMs you created for your projects.

You can see the [Super POM for the latest Maven 3 release](/maven-model-
builder/super-pom.html) in Maven Core reference documentation.

[[top]](./introduction-to-the-pom.html)

## Minimal POM

The minimum requirement for a POM are the following:

  * `project` root
  * `modelVersion` \- should be set to 4.0.0
  * `groupId` \- the id of the project's group.
  * `artifactId` \- the id of the artifact (project)
  * `version` \- the version of the artifact under the specified group

Here's an example:

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

A POM requires that its groupId, artifactId, and version be configured. These
three values form the project's fully qualified artifact name. This is in the
form of <groupId>:<artifactId>:<version>. As for the example above, its fully
qualified artifact name is ""com.mycompany.app:my-app:1"".

Also, as mentioned in the first section, if the configuration details are not
specified, Maven will use their defaults. One of these default values is the
packaging type. Every Maven project has a packaging type. If it is not
specified in the POM, then the default value ""jar"" would be used.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",pig,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-core/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,pig-common/pig-common-feign/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.modelVersion in pig-common/pig-common-core/pom.xml and project.modelVersion in pig-common/pig-common-feign/pom.xml. 2. Understand the role of project.modelVersion in a Maven project, which specifies the version of the POM model being used. 3. Refer to the provided examples to understand how similar dependencies are evaluated, particularly focusing on the example where project.modelVersion must be consistent across all modules. 4. Determine if the project.modelVersion must be identical in both pig-common-core and pig-common-feign to ensure compatibility and proper functioning within the Maven build lifecycle. 5. Conclude whether a value-equality dependency exists based on the necessity for consistency in project.modelVersion across all modules."",
	""rationale"": ""The 'project.modelVersion' in a Maven project specifies the version of the POM model being used. Maven currently only supports the model version 4.0.0, and this is required for all modules to ensure compatibility. Therefore, the project.modelVersion must be consistent across all modules, including pig-common-core and pig-common-feign, creating a dependency based on value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The groupId in Maven is used to uniquely identify a project or a group of related projects. In this case, both configuration options have the same value 'com.pig4cloud', which suggests that they belong to the same project or organization. This is a common practice in Maven projects to maintain consistency and organization. However, the identical values do not imply a functional dependency; rather, they are a naming convention to ensure uniqueness and organization. Therefore, the identical values are not due to a dependency but are a result of following Maven's naming conventions.","By this question, interviewer wants to know about your basic knowledge on Maven and pom.xml file. I find recently one nice blog post on it with real life example. Just sharing the link here. Hope it will help others. [Difference between groupId and artifactId in pom.xml](https://industechie.com/index.php/2020/11/26/what-is-the-difference-between-groupid-and-artifactid-in-maven/)

- [Aritra](/users/1936953/aritra ""3 reputation"")

Commented Nov 26, 2020 at 20:11

Add a comment  | 

##  5 Answers 5

Sorted by:  [ Reset to default ](/questions/39185798/what-is-the-difference-
between-artifactid-and-groupid-in-pom-xml?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

44

[](/posts/39185833/timeline ""Show activity on this post."")

From maven.apache.org, [Naming
Conventions](https://maven.apache.org/guides/mini/guide-naming-
conventions.html):

> `artifactId` is the name of the jar without version. If you created it then
> you can choose whatever name you want with lowercase letters and no strange
> symbols. If it's a third party jar you have to take the name of the jar as
> it's distributed. eg. `maven`, `commons-math`
>
> `groupId` will identify your project uniquely across all projects, so we
> need to enforce a naming schema. It has to follow the package name rules,
> what means that has to be at least as a domain name you control, and you can
> create as many subgroups as you want. Look at More information about package
> names. eg. `org.apache.maven`, `org.apache.commons`

[Share](/a/39185833 ""Short permalink to this answer"")

[Improve this answer](/posts/39185833/edit)

Follow

answered Aug 27, 2016 at 21:17

[!

build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring-boot-admin.version>3.3.2</spring-boot-admin.version>
        <spring.authorization.version>1.3.1</spring.authorization.version>
        <screw.version>0.0.3</screw.version>
        <captcha.version>2.2.3</captcha.version>
        <aws.version>1.12.675</aws.version>
        <velocity.version>2.3</velocity.version>
        <velocity.tool.version>3.1</velocity.tool.version>
        <configuration.version>1.10</configuration.version>
        <jasypt.version>3.0.5</jasypt.version>
        <jaxb.version>4.0.5</jaxb.version>
        <knife4j.version>3.0.5</knife4j.version>
        <swagger.fox.version>3.0.0</swagger.fox.version>
        <xxl-job.version>2.4.0</xxl-job.version>
        <docker.plugin.version>0.44.0</docker.plugin.version>
        <docker.host>http://192.168.0.100:2375</docker.host>
        <docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
        <docker.namespace>pig4cloud</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
        <git.commit.plugin>9.0.1</git.commit.plugin>
        <spring.checkstyle.plugin>0.0.41</spring.checkstyle.plugin>
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.

You can check this in google repo (url:
<https://maven.google.com/web/index.html?q=activity-
compose#androidx.activity:activity-compose:1.7.1>) screenshot below,

[![enter image description
here](https://i.sstatic.net/yfsxZ.jpg)](https://i.sstatic.net/yfsxZ.jpg)

The link of actual artifact:
<https://dl.google.com/android/maven2/androidx/activity/activity-
compose/1.7.1/activity-compose-1.7.1.aar>

[Share](/a/76159152 ""Short permalink to this answer"")

[Improve this answer](/posts/76159152/edit)

Follow

answered May 2, 2023 at 21:59

[![Uddhav P. Gautam's user
avatar](https://i.sstatic.net/06tSZ.jpg?s=64)](/users/7232295/uddhav-p-gautam)

[Uddhav P. Gautam](/users/7232295/uddhav-p-gautam)Uddhav P. Gautam

7,58133 gold badges5050 silver badges6767 bronze badges

Add a comment  | 

0

[](/posts/58443001/timeline ""Show activity on this post."")

The main difference between groupId and artifactId in Maven is that the
groupId specifies the id of the project group while the artifactId specifies
the id of the project.

It is required to use third party libraries when developing a project. The
programmer can download and add these third-party libraries to the project,
but it is difficult to update them later. Maven provides a solution to this
issue. It helps to include all the dependencies required for the project.
Moreover, the programmer can specify the required dependencies in the POM.XML
file. It has the configuration information to build the project. Furthermore,
this file consists of several XML elements, and two of them are groupId and
artifactId. example groupId : com.test.java (similar to package name)
artifactId : javaproject(project or module name)

[Share](/a/58443001 ""Short permalink to this answer"")

[Improve this answer](/posts/58443001/edit)

Follow

answered Oct 18, 2019 at 2:06

[!

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Guide to naming conventions on groupId, artifactId, and version

  * **groupId** uniquely identifies your project across all projects. A group ID should follow [Java's package name rules](https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7). This means it starts with a reversed domain name you control. For example, 

`org.apache.maven`, `org.apache.commons`

Maven does not enforce this rule. There are many legacy projects that do not
follow this convention and instead use single word group IDs. However, it will
be difficult to get a new single word group ID approved for inclusion in the
Maven Central repository.

You can create as many subgroups as you want. A good way to determine the
granularity of the `groupId` is to use the project structure. That is, if the
current project is a multiple module project, it should append a new
identifier to the parent's `groupId`. For example,

`org.apache.maven`, `org.apache.maven.plugins`, `org.apache.maven.reporting`

  * **artifactId** is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed. 

eg. `maven`, `commons-math`

  * **version** if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.",pig,project.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,project.groupId,NAME,com.pig4cloud,maven,pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.groupId in pig-common/pig-common-bom/pom.xml and project.groupId in the root pom.xml. \n2. Understand the role of groupId in Maven, which is to uniquely identify a project across all projects. \n3. Analyze the project structure to determine if pig-common-bom is a submodule of the pig project and if it inherits the groupId from the root pom.xml. \n4. Compare the provided examples to see if similar dependencies exist based on groupId. \n5. Determine if the groupId values must be identical for the project to function correctly, indicating a dependency."",
	""rationale"": ""The groupId in Maven is used to uniquely identify a project across all projects. In this case, the groupId 'com.pig4cloud' in pig-common/pig-common-bom/pom.xml and the root pom.xml must be identical to ensure that all modules within the pig project are correctly identified as part of the same project. This is similar to the provided example where the groupId of a specific module must match the groupId of the parent project to maintain consistency and proper identification. Therefore, these configuration options depend on each other due to value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'com.pig4cloud', which suggests they might be related. However, in Maven, the groupId is typically used to identify the organization or project that the artifact belongs to. Having the same groupId does not necessarily imply a functional dependency; it could simply mean that both artifacts are part of the same organization or project. The dependencyManagement section in the parent POM is used to manage versions of dependencies in child POMs, but it does not create a direct dependency between different groupIds. Therefore, the identical values are likely coincidental and do not indicate a functional dependency.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

](/questions/36766693/dependencies-vs-
dependenciesmanagement)

[ 3 ](/q/44987444 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in maven for ""provided""
scope](/questions/44987444/differences-between-dependencymanagement-and-
dependencies-in-maven-for-provided)

[ 1 ](/q/46220108 ""Question score \(upvotes - downvotes\)"") [How Maven looks
for dependencies](/questions/46220108/how-maven-looks-for-dependencies)

[ 0 ](/q/60994565 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency management tag in pom.xml?](/questions/60994565/what-is-
the-purpose-of-dependency-management-tag-in-pom-xml)

[ 0 ](/q/63437884 ""Question score \(upvotes - downvotes\)"") [What is the
purpose of dependency maven-model?](/questions/63437884/what-is-the-purpose-
of-dependency-maven-model)

[ 0 ](/q/65819063 ""Question score \(upvotes - downvotes\)"") [What's the
difference between the maven-dependency-plugin and
dependencyManagement](/questions/65819063/whats-the-difference-between-the-
maven-dependency-plugin-and-dependencymanageme)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Domestic Air Travel within the US with Limited Term Driver's License and no passport, for non-resident aliens? ](https://travel.stackexchange.com/questions/190223/domestic-air-travel-within-the-us-with-limited-term-drivers-license-and-no-pass)
  * [ When Trump ex-rivals, who previously gave Trump terrible comments, now turn to praising him, what benefits could they gain? ](https://politics.stackexchange.com/questions/88373/when-trump-ex-rivals-who-previously-gave-trump-terrible-comments-now-turn-to-p)
  * [ Mutual Life Insurance Company of New York -- What is it now? How can I reach them?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",pig,project.dependencyManagement.dependencies.dependency_pig-common-datasource.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-log/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencyManagement.dependencies.dependency_pig-common-datasource.groupId in pig-common/pig-common-bom/pom.xml and project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-log/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is used to uniquely identify a project across all projects. \n3. Check if both configuration options belong to the same project structure and if they are part of the same parent module. \n4. Determine if the 'groupId' values need to be identical to ensure proper dependency resolution and project identification within the Maven build lifecycle. \n5. Compare the given examples to see if they follow a similar pattern of dependency due to value-equality in 'groupId'. \n6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. In this case, both configuration options belong to submodules within the same parent module 'pig-common'. The 'groupId' values must be identical to ensure that all submodules are correctly identified as part of the same project. This is similar to the provided examples where submodules inherit the 'groupId' from the parent module to maintain consistency and proper dependency resolution. Therefore, the configuration options depend on each other due to value-equality."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options have the same value 'com.pig4cloud'. However, having identical values does not necessarily imply a dependency. In Maven, the groupId is used to uniquely identify a project or a set of related projects. The fact that both dependencies share the same groupId suggests they belong to the same organization or project namespace, but it does not indicate that one configuration option depends on the other having the same value. The provided context does not suggest any functional dependency that requires these values to be identical.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-xss/pom.xml,project.dependencies.dependency_pig-common-log.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-xss/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml. 2. Determine the values of these configuration options: both have the value 'com.pig4cloud'. 3. Analyze the context in which these configuration options are used: both are groupId values for dependencies in Maven POM files. 4. Check if these dependencies are defined in a parent POM or if they are independently specified in their respective POM files. 5. Evaluate if the value-equality of these configuration options is due to project inheritance or if they are independently specified but happen to have the same value. 6. Based on the analysis, determine if there is a value-equality dependency between these configuration options."",
	""rationale"": ""The configuration options project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-xss/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml both have the value 'com.pig4cloud'. However, these options are used in different modules (pig-common-xss and pig-codegen) and specify the groupId for different dependencies (pig-common-core and pig-common-log, respectively). The value 'com.pig4cloud' is likely a common groupId used across the project for various dependencies, but this does not imply a value-equality dependency between these specific configuration options. Each module can independently specify its dependencies, and the fact that they share the same groupId value is a matter of project organization rather than a dependency."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration options project.dependencies.dependency_pig-common-core.groupId and project.dependencies.dependency_pig-common-datasource.groupId both have the value 'com.pig4cloud'. This indicates that they belong to the same group or organization. However, the equality of these values does not necessarily imply a dependency based on value-equality. The groupId is a common identifier for artifacts from the same organization, and it is typical for multiple dependencies to share the same groupId without requiring them to be identical for functional reasons. Therefore, the identical values are more likely a result of organizational naming conventions rather than a functional dependency.","com</connection>
    		<developerConnection>https://pig4cloud.com</developerConnection>
    		<url>https://pig4cloud.com</url>
    	</scm>
    	<properties>
    		<pig.common.version>3.3.2</pig.common.version>
    		<spring-boot.version>2.5.2</spring-boot.version>
    		<spring-cloud.version>2020.0.3</spring-cloud.version>
    		<spring-cloud-alibaba.version>2021.1</spring-cloud-alibaba.version>
    		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    		<security.oauth.version>2.3.6.RELEASE</security.oauth.version>
    		<maven.compiler.source>1.8</maven.compiler.source>
    		<maven.compiler.target>1.8</maven.compiler.target>
    		<git.commit.plugin>2.2.5</git.commit.plugin>
    		<spring.checkstyle.plugin>0.0.23</spring.checkstyle.plugin>
    		<fastjson.version>1.2.75</fastjson.version>
    		<swagger.core.version>1.5.24</swagger.core.version>
    		<rocksdbjni.version>5.18.3</rocksdbjni.version>
    		<nacos.version>2.0.3</nacos.version>
    		<excel.version>1.0.0</excel.version>
    	</properties>
    
    	<dependencyManagement>
    		<dependencies>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-core</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-datasource</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.

pig4cloud/pig-cloud-dependencies-parent@3.3.2

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

## Overview

### Description

pig cloud parent

### Snippets

Apache MavenGradleGradle (short)Gradle (Kotlin)sbtivygrapeleiningenbuildr

Copy to clipboard

    
    
    <dependency>
        <groupId>com.pig4cloud</groupId>
        <artifactId>pig-cloud-dependencies-parent</artifactId>
        <version>3.3.2</version>
    </dependency>

### Maven POM File

Copy to clipboard

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    		 xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    	<modelVersion>4.0.0</modelVersion>
    
    	<groupId>com.pig4cloud</groupId>
    	<artifactId>pig-cloud-dependencies-parent</artifactId>
    	<version>3.3.2</version>
    	<packaging>pom</packaging>
    
    	<name>pig-cloud-dependencies-parent</name>
    	<url>pig cloud parent</url>
    	<description>pig cloud parent</description>
    	<licenses>
    		<license>
    			<name>The ApacheSoftware License, Version 2.0</name>
    			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
    			<distribution>repo</distribution>
    		</license>
    	</licenses>
    	<developers>
    		<developer>
    			<name>lengleng</name>
    			<email>wangiegie@gmail.com</email>
    		</developer>
    	</developers>
    	<scm>
    		<tag>master</tag>
    		<connection>https://pig4cloud.com</connection>
    		<developerConnection>https://pig4cloud.

common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-job</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-log</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-mybatis</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-security</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-feign</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-swagger</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-common-test</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<dependency>
    				<groupId>com.pig4cloud</groupId>
    				<artifactId>pig-upms-api</artifactId>
    				<version>${pig.common.version}</version>
    			</dependency>
    			<!--稳定版本，替代spring security bom内置-->
    			<dependency>
    				<groupId>org.springframework.security.oauth</groupId>
    				<artifactId>spring-security-oauth2</artifactId>
    				<version>${security.oauth.version}</version>
    			</dependency>
    			<!--swagger 最新依赖内置版本-->
    			<dependency>
    				<groupId>io.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# pig-cloud-dependencies-parent

Used in

Loading...

components

pkg:maven/com.pig4cloud/pig-cloud-dependencies-parent@Loading...

  * Overview

Overview

  * Versions

Versions

  * Dependents

Dependents

  * Dependencies

Dependencies

Loading...

Loading...

Loading...

Loading...

Loading...

[![Sonatype](/SON_logo_white_.svg)](https://www.sonatype.com/)

  * [Company](https://www.sonatype.com/company)
  * [Products](https://www.sonatype.com/products/software-supply-chain-management)
  * Copyright 2023

Search

  * [Browse](/search)

Publish

  * [Namespace](/publishing/namespaces)

Support

  * [API Documents](/api-doc)
  * [Getting Started](https://central.sonatype.org/publish-ea/publish-ea-guide/)
  * [Help](https://central.sonatype.org/pages/support/)

Validate

  * [Privacy Policy](https://www.sonatype.com/privacy-policy)
  * [Terms of Service](https://central.sonatype.org/terms.html)

Log in

  * [Account](/account)
  * [Sign in](/api/auth/login)

[![Logo](/maven-central-logo.svg)![Logo](/_next/static/media/sonatype-logo-
with-hexagon-dark-mode.ea4b4b74.png)](/)

No Results Found

[API Doc](/api-
doc)[Help](https://central.sonatype.org/pages/support/)[Browse](/search)[Sign
In](/api/auth/login)

# pig-cloud-dependencies-parent

Used in 0 components

pkg:maven/com.pig4cloud/pig-cloud-dependencies-parent@3.3.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-gateway/pom.xml,project.dependencies.dependency_pig-common-datasource.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_pig-common-core.groupId in pig-gateway/pom.xml and project.dependencies.dependency_pig-common-datasource.groupId in pig-visual/pig-codegen/pom.xml. 2. Determine the context and purpose of these configuration options within their respective modules. 3. Compare the provided examples to understand the criteria for dependency based on value-equality. 4. Evaluate whether the groupId values must be identical for the modules to function correctly or if they are merely consistent for organizational purposes. 5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The groupId in Maven is used to uniquely identify a project or a set of related projects. In this case, both pig-common-core and pig-common-datasource are part of the pig project and share the same groupId com.pig4cloud. This consistency in groupId is necessary to ensure that all modules within the pig project are correctly identified and managed under the same namespace. However, this does not imply a direct dependency between the two specific configuration options due to value-equality. Instead, it reflects a common organizational practice to maintain consistency across the project. Therefore, the identical groupId values are not due to a functional dependency but rather to maintain a coherent project structure."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'com.pig4cloud'. In Maven, the groupId is used to uniquely identify a project across all projects. If two dependencies share the same groupId, it typically means they belong to the same organization or project. However, having the same groupId does not necessarily imply a functional dependency between the two configuration options. It is more likely that they are part of the same organization or project structure, but they do not depend on each other due to value-equality.","I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

To succeed that, we created a new Maven Java application with a name called
common. If we open pom.xml of the newly created project, we observe that the
parent section is missing.

Let's adjust it by concluding a parent section so commons will turn into a
child (or a Leaf POM, a child with packaging other than POM) of the company-
root project.

After we finish editing pom.xml, the outcome is as follows:

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
        <packaging>jar</packaging>
        <version>1.0-SNAPSHOT</version>
    
        <parent>
            <groupId>com.protectsoft</groupId>
            <artifactId>company</artifactId>
            <version>1.0-SNAPSHOT</version>
        </parent>
    
       <properties>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
            </dependency>
        </dependencies>
    </project>

  

If you are not familiar with Maven, I highly recommend reading [this
](https://maven.apache.org/guides/getting-started/index.html)article first and
establishing some experience around Maven.

Two important things we need to mention:

1) The parent section. Now, this project has an inheritance.

2) The dependency section. We defined a JUnit dependency without version or
scope because they are inherited. That means the usage of the JUnit framework
is predefined from someone else.

Now, let's update company-root POM and add a version for commons project for
others to use and keep things organized.

Next, we going to define versioning and dependency management in the app1
pom.xml for the children.

    
    
    <!--app1.pom will define what version of child projects/modules can be used -->
    <properties>
      <app1.jpa.version>1.0-SNAPSHOT</app1.jpa.version>  
      <app1.ejb.version>1.0-SNAPSHOT</app1.ejb.version>
    </properties>
    
    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-ejb</artifactId>
          <version>${app1.ejb.version}</version>
        </dependency>
        <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>app1-jpa</artifactId>
          <version>${app1.jpa.version}</version>
        </dependency>
      </dependencies>
    </dependencyManagement>
    
    <!-- app1 has this dependencies to be used be the sub-modules -->
    <dependencies>
      <dependency>
        <groupId>com.protectsoft.company</groupId>
        <artifactId>commons</artifactId>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
    </dependencies>
    

  

### Reactor

We also notice this new section in the `app1` pom.xml

    
    
    <modules>
      <module>app1-ejb</module>
      <module>app1-jpa</module>
      <module>app1-web</module>
    </modules>

  

Meaning that the `app1` POM project also has the role of the aggregator. That
means the `app1` project will build all sub-modules/projects defined in the
`modules ` section with a specific order that is analyzed by the
[Reactor.](https://maven.apache.org/guides/mini/guide-multiple-modules.html)

Indeed, if we choose to build from `app1` or run the command `mvn package`
from the `app1` folder, we notice this:

!

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network.](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

[Visit chat](https://chat.stackoverflow.com/)

#### Linked

[ 1079 ](/q/2619598 ""Question score \(upvotes - downvotes\)"") [Differences
between dependencyManagement and dependencies in
Maven](/questions/2619598/differences-between-dependencymanagement-and-
dependencies-in-maven?noredirect=1)

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.version is missing even though the dependency is
already declared in its parent's pom file's dependency management
section](/questions/12900525/dependencies-dependency-version-is-missing-even-
though-the-dependency-is-already?noredirect=1)

[ 13 ](/q/2389602 ""Question score \(upvotes - downvotes\)"") [Maven2 cannot
find parent from relative path](/questions/2389602/maven2-cannot-find-parent-
from-relative-path?noredirect=1)

[ 0 ](/q/68290415 ""Question score \(upvotes - downvotes\)"") [Quarkus
project](/questions/68290415/quarkus-project?noredirect=1)

#### Related

[ 15 ](/q/12900525 ""Question score \(upvotes - downvotes\)"")
[dependencies.dependency.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",pig,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-feign/pom.xml,project.dependencies.dependency_pig-common-log.groupId,NAME,com.pig4cloud,maven,pig-visual/pig-codegen/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-feign/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml. 2. Determine the values of these configuration options: both have the value 'com.pig4cloud'. 3. Understand the context of these configuration options: they are group IDs for dependencies in Maven POM files. 4. Evaluate whether these configuration options are related through project inheritance or dependency management. 5. Compare this scenario with the provided examples to determine if the value-equality implies a dependency. 6. Conclude whether the identical values are due to a dependency or merely a coincidence."",
	""rationale"": ""The configuration options project.dependencies.dependency_pig-common-core.groupId in pig-common/pig-common-feign/pom.xml and project.dependencies.dependency_pig-common-log.groupId in pig-visual/pig-codegen/pom.xml both have the value 'com.pig4cloud'. These options specify the group ID for dependencies in their respective Maven POM files. However, the identical values do not imply a dependency between these options. The group ID 'com.pig4cloud' is likely a common identifier for the project's artifacts, but it does not create a value-equality dependency between the two configuration options. Each module can independently specify dependencies with the same group ID without requiring them to be identical."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'com.pig4cloud'. In Maven, the groupId is used to uniquely identify a project across all projects. If two different dependencies share the same groupId, it typically means they are part of the same organization or project structure. However, having the same groupId does not necessarily imply a functional dependency between the two configuration options. It is more likely that they are part of the same organizational namespace rather than one depending on the other due to value-equality.","- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

(This should be considered a best practice in any case as it keeps the versions of artifacts from changing from one build to the next).

Starting from Maven 4.0, a new specific BOM packaging has been introduced. It
allows defining a BOMs which are not used as parent in a project leveraging
the newer 4.1.0 model, while still providing full compatibility with Maven 3.X
clients and projects. This BOM packaging is translated into a more usual POM
packaging at installation / deployment time, leveraging the build/consumer POM
feature from Maven 4. This thus provides full compatibility with Maven 3.x.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd"">
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>bom</artifactId>
      <version>1.0.0</version>
      <packaging>bom</packaging>
      <properties>
        <project1Version>1.0.0</project1Version>
        <project2Version>1.0.0</project2Version>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project1</artifactId>
            <version>${project1Version}</version>
          </dependency>
          <dependency>
            <groupId>com.test</groupId>
            <artifactId>project2</artifactId>
            <version>${project2Version}</version>
          </dependency>
        </dependencies>
      </dependencyManagement>
     </project>
    

## System Dependencies

`Important note: This is deprecated.`

Dependencies with the scope _system_ are always available and are not looked
up in repository. They are usually used to tell Maven about dependencies which
are provided by the JDK or the VM.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

html ""How Apache Works"")
  * [Foundation](https://www.apache.org/foundation/ ""Foundation"")
  * [Data Privacy](https://privacy.apache.org/policies/privacy-policy-public.html ""Data Privacy"")
  * [Sponsoring Apache](https://www.apache.org/foundation/sponsorship.html ""Sponsoring Apache"")
  * [Thanks](https://www.apache.org/foundation/thanks.html ""Thanks"")

[![Built by Maven](../../images/logos/maven-
feather.png)](http://maven.apache.org/ ""Built by Maven"")

# Introduction to the Dependency Mechanism

Dependency management is a core feature of Maven. Managing dependencies for a
single project is easy. Managing dependencies for multi-module projects and
applications that consist of hundreds of modules is possible. Maven helps a
great deal in defining, creating, and maintaining reproducible builds with
well-defined classpaths and library versions.

Learn more about:

  * Transitive Dependencies
    * Excluded/Optional Dependencies
  * Dependency Scope
  * Dependency Management
    * Importing Dependencies
    * Bill of Materials (BOM) POMs
  * System Dependencies

## Transitive Dependencies

Maven avoids the need to discover and specify the libraries that your own
dependencies require by including transitive dependencies automatically.

This feature is facilitated by reading the project files of your dependencies
from the remote repositories specified. In general, all dependencies of those
projects are used in your project, as are any that the project inherits from
its parents, or from its dependencies, and so on.

There is no limit to the number of levels that dependencies can be gathered
from. A problem arises only if a cyclic dependency is discovered.

With transitive dependencies, the graph of included libraries can quickly grow
quite large. For this reason, there are additional features that limit which
dependencies are included:

  * _Dependency mediation_ \- this determines what version of an artifact will be chosen when multiple versions are encountered as dependencies. Maven picks the ""nearest definition"". That is, it uses the version of the closest dependency to your project in the tree of dependencies. You can always guarantee a version by declaring it explicitly in your project's POM. Note that if two dependency versions are at the same depth in the dependency tree, the first declaration wins.

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project1</artifactId>
      <version>${project1Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </dependency>
      </dependencies>
    </project>
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <parent>
        <groupId>com.test</groupId>
        <version>1.0.0</version>
        <artifactId>parent</artifactId>
      </parent>
      <groupId>com.test</groupId>
      <artifactId>project2</artifactId>
      <version>${project2Version}</version>
      <packaging>jar</packaging>
    
      <dependencies>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </dependency>
      </dependencies>
    </project>
    

The project that follows shows how the library can now be used in another
project without having to specify the dependent project's versions.",pig,project.dependencyManagement.dependencies.dependency_pig-common-security.groupId,NAME,com.pig4cloud,maven,pig-common/pig-common-bom/pom.xml,project.dependencies.dependency_pig-common-core.groupId,NAME,com.pig4cloud,maven,pig-gateway/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencyManagement.dependencies.dependency_pig-common-security.groupId in pig-common/pig-common-bom/pom.xml and project.dependencies.dependency_pig-common-core.groupId in pig-gateway/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is to uniquely identify a project across all projects. \n3. Determine if pig-common-security and pig-common-core are part of the same project and if they need to share the same 'groupId' to function correctly. \n4. Compare the provided examples to see if similar dependencies exist and how they are evaluated. \n5. Conclude whether the configuration options depend on each other based on the need for value-equality."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. Both pig-common-security and pig-common-core are part of the pig project and need to share the same 'groupId' to ensure they are recognized as part of the same project. This is similar to the provided example where litemall-admin-api and litemall-core share the same 'groupId' to identify all modules within the litemall project. Therefore, the configuration options depend on each other due to value-equality."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options refer to the same Maven plugin 'jacoco-maven-plugin'. However, the context provided does not indicate that these configurations must have identical values to function correctly. They are likely used independently in different profiles (profile_coverage and profile_travis) for different purposes. The value 'jacoco-maven-plugin' is a common identifier for the JaCoCo plugin and does not inherently create a dependency between the two configurations.","Specify `reportSets`
explicitly to avoid this:

    
    
    <project>
      <reporting>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <reportSets>
              <reportSet>
                <reports>
                  <!-- select non-aggregate reports -->
                  <report>report</report>
                </reports>
              </reportSet>
            </reportSets>
          </plugin>
        </plugins>
      </reporting>
    </project>
    

## Goals

The JaCoCo Maven plug-in defines the following goals:

  * [help](help-mojo.html)
  * [prepare-agent](prepare-agent-mojo.html)
  * [prepare-agent-integration](prepare-agent-integration-mojo.html)
  * [merge](merge-mojo.html)
  * [report](report-mojo.html)
  * [report-integration](report-integration-mojo.html)
  * [report-aggregate](report-aggregate-mojo.html)
  * [check](check-mojo.html)
  * [dump](dump-mojo.html)
  * [instrument](instrument-mojo.html)
  * [restore-instrumented-classes](restore-instrumented-classes-mojo.html)

[JaCoCo](http://www.jacoco.org/jacoco) 0.8.13.202407140452
[Copyright](license.html) (C) 2009, 2024 Mountainminds GmbH & Co. KG and
Contributors

[JaCoCo](../index.html) > [Documentation](index.html) > Maven Plug-in

# Maven Plug-in

The JaCoCo [Maven](http://maven.apache.org/) plug-in provides the JaCoCo
runtime agent to your tests and allows basic report creation.

If you want to have line number information included in the coverage reports
or you want source code highlighting the class files of the test target must
be compiled with debug information.

When using the `maven-surefire-plugin` or `maven-failsafe-plugin` you **must
not** use a [ `forkCount`](http://maven.apache.org/surefire/maven-surefire-
plugin/test-mojo.html#forkCount) of `0` or set the [
`forkMode`](http://maven.apache.org/surefire/maven-surefire-plugin/test-
mojo.html#forkMode) to `never` as this would prevent the execution of the
tests with the `javaagent` set and no coverage would be recorded.

## Example

  * The JaCoCo distribution contains a simple example how code coverage can be added to a Maven project.
  * This [POM file](examples/build/pom.xml) for a JAR project runs JUnit tests under code coverage and creates a coverage report (`target/site/jacoco/index.html`). 
  * This [POM file](examples/build/pom-it.xml) for a JAR project runs unit tests and integration tests under code coverage and creates two coverage reports, one for unit tests ( `target/site/jacoco/index.html`) and one for integration tests ( `target/site/jacoco-it/index.html`). 
  * The complete example is located in the `./doc/examples/build` folder of the distribution. 

## Prerequisites

The JaCoCo Maven plug-in requires

  * Maven 3.0 or higher and
  * Java 1.8 or higher for the Maven runtime, Java 1.5 or higher for the test executor.

## Usage

The Maven plug-in can be included in your build with the following
declaration. Please check
[here](http://search.maven.org/#search|ga|1|g%3Aorg.jacoco%20a%3Ajacoco-maven-
plugin) for the latest release version in the repository.

1.1</javax.activation.version>
		<javax.mail.version>1.6.2</javax.mail.version>
		<jaxb.version>2.3.1</jaxb.version>
		<junit.version>5.9.2</junit.version>
		<nacos-discovery-api.version>1.4.0</nacos-discovery-api.version>
		<!-- database driver -->
		<mysql-connector-j.version>8.0.32</mysql-connector-j.version>
		<postgre.version>42.7.2</postgre.version>
		<!-- Plugins Version sort by alphabet -->
		<maven-assembly-plugin.version>3.3.0</maven-assembly-plugin.version>
		<maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-jacoco-plugin.version>0.8.8</maven-jacoco-plugin.version>
		<maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.4.0</maven-javadoc-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-source-plugin.version>3.2.1</maven-source-plugin.version>
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.

12</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.3</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                        <encoding>UTF-8</encoding>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                        <format>xml</format>
                        <maxmem>256m</maxmem>
                        <aggregate>true</aggregate>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.eluder.coveralls</groupId>
                    <artifactId>coveralls-maven-plugin</artifactId>
                    <version>4.1.0</version>
                    <configuration>
                        <sourceEncoding>UTF-8</sourceEncoding>
                        <repoToken>${env.coveralls_repo_token}</repoToken>
                    </configuration>
                </plugin>
    
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5</version>
                    <configuration>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <useReleaseProfile>true</useReleaseProfile>
                        <releaseProfiles>release</releaseProfiles>
                        <goals>deploy</goals>
                    </configuration>
                </plugin>
    
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.5</version>
                    <configuration>
                        <archive>
                            <addMavenDescriptor>false</addMavenDescriptor>
                            <manifest>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>        
            </plugins>
        </build>
    </project>
    

AS you can see, I am not using the `maven-deploy-plugin`. Do you know what the
warning means?

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.",spring-boot-admin,project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId,NAME,jacoco-maven-plugin,maven,pom.xml,project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId,NAME,jacoco-maven-plugin,maven,spring-boot-admin-samples/pom.xml,Libraries,Maven Plugin,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId in pom.xml and project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId in spring-boot-admin-samples/pom.xml. 2. Understand the context and purpose of these configuration options: both options specify the artifactId for the JaCoCo Maven plugin in different profiles. 3. Compare the values of these configuration options: both have the value 'jacoco-maven-plugin'. 4. Determine if the value-equality is necessary for the correct functioning of the project: evaluate if the profiles 'coverage' and 'travis' need to use the same JaCoCo Maven plugin artifactId for consistent behavior. 5. Refer to the provided examples to understand similar dependencies and their rationale. 6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The configuration option project.profiles.profile_coverage.build.plugins.plugin_jacoco-maven-plugin.artifactId with the value 'jacoco-maven-plugin' in pom.xml specifies the artifactId for the JaCoCo Maven plugin in the 'coverage' profile. Similarly, the configuration option project.profiles.profile_travis.build.plugins.plugin_jacoco-maven-plugin.artifactId with the same value 'jacoco-maven-plugin' in spring-boot-admin-samples/pom.xml specifies the artifactId for the JaCoCo Maven plugin in the 'travis' profile. Both profiles are likely used for different purposes (e.g., code coverage and CI builds), but they both require the same JaCoCo Maven plugin to function correctly. The value-equality ensures that the same plugin is used consistently across different profiles, which is necessary for maintaining consistent behavior and avoiding potential conflicts or discrepancies in the build process."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The groupId 'org.springframework.boot' is a standard identifier for Spring Boot dependencies, including the spring-boot-starter-security dependency. This identifier is used consistently across different modules to ensure that the correct dependencies are referenced. However, the use of the same groupId in different modules does not inherently imply a value-equality dependency; it is more likely a standard practice to maintain consistency. There is no indication that these values must be identical for the project to function correctly, as they are simply referencing the same dependency from a common repository.","If you wish to override the Spring Security
version, you can do so by providing a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring-security.version>6.3.1</spring-security.version>
    </properties>

Since Spring Security makes breaking changes only in major releases, you can
safely use a newer version of Spring Security with Spring Boot. However, at
times, you may need to update the version of Spring Framework as well. You can
do so by adding a Maven property:

pom.xml

    
    
    <properties>
    	<!-- ... -->
    	<spring.version>6.1.9</spring.version>
    </properties>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

### Maven Without Spring Boot

When you use Spring Security without Spring Boot, the preferred way is to use
Spring Security's BOM to ensure that a consistent version of Spring Security
is used throughout the entire project. The following example shows how to do
so:

pom.xml

    
    
    <dependencyManagement>
    	<dependencies>
    		<!-- ... other dependency elements ... -->
    		<dependency>
    			<groupId>org.springframework.security</groupId>
    			<artifactId>spring-security-bom</artifactId>
    			<version>{spring-security-version}</version>
    			<type>pom</type>
    			<scope>import</scope>
    		</dependency>
    	</dependencies>
    </dependencyManagement>

A minimal Spring Security Maven set of dependencies typically looks like the
following example:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-web</artifactId>
    	</dependency>
    	<dependency>
    		<groupId>org.springframework.security</groupId>
    		<artifactId>spring-security-config</artifactId>
    	</dependency>
    </dependencies>

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

com/tags/spring-security)

  * [Spring Security](index.html)
  * [Getting Spring Security](getting-spring-security.html)

# Getting Spring Security

This section describes how to get the Spring Security binaries. See [Source
Code](community.html#community-source) for how to obtain the source code.

## Release Numbering

Spring Security versions are formatted as MAJOR.MINOR.PATCH such that:

  * MAJOR versions may contain breaking changes. Typically, these are done to provide improved security to match modern security practices.

  * MINOR versions contain enhancements but are considered passive updates.

  * PATCH level should be perfectly compatible, forwards and backwards, with the possible exception of changes that fix bugs.

## Usage with Maven

As most open source projects, Spring Security deploys its dependencies as
Maven artifacts. The topics in this section describe how to consume Spring
Security when using Maven.

### Spring Boot with Maven

Spring Boot provides a `spring-boot-starter-security` starter that aggregates
Spring Security-related dependencies. The simplest and preferred way to use
the starter is to use [Spring
Initializr](https://docs.spring.io/initializr/docs/current/reference/html/) by
using an IDE integration in
([Eclipse](https://joshlong.com/jl/blogPost/tech_tip_geting_started_with_spring_boot.html)
or [IntelliJ](https://www.jetbrains.com/help/idea/spring-
boot.html#d1489567e2), [NetBeans](https://github.com/AlexFalappa/nb-
springboot/wiki/Quick-Tour)) or through
[start.spring.io](https://start.spring.io). Alternatively, you can manually
add the starter, as the following example shows:

pom.xml

    
    
    <dependencies>
    	<!-- ... other dependency elements ... -->
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-security</artifactId>
    	</dependency>
    </dependencies>

Since Spring Boot provides a Maven BOM to manage dependency versions, you do
not need to specify a version.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

If you wish to override the Spring Security version,
you can do so by providing a Gradle property:

build.gradle

    
    
    ext['spring-security.version']='6.3.1'

Since Spring Security makes breaking changes only in major releases, you can
safely use a newer version of Spring Security with Spring Boot. However, at
times, you may need to update the version of Spring Framework as well. You can
do so by adding a Gradle property:

build.gradle

    
    
    ext['spring.version']='6.1.9'

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

### Gradle Without Spring Boot

When you use Spring Security without Spring Boot, the preferred way is to use
Spring Security's BOM to ensure a consistent version of Spring Security is
used throughout the entire project. You can do so by using the [Dependency
Management Plugin](https://github.com/spring-gradle-plugins/dependency-
management-plugin):

build.gradle

    
    
    plugins {
    	id ""io.spring.dependency-management"" version ""1.0.6.RELEASE""
    }
    
    dependencyManagement {
    	imports {
    		mavenBom 'org.springframework.security:spring-security-bom:6.3.1'
    	}
    }

A minimal Spring Security Maven set of dependencies typically looks like the
following:

build.gradle

    
    
    dependencies {
    	implementation ""org.springframework.security:spring-security-web""
    	implementation ""org.springframework.security:spring-security-config""
    }

If you use additional features (such as LDAP, OAuth 2, and others), you need
to also include the appropriate [Project Modules and
Dependencies](modules.html#modules).

Spring Security builds against Spring Framework 6.1.9 but should generally
work with any newer version of Spring Framework 5.x. Many users are likely to
run afoul of the fact that Spring Security's transitive dependencies resolve
Spring Framework 6.1.9, which can cause strange classpath problems. The
easiest way to resolve this is to use the `spring-framework-bom` within your
`dependencyManagement` section of your `build.gradle`.

springframework.boot:spring-boot-
dependencies:2.6.1](/questions/70624098/could-not-find-org-springframework-
bootspring-boot-dependencies2-6-1)

[ 4 ](/q/71809001 ""Question score \(upvotes - downvotes\)"") [Gradle cannot
find Spring Boot 3.0.0-M1](/questions/71809001/gradle-cannot-find-spring-
boot-3-0-0-m1)

[ 1 ](/q/73065110 ""Question score \(upvotes - downvotes\)"") [Missing spring-
boot-buildpack-platform](/questions/73065110/missing-spring-boot-buildpack-
platform)

[ 2 ](/q/73448952 ""Question score \(upvotes - downvotes\)"") [Gradle Spring
Boot Dependency Not found Multi Module Project](/questions/73448952/gradle-
spring-boot-dependency-not-found-multi-module-project)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What sort of security does Docusign provide? ](https://security.stackexchange.com/questions/277851/what-sort-of-security-does-docusign-provide)
  * [ Fancyhdr automatic header height ](https://tex.stackexchange.com/questions/722701/fancyhdr-automatic-header-height)
  * [ Why does ""They be naked"" use the base form of ""be""? ](https://ell.stackexchange.com/questions/355031/why-does-they-be-naked-use-the-base-form-of-be)
  * [ Objects proven finiteness yet no algorithm discovered? ](https://mathoverflow.net/questions/475211/objects-proven-finiteness-yet-no-algorithm-discovered)
  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Wikipedia states that the relativistic Doppler effect is the same whether it is the source or the receiver that is stationary. Can this be true?",spring-boot-admin,project.dependencies.dependency_spring-boot-starter-security.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,project.dependencies.dependency_spring-boot-starter-security.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-samples/spring-boot-admin-sample-servlet/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-boot-starter-security.groupId in spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml and project.dependencies.dependency_spring-boot-starter-security.groupId in spring-boot-admin-samples/spring-boot-admin-sample-servlet/pom.xml. \n2. Determine the type and value of these configuration options: both are of type NAME with value org.springframework.boot. \n3. Analyze the context in which these configuration options are used: both are Maven dependencies for the spring-boot-starter-security module. \n4. Compare this scenario with the provided examples to understand if the equality of values implies a dependency. \n5. Evaluate if the equality of the groupId values is necessary for the correct functioning of the project or if it is merely a coincidence due to the use of the same Spring Boot ecosystem. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-security.groupId in both spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml and spring-boot-admin-samples/spring-boot-admin-sample-servlet/pom.xml indicates the groupId for the spring-boot-starter-security dependency. The equality of these groupId values shows that both modules are using the same Spring Boot ecosystem. However, this does not imply a dependency between these configuration options. The groupId value being the same is a result of using the same dependency from the Spring Boot ecosystem, but it is not a requirement for the correct functioning of the project. Each module can independently specify the same groupId without causing any configuration errors."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration option 'management.endpoints.web.path-mapping.health' is used to map the health endpoint to a specific path, in this case, '/ping'. The configuration option 'spring.cloud.consul.discovery.metadata.health-path' is used to specify the health check path for Consul discovery, also set to '/ping'. Both configurations are related to health checks but serve different purposes: one for mapping the endpoint and the other for service discovery metadata. While they share the same value, it is not explicitly required for them to be identical for the system to function correctly. The identical values might be coincidental or a result of a common convention rather than a strict dependency.","html)
        * [Launching Executable Jars](././specification/executable-jar/launching.html)
        * [PropertiesLauncher Features](././specification/executable-jar/property-launcher.html)
        * [Executable Jar Restrictions](././specification/executable-jar/restrictions.html)
        * [Alternative Single Jar Solutions](././specification/executable-jar/alternatives.html)
    * Appendix
      * [Common Application Properties](././appendix/application-properties/index.html)
      * [Auto-configuration Classes](././appendix/auto-configuration-classes/index.html)
        * [spring-boot-autoconfigure](././appendix/auto-configuration-classes/core.html)
        * [spring-boot-actuator-autoconfigure](././appendix/auto-configuration-classes/actuator.html)
      * [Test Auto-configuration Annotations](././appendix/test-auto-configuration/index.html)
        * [Test Slices](././appendix/test-auto-configuration/slices.html)
      * [Dependency Versions](././appendix/dependency-versions/index.html)
        * [Managed Dependency Coordinates](././appendix/dependency-versions/coordinates.html)
        * [Version Properties](././appendix/dependency-versions/properties.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
boot/blob/v3.3.1/spring-boot-project/spring-boot-
docs/src/docs/antora/modules/reference/pages/actuator/endpoints.adoc) [ GitHub
Project ](https://github.com/spring-projects/spring-boot ""GitHub"") [ Stack
Overflow ](https://stackoverflow.com/tags/spring-boot)

  * [Spring Boot](././index.html)
  * [Reference](./index.html)
  * [Production-ready Features](index.html)
  * [Endpoints](endpoints.html)

# Endpoints

Actuator endpoints let you monitor and interact with your application. Spring
Boot includes a number of built-in endpoints and lets you add your own. For
example, the `health` endpoint provides basic application health information.

You can enable or disable each individual endpoint and expose them (make them
remotely accessible) over HTTP or JMX.

|   
`spring.kafka.consumer.isolation-level` | Isolation level for reading messages that have been written transactionally. | `read-uncommitted`  
`spring.kafka.consumer.key-deserializer` | Deserializer class for keys. |   
`spring.kafka.consumer.max-poll-records` | Maximum number of records returned in a single call to poll(). |   
`spring.kafka.consumer.properties.*` | Additional consumer-specific properties used to configure the client. |   
`spring.kafka.consumer.security.protocol` | Security protocol used to communicate with brokers. |   
`spring.kafka.consumer.ssl.bundle` | Name of the SSL bundle to use. |   
`spring.kafka.consumer.ssl.key-password` | Password of the private key in either key store key or key store file. |   
`spring.kafka.consumer.ssl.key-store-certificate-chain` | Certificate chain in PEM format with a list of X.509 certificates. |   
`spring.kafka.consumer.ssl.key-store-key` | Private key in PEM format with PKCS#8 keys. |   
`spring.kafka.consumer.ssl.key-store-location` | Location of the key store file. |   
`spring.kafka.consumer.ssl.key-store-password` | Store password for the key store file. |   
`spring.kafka.consumer.ssl.key-store-type` | Type of the key store. |   
`spring.kafka.consumer.ssl.protocol` | SSL protocol to use. |   
`spring.kafka.consumer.ssl.trust-store-certificates` | Trusted certificates in PEM format with X.509 certificates. |   
`spring.kafka.consumer.ssl.trust-store-location` | Location of the trust store file. |   
`spring.kafka.consumer.ssl.trust-store-password` | Store password for the trust store file. |   
`spring.kafka.consumer.ssl.trust-store-type` | Type of the trust store. |   
`spring.kafka.consumer.value-deserializer` | Deserializer class for values. |   
`spring.kafka.jaas.control-flag` | Control flag for login configuration. | `required`  
`spring.kafka.jaas.enabled` | Whether to enable JAAS configuration. | `false`  
`spring.kafka.jaas.login-module` | Login module. | `com.sun.security.auth.module.Krb5LoginModule`  
`spring.kafka.jaas.options.*` | Additional JAAS options.

[INFO]  [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ tdk-web --- [INFO] Building jar: /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-web/target/tdk-web-0.0.2-SNAPSHOT.jar [INFO]  [INFO] --- spring-boot-maven-plugin:1.5.3.RELEASE:repackage (default) @ tdk-web --- [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary: [INFO]  [INFO] tdk-cloud ....................................... SUCCESS [  0.105 s] [INFO] tdk-core ........................................ SUCCESS [  1.634 s] [INFO] tdk-batch ....................................... SUCCESS [  0.114 s] [INFO] tdk-web ......................................... SUCCESS [  1.506 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.663 s [INFO] Finished at: 2017-05-30T05:37:04+02:00 [INFO] Final Memory: 47M/539M [INFO] ------------------------------------------------------------------------ MacBook-Pro-de-nunito:tdk-cloud calzada$  
This is the error I got:
*************************** APPLICATION FAILED TO START ***************************  Description:  Field emailService in com.tdkcloud.web.controllers.AppErrorController required a bean of type 'com.tdkcloud.backend.service.EmailService' that could not be found.   Action:  Consider defining a bean of type 'com.tdkcloud.backend.service.EmailService' in your configuration.

Used for server-side logging. |   
`spring.kafka.streams.properties.*` | Additional Kafka properties used to configure the streams. |   
`spring.kafka.streams.replication-factor` | The replication factor for change log topics and repartition topics created by the stream processing application. |   
`spring.kafka.streams.security.protocol` | Security protocol used to communicate with brokers. |   
`spring.kafka.streams.ssl.bundle` | Name of the SSL bundle to use. |   
`spring.kafka.streams.ssl.key-password` | Password of the private key in either key store key or key store file. |   
`spring.kafka.streams.ssl.key-store-certificate-chain` | Certificate chain in PEM format with a list of X.509 certificates. |   
`spring.kafka.streams.ssl.key-store-key` | Private key in PEM format with PKCS#8 keys. |   
`spring.kafka.streams.ssl.key-store-location` | Location of the key store file. |   
`spring.kafka.streams.ssl.key-store-password` | Store password for the key store file. |   
`spring.kafka.streams.ssl.key-store-type` | Type of the key store. |   
`spring.kafka.streams.ssl.protocol` | SSL protocol to use. |   
`spring.kafka.streams.ssl.trust-store-certificates` | Trusted certificates in PEM format with X.509 certificates. |   
`spring.kafka.streams.ssl.trust-store-location` | Location of the trust store file. |   
`spring.kafka.streams.ssl.trust-store-password` | Store password for the trust store file. |   
`spring.kafka.streams.ssl.trust-store-type` | Type of the trust store. |   
`spring.kafka.streams.state-dir` | Directory location for the state store. |   
`spring.kafka.streams.state-store-cache-max-size` | Maximum size of the in-memory state store cache across all threads. |   
`spring.kafka.template.default-topic` | Default topic to which messages are sent. |   
`spring.kafka.template.observation-enabled` | Whether to enable observation. | `false`  
`spring.kafka.template.transaction-id-prefix` | Transaction id prefix, override the transaction id prefix in the producer factory. |   
`spring.pulsar.admin.authentication.param.*` | Authentication parameter(s) as a map of parameter names to parameter values.

/features/json.html)
        * [Task Execution and Scheduling](./features/task-execution-and-scheduling.html)
        * [Development-time services](./features/dev-services.html)
        * [Creating Your Own Auto-configuration](./features/developing-auto-configuration.html)
        * [Kotlin Support](./features/kotlin.html)
        * [SSL](./features/ssl.html)
      * [Web](./web/index.html)
        * [Servlet Web Applications](./web/servlet.html)
        * [Reactive Web Applications](./web/reactive.html)
        * [Graceful Shutdown](./web/graceful-shutdown.html)
        * [Spring Security](./web/spring-security.html)
        * [Spring Session](./web/spring-session.html)
        * [Spring for GraphQL](./web/spring-graphql.html)
        * [Spring HATEOAS](./web/spring-hateoas.html)
      * [Data](./data/index.html)
        * [SQL Databases](./data/sql.html)
        * [Working with NoSQL Technologies](./data/nosql.html)
      * [IO](./io/index.html)
        * [Caching](./io/caching.html)
        * [Hazelcast](./io/hazelcast.html)
        * [Quartz Scheduler](./io/quartz.html)
        * [Sending Email](./io/email.html)
        * [Validation](./io/validation.html)
        * [Calling REST Services](./io/rest-client.html)
        * [Web Services](./io/webservices.html)
        * [Distributed Transactions With JTA](./io/jta.html)
      * [Messaging](./messaging/index.html)
        * [JMS](./messaging/jms.html)
        * [AMQP](./messaging/amqp.html)
        * [Apache Kafka Support](./messaging/kafka.html)
        * [Apache Pulsar Support](./messaging/pulsar.html)
        * [RSocket](./messaging/rsocket.html)
        * [Spring Integration](./messaging/spring-integration.html)
        * [WebSockets](./messaging/websockets.html)
      * [Testing](./testing/index.html)
        * [Test Scope Dependencies](.",spring-boot-admin,management.endpoints.web.path-mapping.health,PATH,/ping,spring,spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/resources/application.yml,spring.cloud.consul.discovery.metadata.health-path,PATH,/ping,spring,spring-boot-admin-samples/spring-boot-admin-sample-consul/src/main/resources/application.yml,Others,Health Monitoring,"{
    ""plan"": ""1. Identify the purpose of each configuration option: 'management.endpoints.web.path-mapping.health' and 'spring.cloud.consul.discovery.metadata.health-path'.\n2. Determine if these configuration options are used in a way that requires them to have the same value for the application to function correctly.\n3. Compare the roles of these configuration options within the context of Spring Boot and Consul integration.\n4. Evaluate if the value '/ping' being the same for both options is necessary for the correct operation of the application or if it is coincidental.\n5. Formulate a rationale based on the analysis and determine if a dependency exists."",
    ""rationale"": ""The configuration option 'management.endpoints.web.path-mapping.health' in Spring Boot is used to map the health endpoint to a specific path, in this case, '/ping'. The configuration option 'spring.cloud.consul.discovery.metadata.health-path' is used to specify the health check path for Consul service discovery. For Consul to correctly monitor the health of the Spring Boot application, it needs to know the correct path to check. Therefore, these two configuration options must have the same value to ensure that Consul can correctly access the health endpoint of the Spring Boot application. This indicates a dependency between the two configuration options based on value-equality."",
    ""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options have the same value 'org.springframework.boot', which is the groupId for the Spring Boot starter web dependency. This value is standard for any Spring Boot project using the web starter. The equality of these values is due to the standard naming convention used by Spring Boot and Maven, rather than a specific dependency between the two configurations. Therefore, the identical values are incidental and not indicative of a dependency.","Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Introduction

Spring Boot is an excellent framework for quickly starting new projects. One
of the ways it helps developers quickly create new applications is by defining
a set of dependencies suitable for most users.

However, in some cases, **it may be necessary to override one or more
dependency versions**.

In this tutorial, we'll look at how to override Spring Boot managed
dependencies and their versions.

## 2\. Spring Boot Bill of Materials (BOM)

Let's start by looking at how Spring Boot manages dependencies. In short,
Spring Boot uses a [Bill of Materials (BOM)](/spring-maven-bom) to define
dependencies and versions.

Most Spring Boot projects inherit from the [spring-boot-starter-parent
artifact](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-parent), which itself inherits from the [spring-boot-
dependencies](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-dependencies) artifact. **This latter artifact is the Spring Boot BOM** ,
which is just a Maven POM file with a large _dependencyManagement_ section:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        ...
                    </dependency>
                    <dependency>
                        ...
                    </dependency>
                </dependencies>
            </dependencyManagement>

By using Maven's _dependencyManagement_ , **the BOM can specify default
library versions should our application choose to use them**. Let's look at an
example.

One of the entries in the Spring Boot BOM is as follows:

            
                        <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-amqp</artifactId>
                <version>${activemq.version}</version>
            </dependency>

This means any artifact in the project that depends on ActiveMQ will get this
version by default.

apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
          <modelVersion>4.0.0</modelVersion>
          <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <!-- Update the Spring version in current POM -->
              <version>2.6.0</version>
              <relativePath/> <!-- lookup parent from repository -->
          </parent>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>demo</name>
          <description>Demo project for Spring Boot</description>
          <properties>
              <java.version>11</java.version>
              <!-- Missing, include this -->
              <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
          </properties>
          <dependencies>
              <!-- Missing, include this -->
              <dependency>
                  <groupId>org.springframework.cloud</groupId>
                  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
              </dependency>
      
              <dependency>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-test</artifactId>
                  <scope>test</scope>
              </dependency>
          </dependencies>
          <!-- Missing, include this -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>${spring-cloud.version}</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
      
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-maven-plugin</artifactId>
                  </plugin>
              </plugins>
          </build>
          <!-- Missing, include this -->
          <repositories>
              <repository>
                  <id>spring-milestones</id>
                  <name>Spring Milestones</name>
                  <url>https://repo.spring.

For example,
if we run the command:

            
                        gradle dependencies

We will get output similar to:

            
                        compileClasspath - Compile classpath for source set 'main'.
            \--- org.springframework.boot:spring-boot-starter-web -> 1.3.8.RELEASE
                 +--- org.springframework.boot:spring-boot-starter:1.3.8.RELEASE
                 |    +--- org.springframework.boot:spring-boot:1.3.8.RELEASE
                 |    |    +--- org.springframework:spring-core:4.2.8.RELEASE
                 |    |    \--- org.springframework:spring-context:4.2.8.RELEASE
                 |    |         +--- org.springframework:spring-aop:4.2.8.RELEASE

Just like the Maven output, we can easily identify why each artifact is being
pulled into the project, along with the version being used.

## 5\. Conclusion

In the article, we have learned how Spring Boot manages dependency versions.
We also saw how to override those dependency versions in both Maven and
Gradle. Finally, we saw how we could verify dependency versions in both
project types.

Partner - Aegik AB - NPI EA (cat= Persistence)

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)  

**Slow MySQL query performance** is all too common. Of course it is.

The Jet Profiler was **built entirely for MySQL** , so it's fine-tuned for it
and does advanced everything with relaly minimal impact and no server changes.

[**> > Try out the Profiler**](aegik-ab-NPI-EA-H8jY0)

Partner - DBSchema - NPI EA (tag = Spring Data JPA)

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)  

**DbSchema** is a super-flexible database designer, which can take you from
designing the DB with your team **all the way to safely deploying the
schema**.

The way it does all of that is by **using a design model** , a database-
independent image of the schema, which can be shared in a team using GIT and
compared or deployed on to any database.

springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
    
        <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/61287791 ""Short permalink to this answer"")

[Improve this answer](/posts/61287791/edit)

Follow

answered Apr 18, 2020 at 10:40

[!

build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.version>
        </properties>
    
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter</artifactId>
            </dependency>
            <!-- Eureka registration server -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-eureka-server</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
    
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <!-- <version>Camden.SR5</version> -->
                    <version>Finchley.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
    

  * [spring](/questions/tagged/spring ""show questions tagged 'spring'"")
  * [spring-boot](/questions/tagged/spring-boot ""show questions tagged 'spring-boot'"")
  * [microservices](/questions/tagged/microservices ""show questions tagged 'microservices'"")

[Share](/q/51921033 ""Short permalink to this question"")

[Improve this question](/posts/51921033/edit)

Follow

asked Aug 19, 2018 at 19:17

[!",spring-boot-admin,project.dependencies.dependency_spring-boot-starter-web.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-samples/spring-boot-admin-sample-consul/pom.xml,project.dependencies.dependency_spring-boot-starter-web.groupId,NAME,org.springframework.boot,maven,spring-boot-admin-server-ui/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-boot-starter-web.groupId in spring-boot-admin-samples/spring-boot-admin-sample-consul/pom.xml and project.dependencies.dependency_spring-boot-starter-web.groupId in spring-boot-admin-server-ui/pom.xml. \n2. Determine the type and value of each configuration option: both are of type NAME with value org.springframework.boot. \n3. Analyze the context and purpose of each configuration option: both options specify the groupId for the spring-boot-starter-web dependency in their respective POM files. \n4. Compare the provided examples to understand the criteria for dependency determination: \n   - Example 1 shows that having the same groupId does not imply a dependency if they are different Maven dependencies. \n   - Example 2 shows that having the same groupId implies a dependency if they are part of the same project and module structure. \n5. Evaluate whether the configuration options in question are part of the same project and module structure or if they are independent dependencies. \n6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The configuration option project.dependencies.dependency_spring-boot-starter-web.groupId in spring-boot-admin-samples/spring-boot-admin-sample-consul/pom.xml and the option project.dependencies.dependency_spring-boot-starter-web.groupId in spring-boot-admin-server-ui/pom.xml both specify the groupId for the spring-boot-starter-web dependency. While they share the same groupId value, this does not imply a dependency between the two options. They are part of different modules within the same project, and the equality of the groupId values indicates that they are part of the same Spring Boot ecosystem. However, there is no direct dependency between these two configuration options based on their groupId values."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The relativePath configuration in Maven specifies the path to the parent POM file. In this case, both configurations have the value '..', which means they are pointing to the parent directory. This is a common practice in multi-module Maven projects where sibling modules share a common parent POM located in the parent directory. The identical values are likely due to the project structure rather than an inherent dependency between the two configurations. Each module independently needs to point to the parent directory to resolve the parent POM, but they do not depend on each other for this value to be the same. Therefore, the identical values are coincidental and not indicative of a dependency.","For example, if we have a second
module that should inherit the settings from _module1_ , not from the
aggregator, we must name the sibling folder:

[![module2](/wp-content/uploads/2021/09/module2.svg)](/wp-
content/uploads/2021/09/module2.svg)

            
                        <artifactId>module2</artifactId>
            <parent>
                <groupId>com.baeldung.maven-parent-pom-resolution</groupId>
                <artifactId>module1</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <relativePath>../module1/pom.xml</relativePath>
            </parent>

Of course, we should only use relative paths that are available in every
environment (mostly to a path within the same Git repository) to ensure the
portability of our build.

## 4\. Disable Local File Resolution

To skip the local file search and directly search the parent POM in Maven
repositories, we need to explicitly set the _relativePath_ to an empty value:

            
                        <parent>
                <groupId>com.baeldung</groupId>
                <artifactId>external-project</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <relativePath/>
            </parent>

[![external](/wp-content/uploads/2021/09/external.svg)](/wp-
content/uploads/2021/09/external.svg)

This should be a best practice whenever we inherit from external projects like
[Spring Boot](https://robintegg.com/2019/01/20/why-does-spring-initializr-set-
the-parent-pom-relativepath-to-empty.html).

## 5\. IDEs

Interestingly, IntelliJ IDEA (current version: 2021.1.3) comes with a Maven
plugin that differs from external Maven runtimes concerning the Parent POM
resolution. Deviating from [Maven's POM
Schema](http://maven.apache.org/xsd/maven-4.0.0.xsd), it explains the
_relativePath_ tag this way:

> […] Maven looks for the parent pom first in the reactor of currently
> building projects […]

That means, for IDE-internal resolution, the position of the parent POM
doesn't matter as long as the parent project is registered as an IntelliJ
Maven Project.

](/questions/21125358/maven-multi-
module-project-is-relativepath-necessary)

[ 8 ](/q/35608981 ""Question score \(upvotes - downvotes\)"") [Relative Path in
Maven parent definition](/questions/35608981/relative-path-in-maven-parent-
definition)

[ 59 ](/q/36450720 ""Question score \(upvotes - downvotes\)"") [Maven:Non-
resolvable parent POM and 'parent.relativePath' points at wrong local
POM](/questions/36450720/mavennon-resolvable-parent-pom-and-parent-
relativepath-points-at-wrong-local)

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path)

[ 5 ](/q/41540074 ""Question score \(upvotes - downvotes\)"") [Non resolvable
parent POM although relativePath set to existing parent
pom.xml](/questions/41540074/non-resolvable-parent-pom-although-relativepath-
set-to-existing-parent-pom-xml)

[ 4 ](/q/43741817 ""Question score \(upvotes - downvotes\)"") [Maven: Eclipse
not correctly configuring paths in a project with a parent
pom](/questions/43741817/maven-eclipse-not-correctly-configuring-paths-in-a-
project-with-a-parent-pom)

[ 0 ](/q/48808466 ""Question score \(upvotes - downvotes\)"") [Maven Project
Build Error : parent.relativePath points at no local
POM](/questions/48808466/maven-project-build-error-parent-relativepath-points-
at-no-local-pom)

[ 1 ](/q/53869863 ""Question score \(upvotes - downvotes\)"") [Maven insist
using local parent rather than remote WITHOUT relativePath
mentioned](/questions/53869863/maven-insist-using-local-parent-rather-than-
remote-without-relativepath-mentione)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Verbs for to punish ](https://german.stackexchange.

stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 32 ](/q/37062491 ""Question score \(upvotes - downvotes\)"") [Maven
complaining about parent relative path](/questions/37062491/maven-complaining-
about-parent-relative-path?noredirect=1)

[ 1 ](/q/39104875 ""Question score \(upvotes - downvotes\)"") [Issue with
dependencies that are present in remote repository](/questions/39104875/issue-
with-dependencies-that-are-present-in-remote-repository?noredirect=1)

[ 0 ](/q/74187763 ""Question score \(upvotes - downvotes\)"")
['parent.relativePath' of imported bill-of materials POM creating warning in
Eclipse](/questions/74187763/parent-relativepath-of-imported-bill-of-
materials-pom-creating-warning-in-ecli?noredirect=1)

[ 0 ](/q/72994324 ""Question score \(upvotes - downvotes\)"") ['mvn clean
install' does not work if it is in bash script](/questions/72994324/mvn-clean-
install-does-not-work-if-it-is-in-bash-script?noredirect=1)

#### Related

[ 13 ](/q/2389602 ""Question score \(upvotes - downvotes\)"") [Maven2 cannot
find parent from relative path](/questions/2389602/maven2-cannot-find-parent-
from-relative-path)

[ 1 ](/q/14261997 ""Question score \(upvotes - downvotes\)"") [Java File Class
Using Relative Path in Windows 7](/questions/14261997/java-file-class-using-
relative-path-in-windows-7)

[ 5 ](/q/21125358 ""Question score \(upvotes - downvotes\)"") [maven multi
module project: is relativepath necessary?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

mycompany:myapp >------------------------ [INFO] Building myapp 1.0.0-SNAPSHOT                                     [1/2] [INFO] --------------------------------[ pom ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp --- [INFO]  [INFO] --------------------< com.mycompany:myapp-server >-------------------- [INFO] Building myapp-server 1.0.0-SNAPSHOT                              [2/2] [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ myapp-server --- [INFO] Deleting /home/user/Desktop/mycompany/myapp/server/target [INFO]  [INFO] --- git-commit-id-plugin:2.2.6:revision (default) @ myapp-server --- [INFO]  [INFO] --- spring-boot-maven-plugin:2.1.7.RELEASE:build-info (default) @ myapp-server --- [INFO]  [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ myapp-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 4 resources [INFO] Copying 2 resources [INFO]  [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ myapp-server --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 17 source files to /home/user/Desktop/mycompany/myapp/server/target/classes [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for myapp 1.0.0-SNAPSHOT: [INFO]  [INFO] myapp . SUCCESS [  0.252 s] [INFO] myapp-server . FAILURE [  4.913 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  5.",spring-boot-admin,project.parent_spring-boot-admin-samples.relativePath,PATH,..,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,project.parent_spring-boot-admin-samples.relativePath,PATH,..,maven,spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml,Multi-Maven-Modules,Project Structure,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_spring-boot-admin-samples.relativePath in spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml and project.parent_spring-boot-admin-samples.relativePath in spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml. 2. Understand the purpose of the 'relativePath' configuration in Maven, which is to specify the path to the parent POM file. 3. Determine if the value of '..' for the 'relativePath' configuration in both POM files indicates a dependency between the two options. 4. Compare this scenario with the provided examples to see if similar logic applies. 5. Conclude whether the identical values of the 'relativePath' configuration options indicate a dependency."",
	""rationale"": ""The 'relativePath' configuration in Maven specifies the path to the parent POM file. In this case, both configuration options have the value '..', which means they are pointing to the parent directory to locate their parent POM file. This is a common practice in multi-module Maven projects to ensure that all modules reference the same parent POM. The identical values of the 'relativePath' configuration options in different modules do not indicate a dependency between these options. Instead, it is a coincidence that they have the same value because they are both pointing to the same parent directory. The purpose of the 'relativePath' is to ensure that each module can correctly locate its parent POM, and this does not create a dependency between the two configuration options."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'lombok' artifactId in both spring-boot-admin-client/pom.xml and spring-boot-admin-server/pom.xml refers to the same library, which is used to reduce boilerplate code in Java projects. In a multi-module Maven project, each module can have its own dependencies, and they do not necessarily need to have the same version or artifactId values unless there is a specific requirement for consistency across modules. The functionality of one module's Lombok dependency does not inherently depend on the other module's Lombok dependency having the same artifactId value. Therefore, there is no direct value-equality dependency between these configuration options.","I'm not sure what the difference is between lombok and lombok-maven-plugin,
but my projects are configured with this dependency:

    
    
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok-maven-plugin</artifactId>
            <version>1.16.12.0</version>
        </dependency>
    

I haven't experimented with root and submodule poms yet, as my projects all
tend to be rather isolated from each other. Not sure if that could be causing
an issue for you.

If you are using Eclipse, have you run the lombok.jar file and pointed it to
your eclipse.exe file? it needs to modify the .exe in order for Eclipse to
know that those getters and setters are coming, so that Eclipse doesn't
complain during development.

**Edit:** I'm using maven-compiler-plugin:

    
    
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
    

[Share](/a/42259576 ""Short permalink to this answer"")

Follow

[edited Feb 16, 2017 at 13:33](/posts/42259576/revisions ""show all edits to
this post"")

answered Feb 15, 2017 at 20:39

[![Dan N's user
avatar](https://www.gravatar.com/avatar/0daf9b6305554cee886823b62dda787b?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/3850440/dan-n)

[Dan N](/users/3850440/dan-n)Dan N

9811 gold badge11 silver badge66 bronze badges

3

  * Are you using maven-compile-plugin? IDE does not matter.

0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
      <groupId>org.example</groupId>
      <artifactId>example-maven</artifactId>
      <version>1.0-SNAPSHOT</version>
      <properties>
        <java.version>11</java.version>
        <lombok.version>1.18.12</lombok.version>
        <maven-plugin.version>3.8.1</maven-plugin.version>
        <slf4j.version>1.7.30</slf4j.version>
        <junit.version>5.7.2</junit.version>
        <logback.version>1.2.3</logback.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
          <version>${lombok.version}</version>
        </dependency>
        <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
          <version>${slf4j.version}</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
          <version>${logback.version}</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter-api</artifactId>
          <version>${junit.version}</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.

I have a root module and submodule in maven in the project. I am trying to use
Lombok. I have added

    
    
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.16.12</version>
        <scope>provided</scope>
    </dependency>
    

to root pom.xml. In submodule I have a class with Lombok annotations. When I
am trying to build the project I get a lot of

> cannot find symbol

where I am trying to call getters and setters.

I have tried to use **lombok-maven-plugin** with same version (1.16.12) in
root pom and in the sub pom as well with delombok and moving my annotated
class to src/main/lombok, I have looked through almost all questions in SO,
try all the variants, but not succeed.

I am using Maven 3, Java 8, maven-compiler-plugin with 3.6.1 version.

How should I configure the project to be able to use lombok? Or maybe I am
doing smth wrong.

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [lombok](/questions/tagged/lombok ""show questions tagged 'lombok'"")
  * [maven-compiler-plugin](/questions/tagged/maven-compiler-plugin ""show questions tagged 'maven-compiler-plugin'"")

[Share](/q/42257379 ""Short permalink to this question"")

Follow

asked Feb 15, 2017 at 18:30

[![Oleksandr Zaiats's user
avatar](https://i.sstatic.net/HulW7.jpg?s=64)](/users/2391060/oleksandr-
zaiats)

[Oleksandr Zaiats](/users/2391060/oleksandr-zaiats)Oleksandr Zaiats

81822 gold badges1111 silver badges1515 bronze badges

5

  * 1

did you add it as a dependency?

This is not a direct answer to the question which seems to be solved but acts
as reference for future searchers:

If you're using Dagger (or something else) to process your annotations like

    
    
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <annotationProcessorPaths>
              <path>
                <groupId>com.google.dagger</groupId>
                <artifactId>dagger-compiler</artifactId>
                <version>2.15</version>
              </path>
            </annotationProcessorPaths>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
        ....
      </plugins>
    </build>
    

You have to add lombok as path like

    
    
    <build>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <annotationProcessorPaths>
              <path>
                <groupId>com.google.dagger</groupId>
                <artifactId>dagger-compiler</artifactId>
                <version>2.15</version>
              </path>
    
              <!-- SOLUTION --> 
              <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.16.20</version>
              </path>
    
    
            </annotationProcessorPaths>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>
        ....
      </plugins>
    </build>
    

You still have to list lombok as provided dependency tho.

[Share](/a/50058828 ""Short permalink to this answer"")

Follow

[edited May 11, 2020 at 9:16](/posts/50058828/revisions ""show all edits to
this post"")

answered Apr 27, 2018 at 8:58

[!

In case of anyone using JDK 11

    
    
        <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <arg>-sourcepath</arg>
                        <arg>${project.basedir}/src/main/java${path.separator}${project.basedir}/target/generated-sources/annotations${path.separator}/</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

[Share](/a/54168043 ""Short permalink to this answer"")

Follow

answered Jan 13, 2019 at 10:40

[![Edgar Asatryan's user
avatar](https://i.sstatic.net/2b8I6.jpg?s=64)](/users/6266706/edgar-asatryan)

[Edgar Asatryan](/users/6266706/edgar-asatryan)Edgar Asatryan

72499 silver badges1414 bronze badges

2

  * 1

I skipped `compilerArgs` section and it also worked fine: I think it may be
not needed.

- [Innokenty](/users/2306595/innokenty ""3,223 reputation"")

Commented Mar 20, 2023 at 17:26

  * 1

note that for newer versions of lombok (1.18.32), this whole configuration is
not only unnecessary, but will break e.g. Lombok / Netbeans integration, see
[stackoverflow.com/a/43315267/57033](https://stackoverflow.com/a/43315267/57033)

- [hello_earth](/users/57033/hello-earth ""1,532 reputation"")

Commented Jun 19 at 6:22

Add a comment  | 

3

[](/posts/64508624/timeline ""Show activity on this post."")",spring-boot-admin,project.dependencies.dependency_lombok.artifactId,NAME,lombok,maven,spring-boot-admin-client/pom.xml,project.dependencies.dependency_lombok.artifactId,NAME,lombok,maven,spring-boot-admin-server/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_lombok.artifactId in spring-boot-admin-client/pom.xml and project.dependencies.dependency_lombok.artifactId in spring-boot-admin-server/pom.xml. \n2. Determine the type and value of these configuration options: both are of type NAME with the value 'lombok'. \n3. Compare these options to the provided examples to understand the context of value-equality dependencies. \n4. Evaluate whether the identical values of the artifactId 'lombok' in different modules indicate a dependency. \n5. Consider the role of the artifactId in Maven dependency management and whether having the same artifactId is necessary for the project to function correctly. \n6. Formulate a rationale based on the evaluation and determine if a value-equality dependency exists."",
	""rationale"": ""The artifactId 'lombok' in both configurations refers to the same Maven dependency in different modules within the same project. In Maven, dependencies are identified by their groupId, artifactId, and version. Since both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. This ensures that the Lombok library is consistently used across different modules, which is crucial for the project to function correctly. Therefore, the identical values of the artifactId 'lombok' indicate a value-equality dependency."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options have the same value 'frontend-maven-plugin'. However, the context provided indicates that one is in the pluginManagement section and the other is in a profile-specific section. The pluginManagement section is used to define plugin versions and configurations that can be inherited by child projects, while the profile-specific section is used to define configurations that are activated under certain conditions. The value-equality here does not imply a dependency because the pluginManagement section's purpose is to provide a default configuration that can be overridden. The profile-specific configuration can independently specify the same plugin without depending on the pluginManagement configuration.","Instead, child projects inherit these values from the
declaration in the parent POM.

Finally, let's run the build again and see the output:

            
                        ....
            [INFO] --- build-helper-maven-plugin:3.3.0:add-resource (add-resource) @ submodule-1 ---
            [INFO]
            [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ submodule-1 ---
            [INFO] Using 'UTF-8' encoding to copy filtered resources.
            
            [INFO] Copying 1 resource to json
            ....

Here, the plugin executes during the build but only in the child project with
the corresponding declaration. As a result, the project output now contains
the additional resources from the specified project location, as expected.

We should note that **only** **the parent POM contains the plugin declaration
and configuration** whilst the child projects just reference this, as needed.

The child projects are free to [modify the inherited configuration](/maven-
plugin-override-parent) if required.

## 5\. Core Plugins

There are some Maven [core plugins](/core-maven-plugins) that are used as part
of the build lifecycle, by default. For example, the _clean_ and _compiler_
plugins don't need to be declared explicitly.

We can, however, explicitly declare and configure these in the
_pluginManagement_ element in the POM. The main difference is that the **core
plugin configuration takes effect automatically without any reference in the
child projects**.

Let's try this out by adding the _compiler_ plugin to the familiar
_pluginManagement_ section:

            
                        <pluginManagement>
                ....
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.12.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
                ....
            </pluginManagement>

Here, we've locked down the plugin version and configured it to use Java 8 to
build the project. However, there is no additional _plugin_ declaration
required in any child projects. The build framework activates this
configuration by default.

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Overview

[Apache Maven](/maven) is a powerful tool that uses
[plugins](/maven#introduction-10) to automate and perform all the build and
reporting tasks in a Java project.

However, there are likely to be several of these plugins used in the build
along with different versions and configurations, especially in a [multi-
module project](/maven-multi-module). This can lead to problems of complex POM
files with redundant or duplicate plugin artifacts as well as configurations
scattered across various child projects.

In this article, we'll see how to use Maven's plugin management mechanism to
handle such issues and effectively maintain plugins across the whole project.

## 2\. Plugin Configuration

Maven has two types of plugins:

        * Build - executed during the build process. Examples include Clean, Install, and Surefire plugins. These should be configured in the _build_ section of the POM.
        * Reporting - executed during site generation to produce various project reports. Examples include Javadoc and Checkstyle plugins. These are configured in the _reporting_ section of the project POM.

Maven plugins provide all the useful functionalities required to execute and
manage the project build.

For example, we can declare the [Jar](https://maven.apache.org/plugins/maven-
jar-plugin/) plugin in the POM:

            
                        <build>
                ....
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>3.3.0</version>
                        ....
                    </plugin>
                ....
                </plugins>
            </build>

Here, we've included the plugin in the _build_ section to add the capability
to compile our project into a _jar_.

## 3\.

For instance, the Maven Antrun Plugin version 1.2 uses Ant version 1.6.5, if
you want to use the latest Ant version when running this plugin, you need to
add `<dependencies>` element like the following:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            ...
            <dependencies>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant</artifactId>
                <version>1.7.1</version>
              </dependency>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant-launcher</artifactId>
                <version>1.7.1</version>
              </dependency>
             </dependencies>
          </plugin>
        </plugins>
      </build>
      ...
    </project>

### Using the `<inherited>` Tag In Build Plugins

By default, plugin configuration should be propagated to child POMs, so to
break the inheritance, you could use the `<inherited>` tag:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            <inherited>false</inherited>
            ...
          </plugin>
        </plugins>
      </build>
      ...
    </project>

## Configuring Reporting Plugins

The following is only to configure Reporting plugins in the `<reporting>`
element.

### Using the `<reporting>` Tag VS `<build>` Tag

Configuring a reporting plugin in the `<reporting>` or `<build>` elements in
the pom does not exactly have the same results.

`mvn site`

    Since maven-site-plugin 3.4, it uses the parameters defined in the `<configuration>` element of each reporting Plugin specified in the `<reporting>` element, in addition to the parameters defined in the `<configuration>` element of each plugin specified in `<build>` (parameters from `<build>` section were previously ignored).

](/questions/11881663/what-is-the-difference-in-maven-between-
dependency-and-plugin-tags-in-pom-xml)

[ 36 ](/q/14725316 ""Question score \(upvotes - downvotes\)"") [What is the use
of pom.xml in Maven?](/questions/14725316/what-is-the-use-of-pom-xml-in-maven)

[ 1 ](/q/21150991 ""Question score \(upvotes - downvotes\)"") [Difference
between plugins in project->build->pluginManagement and
project->build](/questions/21150991/difference-between-plugins-in-project-
build-pluginmanagement-and-project-buil)

[ 2 ](/q/25615330 ""Question score \(upvotes - downvotes\)"") [maven plugin
dependency scope in pom.xml](/questions/25615330/maven-plugin-dependency-
scope-in-pom-xml)

[ 4 ](/q/36572018 ""Question score \(upvotes - downvotes\)"") [Maven default
life-cycle and plugins section](/questions/36572018/maven-default-life-cycle-
and-plugins-section)

[ 1 ](/q/39180770 ""Question score \(upvotes - downvotes\)"") [whats the use of
the dependencies in the plugin element on a
pom.xml](/questions/39180770/whats-the-use-of-the-dependencies-in-the-plugin-
element-on-a-pom-xml)

[ 2 ](/q/47512758 ""Question score \(upvotes - downvotes\)"") [Maven dependency
Plugin usage](/questions/47512758/maven-dependency-plugin-usage)

[ 0 ](/q/51510426 ""Question score \(upvotes - downvotes\)"") [Maven
Dependencies on Plugin Development](/questions/51510426/maven-dependencies-on-
plugin-development)

[ 1 ](/q/59076702 ""Question score \(upvotes - downvotes\)"") [Why can I use
Maven plugins without declaring them in pom.xml?",spring-boot-admin,project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId,NAME,frontend-maven-plugin,maven,pom.xml,project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId,NAME,frontend-maven-plugin,maven,spring-boot-admin-server-ui/pom.xml,Libraries,Maven Plugin,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId in pom.xml and project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId in spring-boot-admin-server-ui/pom.xml. \n2. Understand the context and purpose of each configuration option. \n3. Compare the values of the configuration options to determine if they are identical. \n4. Evaluate if the identical values are due to a necessary dependency or merely for consistency. \n5. Refer to the provided examples to understand how similar dependencies are evaluated. \n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.build.pluginManagement.plugins.plugin_frontend-maven-plugin.artifactId in pom.xml specifies the artifactId for the frontend-maven-plugin within the pluginManagement section, which is used to manage plugin versions and configurations across the project. The configuration option project.profiles.profile_noNpm.build.plugins.plugin_frontend-maven-plugin.artifactId in spring-boot-admin-server-ui/pom.xml specifies the artifactId for the same plugin within a specific profile. Both configurations refer to the same plugin (frontend-maven-plugin) and must have identical values to ensure that the correct plugin is used consistently across different build profiles and plugin management. This ensures that the build process is coherent and avoids conflicts or misconfigurations. Therefore, the identical values are not merely for consistency but are necessary for the correct functioning of the build process."",
	""isDependency"": true
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration option project.parent_spring-boot-admin.groupId with value 'de.codecentric' in spring-boot-admin-dependencies/pom.xml and project.dependencies.dependency_spring-boot-admin-server.groupId with value 'de.codecentric' in spring-boot-admin-starter-server/pom.xml both belong to the same organization, 'de.codecentric'. This suggests that they are part of the same suite of tools or modules provided by the same vendor. However, the fact that they share the same groupId does not necessarily mean that they must have identical values to function correctly. The groupId is a namespace that helps in organizing and identifying the project artifacts, but it does not imply a functional dependency based on value-equality. Therefore, the identical values are more likely a coincidence due to the organizational structure rather than a necessity for functionality.","## **3\. Setting Up a Client**

Now, after we've set up our admin server, we can register our first Spring
Boot application as a client. We must add the following [Maven
dependency](https://mvnrepository.com/search?q=spring-boot-admin-starter-
client):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>3.1.5</version>
            </dependency>

Next, we need to configure the client to know about the admin server's base
URL. For this to happen, we just add the following property:

            
                        spring.boot.admin.client.url=http://localhost:8080

**Starting with Spring Boot 2, endpoints other than _health_ and _info_ are
not exposed by default.**

Let's expose all the endpoints:

            
                        management.endpoints.web.exposure.include=*
            management.endpoint.health.show-details=always

## **4\. Security Configuration**

The Spring Boot Admin server has access to the application's sensitive
endpoints, so **it 's advised that we add some security configuration to both
the admin and client applications.**

At first, we'll focus on configuring the admin server's security. We must add
the following [Maven
dependencies](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-security):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>1.5.7</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>3.1.5</version>
            </dependency>

This will enable security and add a login interface to the admin application.
Make sure to get the [latest
version](https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-
server-ui) of the admin application.

For example, to change the Java version, we can indicate it in the
_java.version_ property:

            
                        <properties>
                <java.version>17</java.version>
            </properties>

## 7\. Spring Boot Project Without Starter Parent

Sometimes we have a custom Maven parent, or we prefer to declare all our Maven
configurations manually.

In that case, we can opt not to use the _spring-boot-starter-parent_ project.
But we can still benefit from its dependency tree by adding a dependency,
_spring-boot-dependencies,_ in our project in _import_ scope.

Let's illustrate this with a simple example in which we want to use another
parent other than the starter parent:

            
                        <parent>
                <groupId>com.baeldung</groupId>
                <artifactId>spring-boot-parent</artifactId>
                <version>1.0.0-SNAPSHOT</version>
            </parent>

Here, we used _parent-modules,_ a different project, as our parent dependency.

Now, in this case, we can still get the same benefits of dependency management
by adding it in _import_ scope and _pom_ type:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-dependencies</artifactId>
                        <version>3.1.5</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                </dependencies>
            </dependencyManagement>

Furthermore, we can pull in any dependency by just declaring it in
_dependencies,_ as we did in our previous examples. No version numbers are
needed for those dependencies.

## 8\. Conclusion

In this article, we gave an overview of _spring-boot-starter-parent,_ and the
benefits of adding it as a parent in any child project.

Next, we learned how to manage dependencies. We can override dependencies in
_dependencyManagement_ or via properties.

The source code for the snippets used in this article is available over on
[Github](https://github.com/eugenp/tutorials/tree/master/spring-boot-
modules/spring-boot-parent), one using the starter parent and the other a
custom parent.

Partner - Aegik AB - NPI EA (cat= Persistence)

!

](/questions/58485006/why-spring-boot-build-
parent-dependency-is-missig)

[ 2 ](/q/58537611 ""Question score \(upvotes - downvotes\)"") [Adding Spring
project to Spring Boot project as a dependency in the
pom.xml](/questions/58537611/adding-spring-project-to-spring-boot-project-as-
a-dependency-in-the-pom-xml)

[ 0 ](/q/59110606 ""Question score \(upvotes - downvotes\)"") [spring-boot-
starter-parent: Can this be included as
dependency](/questions/59110606/spring-boot-starter-parent-can-this-be-
included-as-dependency)

[ 1 ](/q/60384918 ""Question score \(upvotes - downvotes\)"") [Maven child
module in parent pom as dependency](/questions/60384918/maven-child-module-in-
parent-pom-as-dependency)

[ 1 ](/q/62891554 ""Question score \(upvotes - downvotes\)"") [Maven - Add a
maven module as dependency to other maven module](/questions/62891554/maven-
add-a-maven-module-as-dependency-to-other-maven-module)

[ 0 ](/q/70847434 ""Question score \(upvotes - downvotes\)"") [How to use
dependencies from spring-boot-starter-parent?](/questions/70847434/how-to-use-
dependencies-from-spring-boot-starter-parent)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Aligning Footnotes in a LaTeX Table ](https://tex.stackexchange.com/questions/722700/aligning-footnotes-in-a-latex-table)
  * [ Teaching students how to check the validity of their proofs ](https://matheducators.stackexchange.com/questions/27972/teaching-students-how-to-check-the-validity-of-their-proofs)
  * [ Why do certificate CNs not match the hostnames provided in MX records? ](https://serverfault.com/questions/1162610/why-do-certificate-cns-not-match-the-hostnames-provided-in-mx-records)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers?

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Introduction

In this tutorial, we'll learn about _spring-boot-starter-parent._ We'll
discuss how we can benefit from it for better dependency management, default
configurations for plugins, and to quickly build our _Spring Boot_
applications.

We'll also see how we can override the versions of existing dependencies and
properties provided by _starter-parent._

## 2\. Spring Boot Starter Parent

The _spring-boot-starter-parent_ project is a special starter project that
provides default configurations for our application and a complete dependency
tree to quickly build our _Spring Boot_ project. It also provides default
configurations for Maven plugins, such as _maven-failsafe-plugin_ , _maven-
jar-plugin_ , _maven-surefire-plugin_ , and _maven-war-plugin_.

Beyond that, it also inherits dependency management from _spring-boot-
dependencies,_ which is the parent to the s _pring-boot-starter-parent_.

We can start using it in our project by adding it as a parent in our project's
_pom.xml_ :

            
                        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>3.1.5</version>
            </parent>

We can always get the latest version of [_spring-boot-starter-
parent_](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-parent) from Maven Central.

## 3\. Managing Dependencies

Once we've declared the starter parent in our project, we can pull any
dependency from the parent by just declaring it in our _dependencies_ tag. We
also don't need to define versions of the dependencies; Maven will download
jar files based on the version defined for the starter parent in the parent
tag.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",spring-boot-admin,project.parent_spring-boot-admin.groupId,NAME,de.codecentric,maven,spring-boot-admin-dependencies/pom.xml,project.dependencies.dependency_spring-boot-admin-server.groupId,NAME,de.codecentric,maven,spring-boot-admin-starter-server/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_spring-boot-admin.groupId in spring-boot-admin-dependencies/pom.xml and project.dependencies.dependency_spring-boot-admin-server.groupId in spring-boot-admin-starter-server/pom.xml. 2. Determine the type and value of each configuration option: both are of type NAME and have the value 'de.codecentric'. 3. Analyze the context and purpose of each configuration option: project.parent_spring-boot-admin.groupId is used to define the groupId for the parent module, while project.dependencies.dependency_spring-boot-admin-server.groupId is used to define the groupId for a specific dependency. 4. Compare this scenario with the provided examples to understand if the equality of values indicates a dependency. 5. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The configuration option project.parent_spring-boot-admin.groupId in spring-boot-admin-dependencies/pom.xml defines the groupId for the parent module, which is 'de.codecentric'. The configuration option project.dependencies.dependency_spring-boot-admin-server.groupId in spring-boot-admin-starter-server/pom.xml defines the groupId for a specific dependency, which is also 'de.codecentric'. The equality of these values indicates that both the parent module and the specific dependency are part of the same project ecosystem managed by 'de.codecentric'. However, this does not imply a direct dependency between these two configuration options. The groupId is a common identifier used across multiple modules and dependencies within the same project, but it does not create a value-equality dependency between the parent module and the specific dependency."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"The configuration option project.parent_spring-boot-admin-dependencies.groupId in the parent POM and project.dependencies.dependency_spring-boot-admin-starter-client.groupId in the dependency declaration both have the value 'de.codecentric'. This indicates that they belong to the same organization or group of artifacts. However, the equality of these values is not inherently necessary for the correct functioning of the project. The groupId 'de.codecentric' is a namespace used to organize related artifacts, and while it is common for related projects to share the same groupId, this does not imply a functional dependency based on value-equality. The project would still function correctly if the groupId values were different, as long as the correct artifacts are referenced.","## **3\. Setting Up a Client**

Now, after we've set up our admin server, we can register our first Spring
Boot application as a client. We must add the following [Maven
dependency](https://mvnrepository.com/search?q=spring-boot-admin-starter-
client):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>3.1.5</version>
            </dependency>

Next, we need to configure the client to know about the admin server's base
URL. For this to happen, we just add the following property:

            
                        spring.boot.admin.client.url=http://localhost:8080

**Starting with Spring Boot 2, endpoints other than _health_ and _info_ are
not exposed by default.**

Let's expose all the endpoints:

            
                        management.endpoints.web.exposure.include=*
            management.endpoint.health.show-details=always

## **4\. Security Configuration**

The Spring Boot Admin server has access to the application's sensitive
endpoints, so **it 's advised that we add some security configuration to both
the admin and client applications.**

At first, we'll focus on configuring the admin server's security. We must add
the following [Maven
dependencies](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-security):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>1.5.7</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>3.1.5</version>
            </dependency>

This will enable security and add a login interface to the admin application.
Make sure to get the [latest
version](https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-
server-ui) of the admin application.

Typically, you would accept Spring's curation of dependencies so if Sping
provides 4.3.10.RELEASE then either (a) you should use that version or (b)
downgrade Spring Boot toa version which provides 4.3.9.RELEASE.

Read on for details on how to identify the correct starter for a given curated
library ...

The spring-boot-starter-parent is a special starter that provides useful Maven
defaults and a dependency-management section which defines numerous
dependencies which you might want to use in your POM. These dependencies are
often referred to as ""curated"" or ""blessed"" and since they are defined in a
dependency-management section somewhere in the maven hierarchy you can refer
to them in your POM without a version tag (i.e. they inherit the version from
the dependency-management section entry.)

You can see the `spring-boot-starter-parent` POM
[here](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-
project/spring-boot-starters/spring-boot-starter-parent) and peeking inside
you can see that it references the `spring-boot-dependencies` POM
[here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-
project/spring-boot-dependencies/pom.xml).

Looking at your question you mentioned that you can declare a dependency like
so ...

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    

... this is because the `spring-boot-dependencies` POM declares the following:

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${revision}</version>
    </dependency>
    

So, the parent and the starters are just a means of wrapping up dependency
declarations and making them easier for application developers to use. The
[Spring docs](https://docs.spring.io/spring-boot/docs/current-
SNAPSHOT/reference/htmlsingle/#using-boot-starter) summarise this as:

> Starters are a set of convenient dependency descriptors that you can include
> in your application.

](/questions/46300368/how-to-
distinguish-child-dependencies-in-parent-pom)

[ 4 ](/q/46509100 ""Question score \(upvotes - downvotes\)"") [How do I know
which maven dependency should be add to pom.xml](/questions/46509100/how-do-i-
know-which-maven-dependency-should-be-add-to-pom-xml)

[ 0 ](/q/50984403 ""Question score \(upvotes - downvotes\)"") [Maven: Identify
the correct dependency from given code](/questions/50984403/maven-identify-
the-correct-dependency-from-given-code)

[ 1 ](/q/60046025 ""Question score \(upvotes - downvotes\)"") [On which level of
the maven dependency tree are dependencies from the parent
project](/questions/60046025/on-which-level-of-the-maven-dependency-tree-are-
dependencies-from-the-parent-pro)

[ 0 ](/q/70847434 ""Question score \(upvotes - downvotes\)"") [How to use
dependencies from spring-boot-starter-parent?](/questions/70847434/how-to-use-
dependencies-from-spring-boot-starter-parent)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Are there any philosophers that clearly define the word ""consciousness"" in their arguments? ](https://philosophy.stackexchange.com/questions/115107/are-there-any-philosophers-that-clearly-define-the-word-consciousness-in-their)
  * [ Objects proven finiteness yet no algorithm discovered? ](https://mathoverflow.net/questions/475211/objects-proven-finiteness-yet-no-algorithm-discovered)
  * [ A short story where all humans deliberately evacuate Earth to allow its ecology to recover ](https://scifi.stackexchange.com/questions/289926/a-short-story-where-all-humans-deliberately-evacuate-earth-to-allow-its-ecology)
  * [ Aligning Footnotes in a LaTeX Table ](https://tex.stackexchange.com/questions/722700/aligning-footnotes-in-a-latex-table)
  * [ How accurate does the ISS's velocity and altitude need to be to maintain orbit?

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Related

[ 221 ](/q/21317006 ""Question score \(upvotes - downvotes\)"") [Spring Boot -
parent pom when you already have a parent pom](/questions/21317006/spring-
boot-parent-pom-when-you-already-have-a-parent-pom)

[ 2 ](/q/41241709 ""Question score \(upvotes - downvotes\)"") [Spring boot
parent pom with custom parent](/questions/41241709/spring-boot-parent-pom-
with-custom-parent)

[ 1 ](/q/42339077 ""Question score \(upvotes - downvotes\)"") [Multiple spring
dependencies of different versions](/questions/42339077/multiple-spring-
dependencies-of-different-versions)

[ 3 ](/q/47348763 ""Question score \(upvotes - downvotes\)"") [Maven pom.xml
inheriting dependencies from spring-boot-starter-parent is not
working](/questions/47348763/maven-pom-xml-inheriting-dependencies-from-
spring-boot-starter-parent-is-not-wor)

[ 0 ](/q/58485006 ""Question score \(upvotes - downvotes\)"") [Why spring-boot-
build parent dependency is missig?

[Asanke's user
avatar](https://i.sstatic.net/NrPNs.jpg?s=64)](/users/2935910/asanke)

[Asanke](/users/2935910/asanke)Asanke

59122 gold badges1111 silver badges3232 bronze badges

Add a comment  | 

##  3 Answers 3

Sorted by:  [ Reset to default ](/questions/46333956/how-to-determine-the-
parent-dependency-for-a-set-of-springframework-
dependenci?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

+50

[](/posts/48465811/timeline ""Show activity on this post."")

If you are using Spring Boot then these three dependencies will be provided
for you by the following starters:

  * `spring-test` will be provided by `spring-boot-starter-test`
  * `spring-context` will be provided by `spring-boot-starter-data-jpa`
  * `spring-jdbc` will be provided by `spring-boot-starter-jdbc`

So, with the following parent:

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.6.RELEASE</version>
    </parent>
    

... if you add these dependencies:

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    

... then you will get

  * spring-context
  * spring-jdbc
  * spring-test

However, Spring Boot 1.5.6.RELEASE depends on v4.3.10.RELEASE of those core
Spring libraries **not** 4.3.9.RELEASE as suggested in your question.",spring-boot-admin,project.parent_spring-boot-admin-dependencies.groupId,NAME,de.codecentric,maven,spring-boot-admin-build/pom.xml,project.dependencies.dependency_spring-boot-admin-starter-client.groupId,NAME,de.codecentric,maven,spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_spring-boot-admin-dependencies.groupId in spring-boot-admin-build/pom.xml and project.dependencies.dependency_spring-boot-admin-starter-client.groupId in spring-boot-admin-samples/spring-boot-admin-sample-reactive/pom.xml.\n2. Determine the type and value of each configuration option: both are of type NAME with the value 'de.codecentric'.\n3. Analyze the context in which these configuration options are used: the first option is a groupId for the parent module, and the second option is a groupId for a dependency in a sample module.\n4. Compare this scenario with the provided examples to understand if the equality of groupId values indicates a dependency.\n5. Evaluate if the equality of the groupId values is necessary for the correct functioning of the project or if it is merely a coincidence.\n6. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.parent_spring-boot-admin-dependencies.groupId and the option project.dependencies.dependency_spring-boot-admin-starter-client.groupId both have the value 'de.codecentric'. The groupId in Maven is used to uniquely identify a project or organization. In this case, both options belong to the same organization 'de.codecentric', indicating that they are part of the same ecosystem. However, the equality of the groupId values does not imply a direct dependency between these two configuration options. The parent module's groupId is used to identify the organization for the entire project, while the dependency's groupId is used to identify the specific dependency within the project. Therefore, the equality of these values is necessary for organizational consistency but does not indicate a functional dependency between the two options."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value: io.projectreactor. However, having the same value does not necessarily imply a dependency. In Maven, dependencies are often declared with groupId, artifactId, and version to ensure the correct library is used. If both configurations are for the same library (Reactor in this case), it is common practice to use the same groupId. This does not create a dependency between the configuration options themselves but rather indicates that both modules depend on the same external library. Therefore, the identical values are more likely a coincidence of using the same library rather than a strict dependency.","more linked questions](/questions/linked/1725476)

#### Related

[ 6 ](/q/10532274 ""Question score \(upvotes - downvotes\)"") [Maven: Extract
dependency resources before test](/questions/10532274/maven-extract-
dependency-resources-before-test)

[ 8 ](/q/12104668 ""Question score \(upvotes - downvotes\)"") [How to run maven
compile phase with test-jar dependencies](/questions/12104668/how-to-run-
maven-compile-phase-with-test-jar-dependencies)

[ 1 ](/q/17284553 ""Question score \(upvotes - downvotes\)"") [Maven plugin as
dependency in multi-module project](/questions/17284553/maven-plugin-as-
dependency-in-multi-module-project)

[ 0 ](/q/20372228 ""Question score \(upvotes - downvotes\)"") [maven-nar-plugin
and tests in dependent module](/questions/20372228/maven-nar-plugin-and-tests-
in-dependent-module)

[ 1 ](/q/23548879 ""Question score \(upvotes - downvotes\)"") [Maven surefire -
making dependency between tests](/questions/23548879/maven-surefire-making-
dependency-between-tests)

[ 6 ](/q/25858904 ""Question score \(upvotes - downvotes\)"") [Maven : Build all
dependencies but run tests on specific modules](/questions/25858904/maven-
build-all-dependencies-but-run-tests-on-specific-modules)

[ 42 ](/q/27726779 ""Question score \(upvotes - downvotes\)"") [Declare Maven
dependency as test runtime only](/questions/27726779/declare-maven-dependency-
as-test-runtime-only)

[ 5 ](/q/35875897 ""Question score \(upvotes - downvotes\)"") [Maven: Ignore
inter-module dependencies while running unit tests](/questions/35875897/maven-
ignore-inter-module-dependencies-while-running-unit-tests)

[ 9 ](/q/47146491 ""Question score \(upvotes - downvotes\)"") [Java9 Multi-
Module Maven Project Test Dependencies](/questions/47146491/java9-multi-
module-maven-project-test-dependencies)

[ 2 ](/q/63269228 ""Question score \(upvotes - downvotes\)"") [Maven

Multi-
Module Maven Project Test Dependencies](/questions/47146491/java9-multi-
module-maven-project-test-dependencies)

[ 2 ](/q/63269228 ""Question score \(upvotes - downvotes\)"") [Maven multi
module project Cyclic Dependency Issue](/questions/63269228/maven-multi-
module-project-cyclic-dependency-issue)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Infinite output impedance in amplifier, instead of 0? ](https://electronics.stackexchange.com/questions/719736/infinite-output-impedance-in-amplifier-instead-of-0)
  * [ He is ill/well/highly reputed of ](https://ell.stackexchange.com/questions/354985/he-is-ill-well-highly-reputed-of)
  * [ Jellium Hamiltonian in the thermodynamic limit ](https://physics.stackexchange.com/questions/821767/jellium-hamiltonian-in-the-thermodynamic-limit)
  * [ I think standard deviation of y is related to size of x. How do I create a model for this / test this? ](https://stats.stackexchange.com/questions/651262/i-think-standard-deviation-of-y-is-related-to-size-of-x-how-do-i-create-a-model)
  * [ Are Windows ReFS file-level snapshots what File History should have been? ](https://superuser.com/questions/1849380/are-windows-refs-file-level-snapshots-what-file-history-should-have-been)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ What sort of security does Docusign provide? ](https://security.stackexchange.com/questions/277851/what-sort-of-security-does-docusign-provide)
  * [ This expected value has a minimum! ](https://math.stackexchange.com/questions/4947055/this-expected-value-has-a-minimum)
  * [ Is ""secco"" really used in piano music?

](/questions/7751860/how-do-i-include-a-dependencys-test-jar-into-
a-maven-projects-deployment?noredirect=1)

[ 8 ](/q/12104668 ""Question score \(upvotes - downvotes\)"") [How to run maven
compile phase with test-jar dependencies](/questions/12104668/how-to-run-
maven-compile-phase-with-test-jar-dependencies?noredirect=1)

[ 1 ](/q/15949977 ""Question score \(upvotes - downvotes\)"") [Maven can't find
Package in Test-Jar](/questions/15949977/maven-cant-find-package-in-test-
jar?noredirect=1)

[ 2 ](/q/33335307 ""Question score \(upvotes - downvotes\)"") [Why does a Maven
3 multi-module project fail on ""clean package"", and succeed on ""clean compile""
followed by ""package""?](/questions/33335307/why-does-a-maven-3-multi-module-
project-fail-on-clean-package-and-succeed-on?noredirect=1)

[ 0 ](/q/37559779 ""Question score \(upvotes - downvotes\)"") [Why doesn't
IntelliJ Idea find Maven dependencies from another Kotlin
module?](/questions/37559779/why-doesnt-intellij-idea-find-maven-dependencies-
from-another-kotlin-module?noredirect=1)

[ -3 ](/q/34596437 ""Question score \(upvotes - downvotes\)"") [How to script
maven commands in Eclipse](/questions/34596437/how-to-script-maven-commands-
in-eclipse?noredirect=1)

[ 0 ](/q/47719712 ""Question score \(upvotes - downvotes\)"") [Can `mvn compile`
be expected to work with multi-module Maven reactor
builds?](/questions/47719712/can-mvn-compile-be-expected-to-work-with-multi-
module-maven-reactor-builds?noredirect=1)

[See more linked questions](/questions/linked/1725476)

#### Related

[ 6 ](/q/10532274 ""Question score \(upvotes - downvotes\)"") [Maven: Extract
dependency resources before

Apparently, the JAR from the repositories could be outdated or
> completely missing, causing a build failure (cf.
> [MNG-2045](http://jira.codehaus.org/browse/MNG-2045)).

So, first, to package up compiled tests in a JAR and deploy them for general
reuse, configure the `maven-jar-plugin` as follows:

    
    
    <project>
      <build>
        <plugins>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-jar-plugin</artifactId>
           <version>2.2</version>
           <executions>
             <execution>
               <goals>
                 <goal>test-jar</goal>
               </goals>
             </execution>
           </executions>
         </plugin>
        </plugins>
      </build>
    </project>
    

Then, install/deploy the test JAR artifact as usual (using `mvn install` or
`mvn deploy`).

Finally, to use the test JAR, you should specify a dependency with a specified
type of `test-jar`:

    
    
    <project>
      ...
      <dependencies>
        <dependency>
          <groupId>com.myco.app</groupId>
          <artifactId>foo</artifactId>
          <version>1.0-SNAPSHOT</version>
          <type>test-jar</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
      ...
    </project>
    

[Share](/a/1733745 ""Short permalink to this answer"")

[Improve this answer](/posts/1733745/edit)

Follow

answered Nov 14, 2009 at 9:02

[![Pascal Thivent's user
avatar](https://www.gravatar.com/avatar/dc1a5b5fdba36ae9cdcf6e267f1a86ca?s=64&d=identicon&r=PG)](/users/70604/pascal-
thivent)

[Pascal Thivent](/users/70604/pascal-thivent)Pascal Thivent

568k140140 gold badges1.1k1.1k silver badges1.1k1.1k bronze badges

5

  * 4

Pascal. First of all thanks a lot for answering all the maven questions !!
Regarding this question.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.",spring-boot-admin,project.dependencies.dependency_reactor-test.groupId,NAME,io.projectreactor,maven,spring-boot-admin-server-cloud/pom.xml,project.dependencies.dependency_reactor-test.groupId,NAME,io.projectreactor,maven,spring-boot-admin-server/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_reactor-test.groupId in spring-boot-admin-server-cloud/pom.xml and project.dependencies.dependency_reactor-test.groupId in spring-boot-admin-server/pom.xml. \n2. Note that both configuration options have the same value: io.projectreactor. \n3. Determine the purpose of the groupId in Maven, which is to uniquely identify a project or a group of related projects. \n4. Compare this scenario with the provided examples to understand if the equality of groupId values implies a dependency. \n5. Evaluate if the equality of the groupId values is necessary for the correct functioning of the project or if it is merely a coincidence. \n6. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The groupId in Maven is used to uniquely identify a project or a group of related projects. In this case, both configuration options have the same groupId value 'io.projectreactor', indicating that they are part of the same ecosystem or project group. However, the equality of the groupId values alone does not imply a dependency between these two configuration options. It simply indicates that both modules are using dependencies from the same group. Therefore, there is no direct dependency between these configuration options based on their groupId values."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'de.codecentric'. This indicates that they are likely part of the same organizational or project structure. However, the mere fact that they share the same value does not necessarily imply a functional dependency. The project.parent_spring-boot-admin-build.groupId is likely specifying the group ID for the parent project, while project.dependencyManagement.dependencies.dependency_spring-boot-admin-starter-server.groupId is specifying the group ID for a dependency. These configurations are related to the same organization but do not depend on each other for functionality based on value-equality alone.","## **3\. Setting Up a Client**

Now, after we've set up our admin server, we can register our first Spring
Boot application as a client. We must add the following [Maven
dependency](https://mvnrepository.com/search?q=spring-boot-admin-starter-
client):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>3.1.5</version>
            </dependency>

Next, we need to configure the client to know about the admin server's base
URL. For this to happen, we just add the following property:

            
                        spring.boot.admin.client.url=http://localhost:8080

**Starting with Spring Boot 2, endpoints other than _health_ and _info_ are
not exposed by default.**

Let's expose all the endpoints:

            
                        management.endpoints.web.exposure.include=*
            management.endpoint.health.show-details=always

## **4\. Security Configuration**

The Spring Boot Admin server has access to the application's sensitive
endpoints, so **it 's advised that we add some security configuration to both
the admin and client applications.**

At first, we'll focus on configuring the admin server's security. We must add
the following [Maven
dependencies](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-security):

            
                        <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>1.5.7</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>3.1.5</version>
            </dependency>

This will enable security and add a login interface to the admin application.
Make sure to get the [latest
version](https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-
server-ui) of the admin application.

For example, to change the Java version, we can indicate it in the
_java.version_ property:

            
                        <properties>
                <java.version>17</java.version>
            </properties>

## 7\. Spring Boot Project Without Starter Parent

Sometimes we have a custom Maven parent, or we prefer to declare all our Maven
configurations manually.

In that case, we can opt not to use the _spring-boot-starter-parent_ project.
But we can still benefit from its dependency tree by adding a dependency,
_spring-boot-dependencies,_ in our project in _import_ scope.

Let's illustrate this with a simple example in which we want to use another
parent other than the starter parent:

            
                        <parent>
                <groupId>com.baeldung</groupId>
                <artifactId>spring-boot-parent</artifactId>
                <version>1.0.0-SNAPSHOT</version>
            </parent>

Here, we used _parent-modules,_ a different project, as our parent dependency.

Now, in this case, we can still get the same benefits of dependency management
by adding it in _import_ scope and _pom_ type:

            
                        <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-dependencies</artifactId>
                        <version>3.1.5</version>
                        <type>pom</type>
                        <scope>import</scope>
                    </dependency>
                </dependencies>
            </dependencyManagement>

Furthermore, we can pull in any dependency by just declaring it in
_dependencies,_ as we did in our previous examples. No version numbers are
needed for those dependencies.

## 8\. Conclusion

In this article, we gave an overview of _spring-boot-starter-parent,_ and the
benefits of adding it as a parent in any child project.

Next, we learned how to manage dependencies. We can override dependencies in
_dependencyManagement_ or via properties.

The source code for the snippets used in this article is available over on
[Github](https://github.com/eugenp/tutorials/tree/master/spring-boot-
modules/spring-boot-parent), one using the starter parent and the other a
custom parent.

Partner - Aegik AB - NPI EA (cat= Persistence)

!

](/questions/58485006/why-spring-boot-build-
parent-dependency-is-missig)

[ 2 ](/q/58537611 ""Question score \(upvotes - downvotes\)"") [Adding Spring
project to Spring Boot project as a dependency in the
pom.xml](/questions/58537611/adding-spring-project-to-spring-boot-project-as-
a-dependency-in-the-pom-xml)

[ 0 ](/q/59110606 ""Question score \(upvotes - downvotes\)"") [spring-boot-
starter-parent: Can this be included as
dependency](/questions/59110606/spring-boot-starter-parent-can-this-be-
included-as-dependency)

[ 1 ](/q/60384918 ""Question score \(upvotes - downvotes\)"") [Maven child
module in parent pom as dependency](/questions/60384918/maven-child-module-in-
parent-pom-as-dependency)

[ 1 ](/q/62891554 ""Question score \(upvotes - downvotes\)"") [Maven - Add a
maven module as dependency to other maven module](/questions/62891554/maven-
add-a-maven-module-as-dependency-to-other-maven-module)

[ 0 ](/q/70847434 ""Question score \(upvotes - downvotes\)"") [How to use
dependencies from spring-boot-starter-parent?](/questions/70847434/how-to-use-
dependencies-from-spring-boot-starter-parent)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Determine if N is zibbable ](https://puzzling.stackexchange.com/questions/127439/determine-if-n-is-zibbable)
  * [ Standard negative binomial regression when counts are mainly zeros? ](https://stats.stackexchange.com/questions/651155/standard-negative-binomial-regression-when-counts-are-mainly-zeros)
  * [ Can I cause a star to go supernova by altering the four fundamental forces?

Get started with Spring Data JPA through the guided reference course:

**[>> CHECK OUT THE COURSE](/courselsd-NPI-EA-1fOru)**

Course - LS - NPI - All

![announcement - icon](/wp-content/uploads/2022/04/announcement-icon.png)

**Get started with Spring Boot** and with core Spring, through the _Learn
Spring_ course:

**[>> CHECK OUT THE COURSE](/course-ls-NPI-dH7Jn)**

## 1\. Introduction

In this tutorial, we'll learn about _spring-boot-starter-parent._ We'll
discuss how we can benefit from it for better dependency management, default
configurations for plugins, and to quickly build our _Spring Boot_
applications.

We'll also see how we can override the versions of existing dependencies and
properties provided by _starter-parent._

## 2\. Spring Boot Starter Parent

The _spring-boot-starter-parent_ project is a special starter project that
provides default configurations for our application and a complete dependency
tree to quickly build our _Spring Boot_ project. It also provides default
configurations for Maven plugins, such as _maven-failsafe-plugin_ , _maven-
jar-plugin_ , _maven-surefire-plugin_ , and _maven-war-plugin_.

Beyond that, it also inherits dependency management from _spring-boot-
dependencies,_ which is the parent to the s _pring-boot-starter-parent_.

We can start using it in our project by adding it as a parent in our project's
_pom.xml_ :

            
                        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>3.1.5</version>
            </parent>

We can always get the latest version of [_spring-boot-starter-
parent_](https://mvnrepository.com/artifact/org.springframework.boot/spring-
boot-starter-parent) from Maven Central.

## 3\. Managing Dependencies

Once we've declared the starter parent in our project, we can pull any
dependency from the parent by just declaring it in our _dependencies_ tag. We
also don't need to define versions of the dependencies; Maven will download
jar files based on the version defined for the starter parent in the parent
tag.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",spring-boot-admin,project.parent_spring-boot-admin-build.groupId,NAME,de.codecentric,maven,spring-boot-admin-client/pom.xml,project.dependencyManagement.dependencies.dependency_spring-boot-admin-starter-server.groupId,NAME,de.codecentric,maven,spring-boot-admin-dependencies/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_spring-boot-admin-build.groupId in spring-boot-admin-client/pom.xml and project.dependencyManagement.dependencies.dependency_spring-boot-admin-starter-server.groupId in spring-boot-admin-dependencies/pom.xml. \n2. Understand the context and purpose of each configuration option. \n3. Compare the provided examples to see how similar dependencies are evaluated. \n4. Determine if the equality of the groupId values indicates a dependency based on the context and purpose of each configuration option. \n5. Formulate a rationale based on the analysis and examples. \n6. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration option project.parent_spring-boot-admin-build.groupId in spring-boot-admin-client/pom.xml specifies the groupId for the parent module, which is 'de.codecentric'. This indicates that the spring-boot-admin-client module inherits configurations from the spring-boot-admin-build module. On the other hand, the configuration option project.dependencyManagement.dependencies.dependency_spring-boot-admin-starter-server.groupId in spring-boot-admin-dependencies/pom.xml specifies the groupId for a dependency, which is also 'de.codecentric'. This indicates that the spring-boot-admin-dependencies module manages dependencies for the spring-boot-admin-starter-server module. While both configurations share the same groupId, this does not imply a direct dependency between the two configuration options. The groupId 'de.codecentric' is used to identify the organization or project, but the specific configurations serve different purposes: one for inheritance and the other for dependency management. Therefore, the equality of the groupId values does not indicate a dependency between these two configuration options."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options have the same value 'de.codecentric'. In Maven projects, the groupId is used to uniquely identify a project across all projects. If two projects share the same groupId, it typically indicates that they belong to the same organization or project family. However, having the same groupId does not necessarily mean there is a functional dependency between the two configurations. It is more about organizational structure rather than a technical requirement for them to have identical values.","](/questions/58485006/why-spring-boot-build-
parent-dependency-is-missig)

[ 2 ](/q/58537611 ""Question score \(upvotes - downvotes\)"") [Adding Spring
project to Spring Boot project as a dependency in the
pom.xml](/questions/58537611/adding-spring-project-to-spring-boot-project-as-
a-dependency-in-the-pom-xml)

[ 0 ](/q/59110606 ""Question score \(upvotes - downvotes\)"") [spring-boot-
starter-parent: Can this be included as
dependency](/questions/59110606/spring-boot-starter-parent-can-this-be-
included-as-dependency)

[ 1 ](/q/60384918 ""Question score \(upvotes - downvotes\)"") [Maven child
module in parent pom as dependency](/questions/60384918/maven-child-module-in-
parent-pom-as-dependency)

[ 1 ](/q/62891554 ""Question score \(upvotes - downvotes\)"") [Maven - Add a
maven module as dependency to other maven module](/questions/62891554/maven-
add-a-maven-module-as-dependency-to-other-maven-module)

[ 0 ](/q/70847434 ""Question score \(upvotes - downvotes\)"") [How to use
dependencies from spring-boot-starter-parent?](/questions/70847434/how-to-use-
dependencies-from-spring-boot-starter-parent)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ What are the ways compilers recognize complex patterns? ](https://langdev.stackexchange.com/questions/3942/what-are-the-ways-compilers-recognize-complex-patterns)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ Are there any philosophers that clearly define the word ""consciousness"" in their arguments?

app.parent  <- parent pom with version numbers and common dependencies (POM)
    com.app.core    <- repository and service layer, models, DTOs (JAR)
    com.app.rest    <- rest API (WAR)
    com.app.soap    <- soap API (WAR)
    

The `pom.xml` file for the **parent** project is:

    
    
    <artifactId>app-parent</artifactId>
    <packaging>pom</packaging>
    <name>app-parent</name>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
        <relativePath/>
    </parent>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    

The `pom.xml` file for the **core** project is:

    
    
    <artifactId>app-core</artifactId>
    <packaging>jar</packaging>
    <name>app-core</name>
    
    <parent>
        <groupId>com.app</groupId>
        <artifactId>app-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>./app-parent/pom.xml</relativePath>
    </parent>
    
    <dependencies>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    </dependencies>
    

The `pom.

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

[Visit chat](https://chat.stackoverflow.com/)

#### Related

[ 221 ](/q/21317006 ""Question score \(upvotes - downvotes\)"") [Spring Boot -
parent pom when you already have a parent pom](/questions/21317006/spring-
boot-parent-pom-when-you-already-have-a-parent-pom)

[ 2 ](/q/41241709 ""Question score \(upvotes - downvotes\)"") [Spring boot
parent pom with custom parent](/questions/41241709/spring-boot-parent-pom-
with-custom-parent)

[ 1 ](/q/42339077 ""Question score \(upvotes - downvotes\)"") [Multiple spring
dependencies of different versions](/questions/42339077/multiple-spring-
dependencies-of-different-versions)

[ 3 ](/q/47348763 ""Question score \(upvotes - downvotes\)"") [Maven pom.xml
inheriting dependencies from spring-boot-starter-parent is not
working](/questions/47348763/maven-pom-xml-inheriting-dependencies-from-
spring-boot-starter-parent-is-not-wor)

[ 0 ](/q/58485006 ""Question score \(upvotes - downvotes\)"") [Why spring-boot-
build parent dependency is missig?

[INFO] Using 'UTF-8' encoding to copy filtered properties files. [INFO] Copying 1 resource [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  0.740 s [INFO] Finished at: 2021-01-26T22:56:19+01:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 
Then I ran ""mvn clean install -X"" for more Information and it gives out this in addition.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.",spring-boot-admin,project.parent_spring-boot-admin.groupId,NAME,de.codecentric,maven,spring-boot-admin-dependencies/pom.xml,project.parent_spring-boot-admin-samples.groupId,NAME,de.codecentric,maven,spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_spring-boot-admin.groupId in spring-boot-admin-dependencies/pom.xml and project.parent_spring-boot-admin-samples.groupId in spring-boot-admin-samples/spring-boot-admin-sample-eureka/pom.xml. 2. Determine the type and value of each configuration option: both are of type NAME and have the value 'de.codecentric'. 3. Analyze the context in which these configuration options are used: both are groupId values in Maven POM files, indicating the organization or project to which the modules belong. 4. Compare this scenario with the provided examples to understand if the equality of groupId values implies a dependency. 5. Conclude whether the identical groupId values indicate a dependency based on the rationale provided in the examples."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify a project across all projects. The options project.parent_spring-boot-admin.groupId and project.parent_spring-boot-admin-samples.groupId both have the value 'de.codecentric', indicating that they belong to the same organization or project. This is similar to the example where litemall-admin-api and litemall-core share the same groupId, indicating a dependency. Therefore, the identical groupId values in this case also imply a dependency, as they are part of the same project and need to specify the same groupId to maintain consistency and proper identification within the Maven ecosystem."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FP,False,"Both configuration options have the same 'groupId' value of 'org.springframework.cloud'. In Maven, the 'groupId' is a critical part of identifying dependencies. The 'dependencyManagement' section is used to manage versions of dependencies in a centralized manner, ensuring consistency across the project. The 'dependencies' section lists the actual dependencies required by the project. For the dependencies to resolve correctly, the 'groupId' values must match those specified in the 'dependencyManagement' section. Therefore, the 'groupId' values being identical is not coincidental but a necessary condition for the Maven build to function correctly.","springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 0 ](/q/59151300 ""Question score \(upvotes - downvotes\)"") [how fix
dependency error Project build error: dependencies cloud:spring-cloud-starter-
openfeign:jar is missing](/questions/59151300/how-fix-dependency-error-
project-build-error-dependencies-cloudspring-cloud-st)

[ 0 ](/q/60377218 ""Question score \(upvotes - downvotes\)"") [Maven Build-
[ERROR] 'dependencies.dependency.version' for
org.springframework.cloud:spring-cloud-starter-zuul:jar is missing. @ line 28,
column 15](/questions/60377218/maven-build-error-dependencies-dependency-
version-for-org-springframework-c)

[ 6 ](/q/70965480 ""Question score \(upvotes - downvotes\)"") [SpringBoot
3.0.0-M1 + SpringCloud 2022.0.0-M1 [ERROR] 'dependency.version' for
org.springframework.cloud:spring-cloud-starter-sleuth:jar is
missing](/questions/70965480/springboot-3-0-0-m1-springcloud-2022-0-0-m1-error-
dependency-version-for-o)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ How should I run cable across a steel beam? ](https://diy.stackexchange.com/questions/303548/how-should-i-run-cable-across-a-steel-beam)
  * [ What standards did velocipedes have when they were invented? ](https://bicycles.stackexchange.com/questions/94874/what-standards-did-velocipedes-have-when-they-were-invented)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ Okay to travel to places where the locals are unwelcoming?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
            <scope>compile</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
            <version>2.1.1.RELEASE</version>
        </dependency>
    
        <!--Test-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.194</version>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
    
        <!--microservices-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.1.0.RELEASE</version>
        </dependency>
    
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-commons</artifactId>-->
            <!--<version>1.0.0.RELEASE</version>-->
        <!--</dependency>-->
    
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.

xml missing dependencies](/questions/54812168/spring-boot-pom-xml-missing-
dependencies)

[ 0 ](/q/55742450 ""Question score \(upvotes - downvotes\)"") [Non-resolvable
import POM: Failure to find org.springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 1 ](/q/63710439 ""Question score \(upvotes - downvotes\)"") [Non Resolvable
import POM Spring-boot dependencies 2.3.3 Release](/questions/63710439/non-
resolvable-import-pom-spring-boot-dependencies-2-3-3-release)

[ 0 ](/q/65167089 ""Question score \(upvotes - downvotes\)"") [dependecy not
found: openfeign](/questions/65167089/dependecy-not-found-openfeign)

[ 0 ](/q/65697448 ""Question score \(upvotes - downvotes\)"") [maven dependency
spring-cloud-starter 2.1.0.RELEASE test failures](/questions/65697448/maven-
dependency-spring-cloud-starter-2-1-0-release-test-failures)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ How to reset hints in a CP-SAT model? ](https://or.stackexchange.com/questions/12303/how-to-reset-hints-in-a-cp-sat-model)
  * [ Is the XOR of hashes a good hash function? ](https://crypto.stackexchange.com/questions/112377/is-the-xor-of-hashes-a-good-hash-function)
  * [ Holding *west* on the 090 radial? ](https://aviation.stackexchange.com/questions/105988/holding-west-on-the-090-radial)
  * [ Mass driver - reducing required length using loop? ](https://space.stackexchange.com/questions/66472/mass-driver-reducing-required-length-using-loop)
  * [ Why are there two cables connected to this GFCI outlet?

I have been trying to set up a spring boot project but am getting an error. I
researched and tried various options but no luck so far. Any help would be
appreciated.

The pom.xml file:

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    
    <groupId>com.sysyaas.pardakhtyary</groupId>
    <artifactId>auth</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>master</name>
    <packaging>jar</packaging>
    <description>Auth Server Pardakhtyary</description>
    
    <!--<properties>-->
        <!--<java.version>1.8</java.version>-->
        <!--<spring-cloud.version>Finchley.M8</spring-cloud.version>-->
    <!--</properties>-->
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
    
        <!--Swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.",Spring-Cloud-Platform,project.dependencies.dependency_spring-cloud-starter-loadbalancer.groupId,NAME,org.springframework.cloud,maven,ace-infrastructure/ace-monitor/pom.xml,project.dependencyManagement.dependencies.dependency_spring-cloud-dependencies.groupId,NAME,org.springframework.cloud,maven,pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-cloud-starter-loadbalancer.groupId in ace-infrastructure/ace-monitor/pom.xml and project.dependencyManagement.dependencies.dependency_spring-cloud-dependencies.groupId in the root pom.xml. 2. Determine the type and value of each configuration option. 3. Compare the values of the configuration options to see if they are identical. 4. Evaluate the context and purpose of each configuration option to determine if they must have identical values to function correctly. 5. Refer to the provided examples to understand how similar dependencies are evaluated. 6. Conclude whether a value-equality dependency exists based on the comparison and context."",
	""rationale"": ""The configuration option project.dependencies.dependency_spring-cloud-starter-loadbalancer.groupId in ace-infrastructure/ace-monitor/pom.xml has the value 'org.springframework.cloud', and the configuration option project.dependencyManagement.dependencies.dependency_spring-cloud-dependencies.groupId in the root pom.xml also has the value 'org.springframework.cloud'. Both configurations refer to the same groupId, indicating that they are part of the same Spring Cloud ecosystem. However, the groupId alone does not establish a dependency between these two configuration options. The groupId 'org.springframework.cloud' is a common identifier for Spring Cloud dependencies, but it does not imply that the specific dependency 'spring-cloud-starter-loadbalancer' in ace-infrastructure/ace-monitor/pom.xml depends on the dependency management entry 'spring-cloud-dependencies' in the root pom.xml. The equality of the groupId values indicates that they are part of the same ecosystem, but there is no direct dependency between these two configuration options based on their groupId values."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,9.0,FN,True,"In Maven, the parent POM's artifactId is referenced in the child POM to establish a parent-child relationship. The child POM inherits configurations from the parent POM. However, the artifactId of the child POM does not need to match the artifactId of the parent POM for the build to function correctly. The identical values in this case are coincidental and do not indicate a value-equality dependency. The child POM's artifactId can be different from the parent POM's artifactId without causing any issues.","](/questions/15631436/missing-
artifactid-in-pom-and-error-in-find-parent)

[ 7 ](/q/26503589 ""Question score \(upvotes - downvotes\)"") [Duplicate
artifactId in child pom](/questions/26503589/duplicate-artifactid-in-child-
pom)

[ 5 ](/q/26858565 ""Question score \(upvotes - downvotes\)"") [Unable to resolve
${project.version} in child pom.xml from parent
pom.xml](/questions/26858565/unable-to-resolve-project-version-in-child-pom-
xml-from-parent-pom-xml)

[ 1 ](/q/30732384 ""Question score \(upvotes - downvotes\)"") [maven dependency
management from parent pom overrides
${project.version}](/questions/30732384/maven-dependency-management-from-
parent-pom-overrides-project-version)

[ 45 ](/q/38594036 ""Question score \(upvotes - downvotes\)"") [difference of
artifactId and name in maven POM](/questions/38594036/difference-of-
artifactid-and-name-in-maven-pom)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 3 ](/q/45946539 ""Question score \(upvotes - downvotes\)"") [Artifactory/JFrog
is producing the wrong parent artifactId in generated
POM](/questions/45946539/artifactory-jfrog-is-producing-the-wrong-parent-
artifactid-in-generated-pom)

[ 0 ](/q/61676718 ""Question score \(upvotes - downvotes\)"") [POM parent
artifact id same to original artifact is](/questions/61676718/pom-parent-
artifact-id-same-to-original-artifact-is)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Is ""secco"" really used in piano music? ](https://music.stackexchange.com/questions/136827/is-secco-really-used-in-piano-music)
  * [ How to request for a package to be added to the Fedora repositories?

ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: 
Thing is it should work, but I keep getting Maven error whenever I run the docker-compose up command:
myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal>  or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -> [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging.

](/questions/17720566/maven-how-why-should-it-work-
to-set-the-parent-version-to-be-based-on-a-proper)

[ 1 ](/q/39490250 ""Question score \(upvotes - downvotes\)"") [Maven and parent
project](/questions/39490250/maven-and-parent-project)

[ 1 ](/q/41375615 ""Question score \(upvotes - downvotes\)"") [maven using
parent dependencyManagement with ${project.version} causes dependency in wrong
version](/questions/41375615/maven-using-parent-dependencymanagement-with-
project-version-causes-dependenc)

[ 10 ](/q/50620293 ""Question score \(upvotes - downvotes\)"") [Maven
dependencyManagement: inherit dependency version from
parent](/questions/50620293/maven-dependencymanagement-inherit-dependency-
version-from-parent)

[ 0 ](/q/64111037 ""Question score \(upvotes - downvotes\)"") [Maven
build/plugins section inheritance behavior w.r.t to plugin
version](/questions/64111037/maven-build-plugins-section-inheritance-behavior-
w-r-t-to-plugin-version)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Parking ticket for parking in a private lot reserved for customers of X, Y, and Z business's ](https://law.stackexchange.com/questions/103926/parking-ticket-for-parking-in-a-private-lot-reserved-for-customers-of-x-y-and)
  * [ How could warfare be kept using pike and shot like tactics for 700 years? ](https://worldbuilding.stackexchange.com/questions/260003/how-could-warfare-be-kept-using-pike-and-shot-like-tactics-for-700-years)
  * [ When Trump ex-rivals, who previously gave Trump terrible comments, now turn to praising him, what benefits could they gain? ](https://politics.stackexchange.com/questions/88373/when-trump-ex-rivals-who-previously-gave-trump-terrible-comments-now-turn-to-p)
  * [ Could today's flash memory be used instead of RAM in 1980s 8 bit machines?

Hence you can override this default parent POM by explicitly specifying a
different parent POM in the child module’s pom.xml file and this child will
inherit the properties of parent specified in parent tag not the parent in
project aggregation scenario.

[Maven](/tag/maven?source=post_page-----571975b7f807---------------
maven-----------------)

[Pom Xml](/tag/pom-xml?source=post_page-----571975b7f807---------------
pom_xml-----------------)

[Java](/tag/java?source=post_page-----571975b7f807---------------
java-----------------)

[Maven Project Inheritence](/tag/maven-project-inheritence?source=post_page
-----571975b7f807---------------maven_project_inheritence-----------------)

[Maven Project Aggregation](/tag/maven-project-aggregation?source=post_page
-----571975b7f807---------------maven_project_aggregation-----------------)

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F571975b7f807&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40lavishj77%2Fmaven-
project-inheritence-and-project-
aggregation-571975b7f807&user=Lavish+Jain&userId=f89193bff008&source=-----571975b7f807
---------------------clap_footer-----------)

\--

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F571975b7f807&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40lavishj77%2Fmaven-
project-inheritence-and-project-
aggregation-571975b7f807&user=Lavish+Jain&userId=f89193bff008&source=-----571975b7f807
---------------------clap_footer-----------)

\--

[](/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F571975b7f807&operation=register&redirect=https%3A%2F%2Fmedium.com%2F%40lavishj77%2Fmaven-
project-inheritence-and-project-
aggregation-571975b7f807&source=--------------------------bookmark_footer-----------)

[!

test.skip=true [INFO] Scanning for projects. [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO]  [INFO] tdk-cloud [INFO] tdk-core [INFO] tdk-batch [INFO] tdk-web [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-cloud 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-cloud --- [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building tdk-core 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ [WARNING] The POM for com.h2database:h2:jar:1.4.194 is missing, no dependency information available [INFO]  [INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ tdk-core --- [INFO] Deleting /Users/calzada/Development/J2EE/workspace-sts-3.8.4.RELEASE/tdk-cloud/tdk-core/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ tdk-core --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO] Copying 1 resource [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ tdk-core --- [INFO] Changes detected - recompiling the module!",Spring-Cloud-Platform,project.parent_ace-infrastructure.artifactId,NAME,ace-infrastructure,maven,ace-infrastructure/ace-monitor/pom.xml,project.artifactId,NAME,ace-infrastructure,maven,ace-infrastructure/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.parent_ace-infrastructure.artifactId in ace-infrastructure/ace-monitor/pom.xml and project.artifactId in ace-infrastructure/pom.xml. 2. Understand the role of each configuration option: project.parent_ace-infrastructure.artifactId specifies the artifactId of the parent project that ace-monitor is inheriting from, while project.artifactId specifies the unique identifier of the ace-infrastructure project. 3. Determine if the values of these configuration options must be identical for the project to function correctly. 4. Compare this scenario with the provided examples to see if a similar dependency exists. 5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The configuration option project.parent_ace-infrastructure.artifactId in ace-infrastructure/ace-monitor/pom.xml specifies the artifactId of the parent project from which ace-monitor inherits its configurations. The project.artifactId in ace-infrastructure/pom.xml specifies the unique identifier of the ace-infrastructure project. For ace-monitor to correctly inherit configurations from ace-infrastructure, the parent artifactId in ace-monitor must match the artifactId of ace-infrastructure. This ensures that ace-monitor is correctly linked to its parent project, making the value-equality between these two configuration options necessary for the project to function correctly."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FN,True,"Both configuration options refer to the same artifactId 'spring-webmvc'. In Maven, dependencies with the same artifactId typically refer to the same library or module. However, the fact that they have the same value does not necessarily imply a value-equality dependency unless there is a specific requirement for them to be identical for the project to function correctly. Without additional context indicating that these dependencies must be the same, it is likely that they are independently configured to use the same library.","](/questions/28490743/what-is-a-maven-dependency-exactly)

[ 4 ](/q/34961808 ""Question score \(upvotes - downvotes\)"") [Maven and spring-
boot-dependencies](/questions/34961808/maven-and-spring-boot-dependencies)

[ 1 ](/q/42470885 ""Question score \(upvotes - downvotes\)"") [Maven Dependency
Tree - Some dependencies of Spring use old version](/questions/42470885/maven-
dependency-tree-some-dependencies-of-spring-use-old-version)

[ 6 ](/q/47104049 ""Question score \(upvotes - downvotes\)"") [Maven is picking
dependency of old version](/questions/47104049/maven-is-picking-dependency-of-
old-version)

[ 0 ](/q/49720816 ""Question score \(upvotes - downvotes\)"") [JDBC dependency
for Maven on Spring mvc](/questions/49720816/jdbc-dependency-for-maven-on-
spring-mvc)

[ 0 ](/q/52233462 ""Question score \(upvotes - downvotes\)"") [Is it important
to use Maven in Spring MVC project?](/questions/52233462/is-it-important-to-
use-maven-in-spring-mvc-project)

[ 1 ](/q/55639846 ""Question score \(upvotes - downvotes\)"") [Maven Spring boot
dependency vs Maven Spring dependency](/questions/55639846/maven-spring-boot-
dependency-vs-maven-spring-dependency)

[ 6 ](/q/63508359 ""Question score \(upvotes - downvotes\)"") [Spring Boot
@WebMvcTest vs @SpringBootTest](/questions/63508359/spring-boot-webmvctest-vs-
springboottest)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Moving features of different geometries at the same time in QGIS ](https://gis.stackexchange.com/questions/483867/moving-features-of-different-geometries-at-the-same-time-in-qgis)
  * [ Wikipedia states that the relativistic Doppler effect is the same whether it is the source or the receiver that is stationary. Can this be true?

* Featured on Meta 
  * [Upcoming initiatives on Stack Overflow and across the Stack Exchange network...](https://meta.stackexchange.com/questions/401061/upcoming-initiatives-on-stack-overflow-and-across-the-stack-exchange-network-ju ""Upcoming initiatives on Stack Overflow and across the Stack Exchange network \(July 2024\)"")

  * [Announcing a change to the data-dump process](https://meta.stackexchange.com/questions/401324/announcing-a-change-to-the-data-dump-process)

  * [What makes a homepage useful for logged-in users](https://meta.stackoverflow.com/questions/430779/what-makes-a-homepage-useful-for-logged-in-users)

#### Linked

[ 0 ](/q/71879909 ""Question score \(upvotes - downvotes\)"") [The relationship
between spring-web and spring-webmvc](/questions/71879909/the-relationship-
between-spring-web-and-spring-webmvc?noredirect=1)

[ 0 ](/q/51626486 ""Question score \(upvotes - downvotes\)"") [spring-mvc vs
spring-webmvc](/questions/51626486/spring-mvc-vs-spring-webmvc?noredirect=1)

#### Related

[ 0 ](/q/7972800 ""Question score \(upvotes - downvotes\)"") [Spring support for
Maven2 WebApps](/questions/7972800/spring-support-for-maven2-webapps)

[ 0 ](/q/15462696 ""Question score \(upvotes - downvotes\)"") [Why Maven
compiles successfully without Servlet dependency?](/questions/15462696/why-
maven-compiles-successfully-without-servlet-dependency)

[ 1 ](/q/28490743 ""Question score \(upvotes - downvotes\)"") [What is a Maven
Dependency exactly?

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

[Mahendran's user
avatar](https://www.gravatar.com/avatar/10d0ef810da6e76603b6b454b31aa193?s=64&d=identicon&r=PG&f=y&so-
version=2)](/users/1761065/mahendran)

[Mahendran](/users/1761065/mahendran)Mahendran

2,22355 gold badges2525 silver badges4141 bronze badges

Add a comment  | 

##  2 Answers 2

Sorted by:  [ Reset to default ](/questions/13533700/maven-dependency-spring-
web-vs-spring-webmvc?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

159

[](/posts/13533810/timeline ""Show activity on this post."")

`spring-web` provides core HTTP integration, including some handy Servlet
filters, Spring HTTP Invoker, infrastructure to integrate with other web
frameworks and HTTP technologies e.g. Hessian, Burlap.

`spring-webmvc` is an implementation of Spring MVC. `spring-webmvc` [depends
on](http://repo1.maven.org/maven2/org/springframework/spring-
webmvc/3.1.3.RELEASE/spring-webmvc-3.1.3.RELEASE.pom) on `spring-web`, thus
including it will transitively add `spring-web`. You don't have to add
`spring-web` explicitly.

You should depend only on `spring-web` if you don't use Spring MVC but want to
take advantage of other web-related technologies that Spring supports.

[Share](/a/13533810 ""Short permalink to this answer"")

[Improve this answer](/posts/13533810/edit)

Follow

[edited May 21, 2016 at 19:05](/posts/13533810/revisions ""show all edits to
this post"")

[!

[ Collectives ](javascript:void\(0\))

    11. Communities for your favorite technologies. [Explore all Collectives](/collectives-all)

  2. Teams

![](https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae)

Now available on Stack Overflow for Teams! AI features where you work: search,
IDE, and chat.

[Learn
more](https://stackoverflow.co/teams/ai/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=overflowai-learn-more) [Explore
Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-
community&utm_campaign=side-bar&utm_content=explore-teams)

  3. [ Teams ](javascript:void\(0\))
  4. Ask questions, find answers and collaborate at work with Stack Overflow for Teams. [Explore Teams](https://stackoverflow.co/teams/?utm_medium=referral&utm_source=stackoverflow-community&utm_campaign=side-bar&utm_content=explore-teams-compact)

##### Collectives™ on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you
use most.

[ Learn more about Collectives ](/collectives)

**Teams**

Q&A for work

Connect and share knowledge within a single location that is structured and
easy to search.

[ Learn more about Teams ](https://stackoverflow.co/teams/)

Get early access and see previews of new features.

[ Learn more about Labs](https://stackoverflow.co/labs/)

# [Maven dependency spring-web vs spring-webmvc](/questions/13533700/maven-
dependency-spring-web-vs-spring-webmvc)

[ Ask Question ](/questions/ask)

Asked 11 years, 7 months ago

Modified [5 years, 2 months ago](?lastactivity ""2019-05-07 08:38:13Z"")

Viewed 59k times

125

[](/posts/13533700/timeline ""Show activity on this post."")

What is the difference between the following dependencies?",Spring-Cloud-Platform,project.dependencies.dependency_spring-webmvc.artifactId,NAME,spring-webmvc,maven,ace-modules/ace-admin/pom.xml,project.dependencies.dependency_spring-webmvc.artifactId,NAME,spring-webmvc,maven,ace-modules/ace-sample/pom.xml,Libraries,Maven Dependency,"{
    ""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-webmvc.artifactId in ace-modules/ace-admin/pom.xml and project.dependencies.dependency_spring-webmvc.artifactId in ace-modules/ace-sample/pom.xml. \n2. Understand the role of these configuration options within their respective POM files. \n3. Compare the values of these configuration options to determine if they are identical. \n4. Evaluate whether the identical values indicate a dependency based on the provided examples and rationale. \n5. Determine if the configuration options must have identical values to function correctly or if the identical values are coincidental."",
    ""rationale"": ""The configuration options project.dependencies.dependency_spring-webmvc.artifactId in ace-modules/ace-admin/pom.xml and project.dependencies.dependency_spring-webmvc.artifactId in ace-modules/ace-sample/pom.xml both specify the artifactId for the spring-webmvc dependency. In Maven, dependencies are often shared across multiple modules to ensure consistent functionality and compatibility. However, the presence of the same dependency in different modules does not inherently create a dependency between the configuration options themselves. Each module can independently include the spring-webmvc dependency without requiring the other module to do the same. Therefore, the identical values of these configuration options do not indicate a dependency based on value-equality."",
    ""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"The configuration options project.dependencies.dependency_fastjson.artifactId with value 'fastjson' in both ace-dev-base/ace-common/pom.xml and ace-modules/ace-admin/pom.xml are likely specifying the same dependency on the FastJson library. However, the presence of the same artifactId in different POM files does not inherently imply a dependency based on value-equality. These configurations could be independently specifying the same library without requiring identical values for correct functionality. There is no explicit information provided that indicates these configurations must have identical values to function correctly.","Overview**

[**FastJson**](https://github.com/alibaba/fastjson) is a lightweight Java
library used to effectively convert JSON strings to Java objects and vice
versa.

In this article we're going to dive into several concrete and practical
applications of the FastJson library.

## **2\. Maven Configuration**

In order to start working with FastJson, we first need to add that to our
_pom.xml_ :

            
                        <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.13</version>
            </dependency>
            

And as a quick note - [here's the most updated
version](https://mvnrepository.com/artifact/com.alibaba/fastjson) of the
library on Maven Central.

## **3\.

Assuming the MyEjbProject is not another Maven Project you own or want to
build with maven, you could use system dependencies to link to the existing
jar file of the project like so

    
    
    <project>
       ...
       <dependencies>
          <dependency>
             <groupId>yourgroup</groupId>
             <artifactId>myejbproject</artifactId>
             <version>2.0</version>
             <scope>system</scope>
             <systemPath>path/to/myejbproject.jar</systemPath>
          </dependency>
       </dependencies>
       ...
    </project>
    

That said it is usually the better (and preferred way) to install the package
to the repository either by making it a maven project and building it or
installing it the way you already seem to do.

* * *

If they are, however, dependent on each other, you can always create a
separate parent project (has to be a ""pom"" project) declaring the two other
projects as its ""modules"". (The child projects would not have to declare the
third project as their parent). As a consequence you'd get a new directory for
the new parent project, where you'd also quite probably put the two
independent projects like this:

    
    
    parent
    |- pom.xml
    |- MyEJBProject
    |   `- pom.xml
    `- MyWarProject
        `- pom.xml
    

The parent project would get a ""modules"" section to name all the child
modules.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

The aggregator would then use the dependencies in the child modules
to actually find out the order in which the projects are to be built)

    
    
    <project>
       ...
       <artifactId>myparentproject</artifactId>
       <groupId>...</groupId>
       <version>...</version>
    
       <packaging>pom</packaging>
       ...
       <modules>
         <module>MyEJBModule</module>
         <module>MyWarModule</module>
       </modules>
       ...
    </project>
    

That way the projects can relate to each other but (once they are installed in
the local repository) still be used independently as artifacts in other
projects

* * *

Finally, if your projects are not in related directories, you might try to
give them as relative modules:

    
    
    filesystem
     |- mywarproject
     |   `pom.xml
     |- myejbproject
     |   `pom.xml
     `- parent
         `pom.xml
    

now you could just do this (worked in maven 2, just tried it):

    
    
    <!--parent-->
    <project>
      <modules>
        <module>../mywarproject</module>
        <module>../myejbproject</module>
      </modules>
    </project>
    

[Share](/a/15383584 ""Short permalink to this answer"")

[Improve this answer](/posts/15383584/edit)

Follow

[edited Apr 25, 2018 at 16:01](/posts/15383584/revisions ""show all edits to
this post"")

[![Neuron's user
avatar](https://lh5.googleusercontent.com/-HcKtiretO2g/AAAAAAAAAAI/AAAAAAAAAH0/IXGAL7MX8sQ/photo.jpg?sz=64)](/users/4298200/neuron)

[Neuron](/users/4298200/neuron)

5,63555 gold badges4242 silver badges6161 bronze badges

answered Mar 13, 2013 at 11:08

[!

](/questions/29738773/how-to-use-
dependency-of-projecta-in-projectb-in-maven)

[ 12 ](/q/33208765 ""Question score \(upvotes - downvotes\)"") [how to add
dependency of other maven project to my current maven project in java
eclipse?](/questions/33208765/how-to-add-dependency-of-other-maven-project-to-
my-current-maven-project-in-java)

[ 1 ](/q/48964699 ""Question score \(upvotes - downvotes\)"") [How to add a
maven project as a dependency to another one](/questions/48964699/how-to-add-
a-maven-project-as-a-dependency-to-another-one)

[ 2 ](/q/51871832 ""Question score \(upvotes - downvotes\)"") [How non maven
project can be added as a dependency in maven
project](/questions/51871832/how-non-maven-project-can-be-added-as-a-
dependency-in-maven-project)

[ 0 ](/q/56878639 ""Question score \(upvotes - downvotes\)"") [Adding a local
Maven project as a dependency in another local Maven
project](/questions/56878639/adding-a-local-maven-project-as-a-dependency-in-
another-local-maven-project)

[ 2 ](/q/70950337 ""Question score \(upvotes - downvotes\)"") [how do I add a
Maven dependency on another existing project in
Eclipse](/questions/70950337/how-do-i-add-a-maven-dependency-on-another-
existing-project-in-eclipse)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Can loops/cycles (in a temporal sense) exist without beginnings? ](https://philosophy.stackexchange.com/questions/115117/can-loops-cycles-in-a-temporal-sense-exist-without-beginnings)
  * [ What was the purpose of the SCAN commands on the Intel 8272 / NEC μPD765 floppy disk controllers?",Spring-Cloud-Platform,project.dependencies.dependency_fastjson.artifactId,NAME,fastjson,maven,ace-dev-base/ace-common/pom.xml,project.dependencies.dependency_fastjson.artifactId,NAME,fastjson,maven,ace-modules/ace-admin/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_fastjson.artifactId in ace-dev-base/ace-common/pom.xml and project.dependencies.dependency_fastjson.artifactId in ace-modules/ace-admin/pom.xml. \n2. Determine the context and purpose of these configuration options within their respective POM files. \n3. Analyze whether the values of these configuration options are inherently dependent on each other or if they are independently set to the same value. \n4. Compare this scenario with the provided examples to understand if the value-equality indicates a dependency. \n5. Conclude whether the configuration options depend on each other based on the analysis."",
	""rationale"": ""The configuration option project.dependencies.dependency_fastjson.artifactId with the value 'fastjson' in both ace-dev-base/ace-common/pom.xml and ace-modules/ace-admin/pom.xml specifies the artifactId of the FastJson library dependency. These options are used to include the FastJson library in the respective modules. The fact that both modules use the same artifactId 'fastjson' does not inherently indicate a dependency between these configuration options. Each module can independently include the FastJson library without requiring the other module to do the same. The value-equality here is due to both modules needing the same library, not because one configuration option depends on the other."",
	""isDependency"": false
}"
Inheritance and Overrides,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options, project.dependencies.dependency_ace-api.groupId and project.parent_ace-modules.groupId, have the value 'com.github.wxiaoqi'. This indicates that they are currently set to the same value. However, the context does not provide any explicit indication that these values must be identical for the project to function correctly. The groupId in Maven typically identifies the organization or project that produced the artifact, and while it is common for dependencies and parent projects to share the same groupId, it is not a strict requirement enforced by Maven. Therefore, the identical values might be coincidental rather than a necessary dependency.","In other words, if two projects each have a
dependency on the same library, but with different versions, there is likely
to be a conflict that arises because of this, if users were to depend on both
Maven projects and their transitive dependencies.

An example report for the [Azure Java SDKs can be viewed
online](https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-
java/staging/dependencies.html).

## Getting Started

At present there isn't a great deal of convenience available to users of this
tool. So, in short, to use it you do the following:

  1. Clone this repo onto your system
  2. Read the instructions below on how to specify your configuration(s).
  3. Run the app (by using your locally installed Maven) with the following command: `mvn clean package exec:java`
  4. Wait for the application to finish running, and then check the `output` directory.

## Configuration

This project works by reading in a directory of json files, and writing out
reports to another directory. The input format is of one of the following
three forms:

**Long form, downloading from Maven repositories:**

    
    
    [
      {
        ""groupId"": ""com.microsoft.azure"",
        ""artifactId"": ""azure-batch"",
        ""version"": ""4.0.1""
      },
      {
        ""groupId"": ""com.microsoft.azure"",
        ""artifactId"": ""azure-keyvault"",
        ""version"": ""1.1.1""
      }
    ]

**Short form, downloading from Maven repositories:**

    
    
    [
      ""com.microsoft.azure:azure-batch:4.0.1"",
      ""com.microsoft.azure:azure-keyvault:1.1.1""
    ]

**Downloading POM files from other locations:**

    
    
    [
      {
        ""projectName"": ""azure-sdk-for-java"",
        ""pomUrls"": [""https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/pom.client.xml""]
      }
    ]

This input format in the first two formats should be recognisable to anyone
familiar with Maven POM files - we are simply specifying the `groupId`,
`artifactId`, and `version` values of a particular release.

I have a maven project that contains several modules. In Eclipse (Juno, with
m2e) it seems to compile fine. But when I do a maven install on one of the
modules, the build fails immediately.

Parent pom:

    
    
      <groupId>com.sw.system4</groupId>
      <artifactId>system4-parent</artifactId>
      <version>${system4.version}</version>
      <packaging>pom</packaging>
      <name>System 4 Parent Project</name>
      <modules>
        <module>system4-data</module>
         ...others...
      </modules>
      <properties>
        <system4.version>0.0.1-SNAPSHOT</system4.version>
        <spring.version>3.2.3.RELEASE</spring.version>
        ... others...
      </properties>
    
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>runtime</scope>
          </dependency>
        ... lots of others ...
        </dependencies>
      </dependencyManagement>
    

Child pom:

    
    
      <parent>
        <groupId>com.sw.system4</groupId>
        <artifactId>system4-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
      </parent>
      <artifactId>system4-data</artifactId>
      <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>runtime</scope>
        </dependency>
        ... lots of others...
      </dependencies>
    

When I build, I get the following output:

    
    
    [ERROR] The build could not read 1 project -> [Help 1]
    [ERROR]
    [ERROR]   The project com.sw.system4:system4-data:0.0.1-SNAPSHOT (C:\work\eclips
    e_workspaces\systemiv\system4-parent\system4-data\pom.xml) has 8 errors
    
    [ERROR]     'dependencies.dependency.version' for org.springframework:spring-cor
    e:jar is missing. @ line 16, column 16
    
    ... others omitted for clarity ...
    

I dont understand why it doesn't even attempt to compile.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

First clone the git repository and then simply do

    
    
    mvn install
    

This will install the plugin into your local repository and make it available
for use. To make commandline usage a bit easier, you should add the
`com.ning.maven.plugins` group to the `pluginGroups` section in your settings
file:

    
    
    <settings>
      ...
      <pluginGroups>
        <pluginGroup>com.ning.maven.plugins</pluginGroup>
      </pluginGroups>
      ...
    </settings>

# How to use it¶ ↑

The plugin as two goals:

  * com.ning.maven.plugins:maven-dependency-versions-check-plugin:list lists out all dependencies in the project

  * com.ning.maven.plugins:maven-dependency-versions-check-plugin:check checks all the dependencies in the project and can fail the build.

## The “list” goal¶ ↑

This goal reports a list of all dependencies that are used in the current
project:

    
    
    % mvn com.ning.maven.plugins:maven-dependency-versions-check-plugin:list
    
    [.]
    [INFO] [dependency-versions-check:list {execution: default-cli}]
    [INFO] Transitive dependencies for scope 'compile':
    [INFO] backport-util-concurrent:backport-util-concurrent: backport-util-concurrent:backport-util-concurrent-3.1 (3.1)
    [INFO] classworlds:classworlds:                           classworlds:classworlds-1.1-alpha-2 (1.1-alpha-2)
    [INFO] com.pyx4j:maven-plugin-log4j:                      com.pyx4j:maven-plugin-log4j-1.0.1 (*1.0.1*)
    [INFO] commons-collections:commons-collections:           commons-collections:commons-collections-3.2.1 (*3.2.1*)
    [INFO] commons-lang:commons-lang:                         commons-lang:commons-lang-2.5 (*2.5*)
    [INFO] junit:junit:                                       junit:junit-3.8.1 (3.8.1)
    [INFO] log4j:log4j:                                       log4j:log4j-1.2.16 (1.2.14, *1.2.16*)
    [INFO] org.apache.maven.wagon:wagon-provider-api:         org.

## Writing your own strategies (advanced usage)¶ ↑

A custom strategy must implement the
com.ning.maven.plugins.dependencyversionscheck.strategy.Strategy interface and
must declare itself as a plexus component. A jar containing a custom strategy
can then used as a custom dependency of the plugin:

    
    
    /**
     * @plexus.component role=""com.ning.maven.plugins.dependencyversionscheck.strategy.Strategy"" role-hint=""bad""
     */
    public class BadStrategy implements Strategy
    {
        public String getName() { return ""bad""; }
    
        public boolean isCompatible(Version a, Version b) { return false; };
    }
    
    <plugin>
      <groupId>com.ning.maven.plugins</groupId>
      <artifactId>maven-dependency-versions-check-plugin</artifactId>
      <dependencies>
        <dependency>
          <groupId>badExample</groupId>
          <artifactId>badStrategy</artifactId>
          <version>1.0</version>
        </dependency>
      </dependencies>
    .....
    </plugin>

See the source code to the plugin and the existing strategies for examples on
how to write strategies.

# How to resolve conflicts¶ ↑

Some more detailed explanation is below in the background section.

In general, you should try to upgrade dependency versions if you can make sure
that they work (e.g. via unit or other tests). If you cannot do that, then
either add exclusions or add an explicit dependency in the current POM. If
even this fails, then add an exception configuration, but please use this only
as a last resort. In this case you should add comments to the exceptions,
exclusions or explicit dependencies that state why you added them (e.g. noting
the version conflict).

## Background: Maven 2’s arbitrary version resolution strategy¶ ↑

Consider four projects, A through D. A depends on B and C which both depend on
D, but on different versions. E.g.",Spring-Cloud-Platform,project.dependencies.dependency_ace-api.groupId,NAME,com.github.wxiaoqi,maven,ace-modules/ace-sample/pom.xml,project.parent_ace-modules.groupId,NAME,com.github.wxiaoqi,maven,ace-modules/ace-sample/pom.xml,Multi-Maven-Modules,Project Inheritance,"{
	""plan"": ""1. Identify the configuration options in question: project.dependencies.dependency_ace-api.groupId and project.parent_ace-modules.groupId, both located in ace-modules/ace-sample/pom.xml. \n2. Understand the role of 'groupId' in Maven, which is to uniquely identify a project or module within a project. \n3. Compare the provided examples to see how similar dependencies are evaluated, particularly focusing on the 'groupId' field. \n4. Determine if the 'groupId' values must be identical for the project to function correctly, based on Maven's dependency management and project structure. \n5. Conclude whether the configuration options depend on each other due to value-equality."",
	""rationale"": ""In Maven, the 'groupId' is used to uniquely identify a project or module within a project. The configuration option project.dependencies.dependency_ace-api.groupId specifies the groupId for a dependency, while project.parent_ace-modules.groupId specifies the groupId for the parent project. Since ace-api is a module within the ace-modules project, it must share the same groupId as the parent project to ensure proper identification and dependency resolution. Therefore, the values of these configuration options must be identical, indicating a dependency between them."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both configuration options refer to the artifactId of the maven-compiler-plugin. In Maven, the artifactId is a unique identifier for a plugin. If both configurations are set to 'maven-compiler-plugin', it means they are referring to the same plugin. However, this does not necessarily imply a value-equality dependency. The dependency would exist if changing the artifactId in one POM would require changing it in the other to ensure the build process works correctly. Given that Maven allows for independent configuration of plugins in different POM files, and there is no indication that these configurations are inherited from a common parent POM, it is likely that these configurations do not depend on each other.","I'm using a parent pom for my projects and wanted to specify the versions in
one place, so I used properties to specify the version:

parent pom:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
             http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        ....
        <properties>
            <maven-compiler-plugin-version>2.3.2</maven-compiler-plugin-version>
        </properties>
        ....
    </project>
    

project pom:

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0""
             xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0
             http://maven.apache.org/xsd/maven-4.0.0.xsd"">
        ....
        <build>
            <finalName>helloworld</finalName>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin-version}</version>
                    <configuration>
                        <source>1.6</source>
                        <target>1.6</target>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </project>
    

See also: <https://www.allthingsdigital.nl/2011/04/10/maven-3-and-the-
versions-dilemma/>

[Share](/a/28086672 ""Short permalink to this answer"")

[Improve this answer](/posts/28086672/edit)

Follow

answered Jan 22, 2015 at 10:38

[!

For instance, the Maven Antrun Plugin version 1.2 uses Ant version 1.6.5, if
you want to use the latest Ant version when running this plugin, you need to
add `<dependencies>` element like the following:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            ...
            <dependencies>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant</artifactId>
                <version>1.7.1</version>
              </dependency>
              <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant-launcher</artifactId>
                <version>1.7.1</version>
              </dependency>
             </dependencies>
          </plugin>
        </plugins>
      </build>
      ...
    </project>

### Using the `<inherited>` Tag In Build Plugins

By default, plugin configuration should be propagated to child POMs, so to
break the inheritance, you could use the `<inherited>` tag:

    
    
    <project>
      ...
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.2</version>
            <inherited>false</inherited>
            ...
          </plugin>
        </plugins>
      </build>
      ...
    </project>

## Configuring Reporting Plugins

The following is only to configure Reporting plugins in the `<reporting>`
element.

### Using the `<reporting>` Tag VS `<build>` Tag

Configuring a reporting plugin in the `<reporting>` or `<build>` elements in
the pom does not exactly have the same results.

`mvn site`

    Since maven-site-plugin 3.4, it uses the parameters defined in the `<configuration>` element of each reporting Plugin specified in the `<reporting>` element, in addition to the parameters defined in the `<configuration>` element of each plugin specified in `<build>` (parameters from `<build>` section were previously ignored).

Title: ERROR Source option 1.5 is no longer supported. Use 1.6 or later
Post Body:
It all happens when I was trying to build a springboot application by ./mvnw clean install
When I first run the install command, it runs into following problem.
[INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.749s [INFO] Finished at: Fri Jun 21 02:14:32 IST 2013 [INFO] Final Memory: 4M/15M [INFO] ------------------------------------------------------------------------ **[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project spring-social-twitter4j: Execution default-compile of goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile failed: A required class was missing while executing org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile: org/codehaus/plexus/compiler/CompilerException** [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-compiler-plugin:2.3.2 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/SS%20Computer/.m2/repository/org/apache/maven/plugins/maven-compiler-plugin/2.3.2/maven-compiler-plugin-2.3.2.jar [ERROR] urls[1] = file:/C:/Users/SS%20Computer/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR]  [ERROR] -----------------------------------------------------: org.codehaus.plexus.compiler.CompilerException [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.

1.1</javax.activation.version>
		<javax.mail.version>1.6.2</javax.mail.version>
		<jaxb.version>2.3.1</jaxb.version>
		<junit.version>5.9.2</junit.version>
		<nacos-discovery-api.version>1.4.0</nacos-discovery-api.version>
		<!-- database driver -->
		<mysql-connector-j.version>8.0.32</mysql-connector-j.version>
		<postgre.version>42.7.2</postgre.version>
		<!-- Plugins Version sort by alphabet -->
		<maven-assembly-plugin.version>3.3.0</maven-assembly-plugin.version>
		<maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-jacoco-plugin.version>0.8.8</maven-jacoco-plugin.version>
		<maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.4.0</maven-javadoc-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-source-plugin.version>3.2.1</maven-source-plugin.version>
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.

Since I updated to Maven 3 I get the following warning messages at each build
:

How can I get rid of these warnings?

    
    
    [INFO] Scanning for projects...
    [WARNING] 
    [WARNING] Some problems were encountered while building the effective model for proj:id:jar:3.1
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-javadoc-plugin is missing. @ line 195, column 15
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ line 204, column 15
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ line 227, column 15
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 215, column 15
    [WARNING] 'reporting.plugins.plugin.version' for org.codehaus.mojo:jdepend-maven-plugin is missing. @ line 271, column 15
    [WARNING] 
    [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
    [WARNING] 
    [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
    

  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [maven-plugin](/questions/tagged/maven-plugin ""show questions tagged 'maven-plugin'"")
  * [maven-3](/questions/tagged/maven-3 ""show questions tagged 'maven-3'"")

[Share](/q/4123044 ""Short permalink to this question"")

[Improve this question](/posts/4123044/edit)

Follow

[edited Jun 13, 2012 at 1:13](/posts/4123044/revisions ""show all edits to this
post"")

[![Rob Kielty's user
avatar](https://i.sstatic.net/mPToi.jpg?s=64)](/users/411902/rob-kielty)

[Rob Kielty](/users/411902/rob-kielty)

8,09888 gold badges4141 silver badges5252 bronze badges

asked Nov 8, 2010 at 10:33

[!",Spring-Cloud-Platform,project.build.plugins.plugin_maven-compiler-plugin.artifactId,NAME,maven-compiler-plugin,maven,ace-dev-base/ace-common/pom.xml,project.build.plugins.plugin_maven-compiler-plugin.artifactId,NAME,maven-compiler-plugin,maven,ace-gate/pom.xml,Libraries,Maven Plugin,"{
	""plan"": ""1. Identify the configuration options in question: project.build.plugins.plugin_maven-compiler-plugin.artifactId with value maven-compiler-plugin in ace-dev-base/ace-common/pom.xml and ace-gate/pom.xml.\n2. Understand the role of the maven-compiler-plugin in both POM files.\n3. Determine if the value of the artifactId maven-compiler-plugin in both POM files must be identical for the project to function correctly.\n4. Compare this scenario with the provided examples to see if a similar dependency exists.\n5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The maven-compiler-plugin is a common Maven plugin used to compile Java source files. The artifactId maven-compiler-plugin identifies this plugin. In both ace-dev-base/ace-common/pom.xml and ace-gate/pom.xml, the artifactId must be maven-compiler-plugin to correctly reference the Maven Compiler Plugin. This is similar to the example where the artifactId 'spring-cloud-starter-sleuth' must be identical in different modules to ensure the correct dependency is referenced. Therefore, the configuration options depend on each other due to value-equality, as they must both reference the same Maven Compiler Plugin."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"Both configuration options refer to the same Maven artifact 'spring-cloud-starter-openfeign'. In a Maven project, dependencies are typically managed at the project level, and having the same artifactId in different modules does not inherently create a dependency between those modules. The value-equality here is coincidental and does not imply a functional dependency. Each module can independently declare the same dependency without requiring the other to have the same value.","Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.

I am new to Micro-services and was following a course on it. Adding `spring-
cloud-starter-openfeign` maven dependency throws a build error and all the
other dependencies start complaining about resolve issues. I am using latest
`Spring Boot- 2.6.0` version, so I am guessing there might me compatibility
issue as the spring-boot 2.6.0 is quite latest.

It's only the issue with `openfeign`, as I created a micro-service with
`spring-cloud-starter-config`, and wanted another micro-service to call it's
api through openfeign, but unable to do so.

Any discussion on what's wrong would be helpful.

P.S:

I am bootstrapping the project from Spring Initilaizr

I am using `spring-cloud-dependencies` version `2021.0.0-RC1`

Adding the pom.xml for reference

    
    
    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
             xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
        <modelVersion>4.0.0</modelVersion>
        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.6.0</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>com.nikkbh.microservices</groupId>
        <artifactId>currency-conversion-service</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>currency-conversion-service</name>
        <description>currency-conversion-service</description>
        <properties>
            <java.version>17</java.version>
            <spring-cloud.version>2021.0.0-RC1</spring-cloud.version>
        </properties>
        <dependencies>
            <dependency>
                <groupId>org.springframework.

springframework.cloud:spring-cloud-
dependencies:pom:${spring-cloud.version}](/questions/55742450/non-resolvable-
import-pom-failure-to-find-org-springframework-cloudspring-clou)

[ 0 ](/q/59151300 ""Question score \(upvotes - downvotes\)"") [how fix
dependency error Project build error: dependencies cloud:spring-cloud-starter-
openfeign:jar is missing](/questions/59151300/how-fix-dependency-error-
project-build-error-dependencies-cloudspring-cloud-st)

[ 33 ](/q/65181495 ""Question score \(upvotes - downvotes\)"") [bean creation
error when starting spring boot application](/questions/65181495/bean-
creation-error-when-starting-spring-boot-application)

[ 0 ](/q/65697448 ""Question score \(upvotes - downvotes\)"") [maven dependency
spring-cloud-starter 2.1.0.RELEASE test failures](/questions/65697448/maven-
dependency-spring-cloud-starter-2-1-0-release-test-failures)

[ 9 ](/q/67689141 ""Question score \(upvotes - downvotes\)"") [Missing artifact
org.springframework.cloud:spring-cloud-starter-
openfeign:jar:3.0.3-SNAPSHOT](/questions/67689141/missing-artifact-org-
springframework-cloudspring-cloud-starter-openfeignjar3)

####  [ Hot Network Questions ](https://stackexchange.com/questions?tab=hot)

  * [ How to respect leading zero when importing in libreoffice calc ](https://askubuntu.com/questions/1520863/how-to-respect-leading-zero-when-importing-in-libreoffice-calc)
  * [ Maximizing row and column products in a 4x4 grid ](https://puzzling.stackexchange.com/questions/127445/maximizing-row-and-column-products-in-a-4x4-grid)
  * [ Aligning equation at the \middle| of a \left . \middle . \right triple ](https://tex.stackexchange.com/questions/722685/aligning-equation-at-the-middle-of-a-left-middle-right-triple)
  * [ Roasting vegetables instead of sweating for a stock ](https://cooking.stackexchange.

1.1.RELEASE
](/questions/55486108/enablefeignclients-not-found-with-
openfeign-2-1-1-release)

[ 0  how fix dependency error Project build error: dependencies cloud:spring-
cloud-starter-openfeign:jar is missing ](/questions/59151300/how-fix-
dependency-error-project-build-error-dependencies-cloudspring-cloud-st)

[ 1  Feign does not resolve name ](/questions/59736964/feign-does-not-resolve-
name)

[ 15  spring-cloud-starter-openfeign: Invalid HTTP method: PATCH executing
PATCH ](/questions/61641977/spring-cloud-starter-openfeign-invalid-http-
method-patch-executing-patch)

[ 0  dependecy not found: openfeign ](/questions/65167089/dependecy-not-found-
openfeign)

[ 33  bean creation error when starting spring boot application
](/questions/65181495/bean-creation-error-when-starting-spring-boot-
application)

[ 9  Missing artifact org.springframework.cloud:spring-cloud-starter-
openfeign:jar:3.0.3-SNAPSHOT ](/questions/67689141/missing-artifact-org-
springframework-cloudspring-cloud-starter-openfeignjar3)

[ 2  No qualifying bean of type 'feign.Client' available being thrown in the
background ](/questions/74659703/no-qualifying-bean-of-type-feign-client-
available-being-thrown-in-the-backgrou)

Load 7 more related questions  Show fewer related questions

##  0

Sorted by:  [ Reset to default ](/questions/70096036/spring-cloud-starter-
openfeign-throwing-build-resolve-error-for-all-other-
depend?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

##  Know someone who can answer?

- [Nikhil Bhutani](/users/11503939/nikhil-bhutani ""55 reputation"")

Commented Nov 26, 2021 at 4:58

Add a comment  | 

Related questions

[ 8  Spring Cloud OpenFeign Failed to Create Dynamic Query Parameters
](/questions/53546840/spring-cloud-openfeign-failed-to-create-dynamic-query-
parameters)

[ 3  Spring-cloud-starter-openfeign: SSL handshake exception with feign-
httpclient ](/questions/53645425/spring-cloud-starter-openfeign-ssl-handshake-
exception-with-feign-httpclient)

[ 2  @EnableFeignClients not found with openfeign 2.1.1.RELEASE
](/questions/55486108/enablefeignclients-not-found-with-
openfeign-2-1-1-release)

Related questions

[ 8  Spring Cloud OpenFeign Failed to Create Dynamic Query Parameters
](/questions/53546840/spring-cloud-openfeign-failed-to-create-dynamic-query-
parameters)

[ 3  Spring-cloud-starter-openfeign: SSL handshake exception with feign-
httpclient ](/questions/53645425/spring-cloud-starter-openfeign-ssl-handshake-
exception-with-feign-httpclient)

[ 2  @EnableFeignClients not found with openfeign 2.1.1.",Spring-Cloud-Platform,project.dependencies.dependency_spring-cloud-starter-openfeign.artifactId,NAME,spring-cloud-starter-openfeign,maven,ace-gate/pom.xml,project.dependencies.dependency_spring-cloud-starter-openfeign.artifactId,NAME,spring-cloud-starter-openfeign,maven,ace-modules/ace-tool/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-cloud-starter-openfeign.artifactId in ace-gate/pom.xml and project.dependencies.dependency_spring-cloud-starter-openfeign.artifactId in ace-modules/ace-tool/pom.xml. 2. Verify that both configuration options refer to the same Maven dependency by comparing their groupId, artifactId, and version. 3. Determine if the artifactId values being identical is necessary for the correct functioning of the project. 4. Compare this scenario with the provided examples to see if the rationale for dependency applies. 5. Conclude whether the identical artifactId values indicate a value-equality dependency."",
	""rationale"": ""The artifactId 'spring-cloud-starter-openfeign' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. This is similar to the first example provided, where the same artifactId in different modules indicates a value-equality dependency. Therefore, the identical artifactId values in this case indicate a value-equality dependency."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FN,True,"The configuration options 'project.dependencies.dependency_spring-boot-starter-jdbc.artifactId' in both 'ace-modules/ace-admin/pom.xml' and 'ace-modules/ace-generator/pom.xml' have the same value 'spring-boot-starter-jdbc'. This suggests that both modules are using the same dependency. However, the value-equality alone does not necessarily imply a dependency. It could be coincidental. To determine if there is a dependency, we need to consider if these modules need to use the same version of 'spring-boot-starter-jdbc' to ensure compatibility or if they can function independently with different versions.","I like to know if below is possible and how.

I was following a tutorial for spring boot and it was mentioned there we can
have a parent dependency.

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.6.RELEASE</version>
    </parent>
    

And then define the dependencies without the version number.

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    

This will add the dependencies version 1.5.6.RELEASE of spring-boot-starter
and spring-boot-starter-web in to the projects dependencies.

Just like that I want to find what is the `<parent>` code snippet for the
following dependencies I need to add in to a new project. Dependencies in
`<groupId>org.springframework</groupId>`. I need to use the version
4.3.9.RELEASE.

  * spring-context
  * spring-jdbc
  * spring-test

Thanks!

  * [java](/questions/tagged/java ""show questions tagged 'java'"")
  * [spring](/questions/tagged/spring ""show questions tagged 'spring'"")
  * [maven](/questions/tagged/maven ""show questions tagged 'maven'"")
  * [dependencies](/questions/tagged/dependencies ""show questions tagged 'dependencies'"")

[Share](/q/46333956 ""Short permalink to this question"")

[Improve this question](/posts/46333956/edit)

Follow

[edited Jan 26, 2018 at 17:16](/posts/46333956/revisions ""show all edits to
this post"")

[![glytching's user
avatar](https://i.sstatic.net/5h9EI.png?s=64)](/users/8200937/glytching)

[glytching](/users/8200937/glytching)

47k1010 gold badges121121 silver badges126126 bronze badges

asked Sep 21, 2017 at 1:24

[!

Typically, you would accept Spring's curation of dependencies so if Sping
provides 4.3.10.RELEASE then either (a) you should use that version or (b)
downgrade Spring Boot toa version which provides 4.3.9.RELEASE.

Read on for details on how to identify the correct starter for a given curated
library ...

The spring-boot-starter-parent is a special starter that provides useful Maven
defaults and a dependency-management section which defines numerous
dependencies which you might want to use in your POM. These dependencies are
often referred to as ""curated"" or ""blessed"" and since they are defined in a
dependency-management section somewhere in the maven hierarchy you can refer
to them in your POM without a version tag (i.e. they inherit the version from
the dependency-management section entry.)

You can see the `spring-boot-starter-parent` POM
[here](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-
project/spring-boot-starters/spring-boot-starter-parent) and peeking inside
you can see that it references the `spring-boot-dependencies` POM
[here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-
project/spring-boot-dependencies/pom.xml).

Looking at your question you mentioned that you can declare a dependency like
so ...

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    

... this is because the `spring-boot-dependencies` POM declares the following:

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${revision}</version>
    </dependency>
    

So, the parent and the starters are just a means of wrapping up dependency
declarations and making them easier for application developers to use. The
[Spring docs](https://docs.spring.io/spring-boot/docs/current-
SNAPSHOT/reference/htmlsingle/#using-boot-starter) summarise this as:

> Starters are a set of convenient dependency descriptors that you can include
> in your application.

[Asanke's user
avatar](https://i.sstatic.net/NrPNs.jpg?s=64)](/users/2935910/asanke)

[Asanke](/users/2935910/asanke)Asanke

59122 gold badges1111 silver badges3232 bronze badges

Add a comment  | 

##  3 Answers 3

Sorted by:  [ Reset to default ](/questions/46333956/how-to-determine-the-
parent-dependency-for-a-set-of-springframework-
dependenci?answertab=scoredesc#tab-top)

Highest score (default)  Trending (recent votes count more)  Date modified
(newest first)  Date created (oldest first)

2

+50

[](/posts/48465811/timeline ""Show activity on this post."")

If you are using Spring Boot then these three dependencies will be provided
for you by the following starters:

  * `spring-test` will be provided by `spring-boot-starter-test`
  * `spring-context` will be provided by `spring-boot-starter-data-jpa`
  * `spring-jdbc` will be provided by `spring-boot-starter-jdbc`

So, with the following parent:

    
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.6.RELEASE</version>
    </parent>
    

... if you add these dependencies:

    
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    

... then you will get

  * spring-context
  * spring-jdbc
  * spring-test

However, Spring Boot 1.5.6.RELEASE depends on v4.3.10.RELEASE of those core
Spring libraries **not** 4.3.9.RELEASE as suggested in your question.

Use `spring-framework-bom` if you don't use Spring Boot and need Spring
Framework dependencies only:

    
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>4.3.9.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

In such case dependency would be without version was specified:

    
    
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
    </dependency>
    

Also, yet another option exists if you use Spring Boot but you don't want to
use `spring-boot-starter-parent` as parent artifact:

    
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.9.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

See [Spring Boot docs](https://docs.spring.io/spring-
boot/docs/current/reference/html/using-boot-build-systems.html) for more
details. An important note from the docs:

> Each release of Spring Boot is associated with a base version of the Spring
> Framework so we highly recommend you to not specify its version on your own.

It means that you should use Spring Framework version is defined for Spring
Boot.

[Share](/a/48490438 ""Short permalink to this answer"")

[Improve this answer](/posts/48490438/edit)

Follow

[edited Jan 28, 2018 at 19:33](/posts/48490438/revisions ""show all edits to
this post"")

answered Jan 28, 2018 at 19:28

[!

Title: Missing artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT
Post Body:
I am trying to add ""spring-cloud-starter-openfeign"" dependency to pom.xml
<dependency>         <groupId>org.springframework.cloud</groupId>         <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> 
But i am getting below error.
[INFO] Scanning for projects... [INFO]  [INFO] [1m---------------------------< [0;36mcom.cts:stock[0;1m >----------------------------[m [INFO] [1mBuilding stock 0.0.1-SNAPSHOT[m [INFO] [1m--------------------------------[ jar ]---------------------------------[m [WARNING] The POM for org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT is missing, no dependency information available [INFO] [1m------------------------------------------------------------------------[m [INFO] [1;31mBUILD FAILURE[m [INFO] [1m------------------------------------------------------------------------[m [INFO] Total time:  1.370 s [INFO] Finished at: 2021-05-25T18:56:40+05:30 [INFO] [1m------------------------------------------------------------------------[m [ERROR] Failed to execute goal on project [36mstock[m: [1;31mCould not resolve dependencies for project com.cts:stock:jar:0.0.1-SNAPSHOT: Could not find artifact org.springframework.cloud:spring-cloud-starter-openfeign:jar:3.0.3-SNAPSHOT[m -> [1m[Help 1][m [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch. [ERROR] Re-run Maven using the [1m-X[m switch to enable full debug logging.",Spring-Cloud-Platform,project.dependencies.dependency_spring-boot-starter-jdbc.artifactId,NAME,spring-boot-starter-jdbc,maven,ace-modules/ace-admin/pom.xml,project.dependencies.dependency_spring-boot-starter-jdbc.artifactId,NAME,spring-boot-starter-jdbc,maven,ace-modules/ace-generator/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_spring-boot-starter-jdbc.artifactId in ace-modules/ace-admin/pom.xml and project.dependencies.dependency_spring-boot-starter-jdbc.artifactId in ace-modules/ace-generator/pom.xml. 2. Compare the artifactId values of both configuration options to check if they are identical. 3. Determine if the identical values indicate a dependency based on the provided examples and rationale. 4. Evaluate if the identical artifactId values are necessary for the correct functioning of the project or if they are coincidental. 5. Conclude whether a value-equality dependency exists between the two configuration options."",
	""rationale"": ""The artifactId 'spring-boot-starter-jdbc' in both configurations is referring to the same Maven dependency in different modules. In Maven, dependencies are identified by their groupId, artifactId, and version. As both configurations are part of the same project, it is essential for them to have the same artifactId to ensure that the correct dependency is referenced. This indicates a value-equality dependency, as the correct functioning of the project relies on both modules referencing the same dependency."",
	""isDependency"": true
}"
Resource Sharing,gpt-4o-2024-05-13,config2,8.0,FN,True,"Both 'spring.sample-datasource.url' and 'spring.datasource.url' have identical values: 'jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8'. This indicates that they are configured to connect to the same database instance. However, the context provided does not explicitly indicate that these configurations must have identical values to function correctly. They could be independently configured to point to the same database by coincidence. Without additional context suggesting that one configuration relies on the other, it is reasonable to conclude that there is no inherent dependency based on value-equality.","server:
  port: 8769

#请求和响应GZIP压缩支持
feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true
mybatis:
  basepackage: com.github.wxiaoqi.security.generator.mapper
  xmlLocation: classpath:mapper/**/*.xml
  mapper-locations: ""classpath*:mapper/*.xml""


spring:
  application:
      name: ace-generator
  datasource:
      name: 管理后端数据库
      url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_admin_v1?useUnicode=true&characterEncoding=UTF8
      username: root
      password: 123456
      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
  sample-datasource:
      name: Sample后端数据库
      url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8
      username: root
      password: 123456
      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
  redis:
      database: 2
      host: 127.0.0.1
      jedis:
        pool:
            max-active: 20
  sleuth:
    enabled: true
    http:
      legacy:
        enabled: true

#  sentinel:
#    transport:
#      dashboard: localhost:8080
logging:
  level:
    com.github.wxiaoqi.cloud.gate.v2: info
#    com
    org.springframework: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: '*'
        exclude: heapdump,dump,threaddump,configprops,env
  security:
    enabled: false

server:
  port: 9999


mybatis:
  basepackage: com.github.wxiaoqi.cloud.sample.mapper
  xmlLocation: classpath:mapper/**/*.xml
  mapper-locations: ""classpath*:mapper/*.xml""

# 配置swagger
swagger:
  enabled: true
  base-package: com.github.wxiaoqi.security.sample
  title: ace-sample
  version: 1.0.0.SNAPSHOT
  description: Sample样板服务
  contact:
    name: admin

spring:
  application:
    name: ace-sample
  datasource:
    name: 管理后端数据库
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8
    username: root
    password: 123456
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
  redis:
    database: 2
    host: 127.0.0.1
    jedis:
      pool:
          max-active: 20
  sleuth:
    enabled: true
    http:
      legacy:
        enabled: true
  cloud:
    sentinel:
      transport:
        dashboard: localhost:8080



auth:
  serviceId: ace-admin
  user:
    token-header: Authorization
  client:
    id: ace-sample  #不填则默认读取spring.application.name
    secret: 123456

logging:
  level:
    com.github.wxiaoqi.security.sample: info
#    com
    org.springframework: info

logging:
    level:
#        tk.mybatis: DEBUG
        com.github.wxiaoqi.security.admin: DEBUG
spring:
    application:
        name: ace-admin
    jackson:
        date-format: yyyy-MM-dd HH:mm:ss
        time-zone: GMT+8
        default-property-inclusion: non_null
    redis:
        database: 2
        host: 127.0.0.1
        jedis:
            pool:
                max-active: 20
    datasource:
        name: test
        url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_admin_v1?useUnicode=true&characterEncoding=UTF8
        username: root
        password: 123456
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        filters: stat
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20
    cloud:
      sentinel:
        transport:
          dashboard: localhost:8080
mybatis:
    basepackage: com.github.wxiaoqi.security.admin.modules.mapper
    xmlLocation: classpath:mapper/**/*.xml
    mapper-locations: ""classpath*:mapper/*.

server:
  port: 8848
  tomcat:
    basedir: logs
  error:
    include-message: always
db:
  num: 1
  user: ${MYSQL_USER:root}
  password: ${MYSQL_PWD:root}
  url:
    0: jdbc:mysql://${MYSQL_HOST:pig-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:pig_config}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
  pool:
    config:
      connectionTimeout: 30000
      validationTimeout: 10000

nacos:
  core:
    auth:
      server:
        identity:
          key: serverIdentity
          value: security
      system.type: nacos
      plugin.nacos.token.secret.key: SecretKey012345678901234567890123456789012345678901234567890123456789
  security:
    ignore:
      urls: /actuator/**,/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**

spring:
  application:
    name: @project.artifactId@
  datasource:
    platform: mysql  #这个过期属性不能修改，nacos 代码对此有硬编码
  security:
    enabled: true
  boot: # 接入 spring boot admin
    admin:
      client:
        url: http://pig-monitor:5001
        username: pig
        password: pig
        instance:
          service-host-type: ip

useAddressServer: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      influx:
        enabled: false
      elastic:
        enabled: false

[gauravbhatt13's user
avatar](https://www.gravatar.com/avatar/3879b5da36e1ffc837ab3c052705c676?s=64&d=identicon&r=PG)](/users/2238913/gauravbhatt13)

[gauravbhatt13](/users/2238913/gauravbhatt13)gauravbhatt13

49144 silver badges88 bronze badges

Add a comment  | 

9

[](/posts/63900245/timeline ""Show activity on this post."")

Add bellow properties in your application.properties file:

    
    
    # Use one of create/update/create-update    
    spring.jpa.hibernate.ddl-auto=update  
    spring.datasource.url=jdbc:mysql://localhost:3306/db?createDatabaseIfNotExist=true   
    spring.datasource.username=root  //your db user name  
    spring.datasource.password=root  //your db user password 
    spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
    spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect  
    #If your MySql version 5 then use MySQL5Dialect
    
    
    # Enable spring data repos
    spring.data.jpa.repositories.enabled=true
    spring.jpa.show-sql=true
    spring.jpa.database=mysql
    

[Share](/a/63900245 ""Short permalink to this answer"")

[Improve this answer](/posts/63900245/edit)

Follow

answered Sep 15, 2020 at 10:46

[![Md Tofazzal Hossain's user
avatar](https://lh3.googleusercontent.com/-oHtPd7Kuxl4/AAAAAAAAAAI/AAAAAAAAEKA/eYIGopZV9ec/photo.jpg?sz=64)](/users/11123293/md-
tofazzal-hossain)

[Md Tofazzal Hossain](/users/11123293/md-tofazzal-hossain)Md Tofazzal Hossain

20622 silver badges55 bronze badges

Add a comment  | 

9

[](/posts/76614992/timeline ""Show activity on this post."")

As of spring boot 3, `org.hibernate.dialect.MySQL8Dialect` and
`com.mysql.jdbc.Driver` are deprecated.",Spring-Cloud-Platform,spring.sample-datasource.url,URL,jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8,spring,ace-modules/ace-generator/src/main/resources/application.yml,spring.datasource.url,URL,jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8,spring,ace-modules/ace-sample/src/main/resources/application.yml,Datasource,Datasource,"{
	""plan"": ""1. Identify the configuration options to be evaluated: spring.sample-datasource.url in ace-modules/ace-generator/src/main/resources/application.yml and spring.datasource.url in ace-modules/ace-sample/src/main/resources/application.yml. \n2. Compare the values of these configuration options to check if they are identical. \n3. Analyze the context and purpose of each configuration option to determine if they are meant to be used independently or if they are inherently linked. \n4. Consider the examples provided to understand how similar dependencies are evaluated. \n5. Formulate a rationale based on the analysis and examples to determine if a dependency exists. \n6. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The configuration options spring.sample-datasource.url in ace-modules/ace-generator/src/main/resources/application.yml and spring.datasource.url in ace-modules/ace-sample/src/main/resources/application.yml have identical values: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/cloud_sample?useUnicode=true&characterEncoding=UTF8. However, these options are defined in different modules (ace-generator and ace-sample) and are likely intended to configure separate datasources for each module. The similarity in their values does not indicate an inherent dependency between them, as each module can have its own independent datasource configuration. This is similar to the examples provided, where identical values in different contexts (e.g., different environments or modules) do not imply a dependency."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,7.0,FN,True,"Both configuration options have the same value 'javax.servlet', which suggests they might be related. However, the context provided does not explicitly state that these values must be identical for the project to function correctly. The use of 'javax.servlet' could be coincidental, especially given the transition to 'jakarta.servlet'. Without explicit documentation or project requirements indicating that these values must be the same, it is not possible to definitively conclude that a dependency exists based on value-equality alone.","# Jakarta EE

In recent years, Oracle transferred the Java EE technologies to the [Eclipse
Foundation](https://en.wikipedia.org/wiki/Eclipse_Foundation). There the
technologies have been renamed to [_Jakarta EE_](https://jakarta.ee/). So
_Java Servlet_ is now known as [_Jakarta
Servlet_](https://projects.eclipse.org/projects/ee4j.servlet).

This name change was done to respect Oracle’s trademarks. Do a Web search to
find many articles and videos discussing this transition.

This name change includes changing the package naming of the classes from
`javax.*` to `jakarta.*`. This is a breaking change, though updating your
project may be as simple as merely changing your `import` statements. But
check that any libraries you depend on have versions available using the new
naming as well.

# Servlet 5

This transition has brought new versions of the Servlet specification.
[Version 5](https://jakarta.ee/specifications/servlet/5.0/) of the spec is the
same as [Servlet 4](https://jakarta.ee/specifications/servlet/4.0/) but with
the new naming.

For the current version, edit your
[POM](https://en.m.wikipedia.org/wiki/Apache_Maven#Project_Object_Model) file
to use the following Maven dependency. [Check for updates in a Maven
repository](https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-
api) of your choice in the version numbering.

You can deploy web apps built with Servlet 5 to web containers such as Tomcat
10.0.x, Jetty 11.0.x, Glassfish 6, and several more.

    
    
    <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>5.0.0</version>
        <scope>provided</scope>
    </dependency>
    

# Servlet 6

[Jakarta Servlet 6](https://jakarta.ee/specifications/servlet/6.0/)
specification is currently in development, and will contain significant
changes. The spec will be finalized later this year 2022.

javax.servlet.jsp.tagext. How to
import?](/questions/41470826/gradle-finds-the-servlet-library-but-not-jsp-i-e-
javax-servlet-jsp-tagext-how?noredirect=1)

[ 0 ](/q/71180424 ""Question score \(upvotes - downvotes\)"") [IntelliJ servlet
errors, unable to open servlet](/questions/71180424/intellij-servlet-errors-
unable-to-open-servlet?noredirect=1)

#### Related

[ 10 ](/q/3223935 ""Question score \(upvotes - downvotes\)"") [maven + eclipse +
servlet-api.jar](/questions/3223935/maven-eclipse-servlet-api-jar)

[ 1 ](/q/5616498 ""Question score \(upvotes - downvotes\)"") [Problems with
servlets and maven](/questions/5616498/problems-with-servlets-and-maven)

[ 3 ](/q/13982955 ""Question score \(upvotes - downvotes\)"") [Setting up
Servlet / JSP jars in pom.xml for Tomcat 7](/questions/13982955/setting-up-
servlet-jsp-jars-in-pom-xml-for-tomcat-7)

[ 1 ](/q/16903758 ""Question score \(upvotes - downvotes\)"") [How to include
servlet-api.jar in my Java solution?](/questions/16903758/how-to-include-
servlet-api-jar-in-my-java-solution)

[ 0 ](/q/22994142 ""Question score \(upvotes - downvotes\)"") [servlet-api
missing from Maven project](/questions/22994142/servlet-api-missing-from-
maven-project)

[ 0 ](/q/23011247 ""Question score \(upvotes - downvotes\)"") [Maven dependency
javax.servlet must be included in POM for new build
server](/questions/23011247/maven-dependency-javax-servlet-must-be-included-
in-pom-for-new-build-server)

[ 0 ](/q/36534275 ""Question score \(upvotes - downvotes\)"") [Servlet call
failing.

springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.6.RELEASE.jar!/:4.3.6.RELEASE] configserver_1         |    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.11.jar!/:8.5.11] configserver_1         |    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.

springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:952)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.

The spec will be finalized later this year 2022.

See the [overview page](https://jakarta.ee/specifications/servlet/6.0/), the
[product
page](https://projects.eclipse.org/projects/ee4j.servlet/releases/6.0),
[project links page](https://eclipse-ee4j.github.io/servlet-api/), and
[repository coordinates
page](https://search.maven.org/artifact/jakarta.servlet/jakarta.servlet-
api/6.0.0/jar).

    
    
    <dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>6.0.0</version>
        <scope>provided</scope>
    </dependency>
    

[Share](/a/71187119 ""Short permalink to this answer"")

[Improve this answer](/posts/71187119/edit)

Follow

[edited Feb 20, 2022 at 7:55](/posts/71187119/revisions ""show all edits to
this post"")

answered Feb 19, 2022 at 16:56

[![Basil Bourque's user
avatar](https://i.sstatic.net/ZWEI3.jpg?s=64)](/users/642706/basil-bourque)

[Basil Bourque](/users/642706/basil-bourque)Basil Bourque

326k113113 gold badges903903 silver badges1.2k1.2k bronze badges

Add a comment  | 

##  Your Answer

**Reminder:** Answers generated by artificial intelligence tools are not
allowed on Stack Overflow. [Learn more](/help/gen-ai-policy)

Thanks for contributing an answer to Stack Overflow!

  * Please be sure to _answer the question_. Provide details and share your research!

But _avoid_ …

  * Asking for help, clarification, or responding to other answers.
  * Making statements based on opinion; back them up with references or personal experience.

To learn more, see our [tips on writing great answers](/help/how-to-answer).",Spring-Cloud-Platform,project.dependencies.dependency_javax.servlet-api.groupId,NAME,javax.servlet,maven,ace-dev-base/ace-common/pom.xml,project.dependencies.dependency_javax.servlet-api.groupId,NAME,javax.servlet,maven,ace-modules/ace-sample/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_javax.servlet-api.groupId in ace-dev-base/ace-common/pom.xml and project.dependencies.dependency_javax.servlet-api.groupId in ace-modules/ace-sample/pom.xml. \n2. Understand the role of the 'groupId' in Maven dependencies, which is to uniquely identify the group or organization that produced the artifact. \n3. Compare the provided examples to see how similar dependencies are evaluated, particularly focusing on the rationale behind the dependency determination. \n4. Determine if the 'groupId' values being identical in both POM files indicate a dependency or if they are merely coincidental. \n5. Conclude whether the identical 'groupId' values imply a necessary dependency for the project to function correctly."",
	""rationale"": ""The 'groupId' in Maven is used to uniquely identify the group or organization that produced the artifact. In this case, both configuration options have the same 'groupId' value of 'javax.servlet', which indicates that they are referring to the same group of artifacts. However, this does not necessarily imply a dependency between the two configuration options. The identical 'groupId' values are likely coincidental and are used to ensure consistency within the project, rather than indicating a direct dependency between the two options. Each module can independently include the 'javax.servlet' group without depending on the other module's configuration."",
	""isDependency"": false
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,8.0,FN,True,"The 'project.properties.java.version' is typically used in Spring Boot projects to set the Java version for the entire project. The 'project.properties.maven.compile.source' is used by the Maven compiler plugin to set the source compatibility for the Java compiler. While both configurations deal with setting the Java version, they serve different purposes and are used in different contexts. The Maven compiler plugin's 'source' property ensures that the source code is compatible with a specific Java version, while 'java.version' in Spring Boot sets the overall Java version for the project. There is no explicit requirement that these values must be identical, although it is common practice to keep them the same to avoid compatibility issues.","Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

About the default values for `source` and `target`, note that [since the
`3.8.0` of the maven compiler, the default values have changed from `1.5` to
`1.6`](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317225&version=12341563).

# `maven-compiler-plugin` with `release` instead of `source` & `target`

  3. The maven-compiler-plugin `3.6` and later versions provide a new way :

org.apache.maven.plugins maven-compiler-plugin 3.8.0 9

You could also declare just :

    
    
    <properties>
        <maven.compiler.release>9</maven.compiler.release>
    </properties>
    

But at this time it will not work as the `maven-compiler-plugin` default
version you use doesn't rely on a recent enough version.

The Maven `release` argument conveys `release` : a [new JVM standard option
](https://docs.oracle.com/javase/9/tools/javac.htm#JSWOR627) that we could
pass from Java 9 :

> Compiles against the public, supported and documented API for a specific VM
> version.

This way provides a standard way to specify the same version for the `source`,
the `target` and the `bootstrap` JVM options.  
Note that specifying the `bootstrap` is a good practice for cross compilations
and it will not hurt if you don't make cross compilations either.

* * *

**Which is the best way to specify the JDK version?**

The first way (`<java.version>`) is allowed only if you use Spring Boot.

**For Java 8 and below :**

About the two other ways : valuing the
`maven.compiler.source`/`maven.compiler.target` properties **or** using the
`maven-compiler-plugin`, you can use one or the other. It changes nothing in
the facts since finally the two solutions rely on the same properties and the
same mechanism : the maven core compiler plugin.

I'm not very experienced with Maven and while experimenting with multi-module
project I started wondering how can I specify Java version for all my child
modules in parent Maven pom. Until today I was using just:

    
    
    <properties>
        <java.version>1.8</java.version>
    </properties>
    

...but when researching I found that you can also specify Java version in
Maven compiler plugin, like that:

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

And then wrap this into plugin management tag to enable child poms usage of
this. So the first question is this:

**What are the differences beetwen setting Java version in properties and in
Maven compiler plugin?**

I couldn't find clear answer but in process of researching I found that you
can also specify Java version in this way:

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

...which suggest that compiler plugin is there even if I don't explicit
declare it. Running `mvn package` outputs with

    
    
    maven-compiler-plugin:3.1:compile (default-compile) @ testproj ---
    

...and some other plugins that I didn't declare.

**So are those plugins default, hidden part of Maven pom? Are there any
differences between setting source/target in properties and in Maven plugin
configuration element?**

Some other questions are - which way should be used (and when if they are not
equal)? Which one is best for multi-module project and what happens if Java
version specified in pom is different than version pointed in `JAVA_HOME`?

Overview**

In this quick tutorial, we'll show how to **set the Java version in Maven.**

Before moving on, we can **check the default JDK version of Maven.** Running
the _mvn -v_ command will show the Java version in which Maven runs.

## Further reading:

##  [ Guide to Maven Profiles ](/maven-profiles)

Learn how to work with Maven profiles to be able to create different build
configurations.

[ Read more ](/maven-profiles) ->

##  [ Maven Compiler Plugin ](/maven-compiler-plugin)

Learn how to use the Maven compiler plugin, used to compile the source code of
a Maven project.

[ Read more ](/maven-compiler-plugin) ->

## **2\. Use the Compiler Plugin**

We can specify the desired Java version in the [compiler plugin](/maven-
compiler-plugin).

### **2.1. Compiler Plugin**

The first option is setting the version in compiler plugin properties:

            
                        <properties>
                <maven.compiler.target>1.8</maven.compiler.target>
                <maven.compiler.source>1.8</maven.compiler.source>
            </properties>

The Maven compiler accepts this command with -_target_ and -_source_ versions.
If we want to use the Java 8 language features, the -_source_ should be set to
_1.8_.

Also, for the compiled classes to be compatible with JVM 1.8, the -_target_
value should be _1.8_.

The default value for both of them is the 1.6 version.

Alternatively, we can configure the compiler plugin directly:

            
                        <plugins>
                <plugin>    
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>

The _maven-compiler-plugin_ also has additional configuration properties that
allow us to have more control over the compilation process beyond _-source_
and _-target_ versions.

### **2.2. Java 9 and Beyond**

Furthermore, **starting from the JDK 9 version, we can use a new _-release_
command-line option.** This new argument will automatically configure the
compiler to produce class files that will link against the implementation of
the given platform version.

# `maven-compiler-plugin` with `source` & `target`

  2. Using `maven-compiler-plugin` or `maven.compiler.source`/`maven.compiler.target` properties are equivalent.

That is indeed :

    
    
    <plugins>
        <plugin>    
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
    

is equivalent to :

    
    
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    

according to the [Maven documentation of the compiler
plugin](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
mojo.html) since the `<source>` and the `<target>` elements in the compiler
configuration use the properties `maven.compiler.source` and
`maven.compiler.target` if they are defined.

> [**source**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#source)

> The `-source` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: 1.7.  
>  User property is: `maven.compiler.source`.

> [**target**](https://maven.apache.org/plugins/maven-compiler-plugin/compile-
> mojo.html#target)

> The `-target` argument for the Java compiler.  
>  **NOTE** : Since 3.8.0 the default value has changed from 1.5 to 1.6. Since
> 3.9.0 the default value has changed from 1.6 to 1.7  
>  Default value is: `1.6`.  
>  User property is: `maven.compiler.target`.

Is it 10 or 1.10 ?

- [MasterJoe](/users/6648326/masterjoe ""2,245 reputation"")

Commented Mar 9, 2020 at 17:26

  * 2

@MasterJoe2 from java 9 and above versions you need to write the version
number as it is ( <version> 10 </version>), and for the below versions, you
have to add 1. in front of the version (<version>1.5</version>)

- [Ikbel](/users/10275943/ikbel ""2,073 reputation"")

Commented Jun 8, 2020 at 10:37

Add a comment  | 

3

[](/posts/66963233/timeline ""Show activity on this post."")

The below steps work for me like charm! so thought to share with everyone.

These are the lines i added in the pom.xml file to work with a basic project.
I am using Java 12 (you can replace yours 11, 10, 1.8 etc).

    
    
    <properties>
        <maven.compiler.source>12</maven.compiler.source>
        <maven.compiler.target>12</maven.compiler.target>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>12</release>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

After changing the pom file please reload your project so that IDE can
download/fetch the plugin to the project. (For IntelijIDEA: Right-click on
pom.xml -> Go to maven -> Reload project).

please make sure to configure the desire version in your IDE as well.

[Share](/a/66963233 ""Short permalink to this answer"")

[Improve this answer](/posts/66963233/edit)

Follow

answered Apr 6, 2021 at 5:43

[!",Spring-Cloud-Platform,project.properties.java.version,VERSION_NUMBER,1.8,maven,ace-gate/pom.xml,project.properties.maven.compile.source,VERSION_NUMBER,1.8,maven,pom.xml,Version Numbers,JAVA Version,"{
	""plan"": ""1. Identify the purpose and usage of the configuration options 'project.properties.java.version' and 'project.properties.maven.compile.source'.\n2. Determine if these configuration options are interchangeable or if they serve distinct purposes.\n3. Check if the values of these configuration options must be identical for the project to function correctly.\n4. Compare the given examples to see if they provide any insights into the dependency relationship between similar configuration options.\n5. Conclude whether a value-equality dependency exists based on the analysis."",
	""rationale"": ""The 'project.properties.java.version' is a property used in Spring Boot projects to specify the Java version. The 'project.properties.maven.compile.source' is a property used by the Maven Compiler Plugin to specify the source compatibility of the Java code. While both properties can be set to the same value to ensure consistency in the Java version used across the project, they serve different purposes. The 'java.version' property is specific to Spring Boot, whereas 'maven.compile.source' is specific to the Maven Compiler Plugin. Therefore, they do not inherently depend on each other, even though they may often be set to the same value for consistency."",
	""isDependency"": false
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion element in a Maven POM file specifies the version of the POM model being used. According to the provided context, the only supported POM version is 4.0.0, and this is a requirement for all Maven projects. This means that all Maven projects must use modelVersion 4.0.0, but this requirement is universal and not specific to any inter-project dependency. Therefore, the identical values of modelVersion in ace-infrastructure/ace-monitor/pom.xml and ace-modules/ace-admin/pom.xml are due to the universal requirement of Maven and not because these two specific projects depend on each other.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property. This is possible to do since
[version 3.2.1](https://maven.apache.org/docs/3.2.1/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.1/release-notes.html""). On _line 10_ , I set
this property to the actual value I want to use, in this case _42.0_. You can
verify this works by running _**mvn help:effective-pom**_.  
  

  
  
Now the parent is dealt with, lets see the child _pom.xml_ file.  

 Child pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<parent>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>[1.0,99.0)</version>

</parent>

<artifactId>maven-test1-child1</artifactId>

<name>${project.artifactId}</name>

</project>

  
  
The key line here is _line 8_. Here I specify the parent _pom.xml_ version
**_range_** as _[1.0,99.0)_. This means it will match whatever the parent is
between versions _1.0_ and _99.0_. This is possible to do since [version
3.2.2](https://maven.apache.org/docs/3.2.2/release-notes.html ""Go to
http://maven.apache.org/docs/3.2.2/release-notes.html""). The actual version is
not set on the child _pom.xml_ since it will be inherited from the parent
_pom.xml_ , which in turn is defined via the _${revision}_ property.  
  
This feels a little bit hacky and once you do hit your maximum specified
version number you'll have to update all the child projects anyway, but I hope
I would be retired by the time we hit version _99.0_ on my current project!

There is hope at the moment however.
[MNG-5576](https://issues.apache.org/jira/browse/MNG-5576 ""Go to
https://issues.apache.org/jira/browse/MNG-5576"") and
[MNG-2199](https://issues.apache.org/jira/browse/MNG-2199 ""Go to
https://issues.apache.org/jira/browse/MNG-2199"") have been implemented in
Maven versions _3.2.1_ and _3.2.2_ respectively so when you combine these two
features you get something that's quite flexible.  
  
**Goal: To be able to specify the version number for your entire build in a
single place within your parent/super _pom.xml_ file without updating any of
the child _pom.xml_ files or using additional plugins.**  

This no longer works as of Maven 3.5. If you're using this version of Maven
(or later) please see this article: [Multi module builds with Maven 3.5 and
the parent-child pom version
management](https://www.igorkromin.net/index.php/2017/06/16/multi-module-
builds-with-maven-35-and-the-parent-child-pom-version-management/).

  
  
This is what the parent/super _pom.xml_ would look like...  

 Super pom.xml

<?xml version=""1.0"" encoding=""UTF-8"" ?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"">

<modelVersion>4.0.0</modelVersion>

<groupId>maven.test1</groupId>

<artifactId>maven-test1-parent</artifactId>

<version>${revision}</version>

<properties>

<revision>42.0</revision>

</properties>

<name>${project.artifactId}</name>

<description>Main POM file for ${project.artifactId}</description>

<packaging>pom</packaging>

<modules>

<module>Child1</module>

</modules>

</project>

  
  
The key lines above are _line 7_ and _line 10_. On _line 7_ , I set the parent
_pom.xml_ version via the _${revision}_ property.

[[top]](./introduction-to-the-pom.html)

## Project Interpolation and Variables

One of the practices that Maven encourages is _don't repeat yourself_.
However, there are circumstances where you will need to use the same value in
several different locations. To assist in ensuring the value is only specified
once, Maven allows you to use both your own and pre-defined variables in the
POM.

For example, to access the `project.version` variable, you would reference it
like so:

    
    
      <version>${project.version}</version>

One factor to note is that these variables are processed _after_ inheritance
as outlined above. This means that if a parent project uses a variable, then
its definition in the child, not the parent, will be the one eventually used.

### Available Variables

#### Project Model Variables

Any field of the model that is a single value element can be referenced as a
variable. For example, `${project.groupId}`, `${project.version}`,
`${project.build.sourceDirectory}` and so on. Refer to the POM reference to
see a full list of properties.

These variables are all referenced by the prefix ""`project.`"". You may also
see references with `pom.` as the prefix, or the prefix omitted entirely -
these forms are now deprecated and should not be used.

#### Special Variables

`project.basedir` | The directory that the current project resides in.  
---|---  
`project.baseUri` | The directory that the current project resides in, represented as an URI. _Since Maven 2.1.0_  
`maven.build.timestamp` | The timestamp that denotes the start of the build (UTC). _Since Maven 2.1.0-M1_  
  
The format of the build timestamp can be customized by declaring the property
`maven.build.timestamp.format` as shown in the example below:

    
    
    <project>
      ...
      <properties>
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
      </properties>
      ...
    </project>

The format pattern has to comply with the rules given in the API documentation
for
[SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html).
If the property is not present, the format defaults to the value already given
in the example.

To do Project Aggregation,
you must do the following:

  * Change the parent POMs packaging to the value ""pom"".
  * Specify in the parent POM the directories of its modules (children POMs).

[[top]](./introduction-to-the-pom.html)

### Example 3

#### The Scenario

Given the previous original artifact POMs and directory structure:

**com.mycompany.app:my-app:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
    </project>

**com.mycompany.app:my-module:1's POM**

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-module</artifactId>
      <version>1</version>
    </project>

**directory structure**

    
    
    .
     |-- my-module
     |   `-- pom.xml
     `-- pom.xml

#### The Solution

If we are to aggregate my-module into my-app, we would only have to modify my-
app.

    
    
    <project>
      <modelVersion>4.0.0</modelVersion>
    
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      <packaging>pom</packaging>
    
      <modules>
        <module>my-module</module>
      </modules>
    </project>

In the revised com.mycompany.app:my-app:1, the packaging section and the
modules sections were added. For the packaging, its value was set to ""pom"",
and for the modules section, we have the element `<module>my-module</module>`.
The value of `<module>` is the relative path from the com.mycompany.app:my-
app:1 to com.mycompany.app:my-module:1's POM (_by practice, we use the
module's artifactId as the module directory's name_).

Now, whenever a Maven command processes com.mycompany.app:my-app:1, that same
Maven command would be ran against com.mycompany.app:my-module:1 as well.",Spring-Cloud-Platform,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-infrastructure/ace-monitor/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-admin/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: 'project.modelVersion' in 'ace-infrastructure/ace-monitor/pom.xml' and 'project.modelVersion' in 'ace-modules/ace-admin/pom.xml'.\n2. Understand the role of 'project.modelVersion' in a Maven project, which specifies the version of the POM model being used.\n3. Refer to the provided examples and rationale, which indicate that Maven exclusively supports model version 4.0.0 and requires this version across all modules to ensure compatibility.\n4. Determine if the 'project.modelVersion' must be consistent across all modules in the Spring-Cloud-Platform project to maintain compatibility.\n5. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The 'project.modelVersion' in a Maven project defines the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the 'project.modelVersion' needs to be the same across all modules, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Context Uilization and Retrieval,gpt-4o-2024-05-13,config2,10.0,FN,True,"The modelVersion element in a Maven POM file specifies the version of the POM model itself. According to the provided context, the only supported POM version is 4.0.0, and it is always required. This means that any Maven POM file must have the modelVersion set to 4.0.0 to be valid. Therefore, the identical values of modelVersion:4.0.0 in both ace-modules/ace-nlp/pom.xml and ace-modules/ace-sample/pom.xml are not due to a dependency between these two specific files but rather due to the requirement of the Maven POM model. The value 4.0.0 is a fixed requirement for all Maven POM files and does not indicate a cross-file dependency.","Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

* reporting

Notable elements which are `not` inherited include:

  * artifactId
  * name
  * prerequisites
  * profiles (but the effects of active profiles from parent POMs are)

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <parent>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>my-parent</artifactId>
        <version>2.0</version>
        <relativePath>../my-parent</relativePath>
      </parent>
    
      <artifactId>my-project</artifactId>
    </project>

Notice the `relativePath` element. It is not required, but may be used as a
signifier to Maven to first search the path given for this project's parent,
before searching the local and then remote repositories.

To see inheritance in action, just have a look at the
[ASF](https://github.com/apache/maven-apache-parent/blob/master/pom.xml) or
[Maven](https://github.com/apache/maven-parent/blob/master/pom.xml) parent
POM's.

Detailed inheritance rules are outlined in [Maven Model
Builder](https://maven.apache.org/ref/3-LATEST/maven-model-
builder/index.html#Inheritance_Assembly). All URLs are transformed when being
inherited by default. The other ones are just inherited as is. For plugin
configuration you can overwrite the inheritance behaviour with the attributes
`combine.children` or `combine.self` outlined in Plugins.

#### The Super POM

Similar to the inheritance of objects in object oriented programming, POMs
that extend a parent POM inherit certain values from that parent. Moreover,
just as Java objects ultimately inherit from `java.lang.Object`, all Project
Object Models inherit from a base Super POM. The snippet below is the Super
POM for Maven 3.5.4.

    
    
    <project>
      <modelVersion>4.0.

The only
element that exists as a prerequisite in POM 4.0.0 is the `maven` element,
which takes a minimum version number.

Use [ Maven Enforcer Plugin's `requireMavenVersion` rule](/enforcer/enforcer-
rules/requireMavenVersion.html), or other rules for **build-time**
prerequisites. For packaging `maven-plugin` this is still used at **run-time**
to make sure that the minimum Maven version for the plugin is met (but only in
the pom.xml of the referenced plugin).

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <prerequisites>
        <maven>2.0.6</maven>
      </prerequisites>
      ...
    </project>

## Repositories

Repositories are collections of artifacts which adhere to the Maven repository
directory layout. In order to be a Maven repository artifact, a POM file must
live within the structure `$BASE_REPO/groupId/artifactId/version/artifactId-
version.pom`. `$BASE_REPO` can be local (file structure) or remote (base URL);
the remaining layout will be the same. Repositories exist as a place to
collect and store artifacts. Whenever a project has a dependency upon an
artifact, Maven will first attempt to use a local copy of the specified
artifact. If that artifact does not exist in the local repository, it will
then attempt to download from a remote repository. The repository elements
within a POM specify those alternate repositories to search.

The repository is one of the most powerful features of the Maven community. By
default Maven searches the central repository at
<https://repo.maven.apache.org/maven2/>. Additional repositories can be
configured in the pom.xml `repositories` element.

## Distribution Management

Distribution management acts precisely as it sounds: it manages the
distribution of the artifact and supporting files generated throughout the
build process.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <distributionManagement>
        <repository>...</repository>
        <snapshotRepository>...<snapshotRepository>
        <site>...</site>
        <relocation>...</relocation>
        <downloadUrl>...</downloadUrl>
        <status>...</status>
      </distributionManagement>
      ...
    </project>

### Repository

Whereas the repositories element specifies in the POM the location and manner
in which Maven may download remote artifacts for use by the current project,
distributionManagement specifies where (and how) this project will get to a
remote repository when it is deployed. The repository elements will be used
for snapshot distribution if the snapshotRepository is not defined.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      ...
      <distributionManagement>
        <repository>
          <uniqueVersion>false</uniqueVersion>
          <id>corp1</id>
          <name>Corporate Repository</name>
          <url>scp://repo/maven2</url>
          <layout>default</layout>
        </repository>
        <snapshotRepository>
          <uniqueVersion>true</uniqueVersion>
          <id>propSnap</id>
          <name>Propellors Snapshots</name>
          <url>sftp://propellers.net/maven</url>
          <layout>legacy</layout>
        </snapshotRepository>
        ...
      </distributionManagement>
      ...
    </project>

  * **id** , **name** : The `id` is used to uniquely identify this repository amongst many, and the `name` is a human readable form.",Spring-Cloud-Platform,project.ModelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-nlp/pom.xml,project.modelVersion,VERSION_NUMBER,modelVersion:4.0.0,maven,ace-modules/ace-sample/pom.xml,Version Numbers,POM Version,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.modelVersion in ace-modules/ace-nlp/pom.xml and project.modelVersion in ace-modules/ace-sample/pom.xml. 2. Determine the type and value of these configuration options: both are of type VERSION_NUMBER with value modelVersion:4.0.0. 3. Refer to the provided examples and information to understand the role of project.modelVersion in a Maven project. 4. Verify if Maven requires the modelVersion to be consistent across all modules for compatibility. 5. Conclude whether the configuration options depend on each other based on value-equality."",
	""rationale"": ""The 'project.modelVersion' in a Maven project specifies the version of the POM model being used. Maven exclusively supports model version 4.0.0, which must be used across all modules to maintain compatibility. As a result, the project.modelVersion needs to be the same across all modules, establishing a dependency based on value equality."",
	""isDependency"": true
}"
Configuration Consistency,gpt-4o-2024-05-13,config2,9.0,FN,True,"The 'groupId' in Maven is used to uniquely identify a project group. In this case, both 'groupId' values are 'org.apache.commons', which is a common identifier for Apache Commons projects. This value being the same in both POM files is likely because both projects depend on the same group of libraries from Apache Commons. However, there is no indication that these 'groupId' values must be identical for the projects to function correctly. The Maven build process does not enforce or rely on these 'groupId' values being the same; it simply uses them to locate the correct dependencies. Therefore, the identical 'groupId' values are a coincidence rather than a requirement.","Maven's
[guide to dependency
management](http://maven.apache.org/guides/introduction/introduction-to-
dependency-mechanism.html#Dependency_Management) gets into all the details.

- [hotshot309](/users/490873/hotshot309 ""1,728 reputation"")

Commented Sep 13, 2012 at 16:27

  * 3

The second paragraph (`dependencyManagement` also controls transitive
dependencies) is only true when the dependencies are explicitly set:
[stackoverflow.com/questions/28312975/…](http://stackoverflow.com/questions/28312975/maven-
dependencymanagement-version-ignored-in-transitive-dependencies ""maven
dependencymanagement version ignored in transitive dependencies"")

- [Robert Metzger](/users/568695/robert-metzger ""4,502 reputation"")

Commented Nov 24, 2015 at 10:30

  * 4

@johnny-b-goode What you can still do is creating a new `dependencies` section
in your parent pom. We did that so that all child project have some apache-
commons by default and not to declare them all the time.

- [рuффп](/users/628006/%d1%80%c3%bc%d1%84%d1%84%d0%bf ""5,382 reputation"")

Commented Oct 19, 2018 at 14:57

  * It is useful to note that dependencyManagement also controls the scope, not just the version of transitive dependencies.

- [Torben](/users/1047418/torben ""3,913 reputation"")

Commented Oct 26, 2021 at 9:37

Add a comment  | 

98

[](/posts/47854607/timeline ""Show activity on this post."")

There's still one thing that is not highlighted enough, in my opinion, and
that is **unwanted inheritance**.

Here's an incremental example:

I declare in my `parent` pom:

    
    
    <dependencies>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>19.0</version>
            </dependency>
    </dependencies>
    

boom!

- [Anuj Kumar](/users/7752117/anuj-kumar ""81 reputation"")

Commented Aug 30, 2018 at 6:31

Add a comment  | 

40

[](/posts/56661005/timeline ""Show activity on this post."")

Sorry I am very late to the party.

Let me try to explain the difference using `mvn dependency:tree` command

Consider the below example

**Parent POM - My Project**

    
    
    <modules>
        <module>app</module>
        <module>data</module>
    </modules>
    
    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
    </dependencies>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.9</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    

**Child POM - data module**

    
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
    

**Child POM - app module (has no extra dependency, so leaving dependencies
empty)**

    
    
     <dependencies>
    </dependencies>
    

On running `mvn dependency:tree` command, we get following result

    
    
    Scanning for projects.
    ------------------------------------------------------------------------
    Reactor Build Order:
    
    MyProject
    app
    data
    
    ------------------------------------------------------------------------
    Building MyProject 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ MyProject ---
    com.iamvickyav:MyProject:pom:1.0-SNAPSHOT
    \- com.google.guava:guava:jar:19.0:compile
    
    ------------------------------------------------------------------------
    Building app 1.0-SNAPSHOT
    ------------------------------------------------------------------------
    
    --- maven-dependency-plugin:2.8:tree (default-cli) @ app ---
    com.iamvickyav:app:jar:1.0-SNAPSHOT
    \- com.google.

[MagGGG's user
avatar](https://i.sstatic.net/zUrQa.jpg?s=64)](/users/1726413/magggg)

[MagGGG](/users/1726413/magggg)MagGGG

20.4k22 gold badges3232 silver badges3131 bronze badges

Add a comment  | 

2

[](/posts/57472535/timeline ""Show activity on this post."")

The difference between the two is best brought in what seems a necessary and
sufficient definition of the dependencyManagement element available in Maven
website docs:

dependencyManagement

""Default dependency information for projects that inherit from this one. The
dependencies in this section are not immediately resolved. Instead, when a POM
derived from this one declares a dependency described by a matching groupId
and artifactId, the version and other values from this section are used for
that dependency if they were not already specified."" [
<https://maven.apache.org/ref/3.6.1/maven-model/maven.html> ]

It should be read along with some more information available on a different
page:

“..the minimal set of information for matching a dependency reference against
a dependencyManagement section is actually {groupId, artifactId, type,
classifier}. In many cases, these dependencies will refer to jar artifacts
with no classifier. This allows us to shorthand the identity set to {groupId,
artifactId}, since the default for the type field is jar, and the default
classifier is null.”
[<https://maven.apache.org/guides/introduction/introduction-to-dependency-
mechanism.html> ]

Thus, all the sub-elements (scope, exclusions etc.,) of a dependency element--
other than groupId, artifactId, type, classifier, not just version--are
available for lockdown/default at the point (and thus inherited from there
onward) you specify the dependency within a dependencyElement. If you’d
specified a dependency with the type and classifier sub-elements (see the
first-cited webpage to check all sub-elements) as not jar and not null
respectively, you’d need {groupId, artifactId, classifier, type} to reference
(resolve) that dependency at any point in an inheritance originating from the
dependencyManagement element.

Notice that `modelVersion` contains 4.0.0. That is currently the only
supported POM version, and is always required.

    
    
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
      <modelVersion>4.0.0</modelVersion>
    
      <!-- The Basics -->
      <groupId>...</groupId>
      <artifactId>...</artifactId>
      <version>...</version>
      <packaging>...</packaging>
      <dependencies>...</dependencies>
      <parent>...</parent>
      <dependencyManagement>...</dependencyManagement>
      <modules>...</modules>
      <properties>...</properties>
    
      <!-- Build Settings -->
      <build>...</build>
      <reporting>...</reporting>
    
      <!-- More Project Information -->
      <name>...</name>
      <description>...</description>
      <url>...</url>
      <inceptionYear>...</inceptionYear>
      <licenses>...</licenses>
      <organization>...</organization>
      <developers>...</developers>
      <contributors>...</contributors>
    
      <!-- Environment Settings -->
      <issueManagement>...</issueManagement>
      <ciManagement>...</ciManagement>
      <mailingLists>...</mailingLists>
      <scm>...</scm>
      <prerequisites>...</prerequisites>
      <repositories>...</repositories>
      <pluginRepositories>...</pluginRepositories>
      <distributionManagement>...</distributionManagement>
      <profiles>...</profiles>
    </project>

# The Basics

The POM contains all necessary information about a project, as well as
configurations of plugins to be used during the build process. It is the
declarative manifestation of the ""who"", ""what"", and ""where"", while the build
lifecycle is the ""when"" and ""how"". That is not to say that the POM cannot
affect the flow of the lifecycle - it can. For example, by configuring the
`maven-antrun-plugin`, one can embed Apache Ant tasks inside of the POM. It is
ultimately a declaration, however.

Because in the doc:[maven.apache.org/guides/introduction/…](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management#A%20second) while explaining the second use of the `<dependencyManagement>` it looks like it will be inherited by default. At one line they are saying that:""When maven is run on project B, version 1.0 of artifacts a, b, c, and d will be used regardless of the version specified in their pom"" even though ""b"" is not used in the project B

- [chirag soni](/users/11421611/chirag-soni ""1,006 reputation"")

Commented Jun 24, 2019 at 4:03

  * Try it out yourself

- [Andrejs](/users/2786733/andrejs ""11,491 reputation"")

Commented Jun 24, 2019 at 6:31

  * And as someone already asked but remained unanswered, why not to simply use properties from the parent pom without dependencyManagement section in the parent?

- [Andrey M. Stepanov](/users/2566304/andrey-m-stepanov ""460 reputation"")

Commented Aug 8, 2020 at 15:10

  * 1

@Andrey M. Stepanov - good question. For a single dependency, it's not only
the version that you may want to manage centrally, but also the <scope>,
<exclusions> and other artifact attributes. It's cleaner to use
<dependencyManagement> then, instead of 3-4 properties per artifact.

- [Andrejs](/users/2786733/andrejs ""11,491 reputation"")

Commented Dec 17, 2021 at 10:49

 |  Show **2** more comments

82

[](/posts/36228674/timeline ""Show activity on this post."")

The [documentation](http://maven.apache.org/guides/introduction/introduction-
to-dependency-mechanism.html#Dependency_Management) on the Maven site is
horrible. What dependencyManagement does is simply move your dependency
definitions (version, exclusions, etc) up to the parent pom, then in the child
poms you just have to put the groupId and artifactId.",Spring-Cloud-Platform,project.dependencies.dependency_commons-lang3.groupId,NAME,org.apache.commons,maven,ace-dev-base/ace-common/pom.xml,project.dependencies.dependency_commons-lang3.groupId,NAME,org.apache.commons,maven,ace-modules/ace-admin/pom.xml,Libraries,Maven Dependency,"{
	""plan"": ""1. Identify the configuration options to be evaluated: project.dependencies.dependency_commons-lang3.groupId in ace-dev-base/ace-common/pom.xml and project.dependencies.dependency_commons-lang3.groupId in ace-modules/ace-admin/pom.xml.\n2. Determine the type and value of each configuration option: both are of type NAME with value org.apache.commons.\n3. Analyze the context in which these configuration options are used: both are dependencies for different modules within the same Maven project.\n4. Compare the provided examples to understand the criteria for dependency determination based on value-equality.\n5. Evaluate whether the equality of the groupId values indicates a dependency or merely a coincidence due to the use of a common library.\n6. Formulate a rationale based on the analysis and examples.\n7. Conclude whether a dependency exists based on the rationale."",
	""rationale"": ""The configuration option project.dependencies.dependency_commons-lang3.groupId in ace-dev-base/ace-common/pom.xml and the option project.dependencies.dependency_commons-lang3.groupId in ace-modules/ace-admin/pom.xml both specify the same groupId value, org.apache.commons. This indicates that both modules are using the same Apache Commons Lang library. However, the equality of the groupId values does not imply a dependency between these configuration options. Instead, it reflects the use of a common library across different modules within the same Maven project. The dependency on the library is independent for each module, and there is no direct dependency between the configuration options themselves."",
	""isDependency"": false
}"
