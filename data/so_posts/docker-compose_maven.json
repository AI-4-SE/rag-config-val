[
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "57464720",
    "PostTypeId": "1",
    "CreationDate": "2019-08-12T16:15:38.490",
    "Score": "5",
    "ViewCount": "5798",
    "Body": "<p>I've been trying to create a multi-stage docker build for my spring-boot-application. The problem is on every change on the master branch, the pom.xml file changes (thanks to maven release plugin), so it's kind of hard to make use of docker build-cache during the build stage and all the dependencies will be downloaded every time I run the build. As far as I know, I can't mount volumes during the building of the image. The experimental version of the docker allows you to mount volumes during the build but it's still experimental so I'm trying to avoid it.</p>  <p>So I decided to try my luck with docker-compose, where the first service will run 'mvn package' inside the container and create a jar file inside a shared volume, which will be then used by the second service to build its own image (basically adding that jar inside its image), which will be published to docker hub. Whatever I was trying to do didn't seem right. Now I'm not really expert of docker-compose here, but is this the right approach to do it?<br> I'm using <code>Docker version 18.09.0, build 4d60db4</code></p>  <pre><code>version: '3' #Specify all the services you want to create services:   #service name   build-service:     context: .     dockerfile: Dockerfile-build     volumes:       - ./:/usr/app       - '$(HOME)'/.m2:/usr/mvn/.m2   spring-app:     conext: .     dockerfile: Dockerfile-jar     volumes:       - ./:/usr/app </code></pre>  <p>Is there any way to make use of local .m2 repository during the first stage. Or any other suggestions are welcome.</p> ",
    "OwnerUserId": "5700299",
    "LastActivityDate": "2019-08-13T05:43:19.073",
    "Title": "How to use maven local repository in Multi-stage docker build?",
    "Tags": "<java><maven><docker-compose><dockerfile><docker-multi-stage-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57464720",
    "PostTypeId": "1",
    "CreationDate": "2019-08-12T16:15:38.490",
    "Score": "5",
    "ViewCount": "5798",
    "Body": "<p>I've been trying to create a multi-stage docker build for my spring-boot-application. The problem is on every change on the master branch, the pom.xml file changes (thanks to maven release plugin), so it's kind of hard to make use of docker build-cache during the build stage and all the dependencies will be downloaded every time I run the build. As far as I know, I can't mount volumes during the building of the image. The experimental version of the docker allows you to mount volumes during the build but it's still experimental so I'm trying to avoid it.</p>  <p>So I decided to try my luck with docker-compose, where the first service will run 'mvn package' inside the container and create a jar file inside a shared volume, which will be then used by the second service to build its own image (basically adding that jar inside its image), which will be published to docker hub. Whatever I was trying to do didn't seem right. Now I'm not really expert of docker-compose here, but is this the right approach to do it?<br> I'm using <code>Docker version 18.09.0, build 4d60db4</code></p>  <pre><code>version: '3' #Specify all the services you want to create services:   #service name   build-service:     context: .     dockerfile: Dockerfile-build     volumes:       - ./:/usr/app       - '$(HOME)'/.m2:/usr/mvn/.m2   spring-app:     conext: .     dockerfile: Dockerfile-jar     volumes:       - ./:/usr/app </code></pre>  <p>Is there any way to make use of local .m2 repository during the first stage. Or any other suggestions are welcome.</p> ",
    "OwnerUserId": "5700299",
    "LastActivityDate": "2019-08-13T05:43:19.073",
    "Title": "How to use maven local repository in Multi-stage docker build?",
    "Tags": "<java><maven><docker-compose><dockerfile><docker-multi-stage-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57464720",
    "PostTypeId": "1",
    "CreationDate": "2019-08-12T16:15:38.490",
    "Score": "5",
    "ViewCount": "5798",
    "Body": "<p>I've been trying to create a multi-stage docker build for my spring-boot-application. The problem is on every change on the master branch, the pom.xml file changes (thanks to maven release plugin), so it's kind of hard to make use of docker build-cache during the build stage and all the dependencies will be downloaded every time I run the build. As far as I know, I can't mount volumes during the building of the image. The experimental version of the docker allows you to mount volumes during the build but it's still experimental so I'm trying to avoid it.</p>  <p>So I decided to try my luck with docker-compose, where the first service will run 'mvn package' inside the container and create a jar file inside a shared volume, which will be then used by the second service to build its own image (basically adding that jar inside its image), which will be published to docker hub. Whatever I was trying to do didn't seem right. Now I'm not really expert of docker-compose here, but is this the right approach to do it?<br> I'm using <code>Docker version 18.09.0, build 4d60db4</code></p>  <pre><code>version: '3' #Specify all the services you want to create services:   #service name   build-service:     context: .     dockerfile: Dockerfile-build     volumes:       - ./:/usr/app       - '$(HOME)'/.m2:/usr/mvn/.m2   spring-app:     conext: .     dockerfile: Dockerfile-jar     volumes:       - ./:/usr/app </code></pre>  <p>Is there any way to make use of local .m2 repository during the first stage. Or any other suggestions are welcome.</p> ",
    "OwnerUserId": "5700299",
    "LastActivityDate": "2019-08-13T05:43:19.073",
    "Title": "How to use maven local repository in Multi-stage docker build?",
    "Tags": "<java><maven><docker-compose><dockerfile><docker-multi-stage-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "58681074",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62205339",
    "CreationDate": "2019-11-03T14:23:04.653",
    "Score": "5",
    "ViewCount": "3472",
    "Body": "<p>I would like to ask for some recommendations for development workflow for application with stack mentioned in the title. Before I switched to use Docker all I had to do was:</p>  <ol> <li>Go to start.spring.io and download project starter</li> <li>Import it into intelliJ</li> <li>Develop features, hit green arrow to start app or red square to stop and repeat it with every change in code</li> </ol>  <p>Now when I switched to docker, after step 2, I do this:</p>  <ol> <li>Create Dockerfile and docker-compose.yml (where I start my app and also mysql service). </li> <li>Right click on docker-compose and hit run. Then it builds my app image (i use --build flag in my run configuration so it builds images every time it I hit run on docker-compose) and starts two services: app and mysql, and everything works.</li> </ol>  <p>The problem is when I change sth in my code then I have to:</p>  <ol> <li>Execute mvn clean and install steps manually, to produce new jar under /target folder</li> <li>Then stop previous docker compose and run it again. Then it builds new images from what is in /target </li> </ol>  <p>I would rather like to have something like one-click solution, like it was before I started to use docker. So when I change code then I press only one button and new image is generated and run with all changes applied. Is it possible? Do I miss something? Could you tell me if your workflow is similar to mine? Maybe you could recommend some tools or different config?</p> ",
    "OwnerUserId": "4910038",
    "LastActivityDate": "2020-06-04T22:42:14.420",
    "Title": "Development workflow for Spring Boot + Maven + Docker + IntelliJ",
    "Tags": "<java><maven><docker><intellij-idea><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "58681074",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62205339",
    "CreationDate": "2019-11-03T14:23:04.653",
    "Score": "5",
    "ViewCount": "3472",
    "Body": "<p>I would like to ask for some recommendations for development workflow for application with stack mentioned in the title. Before I switched to use Docker all I had to do was:</p>  <ol> <li>Go to start.spring.io and download project starter</li> <li>Import it into intelliJ</li> <li>Develop features, hit green arrow to start app or red square to stop and repeat it with every change in code</li> </ol>  <p>Now when I switched to docker, after step 2, I do this:</p>  <ol> <li>Create Dockerfile and docker-compose.yml (where I start my app and also mysql service). </li> <li>Right click on docker-compose and hit run. Then it builds my app image (i use --build flag in my run configuration so it builds images every time it I hit run on docker-compose) and starts two services: app and mysql, and everything works.</li> </ol>  <p>The problem is when I change sth in my code then I have to:</p>  <ol> <li>Execute mvn clean and install steps manually, to produce new jar under /target folder</li> <li>Then stop previous docker compose and run it again. Then it builds new images from what is in /target </li> </ol>  <p>I would rather like to have something like one-click solution, like it was before I started to use docker. So when I change code then I press only one button and new image is generated and run with all changes applied. Is it possible? Do I miss something? Could you tell me if your workflow is similar to mine? Maybe you could recommend some tools or different config?</p> ",
    "OwnerUserId": "4910038",
    "LastActivityDate": "2020-06-04T22:42:14.420",
    "Title": "Development workflow for Spring Boot + Maven + Docker + IntelliJ",
    "Tags": "<java><maven><docker><intellij-idea><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "58681074",
    "PostTypeId": "1",
    "AcceptedAnswerId": "62205339",
    "CreationDate": "2019-11-03T14:23:04.653",
    "Score": "5",
    "ViewCount": "3472",
    "Body": "<p>I would like to ask for some recommendations for development workflow for application with stack mentioned in the title. Before I switched to use Docker all I had to do was:</p>  <ol> <li>Go to start.spring.io and download project starter</li> <li>Import it into intelliJ</li> <li>Develop features, hit green arrow to start app or red square to stop and repeat it with every change in code</li> </ol>  <p>Now when I switched to docker, after step 2, I do this:</p>  <ol> <li>Create Dockerfile and docker-compose.yml (where I start my app and also mysql service). </li> <li>Right click on docker-compose and hit run. Then it builds my app image (i use --build flag in my run configuration so it builds images every time it I hit run on docker-compose) and starts two services: app and mysql, and everything works.</li> </ol>  <p>The problem is when I change sth in my code then I have to:</p>  <ol> <li>Execute mvn clean and install steps manually, to produce new jar under /target folder</li> <li>Then stop previous docker compose and run it again. Then it builds new images from what is in /target </li> </ol>  <p>I would rather like to have something like one-click solution, like it was before I started to use docker. So when I change code then I press only one button and new image is generated and run with all changes applied. Is it possible? Do I miss something? Could you tell me if your workflow is similar to mine? Maybe you could recommend some tools or different config?</p> ",
    "OwnerUserId": "4910038",
    "LastActivityDate": "2020-06-04T22:42:14.420",
    "Title": "Development workflow for Spring Boot + Maven + Docker + IntelliJ",
    "Tags": "<java><maven><docker><intellij-idea><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "39977955",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39978198",
    "CreationDate": "2016-10-11T13:06:39.467",
    "Score": "4",
    "ViewCount": "3568",
    "Body": "<p>I have a Maven project. I'm running my Maven builds inside Docker. But the problem with that is it downloads all of the Maven dependencies every time I run it and it does not cache any of those Maven downloads. </p>  <p>I found some work arounds for that, where you mount your local .m2 folder into Docker container. But this will make the builds depend on local setup. What I would like to do is to create a volume (long live) and link/mount that volume to <code>.m2</code> folder inside Docker. That way when I run the Docker build for the 2nd time, it will not download everything. And it will not be dependent on environment.</p>  <p>How can I do this with docker-compose?</p> ",
    "OwnerUserId": "393639",
    "LastEditorUserId": "1228454",
    "LastEditDate": "2016-10-11T13:42:48.680",
    "LastActivityDate": "2016-10-11T13:42:48.680",
    "Title": "How to mount docker volume into my docker project using compose?",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39977955",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39978198",
    "CreationDate": "2016-10-11T13:06:39.467",
    "Score": "4",
    "ViewCount": "3568",
    "Body": "<p>I have a Maven project. I'm running my Maven builds inside Docker. But the problem with that is it downloads all of the Maven dependencies every time I run it and it does not cache any of those Maven downloads. </p>  <p>I found some work arounds for that, where you mount your local .m2 folder into Docker container. But this will make the builds depend on local setup. What I would like to do is to create a volume (long live) and link/mount that volume to <code>.m2</code> folder inside Docker. That way when I run the Docker build for the 2nd time, it will not download everything. And it will not be dependent on environment.</p>  <p>How can I do this with docker-compose?</p> ",
    "OwnerUserId": "393639",
    "LastEditorUserId": "1228454",
    "LastEditDate": "2016-10-11T13:42:48.680",
    "LastActivityDate": "2016-10-11T13:42:48.680",
    "Title": "How to mount docker volume into my docker project using compose?",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39977955",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39978198",
    "CreationDate": "2016-10-11T13:06:39.467",
    "Score": "4",
    "ViewCount": "3568",
    "Body": "<p>I have a Maven project. I'm running my Maven builds inside Docker. But the problem with that is it downloads all of the Maven dependencies every time I run it and it does not cache any of those Maven downloads. </p>  <p>I found some work arounds for that, where you mount your local .m2 folder into Docker container. But this will make the builds depend on local setup. What I would like to do is to create a volume (long live) and link/mount that volume to <code>.m2</code> folder inside Docker. That way when I run the Docker build for the 2nd time, it will not download everything. And it will not be dependent on environment.</p>  <p>How can I do this with docker-compose?</p> ",
    "OwnerUserId": "393639",
    "LastEditorUserId": "1228454",
    "LastEditDate": "2016-10-11T13:42:48.680",
    "LastActivityDate": "2016-10-11T13:42:48.680",
    "Title": "How to mount docker volume into my docker project using compose?",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "41411593",
    "PostTypeId": "1",
    "AcceptedAnswerId": "41434110",
    "CreationDate": "2016-12-31T20:43:34.057",
    "Score": "4",
    "ViewCount": "4133",
    "Body": "<p>I'm new to Docker, but have a Java web app project for which my Maven build produces and installs a Docker image. i.e.</p>  <pre><code>mvn clean install </code></pre>  <p>Produces:</p>  <pre><code>REPOSITORY                             TAG                  IMAGE ID            CREATED             SIZE registry.gitlab.com/me/myapp   0.0.1-SNAPSHOT-dev   12d69e5ab28b        45 minutes ago      666 MB </code></pre>  <p>I'm making use of Spotify's Maven plugin to build this, which I can then deploy to the repository using:</p>  <pre><code>mvn docker:push </code></pre>  <p>Which works great. <strong>However:</strong> I'm using GitLab for CI, and my <code>.gitlab-ci.yml</code> file contains:</p>  <pre><code>image: maven:3.3.9-jdk-8  build:   script: 'mvn clean install &amp;&amp; mvn docker:push' </code></pre>  <p>This nearly works, but fails as Docker is not installed <em>in my container</em> which is running the build:</p>  <pre><code>[INFO] Building image registry.gitlab.com/me/myapp Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: Retrying request to {}-&gt;unix://localhost:80 Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory ... (more of the same) ... </code></pre>  <p>It seems the solution here is to install Docker into the container. I can't find a pre-built image that has Java, Maven <em>and</em> Docker, but I did try configuring Docker as a service:</p>  <pre><code>services:   - docker:1.13-rc </code></pre>  <p>But the result is the same - it seems services are meant to be used as external services that can be <em>connected to</em>, but that are not immediately installed within the same container.</p>  <p><strong>How should I go about</strong> updating my <code>.yml</code> file so that the GitLab build can build and push a Docker image?</p> ",
    "OwnerUserId": "88111",
    "LastActivityDate": "2017-01-02T22:37:49.457",
    "Title": "Install Docker in container for use by GitLab CI build",
    "Tags": "<maven><docker><gitlab><docker-compose><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "41411593",
    "PostTypeId": "1",
    "AcceptedAnswerId": "41434110",
    "CreationDate": "2016-12-31T20:43:34.057",
    "Score": "4",
    "ViewCount": "4133",
    "Body": "<p>I'm new to Docker, but have a Java web app project for which my Maven build produces and installs a Docker image. i.e.</p>  <pre><code>mvn clean install </code></pre>  <p>Produces:</p>  <pre><code>REPOSITORY                             TAG                  IMAGE ID            CREATED             SIZE registry.gitlab.com/me/myapp   0.0.1-SNAPSHOT-dev   12d69e5ab28b        45 minutes ago      666 MB </code></pre>  <p>I'm making use of Spotify's Maven plugin to build this, which I can then deploy to the repository using:</p>  <pre><code>mvn docker:push </code></pre>  <p>Which works great. <strong>However:</strong> I'm using GitLab for CI, and my <code>.gitlab-ci.yml</code> file contains:</p>  <pre><code>image: maven:3.3.9-jdk-8  build:   script: 'mvn clean install &amp;&amp; mvn docker:push' </code></pre>  <p>This nearly works, but fails as Docker is not installed <em>in my container</em> which is running the build:</p>  <pre><code>[INFO] Building image registry.gitlab.com/me/myapp Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: Retrying request to {}-&gt;unix://localhost:80 Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory ... (more of the same) ... </code></pre>  <p>It seems the solution here is to install Docker into the container. I can't find a pre-built image that has Java, Maven <em>and</em> Docker, but I did try configuring Docker as a service:</p>  <pre><code>services:   - docker:1.13-rc </code></pre>  <p>But the result is the same - it seems services are meant to be used as external services that can be <em>connected to</em>, but that are not immediately installed within the same container.</p>  <p><strong>How should I go about</strong> updating my <code>.yml</code> file so that the GitLab build can build and push a Docker image?</p> ",
    "OwnerUserId": "88111",
    "LastActivityDate": "2017-01-02T22:37:49.457",
    "Title": "Install Docker in container for use by GitLab CI build",
    "Tags": "<maven><docker><gitlab><docker-compose><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "41411593",
    "PostTypeId": "1",
    "AcceptedAnswerId": "41434110",
    "CreationDate": "2016-12-31T20:43:34.057",
    "Score": "4",
    "ViewCount": "4133",
    "Body": "<p>I'm new to Docker, but have a Java web app project for which my Maven build produces and installs a Docker image. i.e.</p>  <pre><code>mvn clean install </code></pre>  <p>Produces:</p>  <pre><code>REPOSITORY                             TAG                  IMAGE ID            CREATED             SIZE registry.gitlab.com/me/myapp   0.0.1-SNAPSHOT-dev   12d69e5ab28b        45 minutes ago      666 MB </code></pre>  <p>I'm making use of Spotify's Maven plugin to build this, which I can then deploy to the repository using:</p>  <pre><code>mvn docker:push </code></pre>  <p>Which works great. <strong>However:</strong> I'm using GitLab for CI, and my <code>.gitlab-ci.yml</code> file contains:</p>  <pre><code>image: maven:3.3.9-jdk-8  build:   script: 'mvn clean install &amp;&amp; mvn docker:push' </code></pre>  <p>This nearly works, but fails as Docker is not installed <em>in my container</em> which is running the build:</p>  <pre><code>[INFO] Building image registry.gitlab.com/me/myapp Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: Retrying request to {}-&gt;unix://localhost:80 Dec 31, 2016 8:30:45 PM org.apache.http.impl.execchain.RetryExec execute INFO: I/O exception (java.io.IOException) caught when processing request to {}-&gt;unix://localhost:80: No such file or directory ... (more of the same) ... </code></pre>  <p>It seems the solution here is to install Docker into the container. I can't find a pre-built image that has Java, Maven <em>and</em> Docker, but I did try configuring Docker as a service:</p>  <pre><code>services:   - docker:1.13-rc </code></pre>  <p>But the result is the same - it seems services are meant to be used as external services that can be <em>connected to</em>, but that are not immediately installed within the same container.</p>  <p><strong>How should I go about</strong> updating my <code>.yml</code> file so that the GitLab build can build and push a Docker image?</p> ",
    "OwnerUserId": "88111",
    "LastActivityDate": "2017-01-02T22:37:49.457",
    "Title": "Install Docker in container for use by GitLab CI build",
    "Tags": "<maven><docker><gitlab><docker-compose><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "67011915",
    "PostTypeId": "1",
    "AcceptedAnswerId": "67025843",
    "CreationDate": "2021-04-08T21:08:50.437",
    "Score": "4",
    "ViewCount": "1257",
    "Body": "<h3>What am I wanting to do?</h3> <p>I want to convert to run my <em><strong>containerized of Spring-Boot's app</strong></em> which is can run on amd64 systems, on Raspberry Pi 4's Docker. How can I fix the my problem?</p> <br/>  <h3>What's the running OS on Raspberry Pi?</h3> <p>I've installed <em><strong>Ubuntu Server 20.04.2 LTS for arm64 architectures</strong></em> using via <em><strong>Raspberry Pi Imager v1.6.1</strong></em> on <em><strong>Raspberry Pi 4</strong></em>.</p> <br/> <hr /> <h3>What are the steps I have done to fix the problem?(problem is still continue)</h3> <p>In default version does not work on my <em><strong>Raspberry Pi.</strong></em> Thus, I've tried some couple of things at below.</p> <p>I changed row of &quot;FROM&quot; from <em><strong><a href='https://hub.docker.com/_/openjdk' rel='nofollow noreferrer'>openjdk:15-jdk-slim</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/openjdk/' rel='nofollow noreferrer'>arm64v8/openjdk:17</a></strong></em> at my <em><strong>dockerfile</strong></em> as you can see:</p> <pre><code>FROM arm64v8/openjdk:17 COPY . /projects/red-dir WORKDIR /projects/red-dir ARG JAR_FILE=target/*.jar COPY ${JAR_FILE} /projects/red-dir/my_red_app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/projects/red-dir/my_red_app.jar&quot;] </code></pre> <p>Afterwards, I've built and pushed my app using with <em><strong>Maven</strong></em> and <em><strong>Docker</strong></em>:</p> <pre><code>$ ./mvnw clean package -Dmaven.test.skip=true &amp;&amp; java -jar target/my_red_app.jar $ docker build -t user/my_red_app:v1.0.0 . </code></pre> <p>Then, My app's depend on a MongoDB, so I changed this <em><strong>image</strong></em> from <em><strong><a href='https://hub.docker.com/_/mongo' rel='nofollow noreferrer'>mongo</a></strong></em> to <em><strong><a href='https://hub.docker.com/r/arm64v8/mongo/' rel='nofollow noreferrer'>arm64v8/mongo</a></strong></em> on <em><strong>docker-compose.yml</strong></em> as you can see at below:</p> <pre><code>version: &quot;3&quot; services:     mongodb:         container_name: mongodb         image: arm64v8/mongo         restart: always         ports:             - 27017:27017         environment:             MONGO_INITDB_ROOT_USERNAME: admin             MONGO_INITDB_ROOT_PASSWORD: 12345         networks:             - shared-net     colour_app:         container_name: my_red_app         image: user/my_red_app         restart: always         ports:             - 7070:7070         depends_on:             - mongodb         networks:             - shared-net networks:     shared-net:         driver: bridge </code></pre> <br/> <hr /> <h3>Things that work and things that don't work</h3> <p><em><strong>MongoDB</strong></em> is running. I can reach using via <em><strong>MongoDBCompass</strong></em>, but my <em><strong>Spring-Boot app</strong></em> doesn't work. In <code>docker-compose up</code> command, I've encountered an output like this:</p> <pre><code>... ... colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error colour_app    | standard_init_linux.go:219: exec user process caused: exec format error </code></pre> <p>Let me know what things I didn't catch. Thank you for reading.</p> ",
    "OwnerUserId": "10876165",
    "LastEditorUserId": "10876165",
    "LastEditDate": "2021-04-09T07:49:21.710",
    "LastActivityDate": "2021-04-09T17:36:47.330",
    "Title": "How to create containerized Spring Boot App on Raspberry Pi 4?",
    "Tags": "<spring-boot><docker><maven><docker-compose><raspberry-pi4>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "76652984",
    "PostTypeId": "1",
    "CreationDate": "2023-07-10T10:49:46.723",
    "Score": "4",
    "ViewCount": "128",
    "Body": "<p>On Github I find ComposeContainer in <a href='https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers' rel='nofollow noreferrer'>https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers</a>, i.e. the containers subdirectory. When searching on Maven Central, (i.e. <a href='https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions' rel='nofollow noreferrer'>https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions</a>) I find <code>testcontainers-1.18.3.jar</code>, but this archive does not contain <code>ComposeContainer.class</code>). Is this my fault?</p> <p>Since I find <code>DockerComposeContainer</code> at the expected location I expect <code>ComposeContainer</code> there as well.</p> ",
    "OwnerUserId": "18307258",
    "LastEditorUserId": "3764965",
    "LastEditDate": "2023-07-10T10:55:15.980",
    "LastActivityDate": "2023-07-10T10:55:15.980",
    "Title": "testcontainers ComposeContainer missing in Maven Central?",
    "Tags": "<java><docker><maven><docker-compose><testcontainers>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "76652984",
    "PostTypeId": "1",
    "CreationDate": "2023-07-10T10:49:46.723",
    "Score": "4",
    "ViewCount": "128",
    "Body": "<p>On Github I find ComposeContainer in <a href='https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers' rel='nofollow noreferrer'>https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers</a>, i.e. the containers subdirectory. When searching on Maven Central, (i.e. <a href='https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions' rel='nofollow noreferrer'>https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions</a>) I find <code>testcontainers-1.18.3.jar</code>, but this archive does not contain <code>ComposeContainer.class</code>). Is this my fault?</p> <p>Since I find <code>DockerComposeContainer</code> at the expected location I expect <code>ComposeContainer</code> there as well.</p> ",
    "OwnerUserId": "18307258",
    "LastEditorUserId": "3764965",
    "LastEditDate": "2023-07-10T10:55:15.980",
    "LastActivityDate": "2023-07-10T10:55:15.980",
    "Title": "testcontainers ComposeContainer missing in Maven Central?",
    "Tags": "<java><docker><maven><docker-compose><testcontainers>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "76652984",
    "PostTypeId": "1",
    "CreationDate": "2023-07-10T10:49:46.723",
    "Score": "4",
    "ViewCount": "128",
    "Body": "<p>On Github I find ComposeContainer in <a href='https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers' rel='nofollow noreferrer'>https://github.com/testcontainers/testcontainers-java/tree/main/core/src/main/java/org/testcontainers/containers</a>, i.e. the containers subdirectory. When searching on Maven Central, (i.e. <a href='https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions' rel='nofollow noreferrer'>https://central.sonatype.com/artifact/org.testcontainers/testcontainers/1.18.3/versions</a>) I find <code>testcontainers-1.18.3.jar</code>, but this archive does not contain <code>ComposeContainer.class</code>). Is this my fault?</p> <p>Since I find <code>DockerComposeContainer</code> at the expected location I expect <code>ComposeContainer</code> there as well.</p> ",
    "OwnerUserId": "18307258",
    "LastEditorUserId": "3764965",
    "LastEditDate": "2023-07-10T10:55:15.980",
    "LastActivityDate": "2023-07-10T10:55:15.980",
    "Title": "testcontainers ComposeContainer missing in Maven Central?",
    "Tags": "<java><docker><maven><docker-compose><testcontainers>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "35594188",
    "PostTypeId": "1",
    "CreationDate": "2016-02-24T05:44:39.027",
    "Score": "3",
    "ViewCount": "3485",
    "Body": "<p>I want to run Junit tests in a Docker container, and have the container fail if the tests fail. </p>  <p>In my Docker file I have :</p>  <pre><code>FROM maven:3.2-jdk-7-onbuild CMD mvn verify </code></pre>  <p>I'm kicking this off from a Go CI server running a docker compose command. </p>  <p>What I'm seeing is that this starts a background thread of execution and the tests start running - and the Go CI server gets an OK - just as the maven process has started. The test finishes running with some failures, but by then the Go server has already displayed a green 'all good' status. </p>  <p>Part of the problem is I need the <code>EXEC</code> command to block until the tests have finished running. </p>  <p>My question is: <strong>How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?</strong></p> ",
    "OwnerUserId": "15441",
    "LastActivityDate": "2016-02-25T04:20:40.837",
    "Title": "How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?",
    "Tags": "<maven><junit><docker><continuous-integration><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "35594188",
    "PostTypeId": "1",
    "CreationDate": "2016-02-24T05:44:39.027",
    "Score": "3",
    "ViewCount": "3485",
    "Body": "<p>I want to run Junit tests in a Docker container, and have the container fail if the tests fail. </p>  <p>In my Docker file I have :</p>  <pre><code>FROM maven:3.2-jdk-7-onbuild CMD mvn verify </code></pre>  <p>I'm kicking this off from a Go CI server running a docker compose command. </p>  <p>What I'm seeing is that this starts a background thread of execution and the tests start running - and the Go CI server gets an OK - just as the maven process has started. The test finishes running with some failures, but by then the Go server has already displayed a green 'all good' status. </p>  <p>Part of the problem is I need the <code>EXEC</code> command to block until the tests have finished running. </p>  <p>My question is: <strong>How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?</strong></p> ",
    "OwnerUserId": "15441",
    "LastActivityDate": "2016-02-25T04:20:40.837",
    "Title": "How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?",
    "Tags": "<maven><junit><docker><continuous-integration><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "35594188",
    "PostTypeId": "1",
    "CreationDate": "2016-02-24T05:44:39.027",
    "Score": "3",
    "ViewCount": "3485",
    "Body": "<p>I want to run Junit tests in a Docker container, and have the container fail if the tests fail. </p>  <p>In my Docker file I have :</p>  <pre><code>FROM maven:3.2-jdk-7-onbuild CMD mvn verify </code></pre>  <p>I'm kicking this off from a Go CI server running a docker compose command. </p>  <p>What I'm seeing is that this starts a background thread of execution and the tests start running - and the Go CI server gets an OK - just as the maven process has started. The test finishes running with some failures, but by then the Go server has already displayed a green 'all good' status. </p>  <p>Part of the problem is I need the <code>EXEC</code> command to block until the tests have finished running. </p>  <p>My question is: <strong>How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?</strong></p> ",
    "OwnerUserId": "15441",
    "LastActivityDate": "2016-02-25T04:20:40.837",
    "Title": "How do I run JUnit tests in a Docker container and have the container fail startup when JUnit fails?",
    "Tags": "<maven><junit><docker><continuous-integration><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44242091",
    "PostTypeId": "1",
    "CreationDate": "2017-05-29T12:06:18.367",
    "Score": "3",
    "ViewCount": "7351",
    "Body": "<p>I have a jboss image hosted in Docker, along with several others. I am able to run the jboss image and use it as container to deploy webapps. Currently using IntelliJ to configure a Docker configuration and deploy war files directly from IntelliJ and pointing to the docker configuration within IntelliJ.</p>  <p>I am looking for ways by which I can deploy this war file directly in my jboss image at Docker. Basically looking at ways to deploy war file without any IntelliJ intervention, with the use of docker-compose to build jboss image along with added war targets successfully deployed. What sort of changes need to be done in jboss.yml file and Dockerfile for jboss image?</p> ",
    "OwnerUserId": "6159397",
    "LastActivityDate": "2017-05-29T15:35:03.153",
    "Title": "Docker | How to build and deploy war file in jboss container hosted in Docker",
    "Tags": "<maven><docker><jboss><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44242091",
    "PostTypeId": "1",
    "CreationDate": "2017-05-29T12:06:18.367",
    "Score": "3",
    "ViewCount": "7351",
    "Body": "<p>I have a jboss image hosted in Docker, along with several others. I am able to run the jboss image and use it as container to deploy webapps. Currently using IntelliJ to configure a Docker configuration and deploy war files directly from IntelliJ and pointing to the docker configuration within IntelliJ.</p>  <p>I am looking for ways by which I can deploy this war file directly in my jboss image at Docker. Basically looking at ways to deploy war file without any IntelliJ intervention, with the use of docker-compose to build jboss image along with added war targets successfully deployed. What sort of changes need to be done in jboss.yml file and Dockerfile for jboss image?</p> ",
    "OwnerUserId": "6159397",
    "LastActivityDate": "2017-05-29T15:35:03.153",
    "Title": "Docker | How to build and deploy war file in jboss container hosted in Docker",
    "Tags": "<maven><docker><jboss><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44242091",
    "PostTypeId": "1",
    "CreationDate": "2017-05-29T12:06:18.367",
    "Score": "3",
    "ViewCount": "7351",
    "Body": "<p>I have a jboss image hosted in Docker, along with several others. I am able to run the jboss image and use it as container to deploy webapps. Currently using IntelliJ to configure a Docker configuration and deploy war files directly from IntelliJ and pointing to the docker configuration within IntelliJ.</p>  <p>I am looking for ways by which I can deploy this war file directly in my jboss image at Docker. Basically looking at ways to deploy war file without any IntelliJ intervention, with the use of docker-compose to build jboss image along with added war targets successfully deployed. What sort of changes need to be done in jboss.yml file and Dockerfile for jboss image?</p> ",
    "OwnerUserId": "6159397",
    "LastActivityDate": "2017-05-29T15:35:03.153",
    "Title": "Docker | How to build and deploy war file in jboss container hosted in Docker",
    "Tags": "<maven><docker><jboss><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46387862",
    "PostTypeId": "1",
    "CreationDate": "2017-09-24T07:53:45.073",
    "Score": "3",
    "ViewCount": "1916",
    "Body": "<p>I trying to use Fabric8 docker-maven-plugin, though I was successful in configuring plugin for individual module and run <code>docker:build docker:start</code> Maven goal without using docker-compose.yml, however I needed externalize ports and link the different module, hence I intended to use docker-compose.yml. Below is my project structure.</p>  <pre><code>--kp-parent       |       --- docker-compose.yml       --- pom.xml       |       ---- rest1       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile       ---- rest2       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile </code></pre>  <p>Here are my configurations</p>  <p><strong>Dockerfile[both rest1 and rest2 use identical file except the different port]</strong></p>  <pre><code>FROM openjdk:8-jdk-alpine MAINTAINER 'Karthik Prasad'  ARG IMAGE_VERSION ARG JAR_FILE ENV JAVA_OPTS=''  LABEL version = IMAGE_VERSION  VOLUME /tmp ADD /maven/${JAR_FILE}.jar app.jar   ENTRYPOINT [ 'sh', '-c', 'java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar' ] EXPOSE 8000 </code></pre>  <p><strong>.maven-dockerignore[In both child modules identical file]</strong></p>  <pre><code>target/** </code></pre>  <p><strong>pom.xml [Both rest1 and rest2 pom files are same except the artifcatid and name of the project]</strong></p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;rest2&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;rest2&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;         &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skip&gt;false&lt;/skip&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;external&gt;                                 &lt;type&gt;compose&lt;/type&gt;                                 &lt;basedir&gt;../&lt;/basedir&gt;                                 &lt;ignoreBuild&gt;true&lt;/ignoreBuild&gt;                             &lt;/external&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>parent pom.xml</strong></p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;     &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;     &lt;name&gt;kp-docker-multimodule-fabric8-parent&lt;/name&gt;     &lt;description&gt;Microservice Parent Pom file&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;modules&gt;         &lt;module&gt;rest1&lt;/module&gt;         &lt;module&gt;rest2&lt;/module&gt;     &lt;/modules&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;docker.image.prefix&gt;kp-ms&lt;/docker.image.prefix&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;0.22.1&lt;/version&gt;                     &lt;configuration&gt;                         &lt;skip&gt;true&lt;/skip&gt;                         &lt;images&gt;                             &lt;image&gt;                                 &lt;alias&gt;${project.artifactId}&lt;/alias&gt;                                 &lt;name&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/name&gt;                                 &lt;build&gt;                                     &lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;                                     &lt;assembly&gt;                                         &lt;inline&gt;                                             &lt;id&gt;default&lt;/id&gt;                                             &lt;fileSet&gt;                                                 &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                                                 &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;                                                 &lt;includes&gt;                                                     &lt;include&gt;*.jar&lt;/include&gt;                                                 &lt;/includes&gt;                                             &lt;/fileSet&gt;                                          &lt;/inline&gt;                                     &lt;/assembly&gt;                                 &lt;/build&gt;                             &lt;/image&gt;                         &lt;/images&gt;                         &lt;buildArgs&gt;                             &lt;IMAGE_VERSION&gt;${project.version}&lt;/IMAGE_VERSION&gt;                             &lt;JAR_FILE&gt;${project.artifactId}-${project.version}&lt;/JAR_FILE&gt;                         &lt;/buildArgs&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>And finally docker-compose.yml</strong></p>  <pre><code>version: '2' services:   rest1:     image: kp-ms/rest1:0.0.1-SNAPSHOT     ports:     - 8000:8000   rest2:     image: kp-ms/rest2:0.0.1-SNAPSHOT     ports:     - 8001:8001     links:     - rest1 </code></pre>  <p>When I run the <code>docker:build docker:start</code> I get below error.</p>  <pre><code>[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.22.1:start (default-cli) on project rest1: I/O Error: Unable to pull 'kp-ms/rest2:0.0.1-SNAPSHOT' : repository kp-ms/rest2 not found: does not exist or no pull access (Not Found: 404) -&gt; [Help 1] [ERROR] </code></pre>  <p>However If I remove rest2 section in docker-compose.yml, build goes fine and I'm able to find the container start successfully.</p>  <p>Another problem I noticed is that even if do not give image name in docker-compose.yml build fails with error image is null. However I'm not sure why I need to provide image can't the plugin map from plugin configuration as I had provided alias. As you can notice I'm trying to generate image name dynamically. </p> ",
    "OwnerUserId": "1279145",
    "LastEditorUserId": "472495",
    "LastEditDate": "2018-04-13T09:49:12.503",
    "LastActivityDate": "2018-04-13T09:49:12.503",
    "Title": "Fabric8 Docker Maven plugin not working for compose.yml on Multi module project",
    "Tags": "<maven><docker><docker-compose><dockerfile><fabric8>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46387862",
    "PostTypeId": "1",
    "CreationDate": "2017-09-24T07:53:45.073",
    "Score": "3",
    "ViewCount": "1916",
    "Body": "<p>I trying to use Fabric8 docker-maven-plugin, though I was successful in configuring plugin for individual module and run <code>docker:build docker:start</code> Maven goal without using docker-compose.yml, however I needed externalize ports and link the different module, hence I intended to use docker-compose.yml. Below is my project structure.</p>  <pre><code>--kp-parent       |       --- docker-compose.yml       --- pom.xml       |       ---- rest1       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile       ---- rest2       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile </code></pre>  <p>Here are my configurations</p>  <p><strong>Dockerfile[both rest1 and rest2 use identical file except the different port]</strong></p>  <pre><code>FROM openjdk:8-jdk-alpine MAINTAINER 'Karthik Prasad'  ARG IMAGE_VERSION ARG JAR_FILE ENV JAVA_OPTS=''  LABEL version = IMAGE_VERSION  VOLUME /tmp ADD /maven/${JAR_FILE}.jar app.jar   ENTRYPOINT [ 'sh', '-c', 'java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar' ] EXPOSE 8000 </code></pre>  <p><strong>.maven-dockerignore[In both child modules identical file]</strong></p>  <pre><code>target/** </code></pre>  <p><strong>pom.xml [Both rest1 and rest2 pom files are same except the artifcatid and name of the project]</strong></p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;rest2&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;rest2&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;         &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skip&gt;false&lt;/skip&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;external&gt;                                 &lt;type&gt;compose&lt;/type&gt;                                 &lt;basedir&gt;../&lt;/basedir&gt;                                 &lt;ignoreBuild&gt;true&lt;/ignoreBuild&gt;                             &lt;/external&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>parent pom.xml</strong></p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;     &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;     &lt;name&gt;kp-docker-multimodule-fabric8-parent&lt;/name&gt;     &lt;description&gt;Microservice Parent Pom file&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;modules&gt;         &lt;module&gt;rest1&lt;/module&gt;         &lt;module&gt;rest2&lt;/module&gt;     &lt;/modules&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;docker.image.prefix&gt;kp-ms&lt;/docker.image.prefix&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;0.22.1&lt;/version&gt;                     &lt;configuration&gt;                         &lt;skip&gt;true&lt;/skip&gt;                         &lt;images&gt;                             &lt;image&gt;                                 &lt;alias&gt;${project.artifactId}&lt;/alias&gt;                                 &lt;name&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/name&gt;                                 &lt;build&gt;                                     &lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;                                     &lt;assembly&gt;                                         &lt;inline&gt;                                             &lt;id&gt;default&lt;/id&gt;                                             &lt;fileSet&gt;                                                 &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                                                 &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;                                                 &lt;includes&gt;                                                     &lt;include&gt;*.jar&lt;/include&gt;                                                 &lt;/includes&gt;                                             &lt;/fileSet&gt;                                          &lt;/inline&gt;                                     &lt;/assembly&gt;                                 &lt;/build&gt;                             &lt;/image&gt;                         &lt;/images&gt;                         &lt;buildArgs&gt;                             &lt;IMAGE_VERSION&gt;${project.version}&lt;/IMAGE_VERSION&gt;                             &lt;JAR_FILE&gt;${project.artifactId}-${project.version}&lt;/JAR_FILE&gt;                         &lt;/buildArgs&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>And finally docker-compose.yml</strong></p>  <pre><code>version: '2' services:   rest1:     image: kp-ms/rest1:0.0.1-SNAPSHOT     ports:     - 8000:8000   rest2:     image: kp-ms/rest2:0.0.1-SNAPSHOT     ports:     - 8001:8001     links:     - rest1 </code></pre>  <p>When I run the <code>docker:build docker:start</code> I get below error.</p>  <pre><code>[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.22.1:start (default-cli) on project rest1: I/O Error: Unable to pull 'kp-ms/rest2:0.0.1-SNAPSHOT' : repository kp-ms/rest2 not found: does not exist or no pull access (Not Found: 404) -&gt; [Help 1] [ERROR] </code></pre>  <p>However If I remove rest2 section in docker-compose.yml, build goes fine and I'm able to find the container start successfully.</p>  <p>Another problem I noticed is that even if do not give image name in docker-compose.yml build fails with error image is null. However I'm not sure why I need to provide image can't the plugin map from plugin configuration as I had provided alias. As you can notice I'm trying to generate image name dynamically. </p> ",
    "OwnerUserId": "1279145",
    "LastEditorUserId": "472495",
    "LastEditDate": "2018-04-13T09:49:12.503",
    "LastActivityDate": "2018-04-13T09:49:12.503",
    "Title": "Fabric8 Docker Maven plugin not working for compose.yml on Multi module project",
    "Tags": "<maven><docker><docker-compose><dockerfile><fabric8>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46387862",
    "PostTypeId": "1",
    "CreationDate": "2017-09-24T07:53:45.073",
    "Score": "3",
    "ViewCount": "1916",
    "Body": "<p>I trying to use Fabric8 docker-maven-plugin, though I was successful in configuring plugin for individual module and run <code>docker:build docker:start</code> Maven goal without using docker-compose.yml, however I needed externalize ports and link the different module, hence I intended to use docker-compose.yml. Below is my project structure.</p>  <pre><code>--kp-parent       |       --- docker-compose.yml       --- pom.xml       |       ---- rest1       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile       ---- rest2       |       |       |       -- .maven-dockerignore       |       -- pom.xml       |       -- Dockerfile </code></pre>  <p>Here are my configurations</p>  <p><strong>Dockerfile[both rest1 and rest2 use identical file except the different port]</strong></p>  <pre><code>FROM openjdk:8-jdk-alpine MAINTAINER 'Karthik Prasad'  ARG IMAGE_VERSION ARG JAR_FILE ENV JAVA_OPTS=''  LABEL version = IMAGE_VERSION  VOLUME /tmp ADD /maven/${JAR_FILE}.jar app.jar   ENTRYPOINT [ 'sh', '-c', 'java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar' ] EXPOSE 8000 </code></pre>  <p><strong>.maven-dockerignore[In both child modules identical file]</strong></p>  <pre><code>target/** </code></pre>  <p><strong>pom.xml [Both rest1 and rest2 pom files are same except the artifcatid and name of the project]</strong></p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;rest2&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;name&gt;rest2&lt;/name&gt;     &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;         &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skip&gt;false&lt;/skip&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;external&gt;                                 &lt;type&gt;compose&lt;/type&gt;                                 &lt;basedir&gt;../&lt;/basedir&gt;                                 &lt;ignoreBuild&gt;true&lt;/ignoreBuild&gt;                             &lt;/external&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>parent pom.xml</strong></p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.kp.swasthik&lt;/groupId&gt;     &lt;artifactId&gt;kp-docker-multimodule-fabric8-parent&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;pom&lt;/packaging&gt;     &lt;name&gt;kp-docker-multimodule-fabric8-parent&lt;/name&gt;     &lt;description&gt;Microservice Parent Pom file&lt;/description&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;modules&gt;         &lt;module&gt;rest1&lt;/module&gt;         &lt;module&gt;rest2&lt;/module&gt;     &lt;/modules&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;         &lt;docker.image.prefix&gt;kp-ms&lt;/docker.image.prefix&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;0.22.1&lt;/version&gt;                     &lt;configuration&gt;                         &lt;skip&gt;true&lt;/skip&gt;                         &lt;images&gt;                             &lt;image&gt;                                 &lt;alias&gt;${project.artifactId}&lt;/alias&gt;                                 &lt;name&gt;${docker.image.prefix}/${project.artifactId}:${project.version}&lt;/name&gt;                                 &lt;build&gt;                                     &lt;dockerFileDir&gt;${project.basedir}&lt;/dockerFileDir&gt;                                     &lt;assembly&gt;                                         &lt;inline&gt;                                             &lt;id&gt;default&lt;/id&gt;                                             &lt;fileSet&gt;                                                 &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                                                 &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;                                                 &lt;includes&gt;                                                     &lt;include&gt;*.jar&lt;/include&gt;                                                 &lt;/includes&gt;                                             &lt;/fileSet&gt;                                          &lt;/inline&gt;                                     &lt;/assembly&gt;                                 &lt;/build&gt;                             &lt;/image&gt;                         &lt;/images&gt;                         &lt;buildArgs&gt;                             &lt;IMAGE_VERSION&gt;${project.version}&lt;/IMAGE_VERSION&gt;                             &lt;JAR_FILE&gt;${project.artifactId}-${project.version}&lt;/JAR_FILE&gt;                         &lt;/buildArgs&gt;                     &lt;/configuration&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong>And finally docker-compose.yml</strong></p>  <pre><code>version: '2' services:   rest1:     image: kp-ms/rest1:0.0.1-SNAPSHOT     ports:     - 8000:8000   rest2:     image: kp-ms/rest2:0.0.1-SNAPSHOT     ports:     - 8001:8001     links:     - rest1 </code></pre>  <p>When I run the <code>docker:build docker:start</code> I get below error.</p>  <pre><code>[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.22.1:start (default-cli) on project rest1: I/O Error: Unable to pull 'kp-ms/rest2:0.0.1-SNAPSHOT' : repository kp-ms/rest2 not found: does not exist or no pull access (Not Found: 404) -&gt; [Help 1] [ERROR] </code></pre>  <p>However If I remove rest2 section in docker-compose.yml, build goes fine and I'm able to find the container start successfully.</p>  <p>Another problem I noticed is that even if do not give image name in docker-compose.yml build fails with error image is null. However I'm not sure why I need to provide image can't the plugin map from plugin configuration as I had provided alias. As you can notice I'm trying to generate image name dynamically. </p> ",
    "OwnerUserId": "1279145",
    "LastEditorUserId": "472495",
    "LastEditDate": "2018-04-13T09:49:12.503",
    "LastActivityDate": "2018-04-13T09:49:12.503",
    "Title": "Fabric8 Docker Maven plugin not working for compose.yml on Multi module project",
    "Tags": "<maven><docker><docker-compose><dockerfile><fabric8>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "49071113",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49071281",
    "CreationDate": "2018-03-02T14:26:19.700",
    "Score": "3",
    "ViewCount": "575",
    "Body": "<p>I have a microservice which I am testing (Java maven project with JUnit). This has a dependency on another microservice. I am writing an e-2-e system test and want to spin up the external service from a Docker image for a full automated test.</p>  <p>My question is what is the best way to have a maven project spin up a docker image instance which can then be used in an automated test suite?</p>  <p>At the moment I a using maven-exec plugin to call a shell script during the integration-phase which starts the docker container. It may not be the most elegant solution, and I also have no way of knowing when the container is ready.</p>  <p>Any thoughts or help would be appreciated.</p>  <p>Please note: This is for full system testing against real services so I don't want to mock or stub the external service.</p> ",
    "OwnerUserId": "5294334",
    "LastActivityDate": "2018-03-02T14:35:52.447",
    "Title": "Integration Testing against a service in docker",
    "Tags": "<java><maven><unit-testing><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "49071113",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49071281",
    "CreationDate": "2018-03-02T14:26:19.700",
    "Score": "3",
    "ViewCount": "575",
    "Body": "<p>I have a microservice which I am testing (Java maven project with JUnit). This has a dependency on another microservice. I am writing an e-2-e system test and want to spin up the external service from a Docker image for a full automated test.</p>  <p>My question is what is the best way to have a maven project spin up a docker image instance which can then be used in an automated test suite?</p>  <p>At the moment I a using maven-exec plugin to call a shell script during the integration-phase which starts the docker container. It may not be the most elegant solution, and I also have no way of knowing when the container is ready.</p>  <p>Any thoughts or help would be appreciated.</p>  <p>Please note: This is for full system testing against real services so I don't want to mock or stub the external service.</p> ",
    "OwnerUserId": "5294334",
    "LastActivityDate": "2018-03-02T14:35:52.447",
    "Title": "Integration Testing against a service in docker",
    "Tags": "<java><maven><unit-testing><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "49071113",
    "PostTypeId": "1",
    "AcceptedAnswerId": "49071281",
    "CreationDate": "2018-03-02T14:26:19.700",
    "Score": "3",
    "ViewCount": "575",
    "Body": "<p>I have a microservice which I am testing (Java maven project with JUnit). This has a dependency on another microservice. I am writing an e-2-e system test and want to spin up the external service from a Docker image for a full automated test.</p>  <p>My question is what is the best way to have a maven project spin up a docker image instance which can then be used in an automated test suite?</p>  <p>At the moment I a using maven-exec plugin to call a shell script during the integration-phase which starts the docker container. It may not be the most elegant solution, and I also have no way of knowing when the container is ready.</p>  <p>Any thoughts or help would be appreciated.</p>  <p>Please note: This is for full system testing against real services so I don't want to mock or stub the external service.</p> ",
    "OwnerUserId": "5294334",
    "LastActivityDate": "2018-03-02T14:35:52.447",
    "Title": "Integration Testing against a service in docker",
    "Tags": "<java><maven><unit-testing><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52707667",
    "PostTypeId": "1",
    "CreationDate": "2018-10-08T17:52:28.553",
    "Score": "3",
    "ViewCount": "3743",
    "Body": "<p>I need to control the order of Docker containers instantiation, the problem is that I want to build a Jar file with the Docker maven container then pass that jar to an OpenJDK Docker container in order to build an image and then instantiate a MongoDB container and a Java-App container with the OpenJDK image generated before that communicates between them via docker-compose.</p>  <p>The problem is the Build always fails because some of the Unit tests talk to the database before it's initialized and since the tests fail the build also fails.</p>  <p>This is my dockerfile:</p>  <pre><code>FROM maven:3.5-alpine COPY ./ /app RUN cd /app &amp;&amp; mvn package  FROM openjdk:8 COPY spring-rest-iw-exam.jar /tmp/spring-rest-iw-exam.jar EXPOSE 8087 ENTRYPOINT ['java', '-jar', '/tmp/spring-rest-iw-exam.jar'] </code></pre>  <p>This is my Docker-Compose:</p>  <pre><code>version: '2' services:   mongodb:     image: mongo     container_name: iw_exam_mongo     restart: always     ports:     - '27017:27017'     environment:     - MONGO_INITDB_DATABASE=fizz_buzz_collection     volumes:     - /opt/iw-exam/data:/data/db   spring-app:     container_name: iw_exam_java_rest_api     build: ./     restart: always     ports:     - '8087:8087'     depends_on:     - mongodb </code></pre>  <p>I tried with depends_on and did some other tests with a tool call dockerize but none of it works, the maven build always starts before docker-compose even start to instantiate mongodb.</p>  <p>This is the github repository of the proyect: <a href='https://github.com/dsalasboscan/exam' rel='nofollow noreferrer'>https://github.com/dsalasboscan/exam</a></p>  <p>I need to instantiate Mongodb first and THEN start with the maven build and java image generation.</p> ",
    "OwnerUserId": "7875487",
    "LastActivityDate": "2021-01-06T16:06:57.047",
    "Title": "Docker-Compose - Control docker-compose execution order",
    "Tags": "<java><maven><docker><spring-boot><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72348615",
    "PostTypeId": "1",
    "AcceptedAnswerId": "72352837",
    "CreationDate": "2022-05-23T12:35:52.937",
    "Score": "3",
    "ViewCount": "1404",
    "Body": "<p>I want to start up a docker container with debug options as follows, but the startup won't work:</p> <p><code>Dockerfile</code>:</p> <pre><code># syntax=docker/dockerfile:1 FROM maven:3-eclipse-temurin-11 as dependencies WORKDIR /opt/app COPY .dockerdev/settings.xml . COPY pom.xml . COPY src src ENTRYPOINT[&quot;mvn&quot;, &quot;spring-boot:run&quot;] </code></pre> <p><code>docker-compose.yml</code>:</p> <pre><code>version: '3.7' services:   app:     environment:       - &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&quot;     ports:       - 8080:8080       - 5005:5005        </code></pre> <p>Result:</p> <pre><code>docker-compose up Recreating my_app ... done Attaching to my_app app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | Listening for transport dt_socket at address: 5005 app_1  | [INFO] Scanning for projects... app_1  | [INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO]  app_1  | [INFO] --- maven-resources-plugin:3.2.0:testResources (default-testResources) @ my_app --- app_1  | [INFO] Using 'UTF-8' encoding to copy filtered resources. app_1  | [INFO] Using 'UTF-8' encoding to copy filtered properties files. app_1  | [INFO] Copying 3 resources app_1  | [INFO]  app_1  | [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ my_app --- app_1  | [INFO] Changes detected - recompiling the module! app_1  | [INFO] Compiling 5 source files to /opt/app/target/test-classes app_1  | [INFO]  app_1  | [INFO] &lt;&lt;&lt; spring-boot-maven-plugin:2.6.7:run (default-cli) &lt; test-compile @ my_app &lt;&lt;&lt; app_1  | [INFO]  app_1  | [INFO]  app_1  | [INFO] --- spring-boot-maven-plugin:2.6.7:run (default-cli) @ my_app --- app_1  | [INFO] Attaching agents: [] app_1  | Picked up JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 app_1  | ERROR: transport error 202: bind failed: Address already in use app_1  | ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510) app_1  | JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [./src/jdk.jdwp.agent/share/native/libjdwp/debugInit.c:735] app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] BUILD FAILURE app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [INFO] Total time:  3.000 s app_1  | [INFO] Finished at: 2022-05-23T12:30:50Z app_1  | [INFO] ------------------------------------------------------------------------ app_1  | [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.6.7:run (default-cli) on project my_app: Application finished with exit code: 2 -&gt; [Help 1] app_1  | [ERROR]  app_1  | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. app_1  | [ERROR] Re-run Maven using the -X switch to enable full debug logging. app_1  | [ERROR]  app_1  | [ERROR] For more information about the errors and possible solutions, please read the following articles: app_1  | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException my_app exited with code 1 </code></pre> <p>Sidenote: Port 5005 is of course <em>not</em> running/listening on my host! Also, if I change the port to 5006, 5007 etc, the error is always the same.</p> <p>So why is the port blocked on <code>mvn spring-boot:run</code>?</p> ",
    "OwnerUserId": "1194415",
    "LastActivityDate": "2022-05-23T17:48:16.313",
    "Title": "How to debug a JDK docker container in intellij idea?",
    "Tags": "<java><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "9",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "45981735",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45984993",
    "CreationDate": "2017-08-31T12:42:28.327",
    "Score": "2",
    "ViewCount": "2881",
    "Body": "<p>this is my Dockerfile,but if I changed the java code ,and then enter 'docker-compose up -d --build' to terminal,maven will re-download the jars, how to avoid duplication of the download?</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src RUN mvn verify ENTRYPOINT ['java','-jar','target/cloud-user.jar'] </code></pre>  <p>docker-compose.yml:</p>  <pre><code>version: '2' services:   cloud-nginx:     build: cloud-nginx     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-nginx     restart: always     ports: ['80:80']   cloud-consul:     image: consul:0.9.2     command: consul agent -dev -client 0.0.0.0   cloud-front:     build: cloud-front     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-front     restart: always     volumes:       - ./cloud-front/static:/app   cloud-user:     build: cloud-user     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-user     restart: always   mysql:      image: mysql:5.7.19     hostname: mysql     volumes:        - ./docker/mysql/data:/var/lib/mysql        - ./docker/mysql/conf:/etc/mysql/conf.d        - /etc/localtime:/etc/localtime     ulimits:        nproc: 65535     mem_limit: 1024m      restart: always      environment:       MYSQL_ROOT_PASSWORD: root     ports:       - '3306:3306' </code></pre>  <hr>  <p>I streamlined my test project, and then use the spring-boot plugin for maven </p>  <blockquote>   <p>mvn spring-boot:run</p> </blockquote>  <p>to start the project, now that mount .m2 folder first and then run mvn command.  But after I changing the java source code ,it does not loading automatically by devtools, how to solve?</p>  <p>and this is my Dockerfile/docker-compose.yml :</p>  <p>Dockerfile:</p>  <pre><code>version: '2' services:   user:     build: user     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - ./user/src:/app/src     ports:       - '8080:8080' </code></pre>  <p>docker-compose.yml:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src ENTRYPOINT ['mvn','spring-boot:run'] </code></pre> ",
    "OwnerUserId": "7035447",
    "LastEditorUserId": "7035447",
    "LastEditDate": "2017-08-31T15:19:53.887",
    "LastActivityDate": "2017-08-31T15:21:18.070",
    "Title": "How to use maven-docker on development-environment to avoid repeated download jars?",
    "Tags": "<java><maven><docker><docker-compose><development-environment>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45981735",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45984993",
    "CreationDate": "2017-08-31T12:42:28.327",
    "Score": "2",
    "ViewCount": "2881",
    "Body": "<p>this is my Dockerfile,but if I changed the java code ,and then enter 'docker-compose up -d --build' to terminal,maven will re-download the jars, how to avoid duplication of the download?</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src RUN mvn verify ENTRYPOINT ['java','-jar','target/cloud-user.jar'] </code></pre>  <p>docker-compose.yml:</p>  <pre><code>version: '2' services:   cloud-nginx:     build: cloud-nginx     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-nginx     restart: always     ports: ['80:80']   cloud-consul:     image: consul:0.9.2     command: consul agent -dev -client 0.0.0.0   cloud-front:     build: cloud-front     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-front     restart: always     volumes:       - ./cloud-front/static:/app   cloud-user:     build: cloud-user     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-user     restart: always   mysql:      image: mysql:5.7.19     hostname: mysql     volumes:        - ./docker/mysql/data:/var/lib/mysql        - ./docker/mysql/conf:/etc/mysql/conf.d        - /etc/localtime:/etc/localtime     ulimits:        nproc: 65535     mem_limit: 1024m      restart: always      environment:       MYSQL_ROOT_PASSWORD: root     ports:       - '3306:3306' </code></pre>  <hr>  <p>I streamlined my test project, and then use the spring-boot plugin for maven </p>  <blockquote>   <p>mvn spring-boot:run</p> </blockquote>  <p>to start the project, now that mount .m2 folder first and then run mvn command.  But after I changing the java source code ,it does not loading automatically by devtools, how to solve?</p>  <p>and this is my Dockerfile/docker-compose.yml :</p>  <p>Dockerfile:</p>  <pre><code>version: '2' services:   user:     build: user     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - ./user/src:/app/src     ports:       - '8080:8080' </code></pre>  <p>docker-compose.yml:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src ENTRYPOINT ['mvn','spring-boot:run'] </code></pre> ",
    "OwnerUserId": "7035447",
    "LastEditorUserId": "7035447",
    "LastEditDate": "2017-08-31T15:19:53.887",
    "LastActivityDate": "2017-08-31T15:21:18.070",
    "Title": "How to use maven-docker on development-environment to avoid repeated download jars?",
    "Tags": "<java><maven><docker><docker-compose><development-environment>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45981735",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45984993",
    "CreationDate": "2017-08-31T12:42:28.327",
    "Score": "2",
    "ViewCount": "2881",
    "Body": "<p>this is my Dockerfile,but if I changed the java code ,and then enter 'docker-compose up -d --build' to terminal,maven will re-download the jars, how to avoid duplication of the download?</p>  <p>Dockerfile:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src RUN mvn verify ENTRYPOINT ['java','-jar','target/cloud-user.jar'] </code></pre>  <p>docker-compose.yml:</p>  <pre><code>version: '2' services:   cloud-nginx:     build: cloud-nginx     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-nginx     restart: always     ports: ['80:80']   cloud-consul:     image: consul:0.9.2     command: consul agent -dev -client 0.0.0.0   cloud-front:     build: cloud-front     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-front     restart: always     volumes:       - ./cloud-front/static:/app   cloud-user:     build: cloud-user     image: registry.cn-beijing.aliyuncs.com/wangdali/cloud-user     restart: always   mysql:      image: mysql:5.7.19     hostname: mysql     volumes:        - ./docker/mysql/data:/var/lib/mysql        - ./docker/mysql/conf:/etc/mysql/conf.d        - /etc/localtime:/etc/localtime     ulimits:        nproc: 65535     mem_limit: 1024m      restart: always      environment:       MYSQL_ROOT_PASSWORD: root     ports:       - '3306:3306' </code></pre>  <hr>  <p>I streamlined my test project, and then use the spring-boot plugin for maven </p>  <blockquote>   <p>mvn spring-boot:run</p> </blockquote>  <p>to start the project, now that mount .m2 folder first and then run mvn command.  But after I changing the java source code ,it does not loading automatically by devtools, how to solve?</p>  <p>and this is my Dockerfile/docker-compose.yml :</p>  <p>Dockerfile:</p>  <pre><code>version: '2' services:   user:     build: user     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - ./user/src:/app/src     ports:       - '8080:8080' </code></pre>  <p>docker-compose.yml:</p>  <pre><code>FROM maven:3.5.0-jdk-8 WORKDIR /app COPY pom.xml . COPY src ./src ENTRYPOINT ['mvn','spring-boot:run'] </code></pre> ",
    "OwnerUserId": "7035447",
    "LastEditorUserId": "7035447",
    "LastEditDate": "2017-08-31T15:19:53.887",
    "LastActivityDate": "2017-08-31T15:21:18.070",
    "Title": "How to use maven-docker on development-environment to avoid repeated download jars?",
    "Tags": "<java><maven><docker><docker-compose><development-environment>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46719537",
    "PostTypeId": "1",
    "CreationDate": "2017-10-12T22:00:01.930",
    "Score": "2",
    "ViewCount": "582",
    "Body": "<p>The project structure is like </p>  <pre><code>parent-project -- pom.xml -- child-project-1     -- pom.xml     -- Dockerfile -- child-project-2     -- pom.xml </code></pre>  <p>When mvn test is run in child-project-1 locally it works fine. However, when mvn test is run within the Docker image of child-project-1 it is not finding the parent pom.</p>  <p>I tried adding parent pom.xml using ADD/COPY in Dockerfile but it is throwing out of build context error. Wondering how to reference the parent pom from the maven module for which we are building Docker image</p>  <p>Below is the log, <strong>as mentioned earlier there is no issue with child-project-1 pom.xml and it is building fine when built outside Docker</strong>.</p>  <pre><code>+ docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml build test Building test Step 1/5 : FROM maven:3.5-jdk-8  ---&gt; 080cf1fccf1c Step 2/5 : COPY . /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; af309a791cce Step 3/5 : WORKDIR /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; f9fa9a23570f Step 4/5 : RUN chmod +x /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 3263333ba5a4 Step 5/5 : CMD /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 32d391ba99a3 Successfully built 32d391ba99a3 Successfully tagged config_test:latest + docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml up test Creating config_component_1 ...   [36mtest_1            |[0m ------------ End Environment ------------ [36mtest_1            |[0m /usr/src/parent-project/child-project-1 [36mtest_1            |[0m [INFO] Scanning for projects... [36mtest_1            |[0m [ERROR] [ERROR] Some problems were encountered while processing the POMs: [36mtest_1            |[0m [FATAL] Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 [36mtest_1            |[0m  @  [36mtest_1            |[0m [ERROR] The build could not read 1 project -&gt; [Help 1] [36mtest_1            |[0m [ERROR]    [36mtest_1            |[0m [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error [36mtest_1            |[0m [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2]  test_1            | [ERROR] The build could not read 1 project -&gt; [Help 1] test_1            | [ERROR]    test_1            | [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error test_1            | [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2] </code></pre> ",
    "OwnerUserId": "2915705",
    "LastEditorUserId": "2915705",
    "LastEditDate": "2017-10-12T23:48:07.907",
    "LastActivityDate": "2017-10-12T23:48:07.907",
    "Title": "Maven child module failing to find parent pom/artifact within image built with Docker",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46719537",
    "PostTypeId": "1",
    "CreationDate": "2017-10-12T22:00:01.930",
    "Score": "2",
    "ViewCount": "582",
    "Body": "<p>The project structure is like </p>  <pre><code>parent-project -- pom.xml -- child-project-1     -- pom.xml     -- Dockerfile -- child-project-2     -- pom.xml </code></pre>  <p>When mvn test is run in child-project-1 locally it works fine. However, when mvn test is run within the Docker image of child-project-1 it is not finding the parent pom.</p>  <p>I tried adding parent pom.xml using ADD/COPY in Dockerfile but it is throwing out of build context error. Wondering how to reference the parent pom from the maven module for which we are building Docker image</p>  <p>Below is the log, <strong>as mentioned earlier there is no issue with child-project-1 pom.xml and it is building fine when built outside Docker</strong>.</p>  <pre><code>+ docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml build test Building test Step 1/5 : FROM maven:3.5-jdk-8  ---&gt; 080cf1fccf1c Step 2/5 : COPY . /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; af309a791cce Step 3/5 : WORKDIR /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; f9fa9a23570f Step 4/5 : RUN chmod +x /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 3263333ba5a4 Step 5/5 : CMD /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 32d391ba99a3 Successfully built 32d391ba99a3 Successfully tagged config_test:latest + docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml up test Creating config_component_1 ...   [36mtest_1            |[0m ------------ End Environment ------------ [36mtest_1            |[0m /usr/src/parent-project/child-project-1 [36mtest_1            |[0m [INFO] Scanning for projects... [36mtest_1            |[0m [ERROR] [ERROR] Some problems were encountered while processing the POMs: [36mtest_1            |[0m [FATAL] Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 [36mtest_1            |[0m  @  [36mtest_1            |[0m [ERROR] The build could not read 1 project -&gt; [Help 1] [36mtest_1            |[0m [ERROR]    [36mtest_1            |[0m [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error [36mtest_1            |[0m [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2]  test_1            | [ERROR] The build could not read 1 project -&gt; [Help 1] test_1            | [ERROR]    test_1            | [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error test_1            | [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2] </code></pre> ",
    "OwnerUserId": "2915705",
    "LastEditorUserId": "2915705",
    "LastEditDate": "2017-10-12T23:48:07.907",
    "LastActivityDate": "2017-10-12T23:48:07.907",
    "Title": "Maven child module failing to find parent pom/artifact within image built with Docker",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46719537",
    "PostTypeId": "1",
    "CreationDate": "2017-10-12T22:00:01.930",
    "Score": "2",
    "ViewCount": "582",
    "Body": "<p>The project structure is like </p>  <pre><code>parent-project -- pom.xml -- child-project-1     -- pom.xml     -- Dockerfile -- child-project-2     -- pom.xml </code></pre>  <p>When mvn test is run in child-project-1 locally it works fine. However, when mvn test is run within the Docker image of child-project-1 it is not finding the parent pom.</p>  <p>I tried adding parent pom.xml using ADD/COPY in Dockerfile but it is throwing out of build context error. Wondering how to reference the parent pom from the maven module for which we are building Docker image</p>  <p>Below is the log, <strong>as mentioned earlier there is no issue with child-project-1 pom.xml and it is building fine when built outside Docker</strong>.</p>  <pre><code>+ docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml build test Building test Step 1/5 : FROM maven:3.5-jdk-8  ---&gt; 080cf1fccf1c Step 2/5 : COPY . /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; af309a791cce Step 3/5 : WORKDIR /usr/src/parent-project/child-project-1  ---&gt; Using cache  ---&gt; f9fa9a23570f Step 4/5 : RUN chmod +x /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 3263333ba5a4 Step 5/5 : CMD /usr/src/parent-project/child-project-1/src/test/resources/config/run-tests.sh  ---&gt; Using cache  ---&gt; 32d391ba99a3 Successfully built 32d391ba99a3 Successfully tagged config_test:latest + docker-compose -f ./child-project-1/src/test/resources/config/docker-compose.yml up test Creating config_component_1 ...   [36mtest_1            |[0m ------------ End Environment ------------ [36mtest_1            |[0m /usr/src/parent-project/child-project-1 [36mtest_1            |[0m [INFO] Scanning for projects... [36mtest_1            |[0m [ERROR] [ERROR] Some problems were encountered while processing the POMs: [36mtest_1            |[0m [FATAL] Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 [36mtest_1            |[0m  @  [36mtest_1            |[0m [ERROR] The build could not read 1 project -&gt; [Help 1] [36mtest_1            |[0m [ERROR]    [36mtest_1            |[0m [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error [36mtest_1            |[0m [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2]  test_1            | [ERROR] The build could not read 1 project -&gt; [Help 1] test_1            | [ERROR]    test_1            | [ERROR]   The project com.parent:child-project-1:[unknown-version] (/usr/src/parent-project/child-project-1/pom.xml) has 1 error test_1            | [ERROR]     Non-resolvable parent POM for com.parent:child-project-1:[unknown-version]: Could not find artifact com.parent:cdx-components-test:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 9, column 10 -&gt; [Help 2] </code></pre> ",
    "OwnerUserId": "2915705",
    "LastEditorUserId": "2915705",
    "LastEditDate": "2017-10-12T23:48:07.907",
    "LastActivityDate": "2017-10-12T23:48:07.907",
    "Title": "Maven child module failing to find parent pom/artifact within image built with Docker",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "50805431",
    "PostTypeId": "1",
    "CreationDate": "2018-06-11T20:20:22.150",
    "Score": "2",
    "ViewCount": "1567",
    "Body": "<p>I have a java project that is running using maven through a docker container. I have a properties file that specifies local environment variables. However, I want modify the environment variables in java or possibly through maven pom.xml or docker file/docker compose. </p>  <p>I tried setting my environment variables in docker file using </p>  <pre><code>ENV new_env = old_env  </code></pre>  <p>format but when I ran docker:run, it didn't work. This is what I got.</p>  <pre><code>bc6cc4&gt; Execute a program under the supervision of a valid init process (tini) bc6cc4&gt;  bc6cc4&gt; Command line options: bc6cc4&gt;  bc6cc4&gt;   --version: Show version and exit. bc6cc4&gt;   -h: Show this help message and exit. bc6cc4&gt;   -s: Register as a process subreaper (requires Linux &gt;= 3.4). bc6cc4&gt;   -v: Generate more verbose output. Repeat up to 3 times. bc6cc4&gt;   -g: Send signals to the child's process group. bc6cc4&gt;   -l: Show license and exit. bc6cc4&gt;  bc6cc4&gt; Environment variables: bc6cc4&gt;  bc6cc4&gt;   TINI_SUBREAPER: Register as a process subreaper (requires Linux &gt;= 3.4) bc6cc4&gt;   TINI_VERBOSITY: Set the verbosity level (default: 1) bc6cc4&gt;  </code></pre>  <p>After these errors my project just stopped and I had to manually quit out. Any suggestions?  </p> ",
    "OwnerDisplayName": "user9121114",
    "LastEditorDisplayName": "user9121114",
    "LastEditDate": "2018-06-11T20:36:18.527",
    "LastActivityDate": "2018-06-11T20:38:38.390",
    "Title": "How to set environment variables for a java project running through docker?",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50805431",
    "PostTypeId": "1",
    "CreationDate": "2018-06-11T20:20:22.150",
    "Score": "2",
    "ViewCount": "1567",
    "Body": "<p>I have a java project that is running using maven through a docker container. I have a properties file that specifies local environment variables. However, I want modify the environment variables in java or possibly through maven pom.xml or docker file/docker compose. </p>  <p>I tried setting my environment variables in docker file using </p>  <pre><code>ENV new_env = old_env  </code></pre>  <p>format but when I ran docker:run, it didn't work. This is what I got.</p>  <pre><code>bc6cc4&gt; Execute a program under the supervision of a valid init process (tini) bc6cc4&gt;  bc6cc4&gt; Command line options: bc6cc4&gt;  bc6cc4&gt;   --version: Show version and exit. bc6cc4&gt;   -h: Show this help message and exit. bc6cc4&gt;   -s: Register as a process subreaper (requires Linux &gt;= 3.4). bc6cc4&gt;   -v: Generate more verbose output. Repeat up to 3 times. bc6cc4&gt;   -g: Send signals to the child's process group. bc6cc4&gt;   -l: Show license and exit. bc6cc4&gt;  bc6cc4&gt; Environment variables: bc6cc4&gt;  bc6cc4&gt;   TINI_SUBREAPER: Register as a process subreaper (requires Linux &gt;= 3.4) bc6cc4&gt;   TINI_VERBOSITY: Set the verbosity level (default: 1) bc6cc4&gt;  </code></pre>  <p>After these errors my project just stopped and I had to manually quit out. Any suggestions?  </p> ",
    "OwnerDisplayName": "user9121114",
    "LastEditorDisplayName": "user9121114",
    "LastEditDate": "2018-06-11T20:36:18.527",
    "LastActivityDate": "2018-06-11T20:38:38.390",
    "Title": "How to set environment variables for a java project running through docker?",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50805431",
    "PostTypeId": "1",
    "CreationDate": "2018-06-11T20:20:22.150",
    "Score": "2",
    "ViewCount": "1567",
    "Body": "<p>I have a java project that is running using maven through a docker container. I have a properties file that specifies local environment variables. However, I want modify the environment variables in java or possibly through maven pom.xml or docker file/docker compose. </p>  <p>I tried setting my environment variables in docker file using </p>  <pre><code>ENV new_env = old_env  </code></pre>  <p>format but when I ran docker:run, it didn't work. This is what I got.</p>  <pre><code>bc6cc4&gt; Execute a program under the supervision of a valid init process (tini) bc6cc4&gt;  bc6cc4&gt; Command line options: bc6cc4&gt;  bc6cc4&gt;   --version: Show version and exit. bc6cc4&gt;   -h: Show this help message and exit. bc6cc4&gt;   -s: Register as a process subreaper (requires Linux &gt;= 3.4). bc6cc4&gt;   -v: Generate more verbose output. Repeat up to 3 times. bc6cc4&gt;   -g: Send signals to the child's process group. bc6cc4&gt;   -l: Show license and exit. bc6cc4&gt;  bc6cc4&gt; Environment variables: bc6cc4&gt;  bc6cc4&gt;   TINI_SUBREAPER: Register as a process subreaper (requires Linux &gt;= 3.4) bc6cc4&gt;   TINI_VERBOSITY: Set the verbosity level (default: 1) bc6cc4&gt;  </code></pre>  <p>After these errors my project just stopped and I had to manually quit out. Any suggestions?  </p> ",
    "OwnerDisplayName": "user9121114",
    "LastEditorDisplayName": "user9121114",
    "LastEditDate": "2018-06-11T20:36:18.527",
    "LastActivityDate": "2018-06-11T20:38:38.390",
    "Title": "How to set environment variables for a java project running through docker?",
    "Tags": "<java><maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53106535",
    "PostTypeId": "1",
    "CreationDate": "2018-11-01T17:40:02.100",
    "Score": "2",
    "ViewCount": "9089",
    "Body": "<p>I am trying to build a docker image for a maven project with the command: <code>mvn clean install -DskipTests -Pdocker</code></p>  <p>I have the following <strong>Dockerfile</strong>:</p>  <pre><code>FROM openjdk:8-jre  ARG serviceuser=${project.artifactId}  ##UPDATES AND INSTALL REQUIRED PACKAGES RUN apt-get update &amp;&amp; \\     apt-get install -y gettext-base sudo &amp;&amp; \\     apt-get install -y iptables sudo &amp;&amp; \\     adduser --shell /bin/bash ${serviceuser} &amp;&amp; \\     adduser ${serviceuser} sudo &amp;&amp; \\     echo '%sudo ALL=NOPASSWD: ALL' &gt;&gt; /etc/sudoers  USER ${serviceuser}  ##MOVE AND COPY PROJECT FILES INTO CONTAINER COPY ${project.build.finalName}.jar /home/${serviceuser}/  WORKDIR /home/${serviceuser} </code></pre>  <p>The <strong>pom.xml</strong> file has some of the following contents: (Have made it shorter just for explaination)</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.book.app&lt;/groupId&gt;   &lt;artifactId&gt;book-app&lt;/artifactId&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;name&gt;book-app&lt;/name&gt;   &lt;url&gt;http://maven.apache.org&lt;/url&gt;   &lt;profiles&gt;     &lt;profile&gt;       &lt;id&gt;docker&lt;/id&gt;       &lt;build&gt;         &lt;resources&gt;           &lt;resource&gt;             &lt;directory&gt;docker&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;targetPath&gt;${project.build.directory}&lt;/targetPath&gt;           &lt;/resource&gt;         &lt;/resources&gt;         &lt;plugins&gt;           &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.3.3&lt;/version&gt;             &lt;executions&gt;               &lt;execution&gt;                 &lt;id&gt;default&lt;/id&gt;                 &lt;goals&gt;                   &lt;goal&gt;build&lt;/goal&gt;                   &lt;goal&gt;push&lt;/goal&gt;                 &lt;/goals&gt;               &lt;/execution&gt;             &lt;/executions&gt;             &lt;configuration&gt;               &lt;contextDirectory&gt;${project.build.directory}&lt;/contextDirectory&gt;               &lt;repository&gt;test-img:2000/v1/${project.artifactId}&lt;/repository&gt;               &lt;tag&gt;${project.version}&lt;/tag&gt;               &lt;tag&gt;latest&lt;/tag&gt;             &lt;/configuration&gt;           &lt;/plugin&gt;         &lt;/plugins&gt;       &lt;/build&gt;     &lt;/profile&gt;   &lt;/profiles&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;   &lt;/parent&gt;   &lt;dependencies&gt;     ...   &lt;/dependencies&gt;   &lt;build&gt;     ...   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>When i build, it gives me the following error message...</p>  <p>Caused by: com.spotify.docker.client.exceptions.DockerException: failed to process '${project.artifactId}': missing ':' in substitution</p>  <p>[ERROR] failed to process <strong>'${project.artifactId}': missing ':' in substitution</strong></p>  <p><strong>[INFO] BUILD FAILURE</strong></p>  <p>I would appreciate any hints or help, thank you.</p> ",
    "OwnerUserId": "8863970",
    "LastActivityDate": "2019-09-17T22:51:24.180",
    "Title": "Unable to build docker image due to failed to process '${project.artifactId}': missing ':' in substitution",
    "Tags": "<maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53106535",
    "PostTypeId": "1",
    "CreationDate": "2018-11-01T17:40:02.100",
    "Score": "2",
    "ViewCount": "9089",
    "Body": "<p>I am trying to build a docker image for a maven project with the command: <code>mvn clean install -DskipTests -Pdocker</code></p>  <p>I have the following <strong>Dockerfile</strong>:</p>  <pre><code>FROM openjdk:8-jre  ARG serviceuser=${project.artifactId}  ##UPDATES AND INSTALL REQUIRED PACKAGES RUN apt-get update &amp;&amp; \\     apt-get install -y gettext-base sudo &amp;&amp; \\     apt-get install -y iptables sudo &amp;&amp; \\     adduser --shell /bin/bash ${serviceuser} &amp;&amp; \\     adduser ${serviceuser} sudo &amp;&amp; \\     echo '%sudo ALL=NOPASSWD: ALL' &gt;&gt; /etc/sudoers  USER ${serviceuser}  ##MOVE AND COPY PROJECT FILES INTO CONTAINER COPY ${project.build.finalName}.jar /home/${serviceuser}/  WORKDIR /home/${serviceuser} </code></pre>  <p>The <strong>pom.xml</strong> file has some of the following contents: (Have made it shorter just for explaination)</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.book.app&lt;/groupId&gt;   &lt;artifactId&gt;book-app&lt;/artifactId&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;name&gt;book-app&lt;/name&gt;   &lt;url&gt;http://maven.apache.org&lt;/url&gt;   &lt;profiles&gt;     &lt;profile&gt;       &lt;id&gt;docker&lt;/id&gt;       &lt;build&gt;         &lt;resources&gt;           &lt;resource&gt;             &lt;directory&gt;docker&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;targetPath&gt;${project.build.directory}&lt;/targetPath&gt;           &lt;/resource&gt;         &lt;/resources&gt;         &lt;plugins&gt;           &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.3.3&lt;/version&gt;             &lt;executions&gt;               &lt;execution&gt;                 &lt;id&gt;default&lt;/id&gt;                 &lt;goals&gt;                   &lt;goal&gt;build&lt;/goal&gt;                   &lt;goal&gt;push&lt;/goal&gt;                 &lt;/goals&gt;               &lt;/execution&gt;             &lt;/executions&gt;             &lt;configuration&gt;               &lt;contextDirectory&gt;${project.build.directory}&lt;/contextDirectory&gt;               &lt;repository&gt;test-img:2000/v1/${project.artifactId}&lt;/repository&gt;               &lt;tag&gt;${project.version}&lt;/tag&gt;               &lt;tag&gt;latest&lt;/tag&gt;             &lt;/configuration&gt;           &lt;/plugin&gt;         &lt;/plugins&gt;       &lt;/build&gt;     &lt;/profile&gt;   &lt;/profiles&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;   &lt;/parent&gt;   &lt;dependencies&gt;     ...   &lt;/dependencies&gt;   &lt;build&gt;     ...   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>When i build, it gives me the following error message...</p>  <p>Caused by: com.spotify.docker.client.exceptions.DockerException: failed to process '${project.artifactId}': missing ':' in substitution</p>  <p>[ERROR] failed to process <strong>'${project.artifactId}': missing ':' in substitution</strong></p>  <p><strong>[INFO] BUILD FAILURE</strong></p>  <p>I would appreciate any hints or help, thank you.</p> ",
    "OwnerUserId": "8863970",
    "LastActivityDate": "2019-09-17T22:51:24.180",
    "Title": "Unable to build docker image due to failed to process '${project.artifactId}': missing ':' in substitution",
    "Tags": "<maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53106535",
    "PostTypeId": "1",
    "CreationDate": "2018-11-01T17:40:02.100",
    "Score": "2",
    "ViewCount": "9089",
    "Body": "<p>I am trying to build a docker image for a maven project with the command: <code>mvn clean install -DskipTests -Pdocker</code></p>  <p>I have the following <strong>Dockerfile</strong>:</p>  <pre><code>FROM openjdk:8-jre  ARG serviceuser=${project.artifactId}  ##UPDATES AND INSTALL REQUIRED PACKAGES RUN apt-get update &amp;&amp; \\     apt-get install -y gettext-base sudo &amp;&amp; \\     apt-get install -y iptables sudo &amp;&amp; \\     adduser --shell /bin/bash ${serviceuser} &amp;&amp; \\     adduser ${serviceuser} sudo &amp;&amp; \\     echo '%sudo ALL=NOPASSWD: ALL' &gt;&gt; /etc/sudoers  USER ${serviceuser}  ##MOVE AND COPY PROJECT FILES INTO CONTAINER COPY ${project.build.finalName}.jar /home/${serviceuser}/  WORKDIR /home/${serviceuser} </code></pre>  <p>The <strong>pom.xml</strong> file has some of the following contents: (Have made it shorter just for explaination)</p>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'   xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.book.app&lt;/groupId&gt;   &lt;artifactId&gt;book-app&lt;/artifactId&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;name&gt;book-app&lt;/name&gt;   &lt;url&gt;http://maven.apache.org&lt;/url&gt;   &lt;profiles&gt;     &lt;profile&gt;       &lt;id&gt;docker&lt;/id&gt;       &lt;build&gt;         &lt;resources&gt;           &lt;resource&gt;             &lt;directory&gt;docker&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;targetPath&gt;${project.build.directory}&lt;/targetPath&gt;           &lt;/resource&gt;         &lt;/resources&gt;         &lt;plugins&gt;           &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;1.3.3&lt;/version&gt;             &lt;executions&gt;               &lt;execution&gt;                 &lt;id&gt;default&lt;/id&gt;                 &lt;goals&gt;                   &lt;goal&gt;build&lt;/goal&gt;                   &lt;goal&gt;push&lt;/goal&gt;                 &lt;/goals&gt;               &lt;/execution&gt;             &lt;/executions&gt;             &lt;configuration&gt;               &lt;contextDirectory&gt;${project.build.directory}&lt;/contextDirectory&gt;               &lt;repository&gt;test-img:2000/v1/${project.artifactId}&lt;/repository&gt;               &lt;tag&gt;${project.version}&lt;/tag&gt;               &lt;tag&gt;latest&lt;/tag&gt;             &lt;/configuration&gt;           &lt;/plugin&gt;         &lt;/plugins&gt;       &lt;/build&gt;     &lt;/profile&gt;   &lt;/profiles&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;   &lt;/parent&gt;   &lt;dependencies&gt;     ...   &lt;/dependencies&gt;   &lt;build&gt;     ...   &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>When i build, it gives me the following error message...</p>  <p>Caused by: com.spotify.docker.client.exceptions.DockerException: failed to process '${project.artifactId}': missing ':' in substitution</p>  <p>[ERROR] failed to process <strong>'${project.artifactId}': missing ':' in substitution</strong></p>  <p><strong>[INFO] BUILD FAILURE</strong></p>  <p>I would appreciate any hints or help, thank you.</p> ",
    "OwnerUserId": "8863970",
    "LastActivityDate": "2019-09-17T22:51:24.180",
    "Title": "Unable to build docker image due to failed to process '${project.artifactId}': missing ':' in substitution",
    "Tags": "<maven><docker><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54315830",
    "PostTypeId": "1",
    "CreationDate": "2019-01-22T20:15:44.883",
    "Score": "2",
    "ViewCount": "2731",
    "Body": "<p>We are running a spring-boot application that requires you to run a <code>mvn clean install -Dmaven.test.skip=true</code> before you can run a <code>docker build</code>. Is there any images with both maven and docker installed?</p>  <p>I have tried running a before script with a maven:3.6.0-jdk-8-slim image then specifying a separate image in the job. </p>  <pre><code>image: maven:3.6.0-jdk-8-slim  before_script:       - mvn clean install -Dmaven.test.skip=true  build_archivist_elasticsearch:   image: docker:latest   services:     - docker:dind   variables:     DOCKER_DRIVER: overlay   script:     - cd archivist     - docker build -t xxxx/xxxxx:development </code></pre>  <p>Need the <code>mvn clean install</code> to build and create the artifacts then run the <code>docker build -t</code> and <code>docker push</code> to our repo.</p> ",
    "OwnerUserId": "10952163",
    "LastEditorUserId": "5081990",
    "LastEditDate": "2019-01-23T02:06:06.207",
    "LastActivityDate": "2019-01-23T11:14:44.923",
    "Title": "Gitlab CICD - Run a mvn clean install before building a docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><centos7>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56261144",
    "PostTypeId": "1",
    "CreationDate": "2019-05-22T16:17:45.393",
    "Score": "2",
    "ViewCount": "1755",
    "Body": "<p>i'm facing an issue using spring cloud dataflow connected to a remote repository.</p>  <p>I think i managed to connect the dataflow server to the repository correctly because at first i couldn't import apps and now i can</p>  <p>The problem is that when i try to deploy a stream the dataflow server doesn't see the remote repository.</p>  <p>Here's an example to make myself clear</p>  <p>When i try to import a jar that does not exist the import is successful but if i try to open the details from the UI i get:</p>  <p>Failed to resolve MavenResource: [JAR-NAME] Configured remote repositories: : [repo1],[springRepo]</p>  <p>So i guess that the system sees 'repo1'</p>  <p>But then when i deploy a stream (with all valid apps) i get:</p>  <p>Error Message = [Failed to resolve MavenResource: [JAR-NAME] Configured remote repository: : [springRepo]]</p>  <p>I followed this:  <a href='https://github.com/spring-cloud/spring-cloud-dataflow/issues/982' rel='nofollow noreferrer'>https://github.com/spring-cloud/spring-cloud-dataflow/issues/982</a></p>  <p>And this: <a href='https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html' rel='nofollow noreferrer'>https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html</a></p>  <p>This is my docker-compose.yml:</p>  <pre><code>version: '3'  services:   kafka:     image: wurstmeister/kafka:2.11-0.11.0.3     expose:       - '9092'     environment:       - KAFKA_ADVERTISED_PORT=9092       - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181       - KAFKA_ADVERTISED_HOST_NAME=kafka     depends_on:       - zookeeper   zookeeper:     image: wurstmeister/zookeeper     expose:       - '2181'   dataflow-server:     image: springcloud/spring-cloud-dataflow-server:2.0.2.RELEASE     container_name: dataflow-server     ports:       - '9393:9393'     environment:       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=kafka:9092       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181       - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.enabled=true       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.db=myinfluxdb       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.uri=http://influxdb:8086       - spring.cloud.dataflow.grafana-info.url=http://localhost:3000       - maven.localRepository=null       - maven.remote-repositories.repo1.url= [URL]       - maven.remote-repositories.repo1.auth.username=***       - maven.remote-repositories.repo1.auth.password=***     depends_on:       - kafka     volumes:       - ~/.m2/repository:/m2repo   app-import:     image: springcloud/openjdk:latest     depends_on:       - dataflow-server     command: &gt;       /bin/sh -c '         while ! nc -z dataflow-server 9393;         do           sleep 1;         done;         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Einstein.RELEASE/spring-cloud-stream-app-descriptor-Einstein.RELEASE.stream-apps-kafka-maven&amp;force=true';         echo 'Stream apps imported'         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release-local/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Dearborn.SR1/spring-cloud-task-app-descriptor-Dearborn.SR1.task-apps-maven&amp;force=true';         echo 'Task apps imported''   skipper-server:     image: springcloud/spring-cloud-skipper-server:2.0.1.RELEASE     container_name: skipper     ports:     - '7577:7577'     - '9000-9010:9000-9010'    influxdb:     image: influxdb:1.7.4     container_name: 'influxdb'     ports:       - '8086:8086'    grafana:     image: springcloud/spring-cloud-dataflow-grafana-influxdb:2.0.2.RELEASE     container_name: 'grafana'     ports:       - '3000:3000' volumes:   scdf-targets: </code></pre> ",
    "OwnerUserId": "5157724",
    "LastActivityDate": "2023-03-21T15:55:00.747",
    "Title": "Issue with spring cloud dataflow and Remote Repository: Apps are installed but i can't deploy streams",
    "Tags": "<maven><docker-compose><nexus><spring-cloud-dataflow>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56261144",
    "PostTypeId": "1",
    "CreationDate": "2019-05-22T16:17:45.393",
    "Score": "2",
    "ViewCount": "1755",
    "Body": "<p>i'm facing an issue using spring cloud dataflow connected to a remote repository.</p>  <p>I think i managed to connect the dataflow server to the repository correctly because at first i couldn't import apps and now i can</p>  <p>The problem is that when i try to deploy a stream the dataflow server doesn't see the remote repository.</p>  <p>Here's an example to make myself clear</p>  <p>When i try to import a jar that does not exist the import is successful but if i try to open the details from the UI i get:</p>  <p>Failed to resolve MavenResource: [JAR-NAME] Configured remote repositories: : [repo1],[springRepo]</p>  <p>So i guess that the system sees 'repo1'</p>  <p>But then when i deploy a stream (with all valid apps) i get:</p>  <p>Error Message = [Failed to resolve MavenResource: [JAR-NAME] Configured remote repository: : [springRepo]]</p>  <p>I followed this:  <a href='https://github.com/spring-cloud/spring-cloud-dataflow/issues/982' rel='nofollow noreferrer'>https://github.com/spring-cloud/spring-cloud-dataflow/issues/982</a></p>  <p>And this: <a href='https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html' rel='nofollow noreferrer'>https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html</a></p>  <p>This is my docker-compose.yml:</p>  <pre><code>version: '3'  services:   kafka:     image: wurstmeister/kafka:2.11-0.11.0.3     expose:       - '9092'     environment:       - KAFKA_ADVERTISED_PORT=9092       - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181       - KAFKA_ADVERTISED_HOST_NAME=kafka     depends_on:       - zookeeper   zookeeper:     image: wurstmeister/zookeeper     expose:       - '2181'   dataflow-server:     image: springcloud/spring-cloud-dataflow-server:2.0.2.RELEASE     container_name: dataflow-server     ports:       - '9393:9393'     environment:       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=kafka:9092       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181       - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.enabled=true       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.db=myinfluxdb       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.uri=http://influxdb:8086       - spring.cloud.dataflow.grafana-info.url=http://localhost:3000       - maven.localRepository=null       - maven.remote-repositories.repo1.url= [URL]       - maven.remote-repositories.repo1.auth.username=***       - maven.remote-repositories.repo1.auth.password=***     depends_on:       - kafka     volumes:       - ~/.m2/repository:/m2repo   app-import:     image: springcloud/openjdk:latest     depends_on:       - dataflow-server     command: &gt;       /bin/sh -c '         while ! nc -z dataflow-server 9393;         do           sleep 1;         done;         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Einstein.RELEASE/spring-cloud-stream-app-descriptor-Einstein.RELEASE.stream-apps-kafka-maven&amp;force=true';         echo 'Stream apps imported'         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release-local/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Dearborn.SR1/spring-cloud-task-app-descriptor-Dearborn.SR1.task-apps-maven&amp;force=true';         echo 'Task apps imported''   skipper-server:     image: springcloud/spring-cloud-skipper-server:2.0.1.RELEASE     container_name: skipper     ports:     - '7577:7577'     - '9000-9010:9000-9010'    influxdb:     image: influxdb:1.7.4     container_name: 'influxdb'     ports:       - '8086:8086'    grafana:     image: springcloud/spring-cloud-dataflow-grafana-influxdb:2.0.2.RELEASE     container_name: 'grafana'     ports:       - '3000:3000' volumes:   scdf-targets: </code></pre> ",
    "OwnerUserId": "5157724",
    "LastActivityDate": "2023-03-21T15:55:00.747",
    "Title": "Issue with spring cloud dataflow and Remote Repository: Apps are installed but i can't deploy streams",
    "Tags": "<maven><docker-compose><nexus><spring-cloud-dataflow>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56261144",
    "PostTypeId": "1",
    "CreationDate": "2019-05-22T16:17:45.393",
    "Score": "2",
    "ViewCount": "1755",
    "Body": "<p>i'm facing an issue using spring cloud dataflow connected to a remote repository.</p>  <p>I think i managed to connect the dataflow server to the repository correctly because at first i couldn't import apps and now i can</p>  <p>The problem is that when i try to deploy a stream the dataflow server doesn't see the remote repository.</p>  <p>Here's an example to make myself clear</p>  <p>When i try to import a jar that does not exist the import is successful but if i try to open the details from the UI i get:</p>  <p>Failed to resolve MavenResource: [JAR-NAME] Configured remote repositories: : [repo1],[springRepo]</p>  <p>So i guess that the system sees 'repo1'</p>  <p>But then when i deploy a stream (with all valid apps) i get:</p>  <p>Error Message = [Failed to resolve MavenResource: [JAR-NAME] Configured remote repository: : [springRepo]]</p>  <p>I followed this:  <a href='https://github.com/spring-cloud/spring-cloud-dataflow/issues/982' rel='nofollow noreferrer'>https://github.com/spring-cloud/spring-cloud-dataflow/issues/982</a></p>  <p>And this: <a href='https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html' rel='nofollow noreferrer'>https://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.BUILD-SNAPSHOT/reference/html/getting-started-deploying-spring-cloud-dataflow.html</a></p>  <p>This is my docker-compose.yml:</p>  <pre><code>version: '3'  services:   kafka:     image: wurstmeister/kafka:2.11-0.11.0.3     expose:       - '9092'     environment:       - KAFKA_ADVERTISED_PORT=9092       - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181       - KAFKA_ADVERTISED_HOST_NAME=kafka     depends_on:       - zookeeper   zookeeper:     image: wurstmeister/zookeeper     expose:       - '2181'   dataflow-server:     image: springcloud/spring-cloud-dataflow-server:2.0.2.RELEASE     container_name: dataflow-server     ports:       - '9393:9393'     environment:       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=kafka:9092       - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181       - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.enabled=true       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.db=myinfluxdb       - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.influx.uri=http://influxdb:8086       - spring.cloud.dataflow.grafana-info.url=http://localhost:3000       - maven.localRepository=null       - maven.remote-repositories.repo1.url= [URL]       - maven.remote-repositories.repo1.auth.username=***       - maven.remote-repositories.repo1.auth.password=***     depends_on:       - kafka     volumes:       - ~/.m2/repository:/m2repo   app-import:     image: springcloud/openjdk:latest     depends_on:       - dataflow-server     command: &gt;       /bin/sh -c '         while ! nc -z dataflow-server 9393;         do           sleep 1;         done;         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release/org/springframework/cloud/stream/app/spring-cloud-stream-app-descriptor/Einstein.RELEASE/spring-cloud-stream-app-descriptor-Einstein.RELEASE.stream-apps-kafka-maven&amp;force=true';         echo 'Stream apps imported'         wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=https://repo.spring.io/libs-release-local/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Dearborn.SR1/spring-cloud-task-app-descriptor-Dearborn.SR1.task-apps-maven&amp;force=true';         echo 'Task apps imported''   skipper-server:     image: springcloud/spring-cloud-skipper-server:2.0.1.RELEASE     container_name: skipper     ports:     - '7577:7577'     - '9000-9010:9000-9010'    influxdb:     image: influxdb:1.7.4     container_name: 'influxdb'     ports:       - '8086:8086'    grafana:     image: springcloud/spring-cloud-dataflow-grafana-influxdb:2.0.2.RELEASE     container_name: 'grafana'     ports:       - '3000:3000' volumes:   scdf-targets: </code></pre> ",
    "OwnerUserId": "5157724",
    "LastActivityDate": "2023-03-21T15:55:00.747",
    "Title": "Issue with spring cloud dataflow and Remote Repository: Apps are installed but i can't deploy streams",
    "Tags": "<maven><docker-compose><nexus><spring-cloud-dataflow>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57318429",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57328810",
    "CreationDate": "2019-08-02T00:06:22.123",
    "Score": "2",
    "ViewCount": "2550",
    "Body": "<p>I'm setting  up a multi-module maven project and trying to deploy it to docker a typical 3 layer project whit a separate container for a <code>MYSQL</code> DB.</p>  <p><a href='https://i.stack.imgur.com/HfECj.png' rel='nofollow noreferrer'><img src='https://i.stack.imgur.com/HfECj.png' alt='project tree'></a></p>  <p>I've been doing so research on the web and I came across the <code>docker-compose</code> a concept if I understand correctly with a config <code>YAML</code> file you can deploy each jar file into a different container and make them work together, \u00bfis this the only approach in my case?</p>  <p>Could I build one only <code>jar</code> file from the 3 modules and deploy it to the container? In my case i don't need to treat each project as a separate micro-service. On the other hand, I need docker compose because besides my <code>spring boot</code> project you need to run a container with a <code>MYSQL DB</code> and connect it to the  <code>spring-boot</code>.</p>  <p>I'm not sure how to approach this scenario, thanks for any advice in advance.</p> ",
    "OwnerUserId": "4814583",
    "LastEditorUserId": "4814583",
    "LastEditDate": "2019-08-02T00:50:32.363",
    "LastActivityDate": "2020-11-16T20:35:41.477",
    "Title": "How to deploy maven multi-module spring boot to docker container",
    "Tags": "<maven><spring-boot><docker><docker-compose><multi-module>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "59085091",
    "PostTypeId": "1",
    "AcceptedAnswerId": "59091941",
    "CreationDate": "2019-11-28T09:02:37.747",
    "Score": "2",
    "ViewCount": "4702",
    "Body": "<p>I am running multiple spring-boot microservice within docker containers. I am writing docker-compose.yml file to automate de deploy, but I have a problem. All the spring-boot microservices have different profiles depending on if you want to run them locally without docker and another ig you want to run them with docker (Basically each profiles changes the URls of clients between microservices).</p>  <p>If I run docker-compose up and the jar files that have been compiled are not compiled with 'docker' spring-boot profile, it will creates the images with the wrong jar.</p>  <p>MY DOCKER-COMPOSE.YML EXAMPLE:</p>  <pre><code>version: '3'  services:   imageserver:     build:       context: ./ImageServer       dockerfile: Dockerfile     ports:       - 8081:8081     networks:       - my-private-network   core:     build:       context: ./Core       dockerfile: Dockerfile     ports:       - 8082:8082     networks:       - my-private-network  networks:   my-private-network:   my-public-network </code></pre>  <p>ONE OF MY DOCKERFILE EXAMPLE:</p>  <pre><code>FROM openjdk:8-jdk-alpine LABEL maintainer='lalala@gmail.com' VOLUME /tmp EXPOSE 8082 COPY ./target/*.jar Core.jar ENTRYPOINT ['java','-jar','/Core.jar'] </code></pre>  <p>is there any way to execute a command like 'mvn clean install -P docker' in each directory before running docker-compose to ensure that the jar that will be included in the image has been compiled with the right profile?  The command must be excited BEFORE cretae the container (out of the container to complile the jar that will be included within the container NOT inside the container)</p>  <p>Thanks</p> ",
    "OwnerUserId": "9789035",
    "LastEditorUserId": "13302",
    "LastEditDate": "2019-12-11T17:05:49.757",
    "LastActivityDate": "2019-12-11T17:05:49.757",
    "Title": "Execute mvn clean install before docker-compose commands",
    "Tags": "<maven><spring-boot><docker><compilation><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "62782921",
    "PostTypeId": "1",
    "CreationDate": "2020-07-07T19:53:32.770",
    "Score": "2",
    "ViewCount": "4933",
    "Body": "<p>I have a ci service (specifically gitlab ci, if it matters) that is docker-compose'ing a postgres instance at <code>0.0.0.0:5432</code> which is then needed for maven integration tests I run within a dockerfile.</p> <p>For some reason, and you can see the stack trace, the dockerfile maven integration tests can't connect to the container open on 5432.</p> <p>Why is this happening and how do I fix the connection?</p> <p>FWIW, when I run <code>docker-compose up</code> and run the integration tests locally (as opposed to within a dockerfile) everything passes fine.</p> <pre class='lang-sh prettyprint-override'><code>$ docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES 28d4ca05dd26        postgres:12.3       &quot;docker-entrypoint.s\u2026&quot;   27 seconds ago      Up 22 seconds       0.0.0.0:5432-&gt;5432/tcp   ************db_1 $ docker run --name ************ ************ </code></pre> <pre class='lang-sh prettyprint-override'><code>07-07-2020 20:46:01.634 [main] INFO  com.zaxxer.hikari.HikariDataSource.getConnection - HikariPool-1 - Starting... 07-07-2020 20:46:02.721 [main] ERROR com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException - HikariPool-1 - Exception during pool initialization. org.postgresql.util.PSQLException: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:280)     at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)     at org.postgresql.jdbc.PgConnection.&lt;init&gt;(PgConnection.java:195)     at org.postgresql.Driver.makeConnection(Driver.java:458)     at org.postgresql.Driver.connect(Driver.java:260)     at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)     at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)     at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115)     at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)     at org.flywaydb.core.internal.jdbc.JdbcUtils.openConnection(JdbcUtils.java:56)     at org.flywaydb.core.internal.database.DatabaseFactory.createDatabase(DatabaseFactory.java:72)     at org.flywaydb.core.Flyway.execute(Flyway.java:1670)     at org.flywaydb.core.Flyway.migrate(Flyway.java:1356)     at org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer.afterPropertiesSet(FlywayMigrationInitializer.java:65)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:119)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)     at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349)     at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349)     at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)     at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)     at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)     at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)     at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)     at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)     at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)     at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263)     at java.base/java.util.Optional.orElseGet(Optional.java:369)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$before$0(ClassTestDescriptor.java:192)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:191)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:74)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:105)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:142)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:117)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:383)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:344)     at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:417) Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)     at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)     at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)     at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)     at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)     at java.base/java.net.Socket.connect(Socket.java:591)     at org.postgresql.core.PGStream.&lt;init&gt;(PGStream.java:75)     at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:91)     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:192)     ... 83 common frames omitted 07-07-2020 20:46:02.765 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. 07-07-2020 20:46:03.472 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.logMessage -  Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 07-07-2020 20:46:03.531 [main] ERROR org.springframework.boot.SpringApplication.reportFailure - Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- </code></pre> <h3>will update with answers</h3> <blockquote> <p>Have you tried checking if you flushed the iptables rules that docker created? if so restart docker service, and double check the iptables rules: iptables -nvL</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ iptables -nvL Chain INPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination   </code></pre> <blockquote> <p>What OS are you running? is SELinux in enforcing mode? getenforce if so check if something got denied: grep -i denied /var/log/audit/audit.log</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ cat /etc/*release 3.12.0 NAME=&quot;Alpine Linux&quot; ID=alpine VERSION_ID=3.12.0 PRETTY_NAME=&quot;Alpine Linux v3.12&quot; HOME_URL=&quot;https://alpinelinux.org/&quot; BUG_REPORT_URL=&quot;https://bugs.alpinelinux.org/&quot; </code></pre> <blockquote> <p>I don't think this is a pg_hba.conf but it does not hurt to check the config.</p> </blockquote> <p>I'm not sure how to do that?</p> <blockquote> <h1>test with telnet in you can mannualy connect: telnet localhost 5432</h1> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ telnet localhost 5432 telnet: can't connect to remote host (127.0.0.1): Connection refused </code></pre> <blockquote> <p>As a last resort while running docker-compose up watch a tcpdump: tcpdump -nni any port 5432 maybe the traffic got redirected somewhere, or localhost is badly defined in /etc/hosts</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ tcpdump -nni any port 5432 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes </code></pre> <h3>when i try different host</h3> <p><strong>application properties</strong></p> <pre><code>spring.datasource.url=jdbc:postgresql://db:5432/*****************db </code></pre> <pre class='lang-sh prettyprint-override'><code>08-07-2020 16:24:57.484 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: The connection attempt failed. ------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : The connection attempt failed. </code></pre> ",
    "OwnerUserId": "8652920",
    "LastEditorUserId": "8652920",
    "LastEditDate": "2020-07-08T15:28:24.620",
    "LastActivityDate": "2022-04-03T20:30:51.333",
    "Title": "Connection to localhost:5432 refused after docker run when port 5432 is clearly open and listening?",
    "Tags": "<spring><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "62782921",
    "PostTypeId": "1",
    "CreationDate": "2020-07-07T19:53:32.770",
    "Score": "2",
    "ViewCount": "4933",
    "Body": "<p>I have a ci service (specifically gitlab ci, if it matters) that is docker-compose'ing a postgres instance at <code>0.0.0.0:5432</code> which is then needed for maven integration tests I run within a dockerfile.</p> <p>For some reason, and you can see the stack trace, the dockerfile maven integration tests can't connect to the container open on 5432.</p> <p>Why is this happening and how do I fix the connection?</p> <p>FWIW, when I run <code>docker-compose up</code> and run the integration tests locally (as opposed to within a dockerfile) everything passes fine.</p> <pre class='lang-sh prettyprint-override'><code>$ docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES 28d4ca05dd26        postgres:12.3       &quot;docker-entrypoint.s\u2026&quot;   27 seconds ago      Up 22 seconds       0.0.0.0:5432-&gt;5432/tcp   ************db_1 $ docker run --name ************ ************ </code></pre> <pre class='lang-sh prettyprint-override'><code>07-07-2020 20:46:01.634 [main] INFO  com.zaxxer.hikari.HikariDataSource.getConnection - HikariPool-1 - Starting... 07-07-2020 20:46:02.721 [main] ERROR com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException - HikariPool-1 - Exception during pool initialization. org.postgresql.util.PSQLException: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:280)     at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)     at org.postgresql.jdbc.PgConnection.&lt;init&gt;(PgConnection.java:195)     at org.postgresql.Driver.makeConnection(Driver.java:458)     at org.postgresql.Driver.connect(Driver.java:260)     at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)     at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)     at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115)     at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)     at org.flywaydb.core.internal.jdbc.JdbcUtils.openConnection(JdbcUtils.java:56)     at org.flywaydb.core.internal.database.DatabaseFactory.createDatabase(DatabaseFactory.java:72)     at org.flywaydb.core.Flyway.execute(Flyway.java:1670)     at org.flywaydb.core.Flyway.migrate(Flyway.java:1356)     at org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer.afterPropertiesSet(FlywayMigrationInitializer.java:65)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:119)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)     at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349)     at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349)     at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)     at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)     at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)     at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)     at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)     at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)     at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)     at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263)     at java.base/java.util.Optional.orElseGet(Optional.java:369)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$before$0(ClassTestDescriptor.java:192)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:191)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:74)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:105)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:142)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:117)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:383)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:344)     at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:417) Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)     at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)     at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)     at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)     at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)     at java.base/java.net.Socket.connect(Socket.java:591)     at org.postgresql.core.PGStream.&lt;init&gt;(PGStream.java:75)     at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:91)     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:192)     ... 83 common frames omitted 07-07-2020 20:46:02.765 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. 07-07-2020 20:46:03.472 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.logMessage -  Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 07-07-2020 20:46:03.531 [main] ERROR org.springframework.boot.SpringApplication.reportFailure - Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- </code></pre> <h3>will update with answers</h3> <blockquote> <p>Have you tried checking if you flushed the iptables rules that docker created? if so restart docker service, and double check the iptables rules: iptables -nvL</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ iptables -nvL Chain INPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination   </code></pre> <blockquote> <p>What OS are you running? is SELinux in enforcing mode? getenforce if so check if something got denied: grep -i denied /var/log/audit/audit.log</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ cat /etc/*release 3.12.0 NAME=&quot;Alpine Linux&quot; ID=alpine VERSION_ID=3.12.0 PRETTY_NAME=&quot;Alpine Linux v3.12&quot; HOME_URL=&quot;https://alpinelinux.org/&quot; BUG_REPORT_URL=&quot;https://bugs.alpinelinux.org/&quot; </code></pre> <blockquote> <p>I don't think this is a pg_hba.conf but it does not hurt to check the config.</p> </blockquote> <p>I'm not sure how to do that?</p> <blockquote> <h1>test with telnet in you can mannualy connect: telnet localhost 5432</h1> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ telnet localhost 5432 telnet: can't connect to remote host (127.0.0.1): Connection refused </code></pre> <blockquote> <p>As a last resort while running docker-compose up watch a tcpdump: tcpdump -nni any port 5432 maybe the traffic got redirected somewhere, or localhost is badly defined in /etc/hosts</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ tcpdump -nni any port 5432 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes </code></pre> <h3>when i try different host</h3> <p><strong>application properties</strong></p> <pre><code>spring.datasource.url=jdbc:postgresql://db:5432/*****************db </code></pre> <pre class='lang-sh prettyprint-override'><code>08-07-2020 16:24:57.484 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: The connection attempt failed. ------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : The connection attempt failed. </code></pre> ",
    "OwnerUserId": "8652920",
    "LastEditorUserId": "8652920",
    "LastEditDate": "2020-07-08T15:28:24.620",
    "LastActivityDate": "2022-04-03T20:30:51.333",
    "Title": "Connection to localhost:5432 refused after docker run when port 5432 is clearly open and listening?",
    "Tags": "<spring><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "62782921",
    "PostTypeId": "1",
    "CreationDate": "2020-07-07T19:53:32.770",
    "Score": "2",
    "ViewCount": "4933",
    "Body": "<p>I have a ci service (specifically gitlab ci, if it matters) that is docker-compose'ing a postgres instance at <code>0.0.0.0:5432</code> which is then needed for maven integration tests I run within a dockerfile.</p> <p>For some reason, and you can see the stack trace, the dockerfile maven integration tests can't connect to the container open on 5432.</p> <p>Why is this happening and how do I fix the connection?</p> <p>FWIW, when I run <code>docker-compose up</code> and run the integration tests locally (as opposed to within a dockerfile) everything passes fine.</p> <pre class='lang-sh prettyprint-override'><code>$ docker ps CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES 28d4ca05dd26        postgres:12.3       &quot;docker-entrypoint.s\u2026&quot;   27 seconds ago      Up 22 seconds       0.0.0.0:5432-&gt;5432/tcp   ************db_1 $ docker run --name ************ ************ </code></pre> <pre class='lang-sh prettyprint-override'><code>07-07-2020 20:46:01.634 [main] INFO  com.zaxxer.hikari.HikariDataSource.getConnection - HikariPool-1 - Starting... 07-07-2020 20:46:02.721 [main] ERROR com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException - HikariPool-1 - Exception during pool initialization. org.postgresql.util.PSQLException: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:280)     at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:49)     at org.postgresql.jdbc.PgConnection.&lt;init&gt;(PgConnection.java:195)     at org.postgresql.Driver.makeConnection(Driver.java:458)     at org.postgresql.Driver.connect(Driver.java:260)     at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)     at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)     at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)     at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)     at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)     at com.zaxxer.hikari.pool.HikariPool.&lt;init&gt;(HikariPool.java:115)     at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)     at org.flywaydb.core.internal.jdbc.JdbcUtils.openConnection(JdbcUtils.java:56)     at org.flywaydb.core.internal.database.DatabaseFactory.createDatabase(DatabaseFactory.java:72)     at org.flywaydb.core.Flyway.execute(Flyway.java:1670)     at org.flywaydb.core.Flyway.migrate(Flyway.java:1356)     at org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer.afterPropertiesSet(FlywayMigrationInitializer.java:65)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:119)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)     at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349)     at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349)     at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)     at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)     at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)     at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)     at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)     at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)     at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)     at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263)     at java.base/java.util.Optional.orElseGet(Optional.java:369)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$before$0(ClassTestDescriptor.java:192)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:191)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.before(ClassTestDescriptor.java:74)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:105)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)     at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)     at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:142)     at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:117)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:383)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:344)     at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:417) Caused by: java.net.ConnectException: Connection refused (Connection refused)     at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)     at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)     at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)     at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)     at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:403)     at java.base/java.net.Socket.connect(Socket.java:591)     at org.postgresql.core.PGStream.&lt;init&gt;(PGStream.java:75)     at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:91)     at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:192)     ... 83 common frames omitted 07-07-2020 20:46:02.765 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. 07-07-2020 20:46:03.472 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.logMessage -  Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 07-07-2020 20:46:03.531 [main] ERROR org.springframework.boot.SpringApplication.reportFailure - Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections. -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- </code></pre> <h3>will update with answers</h3> <blockquote> <p>Have you tried checking if you flushed the iptables rules that docker created? if so restart docker service, and double check the iptables rules: iptables -nvL</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ iptables -nvL Chain INPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination          Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)  pkts bytes target     prot opt in     out     source               destination   </code></pre> <blockquote> <p>What OS are you running? is SELinux in enforcing mode? getenforce if so check if something got denied: grep -i denied /var/log/audit/audit.log</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ cat /etc/*release 3.12.0 NAME=&quot;Alpine Linux&quot; ID=alpine VERSION_ID=3.12.0 PRETTY_NAME=&quot;Alpine Linux v3.12&quot; HOME_URL=&quot;https://alpinelinux.org/&quot; BUG_REPORT_URL=&quot;https://bugs.alpinelinux.org/&quot; </code></pre> <blockquote> <p>I don't think this is a pg_hba.conf but it does not hurt to check the config.</p> </blockquote> <p>I'm not sure how to do that?</p> <blockquote> <h1>test with telnet in you can mannualy connect: telnet localhost 5432</h1> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ telnet localhost 5432 telnet: can't connect to remote host (127.0.0.1): Connection refused </code></pre> <blockquote> <p>As a last resort while running docker-compose up watch a tcpdump: tcpdump -nni any port 5432 maybe the traffic got redirected somewhere, or localhost is badly defined in /etc/hosts</p> </blockquote> <pre class='lang-sh prettyprint-override'><code>$ tcpdump -nni any port 5432 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes </code></pre> <h3>when i try different host</h3> <p><strong>application properties</strong></p> <pre><code>spring.datasource.url=jdbc:postgresql://db:5432/*****************db </code></pre> <pre class='lang-sh prettyprint-override'><code>08-07-2020 16:24:57.484 [main] WARN  org.springframework.web.context.support.GenericWebApplicationContext.refresh - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Invocation of init method failed; nested exception is org.flywaydb.core.internal.exception.FlywaySqlException:  Unable to obtain connection from database: The connection attempt failed. ------------------------------------------------------------------------- SQL State  : 08001 Error Code : 0 Message    : The connection attempt failed. </code></pre> ",
    "OwnerUserId": "8652920",
    "LastEditorUserId": "8652920",
    "LastEditDate": "2020-07-08T15:28:24.620",
    "LastActivityDate": "2022-04-03T20:30:51.333",
    "Title": "Connection to localhost:5432 refused after docker run when port 5432 is clearly open and listening?",
    "Tags": "<spring><docker><maven><docker-compose><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64511717",
    "PostTypeId": "1",
    "CreationDate": "2020-10-24T09:05:11.210",
    "Score": "2",
    "ViewCount": "2422",
    "Body": "<p>I'm developing a Spring Boot app with several data services, but I'm struggling to get it working as a containerized application. This is the project folder structure:</p> <pre><code>myapp/ \u251c\u2500\u2500 src/ \u2502   \u2514\u2500\u2500 ... \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 init-mongo.js \u2514\u2500\u2500 pom.xml </code></pre> <p>And this is the Dockerfile content I came up with after reading tutorials and official documentation:</p> <pre><code># # Build stage # FROM maven:3.5-jdk-8 AS build COPY init-mongo.js /docker-entrypoint-initdb.d/ COPY src /app/src/ COPY pom.xml /app/ RUN mvn -f /app/pom.xml clean package  # # Package stage # FROM openjdk:8-alpine COPY --from=build /app/target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>And this is my docker-compose.yml:</p> <pre><code>version: '3' services:   app-mongodb:     container_name: app-mongodb     image: mongo     environment:       MONGO_INITDB_DATABASE: appdb       MONGO_INITDB_ROOT_USERNAME: mongodbusr       MONGO_INITDB_ROOT_PASSWORD: mongodbpwd     volumes:       - mongodata:/usr/share/mongodb/data     ports:       - &quot;27017:27017&quot;     hostname: app-mongodb    app-mariadb:     container_name: app-mariadb     image: mariadb     environment:       MYSQL_DATABASE: appdb       MYSQL_ROOT_PASSWORD: mariadbpwd       MYSQL_ROOT_HOST: '%'     ports:       - &quot;3306:3306&quot;     restart: always    app-elasticsearch:     container_name: app-elasticsearch     image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6     volumes:       - esdata:/usr/share/elasticsearch/data     ports:       - &quot;9200:9200&quot;     hostname: app-elasticsearch    app:     build: .     ports:       - 8080:8080     depends_on:       - app-mariadb       - app-mongodb       - app-elasticsearch  volumes:   mongodata:   esdata: </code></pre> <p>Thing is <em>it should</em> work, but I keep getting Maven error whenever I run the <code>docker-compose up</code> command:</p> <pre><code>myapp_1            | [INFO] Scanning for projects... myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] BUILD FAILURE myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [INFO] Total time: 0.216 s myapp_1            | [INFO] Finished at: 2020-10-24T19:25:15Z myapp_1            | [INFO] ------------------------------------------------------------------------ myapp_1            | [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt;  or &lt;plugin-group-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate -resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, pr ocess-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clea n, pre-site, site, post-site, site-deploy. -&gt; [Help 1] myapp_1            | [ERROR] myapp_1            | [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. myapp_1            | [ERROR] Re-run Maven using the -X switch to enable full debug logging. myapp_1            | [ERROR] myapp_1            | [ERROR] For more information about the errors and possible solutions, please read the following articles: myapp_1            | [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException </code></pre> <p>What am I missing?</p> <p><strong>EDIT</strong>: I tried explicitly packaging the JAR file and then just copying it to the end container editing the Dockerfile content, as suggested by @BeppeC:</p> <pre><code>FROM openjdk:8-alpine COPY target/*.jar /usr/app/app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/usr/app/app.jar&quot;] </code></pre> <p>It's still producing the same error, so it seems there's something triggering the mvn build which I'm not aware of.</p> <p><strong>EDIT2</strong>: I suspect what is causing the &quot;no goals&quot; error might be something wrong with my pom.xml file:</p> <pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;it.clsoft&lt;/groupId&gt;     &lt;artifactId&gt;myapp&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;myapp&lt;/name&gt;     &lt;description&gt;My web app&lt;/description&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;             &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.18.12&lt;/version&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-elasticsearch&lt;/artifactId&gt;             &lt;version&gt;3.2.10.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt;             &lt;artifactId&gt;jose4j&lt;/artifactId&gt;             &lt;version&gt;0.7.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;             &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;             &lt;version&gt;1.19&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.tukaani&lt;/groupId&gt;             &lt;artifactId&gt;xz&lt;/artifactId&gt;             &lt;version&gt;1.8&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;             &lt;version&gt;2.8.5&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.sisyphsu&lt;/groupId&gt;             &lt;artifactId&gt;dateparser&lt;/artifactId&gt;             &lt;version&gt;1.0.4&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;             &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;             &lt;version&gt;2.4.1&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-jpa-datatables&lt;/artifactId&gt;             &lt;version&gt;5.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;com.github.darrachequesne&lt;/groupId&gt;             &lt;artifactId&gt;spring-data-mongodb-datatables&lt;/artifactId&gt;             &lt;version&gt;1.0.3&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;             &lt;version&gt;8.0.19&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mariadb.jdbc&lt;/groupId&gt;             &lt;artifactId&gt;mariadb-java-client&lt;/artifactId&gt;             &lt;version&gt;2.4.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.mongodb&lt;/groupId&gt;             &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;             &lt;version&gt;3.12.4&lt;/version&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;             &lt;artifactId&gt;esapi&lt;/artifactId&gt;             &lt;version&gt;2.2.0.0&lt;/version&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-module-junit4&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.powermock&lt;/groupId&gt;             &lt;artifactId&gt;powermock-api-mockito2&lt;/artifactId&gt;             &lt;version&gt;2.0.7&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                     &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre> <p>It seems alright to me, but again I'm working my way through tutorials so I might've missed something important.</p> ",
    "OwnerUserId": "6030281",
    "LastEditorUserId": "6030281",
    "LastEditDate": "2020-10-24T19:31:37.627",
    "LastActivityDate": "2020-10-24T19:31:37.627",
    "Title": "Dockerfile can't build app with Maven - No goals specified for this build",
    "Tags": "<spring><spring-boot><docker><maven><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52120845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52129134",
    "CreationDate": "2018-08-31T18:16:34.017",
    "Score": "13",
    "ViewCount": "25867",
    "Body": "<p>When building my Spring-boot image using Maven I now do this inside the Dockerfile. Maven will download all dependencies and then compile my files. This takes quite some time. </p>  <p>How can I specify that the build process via docker-compose (Dockerfile) re-uses my 'Windows10 Home' Maven repository? So, the number of (new) downloads is minimal. My dev context: I use the Docker quickstart terminal, so using a docker-machine. </p>  <p>The is is a part of my docker-compose.yml file: </p>  <pre><code>version: '3' services:   spring-boot-app:     image: spring-boot-image     build:       context: ./       dockerfile: Dockerfile     depends_on:       - mysql-docker-container     ports:       - 8087:8080     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - /data/spring-boot-app </code></pre>  <p>My Dockerfile is: </p>  <pre><code>FROM java:8 FROM maven:alpine WORKDIR /app COPY . /app RUN mvn -v RUN mvn clean install -DskipTests EXPOSE 8080 LABEL maintainer=\u201cxyz@holland.nl\u201d ADD ./target/spring-boot-example-0.0.1-SNAPSHOT.jar /developments/ ENTRYPOINT ['java','-jar','/developments/spring-boot-example-0.0.1-SNAPSHOT.jar'] </code></pre> ",
    "OwnerUserId": "3143823",
    "LastEditorUserId": "3143823",
    "LastEditDate": "2018-09-01T16:50:52.730",
    "LastActivityDate": "2018-09-01T16:50:52.730",
    "Title": "Docker-compose - build with maven that re-uses the maven repository",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52120845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52129134",
    "CreationDate": "2018-08-31T18:16:34.017",
    "Score": "13",
    "ViewCount": "25867",
    "Body": "<p>When building my Spring-boot image using Maven I now do this inside the Dockerfile. Maven will download all dependencies and then compile my files. This takes quite some time. </p>  <p>How can I specify that the build process via docker-compose (Dockerfile) re-uses my 'Windows10 Home' Maven repository? So, the number of (new) downloads is minimal. My dev context: I use the Docker quickstart terminal, so using a docker-machine. </p>  <p>The is is a part of my docker-compose.yml file: </p>  <pre><code>version: '3' services:   spring-boot-app:     image: spring-boot-image     build:       context: ./       dockerfile: Dockerfile     depends_on:       - mysql-docker-container     ports:       - 8087:8080     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - /data/spring-boot-app </code></pre>  <p>My Dockerfile is: </p>  <pre><code>FROM java:8 FROM maven:alpine WORKDIR /app COPY . /app RUN mvn -v RUN mvn clean install -DskipTests EXPOSE 8080 LABEL maintainer=\u201cxyz@holland.nl\u201d ADD ./target/spring-boot-example-0.0.1-SNAPSHOT.jar /developments/ ENTRYPOINT ['java','-jar','/developments/spring-boot-example-0.0.1-SNAPSHOT.jar'] </code></pre> ",
    "OwnerUserId": "3143823",
    "LastEditorUserId": "3143823",
    "LastEditDate": "2018-09-01T16:50:52.730",
    "LastActivityDate": "2018-09-01T16:50:52.730",
    "Title": "Docker-compose - build with maven that re-uses the maven repository",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52120845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52129134",
    "CreationDate": "2018-08-31T18:16:34.017",
    "Score": "13",
    "ViewCount": "25867",
    "Body": "<p>When building my Spring-boot image using Maven I now do this inside the Dockerfile. Maven will download all dependencies and then compile my files. This takes quite some time. </p>  <p>How can I specify that the build process via docker-compose (Dockerfile) re-uses my 'Windows10 Home' Maven repository? So, the number of (new) downloads is minimal. My dev context: I use the Docker quickstart terminal, so using a docker-machine. </p>  <p>The is is a part of my docker-compose.yml file: </p>  <pre><code>version: '3' services:   spring-boot-app:     image: spring-boot-image     build:       context: ./       dockerfile: Dockerfile     depends_on:       - mysql-docker-container     ports:       - 8087:8080     volumes:       - $HOME/.m2/repository:/root/.m2/repository       - /data/spring-boot-app </code></pre>  <p>My Dockerfile is: </p>  <pre><code>FROM java:8 FROM maven:alpine WORKDIR /app COPY . /app RUN mvn -v RUN mvn clean install -DskipTests EXPOSE 8080 LABEL maintainer=\u201cxyz@holland.nl\u201d ADD ./target/spring-boot-example-0.0.1-SNAPSHOT.jar /developments/ ENTRYPOINT ['java','-jar','/developments/spring-boot-example-0.0.1-SNAPSHOT.jar'] </code></pre> ",
    "OwnerUserId": "3143823",
    "LastEditorUserId": "3143823",
    "LastEditDate": "2018-09-01T16:50:52.730",
    "LastActivityDate": "2018-09-01T16:50:52.730",
    "Title": "Docker-compose - build with maven that re-uses the maven repository",
    "Tags": "<maven><docker><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "31156892",
    "PostTypeId": "1",
    "CreationDate": "2015-07-01T08:58:48.337",
    "Score": "1",
    "ViewCount": "1017",
    "Body": "<p>I have a simple Tic-tac-toe Java web app <a href='https://github.com/rajaraodv/tictactoe' rel='nofollow'>https://github.com/rajaraodv/tictactoe</a> It is a Maven project. It uses Jetty to run the web app by doing <code>mvn jetty:run</code> While it is running locally, I can easily modify a JavaScript file and see the changes immediately when I refresh the browser. But, when I run it via Docker where I am mounting the source directory, similar change doesn't get reflected.</p>  <p>Note: I am mounting the source directory in docker-compose.yml file. And I see the change reflected in the file but jetty doesn't pick up the change.</p>  <p><strong>Please Note: It needs JDK 7</strong>  </p>  <p>To test on localhost:</p>  <pre><code>  mvn clean install   mvn jetty:run   Open localhost:8080 to see the app.   Add an alert(1); in `doInit` function in this JavaScript https://github.com/rajaraodv/tictactoe/blob/master/src/main/webapp/WEB-INF/components/ttt/TicTacToeGrid/TicTacToeGridController.js   Refresh the browser and you'll see an alert dialog </code></pre>  <p>To test on Docker (using <a href='https://docs.docker.com/compose/' rel='nofollow'>Docker compose</a>):</p>  <pre><code>    docker-compose up     Add an alert(1); in `doInit` function in [this JavaScript][3]         ...Refresh browser, but the change is not reflected </code></pre>  <p>What am I missing?</p> ",
    "OwnerUserId": "1553014",
    "LastActivityDate": "2015-07-02T02:41:55.617",
    "Title": "mvn jetty:run not reflecting changes when run inside docker",
    "Tags": "<java><maven><docker><jetty><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "31156892",
    "PostTypeId": "1",
    "CreationDate": "2015-07-01T08:58:48.337",
    "Score": "1",
    "ViewCount": "1017",
    "Body": "<p>I have a simple Tic-tac-toe Java web app <a href='https://github.com/rajaraodv/tictactoe' rel='nofollow'>https://github.com/rajaraodv/tictactoe</a> It is a Maven project. It uses Jetty to run the web app by doing <code>mvn jetty:run</code> While it is running locally, I can easily modify a JavaScript file and see the changes immediately when I refresh the browser. But, when I run it via Docker where I am mounting the source directory, similar change doesn't get reflected.</p>  <p>Note: I am mounting the source directory in docker-compose.yml file. And I see the change reflected in the file but jetty doesn't pick up the change.</p>  <p><strong>Please Note: It needs JDK 7</strong>  </p>  <p>To test on localhost:</p>  <pre><code>  mvn clean install   mvn jetty:run   Open localhost:8080 to see the app.   Add an alert(1); in `doInit` function in this JavaScript https://github.com/rajaraodv/tictactoe/blob/master/src/main/webapp/WEB-INF/components/ttt/TicTacToeGrid/TicTacToeGridController.js   Refresh the browser and you'll see an alert dialog </code></pre>  <p>To test on Docker (using <a href='https://docs.docker.com/compose/' rel='nofollow'>Docker compose</a>):</p>  <pre><code>    docker-compose up     Add an alert(1); in `doInit` function in [this JavaScript][3]         ...Refresh browser, but the change is not reflected </code></pre>  <p>What am I missing?</p> ",
    "OwnerUserId": "1553014",
    "LastActivityDate": "2015-07-02T02:41:55.617",
    "Title": "mvn jetty:run not reflecting changes when run inside docker",
    "Tags": "<java><maven><docker><jetty><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "31156892",
    "PostTypeId": "1",
    "CreationDate": "2015-07-01T08:58:48.337",
    "Score": "1",
    "ViewCount": "1017",
    "Body": "<p>I have a simple Tic-tac-toe Java web app <a href='https://github.com/rajaraodv/tictactoe' rel='nofollow'>https://github.com/rajaraodv/tictactoe</a> It is a Maven project. It uses Jetty to run the web app by doing <code>mvn jetty:run</code> While it is running locally, I can easily modify a JavaScript file and see the changes immediately when I refresh the browser. But, when I run it via Docker where I am mounting the source directory, similar change doesn't get reflected.</p>  <p>Note: I am mounting the source directory in docker-compose.yml file. And I see the change reflected in the file but jetty doesn't pick up the change.</p>  <p><strong>Please Note: It needs JDK 7</strong>  </p>  <p>To test on localhost:</p>  <pre><code>  mvn clean install   mvn jetty:run   Open localhost:8080 to see the app.   Add an alert(1); in `doInit` function in this JavaScript https://github.com/rajaraodv/tictactoe/blob/master/src/main/webapp/WEB-INF/components/ttt/TicTacToeGrid/TicTacToeGridController.js   Refresh the browser and you'll see an alert dialog </code></pre>  <p>To test on Docker (using <a href='https://docs.docker.com/compose/' rel='nofollow'>Docker compose</a>):</p>  <pre><code>    docker-compose up     Add an alert(1); in `doInit` function in [this JavaScript][3]         ...Refresh browser, but the change is not reflected </code></pre>  <p>What am I missing?</p> ",
    "OwnerUserId": "1553014",
    "LastActivityDate": "2015-07-02T02:41:55.617",
    "Title": "mvn jetty:run not reflecting changes when run inside docker",
    "Tags": "<java><maven><docker><jetty><docker-compose>",
    "AnswerCount": "1",
    "CommentCount": "5",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "36985860",
    "PostTypeId": "1",
    "AcceptedAnswerId": "36985950",
    "CreationDate": "2016-05-02T15:15:35.793",
    "Score": "1",
    "ViewCount": "1275",
    "Body": "<p>I have built docker image using following command. (Used com.spotify:docker-maven-plugin:0.3.3 maven plugin). I am using Docker Tool Box in Windows.</p>  <pre><code>mvn clean package docker:build </code></pre>  <p>It gave SUCCESS with following description.</p>  <pre><code>Successfully built d27ae98a8879 [INFO] Built localhost/my-tt-server [INFO] Tagging localhost/my-tt-server with 1.1.x-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ </code></pre>  <p>After this, if I run 'docker ps -a', it should have displayed this new image. But I am not seeing any image related to this. Hence I am not able to start/run the new image.</p>  <p>I am not able to run 'docker-compose up my-tt-server' using following configuration in docker-compose.yml</p>  <pre><code>my-tt-server:   container_name: my-tt-server   image: localhost/my-tt-server:1.1.x-SNAPSHOT   ports:   - '21883:1883'   - '28000:8000' </code></pre>  <p>It gives following error</p>  <pre><code> Creating my-tt-server     \u2190[31mERROR\u2190[0m: Container command not found or does not exist. </code></pre>  <p>I am not sure where it went wrong.</p>  <p>Please help me to solve this. Looks like maven plugin is not correctly deploying the image. How to make it deploy correctly?</p>  <pre><code> &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.3.3&lt;/version&gt;             &lt;configuration&gt;                 &lt;dockerDirectory&gt;${project.basedir}/src/main/docker&lt;/dockerDirectory&gt;                  &lt;imageName&gt;localhost/my-tt-server&lt;/imageName&gt;                 &lt;imageTags&gt;                     &lt;imageTag&gt;${project.version}&lt;/imageTag&gt;                 &lt;/imageTags&gt;                 &lt;forceTags&gt;true&lt;/forceTags&gt;               &lt;/configuration&gt;         &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "2160694",
    "LastActivityDate": "2016-05-02T15:29:39.723",
    "Title": "Docker image is not listed though I built using maven docker plugin",
    "Tags": "<docker><docker-compose><maven-docker-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  }
]