[
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39331665",
    "PostTypeId": "1",
    "CreationDate": "2016-09-05T13:27:29.483",
    "Score": "9",
    "ViewCount": "6837",
    "Body": "<p>I am trying to build a project using maven on teamcity and getting this error during maven build step.</p>  <blockquote>   <p>[Step 2/4] [ERROR] protoc failed output:<br>   [Step 2/4] [ERROR] protoc failed error: /bin/sh: 1: protoc: Permission denied   [Step 2/4]  [13:03:14][Step 2/4] Failed to execute goal   com.google.protobuf.tools:maven-protoc-plugin:0.1.10:compile   (generate-sources) on project unit-protocol-lib: protoc did not exit   cleanly. Review output for more information.</p> </blockquote>  <p>Keep in mind I am using docker-compose for building the teamcity agent (agent running in container) and protoc is added to /usr/local/bin/protoc ($PATH has /usr/local/bin, /usr/local/bin/protoc has rwx permissions).</p>  <p>EDITED for ease</p>  <p>Forget everything above for a while.<br> I logged into the buildagent of teamcity server, access the shell using <code>/bin/sh</code> and execute the command <code>protoc</code> and it returns the error:<br> <code>protoc failed error: /bin/sh: 1: protoc: Permission denied</code>  </p>  <p>Any help??</p> ",
    "OwnerUserId": "1690527",
    "LastEditorUserId": "1690527",
    "LastEditDate": "2016-09-09T10:04:03.913",
    "LastActivityDate": "2022-10-07T11:25:37.037",
    "Title": "Permission denied for protoc on maven build in Teamcity",
    "Tags": "<maven><ubuntu><docker><teamcity><docker-compose>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45660774",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45710066",
    "CreationDate": "2017-08-13T13:18:22.230",
    "Score": "9",
    "ViewCount": "25926",
    "Body": "<p>I am trying to build a Java application and make a package using docker. This builds needs a maven repository which I don't want to include in the image, since it's very large. I wanted to try using volumes and mount my local maven repository to the maven repository in the image. I used <code>apt-get install -y maven</code> in order to have maven available, but I can't find the directory <code>.m2</code> in the image <code>$HOME</code>. </p>  <p>I used <code>ls -la $HOME</code>, <code>ls -la</code> and <code>ls -la /root</code> to find the maven home, but there is no <code>.m2</code> directory there.</p>  <p><strong>EDIT 1:</strong></p>  <p>I have these lines in <code>Dockerfile</code>: </p>  <pre><code>FROM ubuntu MAINTAINER Zeinab Abbasimazar # Install and configure required packages RUN apt-get update; \\     apt-get install -y --no-install-recommends apt-utils; \\     apt-get install -y dialog; \\     apt-get install -y wget unzip curl maven; \\     mkdir $HOME/.m2/; \\     ls -la /usr/share/maven/conf/; \\     echo \\     '&lt;settings xmlns='http://maven.apache.org/SETTINGS/1.0.0\\' \\     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' \\     xsi:schemaLocation='http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd'&gt; \\         &lt;localRepository&gt;/root/.m2/repository&lt;/localRepository&gt; \\         &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; \\         &lt;usePluginRegistry&gt;false&lt;/usePluginRegistry&gt; \\         &lt;offline&gt;false&lt;/offline&gt; \\     &lt;/settings&gt;' \\     &gt; /usr/share/maven/conf/settings.xml VOLUME ['/home/zeinab/.m2/', '/root/.m2/'] # Build RUN mvn  -X clean install -pl components -P profile </code></pre>  <p>Which puts local repository configurations in image's maven configuration file, mounts my local maven repository to a directory in the image and finally performs the build. As I can see in the maven build log that it's using the local repository path I expected:</p>  <pre><code>[DEBUG] Reading global settings from /usr/share/maven/conf/settings.xml [DEBUG] Reading user settings from /root/.m2/settings.xml [DEBUG] Using local repository at /root/.m2/repository </code></pre>  <p>But still can't detect dependencies. </p> ",
    "OwnerUserId": "1626977",
    "LastEditorUserId": "1626977",
    "LastEditDate": "2017-08-15T13:18:17.380",
    "LastActivityDate": "2020-03-03T13:52:03.607",
    "Title": "Mounting Maven Repository to Docker",
    "Tags": "<java><maven><docker><dockerfile><docker-build>",
    "AnswerCount": "2",
    "CommentCount": "5",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "46940191",
    "PostTypeId": "1",
    "AcceptedAnswerId": "46945954",
    "CreationDate": "2017-10-25T19:02:54.737",
    "Score": "9",
    "ViewCount": "12898",
    "Body": "<p><strong>I don't understand what's the problem ?</strong></p> <p>I installed Docker on Win10. This is my first experience with it. I read the manuals, start hello-world, and more. Next, I need to use the command <code>mvn compile</code> in the folder of the repository. For this needed to install Mavin.</p> <h3>I see this: <a href='http://hub.docker.com/_/maven/' rel='noreferrer'>https://hub.docker.com/_/maven/</a> and used:</h3> <p><code>docker run -it --rm --name my-maven-project -v &quot;$PWD&quot;:/usr/src/mymaven -w /usr/src/mymaven maven:3.2-jdk-7 mvn clean install</code></p> <p>... and I get the output</p> <pre><code>C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker.exe: invalid reference format. See 'C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker.exe run --help'. </code></pre> <h2>Output <code>docker version</code></h2> <pre><code>Client:  Version:      17.09.0-ce  API version:  1.32  Go version:   go1.8.3  Git commit:   afdb6d4  Built:        Tue Sep 26 22:40:09 2017  OS/Arch:      windows/amd64  Server:  Version:      17.09.0-ce  API version:  1.32 (minimum version 1.12)  Go version:   go1.8.3  Git commit:   afdb6d4  Built:        Tue Sep 26 22:45:38 2017  OS/Arch:      linux/amd64  Experimental: true </code></pre> <h2>Output <code>docker info</code></h2> <pre><code>Containers: 4  Running: 0  Paused: 0  Stopped: 4 Images: 3 Server Version: 17.09.0-ce Storage Driver: overlay2  Backing Filesystem: extfs  Supports d_type: true  Native Overlay Diff: true Logging Driver: json-file Cgroup Driver: cgroupfs Plugins:  Volume: local  Network: bridge host ipvlan macvlan null overlay  Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog Swarm: inactive Runtimes: runc Default Runtime: runc Init Binary: docker-init containerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0 runc version: 3f2f8b84a77f73d38244dd690525642a72156c64 init version: 949e6fa Security Options:  seccomp   Profile: default Kernel Version: 4.9.49-moby Operating System: Alpine Linux v3.5 OSType: linux Architecture: x86_64 CPUs: 2 Total Memory: 1.934GiB Name: moby ID: O3WT:CHTU:34YG:IYV3:OELC:RSAW:WSYD:E3HV:2ZUO:DWBU:JXOB:EN4Y Docker Root Dir: /var/lib/docker Debug Mode (client): false Debug Mode (server): true  File Descriptors: 16  Goroutines: 26  System Time: 2017-10-25T18:44:10.1162161Z  EventsListeners: 0 Registry: https://index.docker.io/v1/ Experimental: true Insecure Registries:  127.0.0.0/8 Live Restore Enabled: false </code></pre> <p>Sorry for the stupid question, first time working with Docker... Thanks!</p> ",
    "OwnerUserId": "8833429",
    "LastEditorUserId": "-1",
    "LastEditDate": "2020-06-20T09:12:55.060",
    "LastActivityDate": "2019-11-03T09:53:29.947",
    "Title": "docker.exe: invalid reference format",
    "Tags": "<windows><maven><docker>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "71300031",
    "PostTypeId": "1",
    "AcceptedAnswerId": "71301494",
    "CreationDate": "2022-02-28T19:20:42.543",
    "Score": "9",
    "ViewCount": "14709",
    "Body": "<p>I'm trying to build a simple docker image, inside a maven project, adding the image build as part of the maven build process:</p> <pre><code>&lt;build&gt;         &lt;finalName&gt;my-api&lt;/finalName&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- Docker --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;1.4.6&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;default&lt;/id&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                             &lt;!-- &lt;goal&gt;push&lt;/goal&gt; --&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;                 &lt;configuration&gt;                     &lt;repository&gt;reponame/${project.name}&lt;/repository&gt;                     &lt;tag&gt;${project.version}&lt;/tag&gt;                     &lt;skipDockerInfo&gt;true&lt;/skipDockerInfo&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;          &lt;/plugins&gt;      &lt;/build&gt; </code></pre> <pre><code>FROM openjdk:8-jdk-alpine VOLUME /tmp EXPOSE 8080 ADD target/*.jar app.jar ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java -jar /app.jar&quot; ] </code></pre> <p>But it fails, always get the same error trace, no matter which image I use, the error persists.</p> <p>Error:</p> <blockquote> <p>Caused by: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: java.lang.UnsatisfiedLinkError: could not load FFI provider jnr.ffi.provider.jffi.Provider</p> <p>Caused by: java.lang.UnsatisfiedLinkError: java.lang.UnsatisfiedLinkError: /private/var/folders/hz/rgppp8250rsdp86kf_tfjvqw0000gp/T/jffi8502916075702391528.dylib: dlopen(/private/var/folders/hz/rgppp8250rsdp86kf_tfjvqw0000gp/T/jffi8502916075702391528.dylib, 0x0001): tried: '/private/var/folders/hz/rgppp8250rsdp86kf_tfjvqw0000gp/T/jffi8502916075702391528.dylib' (fat file, but missing compatible architecture (have 'i386,x86_64', need 'arm64e')), '/usr/lib/jffi8502916075702391528.dylib' (no such file)</p> </blockquote> <p>Other images I tried:</p> <ul> <li>openjdk:13-alpine3.9</li> <li>openjdk:8-jre-alpine3.9</li> <li>azul/zulu-openjdk-alpine:17.0.2-17.32.13-arm64</li> </ul> <p><strong>My java version</strong>: openjdk version &quot;11.0.13&quot; 2021-10-19 LTS</p> <p><strong>My Docker version</strong>: Docker version 20.10.11, build dea9396</p> <p>Thanks in advance.</p> ",
    "OwnerUserId": "1949114",
    "LastEditorUserId": "1949114",
    "LastEditDate": "2022-02-28T19:54:33.877",
    "LastActivityDate": "2022-11-28T15:30:56.883",
    "Title": "Docker image build failed on Mac M1 chip",
    "Tags": "<java><docker><maven>",
    "AnswerCount": "3",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "34815411",
    "PostTypeId": "1",
    "AcceptedAnswerId": "38398569",
    "CreationDate": "2016-01-15T16:19:20.567",
    "Score": "8",
    "ViewCount": "4889",
    "Body": "<p>I am trying to build a docker image using the docker-maven-plugin (provided by spotify: <a href='https://github.com/spotify/docker-maven-plugin' rel='noreferrer'>https://github.com/spotify/docker-maven-plugin</a>) but things aren't really working out. At first I got this exception: </p>  <pre><code>org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 </code></pre>  <p>I found out that I had to create an env. variable to fix this (<a href='https://github.com/spotify/docker-maven-plugin/issues/135' rel='noreferrer'>https://github.com/spotify/docker-maven-plugin/issues/135</a>): </p>  <pre><code>set DOCKER_HOST=set DOCKER_HOST=tcp://192.168.99.100:2376 </code></pre>  <p><a href='https://i.stack.imgur.com/Wp6IQ.png' rel='noreferrer'><img src='https://i.stack.imgur.com/Wp6IQ.png' alt='docker_host'></a></p>  <p>So after setting that env. variable I keep getting this ClientProtocolException:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.3.258:build (default-cli) on project docker_micro_maven: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.client.ClientProtocolException: The server failed to respond with a valid HTTP response </code></pre>  <p>I have no idea how I could fix this, any input would be greatly appreciated. </p> ",
    "OwnerUserId": "1725624",
    "LastActivityDate": "2017-07-20T16:42:21.237",
    "Title": "Docker maven plugin ClientProtocolException (Windows 10 using Docker Toolbox)",
    "Tags": "<java><maven><docker><spotify><docker-toolbox>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "41976681",
    "PostTypeId": "1",
    "CreationDate": "2017-02-01T09:55:09.547",
    "Score": "8",
    "ViewCount": "14056",
    "Body": "<p>I would like have spring integration test with the plugin of fabric8, but when I try to run the test I got the next error: </p>  <blockquote>   <p>Cannot create docker access object</p> </blockquote>  <p>I have ubuntu and I think that I have well configurated dockers, I haven't had any problems with dockerfiles or dockercompose, so may it will be either a permissions problems or I forgot something. </p>  <p>I past below my fabric8 configuration, this have an image of mysql and the maven-failsafe-plugin to integration test. </p>  <pre><code>&lt;!--maven plugin --&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;             &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                         &lt;goal&gt;integration-test&lt;/goal&gt;                         &lt;goal&gt;verify&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;             &lt;configuration&gt;                 &lt;environmentVariables&gt;                     &lt;it-database.port&gt;${it-database.port}&lt;/it-database.port&gt;                 &lt;/environmentVariables&gt;             &lt;/configuration&gt;         &lt;/plugin&gt;         &lt;!--fabric8 plugin --&gt;         &lt;plugin&gt;             &lt;groupId&gt;io.fabric8&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.18.1&lt;/version&gt;             &lt;configuration&gt;                 &lt;!--&lt;dockerHost&gt;unix:///var/run/docker.sock&lt;/dockerHost&gt;--&gt;                 &lt;dockerHost&gt;tcp://0.0.0.0:2375&lt;/dockerHost&gt;             &lt;/configuration&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;id&gt;prepare-it-database&lt;/id&gt;                     &lt;phase&gt;pre-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;start&lt;/goal&gt;                     &lt;/goals&gt;                     &lt;configuration&gt;                         &lt;images&gt;                             &lt;image&gt;                                 &lt;name&gt;mysql:5.7&lt;/name&gt;                                 &lt;alias&gt;it-database&lt;/alias&gt;                                 &lt;run&gt;                                     &lt;ports&gt;                                         &lt;port&gt;it-database.port:5432&lt;/port&gt;                                     &lt;/ports&gt;                                     &lt;wait&gt;                                         &lt;log&gt;database system is ready to accept connections&lt;/log&gt;                                         &lt;time&gt;20000&lt;/time&gt;                                     &lt;/wait&gt;                                 &lt;/run&gt;                             &lt;/image&gt;                         &lt;/images&gt;                     &lt;/configuration&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                     &lt;id&gt;remove-it-database&lt;/id&gt;                     &lt;phase&gt;post-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;stop&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "3322664",
    "LastActivityDate": "2023-08-09T05:24:15.693",
    "Title": "Cannot create docker access object",
    "Tags": "<spring><maven><docker><fabric8>",
    "AnswerCount": "4",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "42278216",
    "PostTypeId": "1",
    "AcceptedAnswerId": "42278812",
    "CreationDate": "2017-02-16T15:31:39.383",
    "Score": "8",
    "ViewCount": "6130",
    "Body": "<p>I'm trying to build a simple web app with Maven and run with Tomcat7, inside a Docker container.</p>  <p>This is my structure:</p>  <pre><code>- Dockerfile - pom.xml - src/main/webapp/index.hmtl </code></pre>  <p>This is my Dockerfile:</p>  <pre><code>FROM java:8  # Install maven RUN apt-get -y update &amp;&amp; apt-get install -y maven  WORKDIR /code  # Prepare by downloading dependencies ADD pom.xml /code/pom.xml  # Adding source, compile and package into a fat jar ADD src /code/src RUN ['mvn', 'package']  EXPOSE 8080 CMD ['mvn', 'tomcat7:run'] </code></pre>  <p>I'm building the Docker image with</p>  <pre><code>docker build -t webapp-example . </code></pre>  <p>and try to run it with </p>  <pre><code>docker run -d -p 8080:8080 webapp-example </code></pre>  <p>But apparently it doesn't work.</p>  <p>Any ideas?</p> ",
    "OwnerUserId": "2007716",
    "LastActivityDate": "2018-02-25T02:14:50.663",
    "Title": "Run a maven webapp in a docker container",
    "Tags": "<maven><docker><tomcat7>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44919972",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44923115",
    "CreationDate": "2017-07-05T07:44:29.767",
    "Score": "8",
    "ViewCount": "9392",
    "Body": "<p>I have followed through Spring's <a href='https://spring.io/guides/gs/rest-service/' rel='noreferrer'>Building a RESTful Web Service</a> tutorial and created a dummy webapp (with 'Build with Maven' instructions). I build and package the WAR. Then I run it with this command:</p>  <pre><code>java -jar ./target/Dummy-1.0-SNAPSHOT.war </code></pre>  <p>I can see the dummy JSON endpoint at <a href='http://localhost:8080/greeting/' rel='noreferrer'>http://localhost:8080/greeting/</a>.</p>  <p>Now I want to containerize the app with Docker so I can further test it without the needs to install Tomcat to system space. This is the <code>Dockerfile</code> I created:</p>  <pre><code>FROM tomcat:7-jre8-alpine  # copy the WAR bundle to tomcat COPY /target/Dummy-1.0-SNAPSHOT.war /usr/local/tomcat/webapps/app.war  # command to run CMD ['catalina.sh', 'run'] </code></pre>  <p>I build and run the docker binding to <a href='http://localhost:8080' rel='noreferrer'>http://localhost:8080</a>. I can see the Tomcat welcome page on '<a href='http://localhost:8080' rel='noreferrer'>http://localhost:8080</a>'. But I couldn't see my app on neither:</p>  <ul> <li><a href='http://localhost:8080/app/' rel='noreferrer'>http://localhost:8080/app/</a></li> <li><a href='http://localhost:8080/app/greeting/' rel='noreferrer'>http://localhost:8080/app/greeting/</a></li> <li><a href='http://localhost:8080/greeting/' rel='noreferrer'>http://localhost:8080/greeting/</a></li> </ul>  <p>How should I track down the issue? What could be the problem?</p>  <h2>Update 1: The Tomcat admin interface screenshot</h2>  <p><a href='https://i.stack.imgur.com/Rn35u.png' rel='noreferrer'><img src='https://i.stack.imgur.com/Rn35u.png' alt='Tomcat Admin'></a></p> ",
    "OwnerUserId": "372172",
    "LastEditorUserId": "372172",
    "LastEditDate": "2017-07-05T07:57:42.310",
    "LastActivityDate": "2017-07-05T10:06:09.940",
    "Title": "Deploying Spring WAR to Tomcat-based docker",
    "Tags": "<java><spring><maven><tomcat><docker>",
    "AnswerCount": "1",
    "CommentCount": "8",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "47321197",
    "PostTypeId": "1",
    "CreationDate": "2017-11-16T03:42:07.823",
    "Score": "8",
    "ViewCount": "6901",
    "Body": "<p>Deploy <code>Spring Cloud</code> project with <code>docker</code>, some code in the <code>pom.xml</code>:</p>  <pre><code>&lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- tag::plugin[] --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.4.3&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;                     &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!-- end::plugin[] --&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre>  <p>when i run the command: <code>mvn package docker:build</code>, it throws errors:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build (default) on project users-microservice: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command </code></pre>  <p>why will it connect to localhost:2375? Any idea, i will appreciate!</p> ",
    "OwnerUserId": "5443977",
    "LastEditorUserId": "5443977",
    "LastEditDate": "2017-11-17T03:13:11.887",
    "LastActivityDate": "2017-11-25T09:33:56.050",
    "Title": "Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build Exception caught: HttpHostConnectException: Connect to localhost:2375",
    "Tags": "<docker><spring-boot><maven-3><spring-cloud>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "47321197",
    "PostTypeId": "1",
    "CreationDate": "2017-11-16T03:42:07.823",
    "Score": "8",
    "ViewCount": "6901",
    "Body": "<p>Deploy <code>Spring Cloud</code> project with <code>docker</code>, some code in the <code>pom.xml</code>:</p>  <pre><code>&lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- tag::plugin[] --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.4.3&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;                     &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!-- end::plugin[] --&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre>  <p>when i run the command: <code>mvn package docker:build</code>, it throws errors:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build (default) on project users-microservice: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command </code></pre>  <p>why will it connect to localhost:2375? Any idea, i will appreciate!</p> ",
    "OwnerUserId": "5443977",
    "LastEditorUserId": "5443977",
    "LastEditDate": "2017-11-17T03:13:11.887",
    "LastActivityDate": "2017-11-25T09:33:56.050",
    "Title": "Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build Exception caught: HttpHostConnectException: Connect to localhost:2375",
    "Tags": "<docker><spring-boot><maven-3><spring-cloud>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "47321197",
    "PostTypeId": "1",
    "CreationDate": "2017-11-16T03:42:07.823",
    "Score": "8",
    "ViewCount": "6901",
    "Body": "<p>Deploy <code>Spring Cloud</code> project with <code>docker</code>, some code in the <code>pom.xml</code>:</p>  <pre><code>&lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;             &lt;!-- tag::plugin[] --&gt;             &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.4.3&lt;/version&gt;                 &lt;configuration&gt;                     &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;                     &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             &lt;!-- end::plugin[] --&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;skipTests&gt;true&lt;/skipTests&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; </code></pre>  <p>when i run the command: <code>mvn package docker:build</code>, it throws errors:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build (default) on project users-microservice: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException [ERROR] [ERROR] After correcting the problems, you can resume the build with the command </code></pre>  <p>why will it connect to localhost:2375? Any idea, i will appreciate!</p> ",
    "OwnerUserId": "5443977",
    "LastEditorUserId": "5443977",
    "LastEditDate": "2017-11-17T03:13:11.887",
    "LastActivityDate": "2017-11-25T09:33:56.050",
    "Title": "Failed to execute goal com.spotify:docker-maven-plugin:0.4.3:build Exception caught: HttpHostConnectException: Connect to localhost:2375",
    "Tags": "<docker><spring-boot><maven-3><spring-cloud>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "52933220",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52934014",
    "CreationDate": "2018-10-22T15:49:48.663",
    "Score": "8",
    "ViewCount": "18844",
    "Body": "<p>We working in small team of 4 people. We using docker to deploy our services. One of the services is a java Spring Boot project which is deployed after building docker image with maven. To make docker image of Spring Boot service we use <code>mvn clean package dockerfile:build</code>.</p>  <p>The fun part is that my colleagues have no problem building docker image of Spring Boot service. And I get maven error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default-cli) on project 'foo': Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('osxkeychain') </code></pre>  <p>I tried to remove all maven repositories from <code>.m2/repository</code>, restart docker, and remove all images.</p>  <p>Later I tried to run <code>mvn clean package dockerfile:build</code> in to two separate commands:</p>  <ul> <li><code>mvn package</code>, then</li> <li><code>mvn docker:build</code></li> </ul>  <p><code>mvn package</code> passed, and <code>mvn docker:build</code> failed with the same error as shown above.</p>  <p>Maven version <code>3.5.4</code>, Docker version <code>18.06.1-ce, build e68fc7a</code>, OS: macOS mojave</p>  <p>I even tried to restart my PC hoping that it will fix it...</p>  <p>Edited: Here is the maven pom plugin <code>dockerfile-maven-plugin</code></p>  <pre><code>... &lt;plugin&gt;     &lt;groupId&gt;com.spotify&lt;/groupId&gt;     &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.3.6&lt;/version&gt;     &lt;configuration&gt;         &lt;repository&gt;${project.artifactId}&lt;/repository&gt;     &lt;/configuration&gt; &lt;/plugin&gt; ... </code></pre>  <p>Edit 2:</p>  <p>Full error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default) on project spring-boot-service: Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('swarm') [ERROR]  at [Source: N/A; line: -1, column: -1] (through reference chain: java.util.LinkedHashMap['stackOrchestrator']) [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre>  <p>Edit 3:</p>  <p>docker-compose.yml</p>  <pre><code>wrapper:   image: spring-boot-service:latest ports:   - '8080:8080' expose:   - '8080' links:   - db   - another-service </code></pre>  <p>Solved:</p>  <p>In my case it was wrong version of <code>dockerfile-maven-plugin</code>. I used <code>1.3.6</code>, and <code>1.4.7</code> fixed the problem. </p>  <p>Thanks to <a href='https://stackoverflow.com/users/3301492/boris'>Boris</a>!</p>  <p>Update: One more thing!</p>  <p>Make sure when <code>mvn</code> finish build naming is correct, for example:</p>  <pre><code>[INFO] Successfully built **spring-boot-service:0.0.1-SNAPSHOT** </code></pre>  <p>And <code>docker-compose.yml</code> should look like this:</p>  <pre><code>... wrapper:   image: **spring-boot-service:0.0.1-SNAPSHOT** ... </code></pre> ",
    "OwnerUserId": "5834613",
    "LastEditorUserId": "5834613",
    "LastEditDate": "2018-10-22T17:35:29.400",
    "LastActivityDate": "2022-08-11T11:28:21.330",
    "Title": "Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build on project 'foo': Could not build image:",
    "Tags": "<java><maven><docker><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52933220",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52934014",
    "CreationDate": "2018-10-22T15:49:48.663",
    "Score": "8",
    "ViewCount": "18844",
    "Body": "<p>We working in small team of 4 people. We using docker to deploy our services. One of the services is a java Spring Boot project which is deployed after building docker image with maven. To make docker image of Spring Boot service we use <code>mvn clean package dockerfile:build</code>.</p>  <p>The fun part is that my colleagues have no problem building docker image of Spring Boot service. And I get maven error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default-cli) on project 'foo': Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('osxkeychain') </code></pre>  <p>I tried to remove all maven repositories from <code>.m2/repository</code>, restart docker, and remove all images.</p>  <p>Later I tried to run <code>mvn clean package dockerfile:build</code> in to two separate commands:</p>  <ul> <li><code>mvn package</code>, then</li> <li><code>mvn docker:build</code></li> </ul>  <p><code>mvn package</code> passed, and <code>mvn docker:build</code> failed with the same error as shown above.</p>  <p>Maven version <code>3.5.4</code>, Docker version <code>18.06.1-ce, build e68fc7a</code>, OS: macOS mojave</p>  <p>I even tried to restart my PC hoping that it will fix it...</p>  <p>Edited: Here is the maven pom plugin <code>dockerfile-maven-plugin</code></p>  <pre><code>... &lt;plugin&gt;     &lt;groupId&gt;com.spotify&lt;/groupId&gt;     &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.3.6&lt;/version&gt;     &lt;configuration&gt;         &lt;repository&gt;${project.artifactId}&lt;/repository&gt;     &lt;/configuration&gt; &lt;/plugin&gt; ... </code></pre>  <p>Edit 2:</p>  <p>Full error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default) on project spring-boot-service: Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('swarm') [ERROR]  at [Source: N/A; line: -1, column: -1] (through reference chain: java.util.LinkedHashMap['stackOrchestrator']) [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre>  <p>Edit 3:</p>  <p>docker-compose.yml</p>  <pre><code>wrapper:   image: spring-boot-service:latest ports:   - '8080:8080' expose:   - '8080' links:   - db   - another-service </code></pre>  <p>Solved:</p>  <p>In my case it was wrong version of <code>dockerfile-maven-plugin</code>. I used <code>1.3.6</code>, and <code>1.4.7</code> fixed the problem. </p>  <p>Thanks to <a href='https://stackoverflow.com/users/3301492/boris'>Boris</a>!</p>  <p>Update: One more thing!</p>  <p>Make sure when <code>mvn</code> finish build naming is correct, for example:</p>  <pre><code>[INFO] Successfully built **spring-boot-service:0.0.1-SNAPSHOT** </code></pre>  <p>And <code>docker-compose.yml</code> should look like this:</p>  <pre><code>... wrapper:   image: **spring-boot-service:0.0.1-SNAPSHOT** ... </code></pre> ",
    "OwnerUserId": "5834613",
    "LastEditorUserId": "5834613",
    "LastEditDate": "2018-10-22T17:35:29.400",
    "LastActivityDate": "2022-08-11T11:28:21.330",
    "Title": "Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build on project 'foo': Could not build image:",
    "Tags": "<java><maven><docker><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52933220",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52934014",
    "CreationDate": "2018-10-22T15:49:48.663",
    "Score": "8",
    "ViewCount": "18844",
    "Body": "<p>We working in small team of 4 people. We using docker to deploy our services. One of the services is a java Spring Boot project which is deployed after building docker image with maven. To make docker image of Spring Boot service we use <code>mvn clean package dockerfile:build</code>.</p>  <p>The fun part is that my colleagues have no problem building docker image of Spring Boot service. And I get maven error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default-cli) on project 'foo': Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('osxkeychain') </code></pre>  <p>I tried to remove all maven repositories from <code>.m2/repository</code>, restart docker, and remove all images.</p>  <p>Later I tried to run <code>mvn clean package dockerfile:build</code> in to two separate commands:</p>  <ul> <li><code>mvn package</code>, then</li> <li><code>mvn docker:build</code></li> </ul>  <p><code>mvn package</code> passed, and <code>mvn docker:build</code> failed with the same error as shown above.</p>  <p>Maven version <code>3.5.4</code>, Docker version <code>18.06.1-ce, build e68fc7a</code>, OS: macOS mojave</p>  <p>I even tried to restart my PC hoping that it will fix it...</p>  <p>Edited: Here is the maven pom plugin <code>dockerfile-maven-plugin</code></p>  <pre><code>... &lt;plugin&gt;     &lt;groupId&gt;com.spotify&lt;/groupId&gt;     &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.3.6&lt;/version&gt;     &lt;configuration&gt;         &lt;repository&gt;${project.artifactId}&lt;/repository&gt;     &lt;/configuration&gt; &lt;/plugin&gt; ... </code></pre>  <p>Edit 2:</p>  <p>Full error message:</p>  <pre><code>[ERROR] Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build (default) on project spring-boot-service: Could not build image: com.spotify.docker.client.shaded.com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.spotify.docker.client.messages.RegistryAuth: no String-argument constructor/factory method to deserialize from String value ('swarm') [ERROR]  at [Source: N/A; line: -1, column: -1] (through reference chain: java.util.LinkedHashMap['stackOrchestrator']) [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre>  <p>Edit 3:</p>  <p>docker-compose.yml</p>  <pre><code>wrapper:   image: spring-boot-service:latest ports:   - '8080:8080' expose:   - '8080' links:   - db   - another-service </code></pre>  <p>Solved:</p>  <p>In my case it was wrong version of <code>dockerfile-maven-plugin</code>. I used <code>1.3.6</code>, and <code>1.4.7</code> fixed the problem. </p>  <p>Thanks to <a href='https://stackoverflow.com/users/3301492/boris'>Boris</a>!</p>  <p>Update: One more thing!</p>  <p>Make sure when <code>mvn</code> finish build naming is correct, for example:</p>  <pre><code>[INFO] Successfully built **spring-boot-service:0.0.1-SNAPSHOT** </code></pre>  <p>And <code>docker-compose.yml</code> should look like this:</p>  <pre><code>... wrapper:   image: **spring-boot-service:0.0.1-SNAPSHOT** ... </code></pre> ",
    "OwnerUserId": "5834613",
    "LastEditorUserId": "5834613",
    "LastEditDate": "2018-10-22T17:35:29.400",
    "LastActivityDate": "2022-08-11T11:28:21.330",
    "Title": "Failed to execute goal com.spotify:dockerfile-maven-plugin:1.3.6:build on project 'foo': Could not build image:",
    "Tags": "<java><maven><docker><spring-boot>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54194249",
    "PostTypeId": "1",
    "AcceptedAnswerId": "54303663",
    "CreationDate": "2019-01-15T07:18:02.083",
    "Score": "8",
    "ViewCount": "6552",
    "Body": "<p>I have several maven projects (not multi-modules), that are residing in GitLab. I like to setup the GitLab CI for these projects, so I looked at <code>gitlab-ci.yml</code> files on how to do this.</p> <p>I found <a href='https://docs.gitlab.com/ee/ci/examples/artifactory_and_gitlab' rel='nofollow noreferrer'>https://docs.gitlab.com/ee/ci/examples/artifactory_and_gitlab</a>, which describes to put the <code>settings.xml</code> in the project itself and then refer it in the <code>gitlab-ci.yml</code> file.</p> <p>But I was wondering, how this is done when having multiple projects that would need this <code>settings.xml</code>, as putting it multiple times in the repository seems bad.</p> <p>Locally I have it in my <code>.m2</code> directory, but how and where to put it on the GitLab server for the pipeline ?</p> ",
    "OwnerUserId": "1504208",
    "LastEditorUserId": "183704",
    "LastEditDate": "2023-07-01T12:34:41.827",
    "LastActivityDate": "2023-07-01T12:34:41.827",
    "Title": "Where to store settings.xml for maven in docker based GitLab CI setup",
    "Tags": "<maven><docker><gitlab><gitlab-ci>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "55104543",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55111608",
    "CreationDate": "2019-03-11T14:50:51.943",
    "Score": "8",
    "ViewCount": "17842",
    "Body": "<p>I want to run my Maven builds in a Docker container. I don't want to upload all depenedencies with every build, so I tried to mount host's local Maven repository as documented at <a href='https://jenkins.io/doc/book/pipeline/docker/#caching-data-for-containers' rel='noreferrer'>Using Docker with Pipeline</a>:</p>  <blockquote>   <p><strong>Caching data for containers</strong></p>      <p>[...]</p>      <p>Pipeline supports adding custom arguments which are passed to Docker, allowing users to specify custom Docker Volumes to mount, which can be used for caching data on the agent between Pipeline runs. The following example will cache ~/.m2 between Pipeline runs utilizing the maven container, thereby avoiding the need to re-download dependencies for subsequent runs of the Pipeline.</p>  <pre><code>pipeline {     agent {         docker {             image 'maven:3-alpine'             args '-v $HOME/.m2:/root/.m2'         }     }     stages {         stage('Build') {             steps {                 sh 'mvn -B'             }         }     } } </code></pre> </blockquote>  <p><strong>Code</strong></p>  <pre><code>pipeline {     agent {         docker {              image 'maven:3-alpine'              args '-v /home/jenkins/.m2:/root/.m2'         }         }     stages {         stage('Build') {             steps {                 sh 'mvn -B clean verify'             }         }     }    } </code></pre>  <p><strong>Log</strong></p>  <pre><code>Running in Durability level: MAX_SURVIVABILITY [Pipeline] Start of Pipeline [Pipeline] node Running on jenkins-docker in /home/jenkins/workspace/Test/Docker Test@2 [Pipeline] { [Pipeline] sh + docker inspect -f . maven:3-alpine . [Pipeline] withDockerContainer jenkins-docker does not seem to be running inside a container $ docker run -t -d -u 1000:1000 -v /home/jenkins/.m2:/root/.m2 -w '/home/jenkins/workspace/Test/Docker Test@2' -v '/home/jenkins/workspace/Test/Docker Test@2:/home/jenkins/workspace/Test/Docker Test@2:rw,z' -v '/home/jenkins/workspace/Test/Docker Test@2@tmp:/home/jenkins/workspace/Test/Docker Test@2@tmp:rw,z' -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** maven:3-alpine cat  [...]  [DEBUG] Reading global settings from /usr/share/maven/conf/settings.xml [DEBUG] Reading user settings from ?/.m2/settings.xml [DEBUG] Reading global toolchains from /usr/share/maven/conf/toolchains.xml [DEBUG] Reading user toolchains from ?/.m2/toolchains.xml [DEBUG] Using local repository at /home/jenkins/workspace/Test/Docker Test@2/?/.m2/repository [DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for /home/jenkins/workspace/Test/Docker Test@2/?/.m2/repository </code></pre>  <p><strong>Problem</strong></p>  <p>After building the <code>~/m2</code> directory is empty, no file/directory was added. All files were added under <code>/home/jenkins/workspace/Test/Docker Test@2/?/.m2</code> (<em>Test</em> is the name of the folder, <em>Docker Test</em> is the name of the pipline). </p>  <p>The problem is that this directory is only used for this particular pipeline not for other pipelines, so I could not share local Maven repository with different pipelines/jobs. </p>  <p>Also my <code>settings.xml</code> is not used, because it is saved under <code>~/m2</code>.</p>  <p>Is there any solution for sharing local Maven repository and Maven settings with different pipelines using Docker? </p> ",
    "OwnerUserId": "5277820",
    "LastEditorUserId": "5277820",
    "LastEditDate": "2019-03-11T15:45:51.050",
    "LastActivityDate": "2019-11-14T21:13:35.550",
    "Title": "How to cache local Maven repository using Docker with Pipelines?",
    "Tags": "<maven><docker><jenkins><jenkins-pipeline>",
    "AnswerCount": "4",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "55346431",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55499244",
    "CreationDate": "2019-03-25T21:08:13.040",
    "Score": "8",
    "ViewCount": "1279",
    "Body": "<p>The specific error I am facing when starting my app on Tomcat9.  Spring version: 5.1.5.RELEASE: </p>  <p><code>SEVERE: Error configuring application listener of class [org.springframework.web.context.request.RequestContextListener] java.lang.NoClassDefFoundError: javax/xml/ws/WebServiceRef</code></p>  <p>There are multiple answers on this error that all suggest adding maven dependencies.  I have added these dependencies: </p>  <p><a href='https://i.stack.imgur.com/sk4nX.png' rel='noreferrer'><img src='https://i.stack.imgur.com/sk4nX.png' alt='POM.xml'></a></p>  <p>My build path:</p>  <p><a href='https://i.stack.imgur.com/DIbBn.png' rel='noreferrer'><img src='https://i.stack.imgur.com/DIbBn.png' alt='enter image description here'></a></p>  <p>The <code>WebServiceRef</code> class is found in the package explorer:</p>  <p><a href='https://i.stack.imgur.com/yGNLv.png' rel='noreferrer'><img src='https://i.stack.imgur.com/yGNLv.png' alt='enter image description here'></a></p>  <p>This error shows in the console when starting the app on Tomcat9.  Here is more of the stack trace: <a href='https://i.stack.imgur.com/nzaBr.png' rel='noreferrer'><img src='https://i.stack.imgur.com/nzaBr.png' alt='enter image description here'></a></p>  <p><code>SEVERE: Error configuring application listener of class [org.springframework.web.context.request.RequestContextListener] java.lang.NoClassDefFoundError: javax/xml/ws/WebServiceRef     at org.apache.catalina.core.DefaultInstanceManager.populateAnnotationsCache(DefaultInstanceManager.java:303)     ...more stuf.... java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.base/java.lang.reflect.Method.invoke(Method.java:566)     at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:355)     at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:495)</code></p>  <p>Any help or suggestions would be much appreciated!</p>  <p><strong>Update 1:</strong> Here are some .jar files that get copied into the final .war build under WEB-INF/lib.  The 4 new maven dependencies and their versions are here, but there is also possible duplicate .jar files.</p>  <p><a href='https://i.stack.imgur.com/SueUg.png' rel='noreferrer'><img src='https://i.stack.imgur.com/SueUg.png' alt='enter image description here'></a></p>  <p><strong>Update 2:</strong> Copying the jaws-api jar directly into my Tomcat Classpath resolved the runtime error...  So the app is launching now, but how would I overcome this issue when actually deploying the .war file?</p>  <p><a href='https://i.stack.imgur.com/wsE2G.png' rel='noreferrer'><img src='https://i.stack.imgur.com/wsE2G.png' alt='enter image description here'></a></p> ",
    "OwnerUserId": "2543557",
    "LastEditorUserId": "2543557",
    "LastEditDate": "2019-04-03T15:50:55.320",
    "LastActivityDate": "2019-04-03T15:50:55.320",
    "Title": "How to fix JAVAX runtime error on JDK11 Tomcat9 Spring Application",
    "Tags": "<java><spring><maven><docker><tomcat>",
    "AnswerCount": "2",
    "CommentCount": "10",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "55353804",
    "PostTypeId": "1",
    "AcceptedAnswerId": "55436478",
    "CreationDate": "2019-03-26T09:35:14.623",
    "Score": "8",
    "ViewCount": "1442",
    "Body": "<p>I'm building a Jenkins Docker image and I will like to automate the installation of Maven 3 and Java 8 last JDK. But unfortunately I use these two groovy files locate into the groovy folder:</p>  <p><strong>groovy/java.groovy</strong>:</p>  <pre><code>import jenkins.model.* import hudson.model.* import hudson.tools.*  def inst = Jenkins.getInstance()  def desc = inst.getDescriptor('hudson.model.JDK')  def versions = [ 'jdk8': 'jdk-8u202'] def installations = [];  for (v in versions) {   def installer = new JDKInstaller(v.value, true)   def installerProps = new InstallSourceProperty([installer])   def installation = new JDK(v.key, '', [installerProps])   installations.push(installation) }  desc.setInstallations(installations.toArray(new JDK[0]))  desc.save() </code></pre>  <p><strong>groovy/maven.groovy</strong>:</p>  <pre><code>import jenkins.*; import jenkins.model.*; import hudson.*; import hudson.model.*;  mavenName = 'maven3' mavenVersion = '3.6.0' println('Checking Maven installations...')  // Grab the Maven 'task' (which is the plugin handle). mavenPlugin = Jenkins.instance.getExtensionList(hudson.tasks.Maven.DescriptorImpl.class)[0]  // Check for a matching installation. maven3Install = mavenPlugin.installations.find {    install -&gt; install.name.equals(mavenName) }  // If no match was found, add an installation. if(maven3Install == null) {    println('No Maven install found. Adding...')     newMavenInstall = new hudson.tasks.Maven.MavenInstallation('maven3', null,     [new hudson.tools.InstallSourceProperty([new hudson.tasks.Maven.MavenInstaller(mavenVersion)])] )     mavenPlugin.installations += newMavenInstall    mavenPlugin.save()     println('Maven install added.') } else {    println('Maven install found. Done.') } </code></pre>  <p>and then I run the command:</p>  <pre><code>docker run -p 8080:8080 -v `pwd`/groovy:/var/jenkins_home/jobs --rm --name jenkinsdocker jenkinsdocker:latest </code></pre>  <p>Unfortunately this returns an error:</p>  <pre><code>java.io.IOException: jenkins.model.InvalidBuildsDir: ${ITEM_ROOTDIR}/builds does not exist and probably cannot be created </code></pre>  <p>I'm just wondering if the groovy files are wrong or if there is something else I missed?</p>  <p>How can I automate the maven/java installation for Jenkins while running a <strong>docker run</strong>? Or is there another way to do it?</p> ",
    "OwnerUserId": "649605",
    "LastEditorUserId": "3021395",
    "LastEditDate": "2019-04-04T12:06:50.223",
    "LastActivityDate": "2019-04-04T12:06:50.223",
    "Title": "How to automate Maven and Java JDK8 installation with groovy for Jenkins?",
    "Tags": "<java><maven><docker><jenkins><groovy>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57960603",
    "PostTypeId": "1",
    "CreationDate": "2019-09-16T16:01:59.883",
    "Score": "8",
    "ViewCount": "22416",
    "Body": "<p>I try to create docker image:</p> <p>It is my Dockerfile:</p> <pre><code>FROM maven:3-jdk-11  # Common files and utils for build RUN apt-get update &amp;&amp; apt-get install -y make fakeroot rpm dpkg-dev apt-utils wget unzip RUN apt-get install -y -q software-properties-common desktop-file-utils  # Then Wine with all deps RUN dpkg --add-architecture i386 &amp;&amp; apt-get update RUN apt-get install -y --install-recommends wine RUN apt-cache search openjdk RUN apt-get install -y openjdk-11-jdk RUN apt install -y openjfx11 libopenjfx-java libopenjfx-jni RUN apt-get install -y --install-recommends wine32  ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64 ENV JAVAFX_HOME /usr/share/java/openjfx11  # And we ready to play with our code ARG SRCDIR=. ARG DSTDIR=/usr/src/CryptoStock ARG CACHEDIR=./cache  # Subject to be used here but should be command line, sic! # ADD ${CACHEDIR} /root/.m2 # ADD ${SRCDIR} /mnt/src  RUN mkdir -p /root/.m2/repository COPY settings.xml /root/.m2/settings.xml COPY settings-security.xml /root/.m2/settings-security.xml COPY jdk11-build-in-docker.sh ${DSTDIR}/jdk11-build-in-docker.sh  COPY ./static/. ${DSTDIR}/static COPY ./3rdparty/. ${DSTDIR}/3rdparty COPY ./winjdk11/. ${DSTDIR}/winjdk  ENV SOURCES /usr/src/CryptoStock ENV OUTSIDE /mnt/src  RUN dpkg -l '*openjfx*' RUN dpkg -l '*jdk*'  WORKDIR ${DSTDIR}  CMD [ &quot;sh&quot;, &quot;/usr/src/CryptoStock/jdk11-build-in-docker.sh&quot; ] </code></pre> <p>When I try to build I don't to watch java 11:</p> <pre><code>Step 6/27 : RUN apt-cache search openjdk  ---&gt; Running in e03b4c69fa69 jtreg - Regression Test Harness for the OpenJDK platform openjdk-8-dbg - Java runtime based on OpenJDK (debugging symbols) openjdk-8-demo - Java runtime based on OpenJDK (demos and examples) openjdk-8-doc - OpenJDK Development Kit (JDK) documentation openjdk-8-jdk - OpenJDK Development Kit (JDK) openjdk-8-jdk-headless - OpenJDK Development Kit (JDK) (headless) openjdk-8-jre - OpenJDK Java runtime, using Hotspot JIT openjdk-8-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless) openjdk-8-jre-zero - Alternative JVM for OpenJDK, using Zero/Shark openjdk-8-source - OpenJDK Development Kit (JDK) source files openjdk-8-jre-dcevm - Alternative VM for OpenJDK 8 with enhanced class redefinition uwsgi-plugin-jvm-openjdk-8 - Java plugin for uWSGI (OpenJDK 8) uwsgi-plugin-jwsgi-openjdk-8 - JWSGI plugin for uWSGI (OpenJDK 8) uwsgi-plugin-ring-openjdk-8 - Closure/Ring plugin for uWSGI (OpenJDK 8) uwsgi-plugin-servlet-openjdk-8 - JWSGI plugin for uWSGI (OpenJDK 8) Removing intermediate container e03b4c69fa69  ---&gt; 1fae3b35c58b Step 7/27 : RUN apt-get install -y openjdk-11-jdk  ---&gt; Running in 288fb5247ce6 Reading package lists... Building dependency tree... Reading state information... E: Unable to locate package openjdk-11-jdk The command '/bin/sh -c apt-get install -y openjdk-11-jdk' returned a non-zero code: 100 </code></pre> <p>There is only java 8, there is no java 11.</p> ",
    "OwnerUserId": "12073621",
    "LastEditorUserId": "1839439",
    "LastEditDate": "2022-01-20T19:06:58.010",
    "LastActivityDate": "2024-02-05T06:08:05.943",
    "Title": "E: Unable to locate package openjdk-11-jdk",
    "Tags": "<maven><docker><debian><java-11>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "58025908",
    "PostTypeId": "1",
    "CreationDate": "2019-09-20T09:47:31.863",
    "Score": "8",
    "ViewCount": "30385",
    "Body": "<p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (default) on project Bookstore: Exception caught: java.util.concurrent.ExecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1] failed: Connection refused </p>  <p><strong><em>Why is this Exception Keep Occurring and how can i resolve it , i am building docker image from war file.</em></strong></p>  <p><strong><em>pom.xml</em></strong></p>  <pre><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;net.codejava.javaee.bookstore&lt;/groupId&gt; &lt;artifactId&gt;Bookstore&lt;/artifactId&gt; &lt;version&gt;1.2.1&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt;   &lt;properties&gt;  &lt;docker.image.prefix&gt;alesblaze&lt;/docker.image.prefix&gt;  &lt;/properties&gt;   &lt;dependencies&gt;      &lt;dependency&gt;          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;          &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;          &lt;version&gt;3.1.0&lt;/version&gt;          &lt;scope&gt;provided&lt;/scope&gt;      &lt;/dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;          &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;          &lt;version&gt;2.3.1&lt;/version&gt;          &lt;scope&gt;provided&lt;/scope&gt;      &lt;/dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;jstl&lt;/groupId&gt;          &lt;artifactId&gt;jstl&lt;/artifactId&gt;          &lt;version&gt;1.2&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;mysql&lt;/groupId&gt;          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;          &lt;version&gt;5.1.30&lt;/version&gt;      &lt;/dependency&gt;  &lt;/dependencies&gt;    &lt;build&gt;  &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;      &lt;version&gt;3.5.1&lt;/version&gt;      &lt;configuration&gt;        &lt;source&gt;1.8&lt;/source&gt;        &lt;target&gt;1.8&lt;/target&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;    &lt;plugin&gt;      &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;      &lt;version&gt;2.6&lt;/version&gt;      &lt;configuration&gt;      &lt;finalName&gt;BookStore&lt;/finalName&gt;        &lt;warSourceDirectory&gt;WebContent&lt;/warSourceDirectory&gt;        &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;     &lt;plugin&gt;  &lt;groupId&gt;com.spotify&lt;/groupId&gt;  &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;  &lt;version&gt;1.0.0&lt;/version&gt;  &lt;configuration&gt;  &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;  &lt;dockerDirectory&gt;Docker&lt;/dockerDirectory&gt;  &lt;dockerHost&gt;https://localhost:3000&lt;/dockerHost&gt;  &lt;forceTags&gt;true&lt;/forceTags&gt;  &lt;imageTags&gt;  &lt;imageTag&gt;${project.version}&lt;/imageTag&gt;  &lt;imageTag&gt;latest&lt;/imageTag&gt;  &lt;/imageTags&gt;  &lt;serverId&gt;docker-hub&lt;/serverId&gt;  &lt;registryUrl&gt;https://hub.docker.com/&lt;/registryUrl&gt;  &lt;resources&gt;  &lt;resource&gt;  &lt;targetPath&gt;/&lt;/targetPath&gt;  &lt;directory&gt;${project.build.directory}&lt;/directory&gt;  &lt;include&gt;${project.build.finalName}.war&lt;/include&gt;  &lt;/resource&gt;  &lt;/resources&gt;  &lt;/configuration&gt;  &lt;executions&gt;  &lt;execution&gt;  &lt;phase&gt;package&lt;/phase&gt;  &lt;goals&gt;  &lt;goal&gt;build&lt;/goal&gt;  &lt;/goals&gt;  &lt;/execution&gt;  &lt;/executions&gt; &lt;/plugin&gt;   &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; </code></pre>  <p><strong><em>DockerFile</em></strong></p>  <pre><code> DockerFile ``` FROM tomcat:8.5-alpine VOLUEME /volume/mysql/ COPY /target/BookStore.war /usr/local/tomcat/webapps/app.war RUN sh -c 'touch /usr/local/tomcat/webapps/app.war' d ENTRYPOINT ['sh', '-c' , 'java -Djava.security.edg=file:/dev/./urandom -jar /usr/local/tomcat/webapps/app.war] ``` </code></pre>  <p><strong><em>UPDATE</em></strong></p>  <pre><code>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (default) on project Bookstore: Exception caught: Timeout: GET https://localhost:2375/version: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingException: org.apache.http.conn.ConnectTimeoutException: Connect to localhost:2375 [localhost/127.0.0.1] failed: connect timed out  </code></pre>  <p>now i am  getting this error after turning off the firewall , what to do?</p> ",
    "OwnerUserId": "9790334",
    "LastEditorUserId": "9790334",
    "LastEditDate": "2019-09-21T07:43:53.630",
    "LastActivityDate": "2023-11-12T08:12:05.580",
    "Title": "HttpHostConnectException: Connect to localhost:2375 [localhost/127.0.0.1] failed: Connection refused",
    "Tags": "<java><maven><docker><docker-maven-plugin><spotify-docker-client>",
    "AnswerCount": "4",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "58402441",
    "PostTypeId": "1",
    "CreationDate": "2019-10-15T20:47:59.197",
    "Score": "8",
    "ViewCount": "961",
    "Body": "<p>I am trying to Dockerize the maven build for my multi-module project. I have a nested file structure in which all modules for my project are contained in a modules/ directory. As part of the build, I would like to cache the dependencies so the container does not need to pull the dependencies unless the POM files are updated (i.e. Java changes should not necessitate pulling the dependencies every time). I have this working currently by copying each POM into the appropriate directory in the build container using individual Docker commands for each file; however, I have roughly 10 modules, currently, and may add more in the future. I would like to avoid having to individually COPY each POM as modules are added. I see that COPY supports the wildcard syntax for the source file parameter, but simply cannot get this working. The command I currently have is:</p>  <pre><code>COPY modules/*/pom.xml ./ </code></pre>  <p>but this does not seem to properly copy. I'm sure there is a way to COPY these files without having to specify a command for each one. What is the proper command for doing this? Thank you very much in advance for any help!</p> ",
    "OwnerUserId": "11924792",
    "LastActivityDate": "2021-05-03T19:19:01.593",
    "Title": "Docker Multimodule Maven Build - Copy All POM Files to Appropriate Directories",
    "Tags": "<java><maven><docker>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "42208442",
    "PostTypeId": "1",
    "CreationDate": "2017-02-13T16:06:04.087",
    "Score": "73",
    "ViewCount": "69999",
    "Body": "<p>I'm trying to use docker to automate maven builds. The project I want to build takes nearly 20 minutes to download all the dependencies, so I tried to build a docker image that would cache these dependencies, but it doesn't seem to save it. My Dockerfile is</p>  <pre><code>FROM maven:alpine RUN mkdir -p /usr/src/app WORKDIR /usr/src/app ADD pom.xml /usr/src/app RUN mvn dependency:go-offline </code></pre>  <p>The image builds, and it does download everything. However, the resulting image is the same size as the base <code>maven:alpine</code> image, so it doesn't seem to have cached the dependencies in the image. When I try to use the image to <code>mvn compile</code> it goes through the full 20 minutes of redownloading everything.</p>  <p>Is it possible to build a maven image that caches my dependencies so they don't have to download everytime I use the image to perform a build?</p>  <p>I'm running the following commands:</p>  <pre><code>docker build -t my-maven .  docker run -it --rm --name my-maven-project -v '$PWD':/usr/src/mymaven -w /usr/src/mymaven my-maven mvn compile </code></pre>  <p>My understanding is that whatever <code>RUN</code> does during the docker build process becomes part of the resulting image.</p> ",
    "OwnerUserId": "1563654",
    "LastEditorUserId": "400544",
    "LastEditDate": "2021-08-17T16:19:51.013",
    "LastActivityDate": "2023-02-10T08:18:54.300",
    "Title": "Maven docker cache dependencies",
    "Tags": "<java><docker><maven><caching><dockerfile>",
    "AnswerCount": "16",
    "CommentCount": "8",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "32614762",
    "PostTypeId": "1",
    "AcceptedAnswerId": "32659439",
    "CreationDate": "2015-09-16T17:12:48.583",
    "Score": "7",
    "ViewCount": "12300",
    "Body": "<p>It appears that maven overrides Java 8 with Java 7.  Consider the following Dockerfile:</p>  <pre><code>FROM java:8 RUN java -version &amp;&amp; ls -l /usr/bin/java     RUN apt-get update -y &amp;&amp; apt-get install maven -y RUN java -version &amp;&amp; ls -l /usr/bin/java     </code></pre>  <p>Line two will report the java version is 1.8 <strong>but line 4 will report java version is 1.7.</strong>  In both cases the <code>/usr/bin/java</code> symlink points to <code>/etc/alternatives/java</code> </p>  <p>Besides re-installing Java 8 (which is why I started with Java:8 in the first place), how can I undo these side-effects of installing maven when building a docker image?</p> ",
    "OwnerUserId": "517003",
    "LastActivityDate": "2015-09-18T19:12:29.157",
    "Title": "Installing maven in a docker build overrides JAVA 8 with JAVA 7(!)",
    "Tags": "<maven><docker><dockerfile>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "33381235",
    "PostTypeId": "1",
    "CreationDate": "2015-10-28T01:08:34.657",
    "Score": "7",
    "ViewCount": "876",
    "Body": "<p>I'm baking a Docker image which runs a Maven task at runtime. It looks kind of like this:</p>  <pre><code>ADD pom.xml /srv ADD src /srv/src  WORKDIR /srv RUN mvn dependencies:go-offline scala:testCompile </code></pre>  <p>At runtime, I'm running <code>mvn gatling:execute</code> to run a load testing utility.</p>  <p>My POM looks like this:</p>  <pre><code>&lt;project&gt;   &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;io.gatling&lt;/groupId&gt;             &lt;artifactId&gt;gatling-core&lt;/artifactId&gt;             &lt;version&gt;${gatling.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;io.gatling&lt;/groupId&gt;             &lt;artifactId&gt;gatling-http&lt;/artifactId&gt;             &lt;version&gt;${gatling.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;io.gatling&lt;/groupId&gt;             &lt;artifactId&gt;gatling-app&lt;/artifactId&gt;             &lt;version&gt;${gatling.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;io.gatling.highcharts&lt;/groupId&gt;             &lt;artifactId&gt;gatling-charts-highcharts&lt;/artifactId&gt;             &lt;version&gt;${gatling.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;                 &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;${scala-maven-plugin.version}&lt;/version&gt;             &lt;/plugin&gt;             &lt;plugin&gt;                 &lt;groupId&gt;io.gatling&lt;/groupId&gt;                 &lt;artifactId&gt;gatling-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;${gatling-plugin.version}&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;execute&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; </code></pre>  <p>What I want to have happen is that when I ultimately run <code>mvn gatling:execute</code>, I don't want to have to download any dependencies, I'd like them all baked into the image at build time.</p>  <p>However, even executing <code>mvn dependencies:go-offline scala:testCompile</code> doesn't get me all of the way there. Running <code>gatling:execute</code> still requires downloading more dependencies.</p>  <p>How can I download <em>absolutely everything</em> that Maven requires into my Docker image, so that no downloads at runtime are required? </p> ",
    "OwnerUserId": "128967",
    "LastActivityDate": "2018-01-16T21:58:32.420",
    "Title": "Download all dependencies, plugin dependencies, compilers, etc. with Maven?",
    "Tags": "<maven><docker><gatling>",
    "AnswerCount": "2",
    "CommentCount": "10",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "36389982",
    "PostTypeId": "1",
    "CreationDate": "2016-04-03T19:18:02.020",
    "Score": "7",
    "ViewCount": "2365",
    "Body": "<p>I'm using the <a href='http://mvnrepository.com/artifact/com.spotify/docker-maven-plugin' rel='noreferrer'>Spotify Maven plugin</a> to automate the building and deploying of docker images when executing certain maven goals. </p>  <p>However, I'm running a private unsecured registry that is accessible through the following host: server.mydomain.com:5000. However, I can't seem to stop the plugin from forcing a secure push to the repository? It uses <a href='https://server.mydomain.com:5000' rel='noreferrer'>https://server.mydomain.com:5000</a>.</p>  <p>Is there any way to force the plugin to not use https?</p>  <p>Thanks.</p>  <p>Edit:</p>  <p>Current plugin POM configuration:</p>  <pre><code>&lt;plugin&gt;     &lt;groupId&gt;com.spotify&lt;/groupId&gt;     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;0.4.3&lt;/version&gt;     &lt;configuration&gt;         &lt;imageName&gt;server.mydomain.com:5000/${project.artifactId}&lt;/imageName&gt;         &lt;baseImage&gt;java&lt;/baseImage&gt;         &lt;entryPoint&gt;['java', '-jar', '/${project.build.finalName}-packaged.jar']&lt;/entryPoint&gt;         &lt;resources&gt;             &lt;resource&gt;                 &lt;targetPath&gt;/&lt;/targetPath&gt;                 &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                 &lt;include&gt;${project.build.finalName}-packaged.jar&lt;/include&gt;             &lt;/resource&gt;         &lt;/resources&gt;         &lt;imageTags&gt;             &lt;imageTag&gt;${project.version}&lt;/imageTag&gt;             &lt;imageTag&gt;latest&lt;/imageTag&gt;         &lt;/imageTags&gt;         &lt;retryPushCount&gt;0&lt;/retryPushCount&gt;     &lt;/configuration&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;id&gt;build-image&lt;/id&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;build&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;         &lt;execution&gt;             &lt;id&gt;push-image&lt;/id&gt;             &lt;phase&gt;deploy&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;push&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "5363974",
    "LastEditorUserId": "1743880",
    "LastEditDate": "2016-04-04T08:23:57.383",
    "LastActivityDate": "2016-04-04T11:43:39.500",
    "Title": "Docker Maven Spotify plugin - Possible to switch to non-secure registry",
    "Tags": "<maven><docker><maven-plugin><spotify><docker-registry>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "38179626",
    "PostTypeId": "1",
    "CreationDate": "2016-07-04T08:04:41.147",
    "Score": "7",
    "ViewCount": "12753",
    "Body": "<p>I installed ubuntu  14.04 virtual machine and run docker(1.11.2). I try to build sample image (<a href='https://github.com/giantswarm/sparkexample' rel='noreferrer'>here</a>).</p>  <p>docker file :</p>  <pre><code>FROM java:8   # Install maven RUN apt-get update   RUN apt-get install -y maven .... </code></pre>  <p>I get following error:</p>  <pre><code>Step 3: RUN apt-get update  --&gt; Using cache  ---&gt;64345sdd332 Step 4: RUN apt-get install -y maven  ---&gt; Running in a6c1d5d54b7a Reading package lists... Reading dependency tree... Reading state information... E: Unable to locate package maven INFO[0029] The command [/bin/sh -c apt-get install -y maven] returned a non-zero code:100 </code></pre>  <p><a href='https://i.stack.imgur.com/x4AXD.png' rel='noreferrer'><img src='https://i.stack.imgur.com/x4AXD.png' alt='enter image description here'></a></p>  <p>following solutions I have tried, but no success.</p>  <blockquote>   <ol>   <li><p>restarted docker <a href='https://stackoverflow.com/questions/30856801/apt-get-not-working-in-dockerfile'>here</a></p></li>   <li><p>run as <code>apt-get -qq -y install curl</code> <a href='https://stackoverflow.com/questions/27273412/cannot-install-packages-inside-docker-ubuntu-image'>here</a> :same error :(</p></li>   </ol> </blockquote>  <p>how can i view detailed error message ? a any way to fix the issue?</p> ",
    "OwnerUserId": "4947520",
    "LastEditorUserId": "-1",
    "LastEditDate": "2017-05-23T11:44:13.897",
    "LastActivityDate": "2020-05-23T07:13:35.173",
    "Title": "Cannot (apt-get) install packages inside docker",
    "Tags": "<maven><docker><apt-get>",
    "AnswerCount": "5",
    "CommentCount": "7",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "39527236",
    "PostTypeId": "1",
    "CreationDate": "2016-09-16T08:46:41.540",
    "Score": "7",
    "ViewCount": "1673",
    "Body": "<p>I try to build my project inside of a docker container, the image looks like this:</p>  <pre><code>FROM maven:3.3.9-jdk-8 WORKDIR mvnBuildDir ENTRYPOINT ['mvn'] </code></pre>  <p>if I run my container like below everything works fine.</p>  <pre><code>docker run -v /home/user/Worspace/myMavenProject:/mvnBuildDir myMaven3 clean package </code></pre>  <p>But if I try this in my <em>Jenkinsfile</em> I got an error which is telling me nothing. Jenkinsfile:</p>  <pre class='lang-groovy prettyprint-override'><code>//... def maven = docker.image('myMaven3'); maven.inside('-v ${workdir}:/mvnBuildDir'){     stage 'build and test'     sh 'mvn clean install' } //.. </code></pre>  <p>Error:</p>  <pre><code>[Pipeline] { [Pipeline] stage (build and test) Entering stage build and test Proceeding [Pipeline] sh [master] Running shell script + mvn clean install -s mvnSettings.xml [Pipeline] } $ docker stop 1fc920c00b46a1038b0f39e2adc6e67f702d48ccf10d3e0bb3514d1cee3a795b $ docker rm -f 1fc920c00b46a1038b0f39e2adc6e67f702d48ccf10d3e0bb3514d1cee3a795b [Pipeline] // withDockerContainer [Pipeline] } [Pipeline] // withDockerRegistry [Pipeline] } [Pipeline] // withEnv [Pipeline] } [Pipeline] // node [Pipeline] End of Pipeline ERROR: script returned exit code -1 Finished: FAILURE </code></pre>  <p>Has anybody have an idea what the problem is here or has anybody another solution how to build my project inside the docker container? My whole workspace is mapped inside the container, so the problem isn't that pom or something else is not found I think. If I run 'mvn --version' I got the right output. Thanks so far.</p> ",
    "OwnerUserId": "4457053",
    "LastEditorUserId": "545127",
    "LastEditDate": "2019-04-10T09:33:40.827",
    "LastActivityDate": "2019-04-10T09:33:40.827",
    "Title": "Jenkins pipeline script exit status -1 for docker maven image",
    "Tags": "<maven><docker><jenkins><jenkins-pipeline>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "39924530",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39924695",
    "CreationDate": "2016-10-07T19:27:56.853",
    "Score": "7",
    "ViewCount": "10498",
    "Body": "<p>I am having trouble pushing my docker image to the hub using the following command:</p>  <pre><code>mvn clean package docker:build -DpushImage </code></pre>  <p>Each time I get the following response:</p>  <pre><code>[WARNING] Failed to push jdruwe/k8s-product-owner, retrying in 10 seconds (5/5).  ...  [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.13:build (default-cli) on project k8s-product-owner: Exception caught: unauthorized: authentication required -&gt; [Help 1] </code></pre>  <p>When I try to login using one of the following commands, I keep getting the errors even tough the login succeeded</p>  <pre><code>docker login -u jdruwe https://index.docker.io/v1/  OR  docker login </code></pre>  <p>I did create an empty repo on hub just to try fixing it:</p>  <p><a href='https://i.stack.imgur.com/gPp35.png' rel='noreferrer'><img src='https://i.stack.imgur.com/gPp35.png' alt='enter image description here'></a></p>  <p>Any ideas?</p> ",
    "OwnerUserId": "1725624",
    "LastEditorUserId": "2439220",
    "LastEditDate": "2016-10-22T20:39:25.370",
    "LastActivityDate": "2021-10-24T18:23:05.253",
    "Title": "Spotify docker-maven-plugin unauthorized: authentication required public repo",
    "Tags": "<maven><docker><maven-plugin><spotify><docker-registry>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "47776984",
    "PostTypeId": "1",
    "CreationDate": "2017-12-12T16:13:15.997",
    "Score": "7",
    "ViewCount": "4556",
    "Body": "<p>I have a maven project that is built as a docker image. I'm using <a href='https://github.com/spotify/dockerfile-maven' rel='noreferrer'>spotify/dockerfile-maven</a> to build this image and push it to docker.hub automatically on on <code>mvn clean install</code>. The <code>build</code> phase passes without any problems. But on <code>push</code> I have this error:</p>  <pre><code>[ERROR] denied: requested access to the resource is denied [WARNING] An attempt failed, will retry 1 more times org.apache.maven.plugin.MojoExecutionException: Could not push image     at com.spotify.plugin.dockerfile.PushMojo.execute(PushMojo.java:90) ........ Caused by: com.spotify.docker.client.exceptions.DockerException: denied: requested access to the resource is denied     at com.spotify.plugin.dockerfile.LoggingProgressHandler.handleError(LoggingProgressHandler.java:105)     at com.spotify.plugin.dockerfile.LoggingProgressHandler.progress(LoggingProgressHandler.java:63) ...... </code></pre>  <p>Here is my plugin config:</p>  <pre><code>     &lt;build&gt;         &lt;pluginManagement&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;com.spotify&lt;/groupId&gt;                     &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;1.3.6&lt;/version&gt;                     &lt;configuration&gt;                         &lt;repository&gt;${docker.image.prefix}/${project.artifactId}-istio&lt;/repository&gt;                         &lt;tag&gt;latest&lt;/tag&gt;                     &lt;/configuration&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;phase&gt;package&lt;/phase&gt;                             &lt;goals&gt;                                 &lt;goal&gt;build&lt;/goal&gt;                                 &lt;goal&gt;push&lt;/goal&gt;                             &lt;/goals&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/pluginManagement&gt;     &lt;/build&gt; </code></pre>  <p>When pushing with <code>docker push image-name:tag</code> everything works.</p>  <p><a href='https://github.com/spotify/dockerfile-maven/issues/79#issuecomment-338563667' rel='noreferrer'>Here</a> I have found the similar issue, but adding the dependency for <code>docker-client v8.8.4</code> does not change anything.</p>  <p>Also, <a href='https://github.com/spotify/dockerfile-maven/issues/51#issuecomment-321549038' rel='noreferrer'>this</a> comment suggest switching to <code>1.3.3</code> version, but this doesn't work for me.</p>  <p>For both cases, I can see in the logs that it pushes to the same repository:</p>  <pre><code>The push refers to a repository [docker.io/my-login/my-image-name] </code></pre> ",
    "OwnerUserId": "5604676",
    "LastEditorUserId": "5604676",
    "LastEditDate": "2018-03-01T15:12:50.243",
    "LastActivityDate": "2021-01-09T05:00:30.077",
    "Title": "Error pushing docker hub using spotify/dockerfile-maven-plugin",
    "Tags": "<java><maven><docker><dockerhub><maven-docker-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "51714101",
    "PostTypeId": "1",
    "AcceptedAnswerId": "51817774",
    "CreationDate": "2018-08-06T19:04:00.627",
    "Score": "7",
    "ViewCount": "7756",
    "Body": "<p>I have both deploy plugin and dockerize plugin in my Maven project.</p>  <p>Deploy plugin,</p>  <pre><code>&lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;default-deploy&lt;/id&gt;                         &lt;phase&gt;deploy&lt;/phase&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt; </code></pre>  <p>Dockerize plugin,</p>  <pre><code>&lt;profiles&gt;         &lt;profile&gt;             &lt;id&gt;docker&lt;/id&gt;             &lt;properties&gt;                 &lt;assembly.skipAssembly&gt;true&lt;/assembly.skipAssembly&gt;             &lt;/properties&gt;             &lt;build&gt;                 &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;                 &lt;plugins&gt;                     &lt;plugin&gt;                         &lt;groupId&gt;com.spotify&lt;/groupId&gt;                         &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;                         &lt;version&gt;${version.docker.plugin}&lt;/version&gt;                         &lt;executions&gt;                             &lt;execution&gt;                                 &lt;id&gt;dockerize-app&lt;/id&gt;                                 &lt;goals&gt;                                     &lt;goal&gt;build&lt;/goal&gt;                                     &lt;goal&gt;push&lt;/goal&gt;                                 &lt;/goals&gt;                             &lt;/execution&gt;                         &lt;/executions&gt;                         &lt;configuration&gt;                             &lt;repository&gt;${docker.image-prefix}${project.artifactId}&lt;/repository&gt;                             &lt;tag&gt;${project.version}&lt;/tag&gt;                             &lt;useMavenSettingsForAuth&gt;true&lt;/useMavenSettingsForAuth&gt;                             &lt;buildArgs&gt;                                 &lt;JAR_FILE&gt;${project.build.finalName}.jar&lt;/JAR_FILE&gt;                             &lt;/buildArgs&gt;                             &lt;resources&gt;                                 &lt;resource&gt;                                     &lt;targetPath&gt;/&lt;/targetPath&gt;                                     &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                                     &lt;include&gt;${project.artifactId}.war&lt;/include&gt;                                 &lt;/resource&gt;                             &lt;/resources&gt;                         &lt;/configuration&gt;                     &lt;/plugin&gt;                 &lt;/plugins&gt;             &lt;/build&gt;         &lt;/profile&gt;     &lt;/profiles&gt; </code></pre>  <p>I have following use cases.</p>  <ol> <li>Deploy artifacts alone</li> <li>Deploy Docker image alone</li> <li>Deploy artifact &amp; Docker image</li> </ol>  <p>To achieve this, I added Docker plugin under profile. So that, Docker image will be deployed on passing the profile name.</p>  <blockquote>   <p><strong>mvn deploy</strong></p> </blockquote>  <p>The above command will deploy just the artifacts.</p>  <blockquote>   <p><strong>mvn deploy -P docker</strong></p> </blockquote>  <p>The above command will deploy artifacts &amp; Docker image.</p>  <p>But, I am unable to just deploy the Docker image.</p>  <p>To just deploy the Docker image, I am adding the below config in the deploy plugin,</p>  <pre><code>&lt;configuration&gt;                     &lt;skip&gt;true&lt;/skip&gt;                 &lt;/configuration&gt; </code></pre>  <p>Or, setting default-deploy to none.</p>  <pre><code>&lt;execution&gt;                         &lt;id&gt;default-deploy&lt;/id&gt;                         &lt;phase&gt;none&lt;/phase&gt;                     &lt;/execution&gt; </code></pre>  <p>The above 2 approaches needs pom change.</p>  <ol> <li>The other approach would be to create a profile for deploy also so that we can pass the profile we want.</li> </ol>  <p>Is there any other better approach? Or, is it possible with the Maven arguments to skip deploy?</p> ",
    "OwnerUserId": "1578872",
    "LastEditorUserId": "472495",
    "LastEditDate": "2019-10-23T08:03:16.463",
    "LastActivityDate": "2019-10-23T08:03:16.463",
    "Title": "Maven skip deploy & push only Docker images",
    "Tags": "<maven><docker>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53093020",
    "PostTypeId": "1",
    "AcceptedAnswerId": "53227196",
    "CreationDate": "2018-10-31T22:52:44.750",
    "Score": "7",
    "ViewCount": "5006",
    "Body": "<p>We have around of 10 different applications that are Spring Boot projects with Groovy.</p>  <p>All of our projects build correctly in all developer work stations and they were running correctly until yesterday, however suddenly all of them stopped working today only in our GitLab CI pipelines with below error:</p>  <pre><code>[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO]  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:37 min [INFO] Finished at: 2018-10-31T17:49:11Z [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project ctg-oms-component: There are test failures. [ERROR]  [ERROR] Please refer to /builds/ctg-integrations/ctg-oms-component/target/surefire-reports for the individual test results. [ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream. [ERROR] ExecutionException The forked VM terminated without properly saying goodbye. VM crash or System.exit called? </code></pre>  <p>I've pulled the same docker image that is using our GitLab CI pipeline, tested building the project and everything works correctly. However, the error occurs only in GitLab CI.</p>  <p>After an investigation looks like surefire is creating a fork that makes GitLab CI docker crash. In order to fix this, I've added below explicit configuration to avoid forked VM and this got rid of above error.</p>  <pre><code>&lt;!-- Needed only for GitLab CI --&gt; &lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;forkCount&gt;0&lt;/forkCount&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>Do you know why this is occurring? Is there another way to fix GitLab CI to avoid this issue? I don't really like this workaround, since it is just a way to avoid GitLab CI to explode but don't know how Docker is handled behind the scenes in Gitlab.</p> ",
    "OwnerUserId": "710099",
    "LastActivityDate": "2019-12-05T08:17:01.517",
    "Title": "GitLab CI is failing due to maven-surefire-plugin with VM crash",
    "Tags": "<docker><spring-boot><gitlab><gitlab-ci><maven-surefire-plugin>",
    "AnswerCount": "5",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53093020",
    "PostTypeId": "1",
    "AcceptedAnswerId": "53227196",
    "CreationDate": "2018-10-31T22:52:44.750",
    "Score": "7",
    "ViewCount": "5006",
    "Body": "<p>We have around of 10 different applications that are Spring Boot projects with Groovy.</p>  <p>All of our projects build correctly in all developer work stations and they were running correctly until yesterday, however suddenly all of them stopped working today only in our GitLab CI pipelines with below error:</p>  <pre><code>[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO]  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:37 min [INFO] Finished at: 2018-10-31T17:49:11Z [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project ctg-oms-component: There are test failures. [ERROR]  [ERROR] Please refer to /builds/ctg-integrations/ctg-oms-component/target/surefire-reports for the individual test results. [ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream. [ERROR] ExecutionException The forked VM terminated without properly saying goodbye. VM crash or System.exit called? </code></pre>  <p>I've pulled the same docker image that is using our GitLab CI pipeline, tested building the project and everything works correctly. However, the error occurs only in GitLab CI.</p>  <p>After an investigation looks like surefire is creating a fork that makes GitLab CI docker crash. In order to fix this, I've added below explicit configuration to avoid forked VM and this got rid of above error.</p>  <pre><code>&lt;!-- Needed only for GitLab CI --&gt; &lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;forkCount&gt;0&lt;/forkCount&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>Do you know why this is occurring? Is there another way to fix GitLab CI to avoid this issue? I don't really like this workaround, since it is just a way to avoid GitLab CI to explode but don't know how Docker is handled behind the scenes in Gitlab.</p> ",
    "OwnerUserId": "710099",
    "LastActivityDate": "2019-12-05T08:17:01.517",
    "Title": "GitLab CI is failing due to maven-surefire-plugin with VM crash",
    "Tags": "<docker><spring-boot><gitlab><gitlab-ci><maven-surefire-plugin>",
    "AnswerCount": "5",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "53093020",
    "PostTypeId": "1",
    "AcceptedAnswerId": "53227196",
    "CreationDate": "2018-10-31T22:52:44.750",
    "Score": "7",
    "ViewCount": "5006",
    "Body": "<p>We have around of 10 different applications that are Spring Boot projects with Groovy.</p>  <p>All of our projects build correctly in all developer work stations and they were running correctly until yesterday, however suddenly all of them stopped working today only in our GitLab CI pipelines with below error:</p>  <pre><code>[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0 [INFO]  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:37 min [INFO] Finished at: 2018-10-31T17:49:11Z [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project ctg-oms-component: There are test failures. [ERROR]  [ERROR] Please refer to /builds/ctg-integrations/ctg-oms-component/target/surefire-reports for the individual test results. [ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream. [ERROR] ExecutionException The forked VM terminated without properly saying goodbye. VM crash or System.exit called? </code></pre>  <p>I've pulled the same docker image that is using our GitLab CI pipeline, tested building the project and everything works correctly. However, the error occurs only in GitLab CI.</p>  <p>After an investigation looks like surefire is creating a fork that makes GitLab CI docker crash. In order to fix this, I've added below explicit configuration to avoid forked VM and this got rid of above error.</p>  <pre><code>&lt;!-- Needed only for GitLab CI --&gt; &lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;     &lt;configuration&gt;         &lt;forkCount&gt;0&lt;/forkCount&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre>  <p>Do you know why this is occurring? Is there another way to fix GitLab CI to avoid this issue? I don't really like this workaround, since it is just a way to avoid GitLab CI to explode but don't know how Docker is handled behind the scenes in Gitlab.</p> ",
    "OwnerUserId": "710099",
    "LastActivityDate": "2019-12-05T08:17:01.517",
    "Title": "GitLab CI is failing due to maven-surefire-plugin with VM crash",
    "Tags": "<docker><spring-boot><gitlab><gitlab-ci><maven-surefire-plugin>",
    "AnswerCount": "5",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56284845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56285260",
    "CreationDate": "2019-05-24T01:42:29.300",
    "Score": "7",
    "ViewCount": "16500",
    "Body": "<p>I have a multi-module maven project. Parent pom looks like this:</p>  <pre><code>&lt;project&gt;     ...     &lt;packaging&gt;pom&lt;/packaging&gt;        &lt;modules&gt;         &lt;module&gt;common&lt;/module&gt;         &lt;module&gt;a&lt;/module&gt;         &lt;module&gt;b&lt;/module&gt;     &lt;/modules&gt; &lt;/project&gt; </code></pre>  <p><code>common</code> builds a jar, which is added as dependency in the other modules, like this:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;my.project&lt;/groupId&gt;     &lt;artifactId&gt;common&lt;/artifactId&gt;     &lt;version&gt;${module.common.version}&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Modules <code>a</code> and <code>b</code> are Spring Boot projects having the <a href='https://github.com/spotify/dockerfile-maven' rel='noreferrer'>spotify docker plugin</a>.</p>  <p>I need to be able to run <code>mvn deploy</code> in order to get the spotify plugin push the docker image.</p>  <p><code>mvn install</code> works fine, which builds the docker images. But in order to push them, when I run <code>mvn deploy</code>, it throws error for the <code>common</code> module:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy   (default-deploy) on project common: Deployment failed: repository   element was not specified in the POM inside distributionManagement   element or in -DaltDeploymentRepository=id::layout::url parameter</p> </blockquote>  <p>Searching for this error, <a href='https://stackoverflow.com/questions/27153024/repository-element-was-not-specified-in-the-pom-inside-distributionmanagement-el?rq=1'>this answer</a> suggests adding the repository url in the <code>distributionManagement</code> section. But I don't want to deploy <code>common</code>. I just want to build it, so it gets injected as dependency in the other modules and deploy those other modules. How can I do that?</p>  <p>I tried to deploy only <code>a</code> and <code>b</code> using this command, but it gives the same error for <code>common</code>:</p>  <pre><code>mvn clean \\    -DdockerRegistryHost=123.dkr.ecr.us-west-1.amazonaws.com/test1 \\    --projects a,b \\    --also-make \\    deploy </code></pre> ",
    "OwnerUserId": "1039555",
    "LastActivityDate": "2019-05-24T02:54:57.943",
    "Title": "Skip maven deploy for one module",
    "Tags": "<java><maven><spring-boot><docker><spotify-docker-client>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56284845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56285260",
    "CreationDate": "2019-05-24T01:42:29.300",
    "Score": "7",
    "ViewCount": "16500",
    "Body": "<p>I have a multi-module maven project. Parent pom looks like this:</p>  <pre><code>&lt;project&gt;     ...     &lt;packaging&gt;pom&lt;/packaging&gt;        &lt;modules&gt;         &lt;module&gt;common&lt;/module&gt;         &lt;module&gt;a&lt;/module&gt;         &lt;module&gt;b&lt;/module&gt;     &lt;/modules&gt; &lt;/project&gt; </code></pre>  <p><code>common</code> builds a jar, which is added as dependency in the other modules, like this:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;my.project&lt;/groupId&gt;     &lt;artifactId&gt;common&lt;/artifactId&gt;     &lt;version&gt;${module.common.version}&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Modules <code>a</code> and <code>b</code> are Spring Boot projects having the <a href='https://github.com/spotify/dockerfile-maven' rel='noreferrer'>spotify docker plugin</a>.</p>  <p>I need to be able to run <code>mvn deploy</code> in order to get the spotify plugin push the docker image.</p>  <p><code>mvn install</code> works fine, which builds the docker images. But in order to push them, when I run <code>mvn deploy</code>, it throws error for the <code>common</code> module:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy   (default-deploy) on project common: Deployment failed: repository   element was not specified in the POM inside distributionManagement   element or in -DaltDeploymentRepository=id::layout::url parameter</p> </blockquote>  <p>Searching for this error, <a href='https://stackoverflow.com/questions/27153024/repository-element-was-not-specified-in-the-pom-inside-distributionmanagement-el?rq=1'>this answer</a> suggests adding the repository url in the <code>distributionManagement</code> section. But I don't want to deploy <code>common</code>. I just want to build it, so it gets injected as dependency in the other modules and deploy those other modules. How can I do that?</p>  <p>I tried to deploy only <code>a</code> and <code>b</code> using this command, but it gives the same error for <code>common</code>:</p>  <pre><code>mvn clean \\    -DdockerRegistryHost=123.dkr.ecr.us-west-1.amazonaws.com/test1 \\    --projects a,b \\    --also-make \\    deploy </code></pre> ",
    "OwnerUserId": "1039555",
    "LastActivityDate": "2019-05-24T02:54:57.943",
    "Title": "Skip maven deploy for one module",
    "Tags": "<java><maven><spring-boot><docker><spotify-docker-client>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56284845",
    "PostTypeId": "1",
    "AcceptedAnswerId": "56285260",
    "CreationDate": "2019-05-24T01:42:29.300",
    "Score": "7",
    "ViewCount": "16500",
    "Body": "<p>I have a multi-module maven project. Parent pom looks like this:</p>  <pre><code>&lt;project&gt;     ...     &lt;packaging&gt;pom&lt;/packaging&gt;        &lt;modules&gt;         &lt;module&gt;common&lt;/module&gt;         &lt;module&gt;a&lt;/module&gt;         &lt;module&gt;b&lt;/module&gt;     &lt;/modules&gt; &lt;/project&gt; </code></pre>  <p><code>common</code> builds a jar, which is added as dependency in the other modules, like this:</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;my.project&lt;/groupId&gt;     &lt;artifactId&gt;common&lt;/artifactId&gt;     &lt;version&gt;${module.common.version}&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Modules <code>a</code> and <code>b</code> are Spring Boot projects having the <a href='https://github.com/spotify/dockerfile-maven' rel='noreferrer'>spotify docker plugin</a>.</p>  <p>I need to be able to run <code>mvn deploy</code> in order to get the spotify plugin push the docker image.</p>  <p><code>mvn install</code> works fine, which builds the docker images. But in order to push them, when I run <code>mvn deploy</code>, it throws error for the <code>common</code> module:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy   (default-deploy) on project common: Deployment failed: repository   element was not specified in the POM inside distributionManagement   element or in -DaltDeploymentRepository=id::layout::url parameter</p> </blockquote>  <p>Searching for this error, <a href='https://stackoverflow.com/questions/27153024/repository-element-was-not-specified-in-the-pom-inside-distributionmanagement-el?rq=1'>this answer</a> suggests adding the repository url in the <code>distributionManagement</code> section. But I don't want to deploy <code>common</code>. I just want to build it, so it gets injected as dependency in the other modules and deploy those other modules. How can I do that?</p>  <p>I tried to deploy only <code>a</code> and <code>b</code> using this command, but it gives the same error for <code>common</code>:</p>  <pre><code>mvn clean \\    -DdockerRegistryHost=123.dkr.ecr.us-west-1.amazonaws.com/test1 \\    --projects a,b \\    --also-make \\    deploy </code></pre> ",
    "OwnerUserId": "1039555",
    "LastActivityDate": "2019-05-24T02:54:57.943",
    "Title": "Skip maven deploy for one module",
    "Tags": "<java><maven><spring-boot><docker><spotify-docker-client>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63789255",
    "PostTypeId": "1",
    "CreationDate": "2020-09-08T07:40:03.367",
    "Score": "7",
    "ViewCount": "2997",
    "Body": "<p>My Spring Boot project contains the Spring Boot Maven Plugin which I use for building a Docker image by running <code>mvn spring-boot:build-image</code>.</p> <pre class='lang-xml prettyprint-override'><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;build-image&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> <p>When deploying this image to a Docker stack I need to run a healthcheck using the <code>curl</code> command but unfortunately <code>curl</code> is not installed by the default buildpack.</p> <p>Is it possible to further tweak the image building process so that <code>curl</code> gets installed into the iamge? I couldn't find the necessary information</p> ",
    "OwnerUserId": "478406",
    "LastEditorUserId": "478406",
    "LastEditDate": "2020-09-08T07:47:11.900",
    "LastActivityDate": "2023-02-25T12:59:25.103",
    "Title": "Install package in Docker image created by Spring Boot Maven plugin",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63789255",
    "PostTypeId": "1",
    "CreationDate": "2020-09-08T07:40:03.367",
    "Score": "7",
    "ViewCount": "2997",
    "Body": "<p>My Spring Boot project contains the Spring Boot Maven Plugin which I use for building a Docker image by running <code>mvn spring-boot:build-image</code>.</p> <pre class='lang-xml prettyprint-override'><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;build-image&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> <p>When deploying this image to a Docker stack I need to run a healthcheck using the <code>curl</code> command but unfortunately <code>curl</code> is not installed by the default buildpack.</p> <p>Is it possible to further tweak the image building process so that <code>curl</code> gets installed into the iamge? I couldn't find the necessary information</p> ",
    "OwnerUserId": "478406",
    "LastEditorUserId": "478406",
    "LastEditDate": "2020-09-08T07:47:11.900",
    "LastActivityDate": "2023-02-25T12:59:25.103",
    "Title": "Install package in Docker image created by Spring Boot Maven plugin",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63789255",
    "PostTypeId": "1",
    "CreationDate": "2020-09-08T07:40:03.367",
    "Score": "7",
    "ViewCount": "2997",
    "Body": "<p>My Spring Boot project contains the Spring Boot Maven Plugin which I use for building a Docker image by running <code>mvn spring-boot:build-image</code>.</p> <pre class='lang-xml prettyprint-override'><code>&lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;phase&gt;package&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;build-image&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; </code></pre> <p>When deploying this image to a Docker stack I need to run a healthcheck using the <code>curl</code> command but unfortunately <code>curl</code> is not installed by the default buildpack.</p> <p>Is it possible to further tweak the image building process so that <code>curl</code> gets installed into the iamge? I couldn't find the necessary information</p> ",
    "OwnerUserId": "478406",
    "LastEditorUserId": "478406",
    "LastEditDate": "2020-09-08T07:47:11.900",
    "LastActivityDate": "2023-02-25T12:59:25.103",
    "Title": "Install package in Docker image created by Spring Boot Maven plugin",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64849028",
    "PostTypeId": "1",
    "AcceptedAnswerId": "64958942",
    "CreationDate": "2020-11-15T19:43:42.410",
    "Score": "7",
    "ViewCount": "4410",
    "Body": "<p>Using Spring Boot 2.4.0, I'm trying to configure the <code>spring-boot:build-image</code> task to push an image to my private GitHub container registry.</p> <p>I used <a href='https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image-example-publish' rel='noreferrer'>these instructions</a> to configure my POM as follows:</p> <pre class='lang-xml prettyprint-override'><code>            &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;image&gt;                         &lt;name&gt;ghcr.io/abc/${project.artifactId}:${project.version}&lt;/name&gt;                         &lt;publish&gt;true&lt;/publish&gt;                     &lt;/image&gt;                     &lt;docker&gt;                         &lt;publishRegistry&gt;                             &lt;username&gt;abc&lt;/username&gt;                             &lt;token&gt;mytoken&lt;/token&gt;                             &lt;url&gt;https://ghcr.io&lt;/url&gt;                         &lt;/publishRegistry&gt;                     &lt;/docker&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt; </code></pre> <p>When I execute the <code>spring-boot:build-image</code> task, it builds the image but I get the following error when it tries to push:</p> <pre><code>[INFO] Successfully built image 'ghcr.io/abc/def:1.5.0' [INFO] [INFO]  &gt; Pushing image 'ghcr.io/abc/def:1.5.0' 100% Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0:build-image failed: Error response received when pushing image: error parsing HTTP 405 response body: unexpected end of JSON input: &quot;&quot; -&gt; [Help 1] </code></pre> <p>I can manually push the image using <code>docker push</code>, and I have tried doing a <code>docker login</code> which doesn't help either. I am also not behind any firewall or proxy.</p> ",
    "OwnerUserId": "657224",
    "LastEditorUserId": "657224",
    "LastEditDate": "2020-11-16T00:50:21.490",
    "LastActivityDate": "2020-11-22T20:04:35.763",
    "Title": "Maven Spring Boot Cannot Push Docker Image",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64849028",
    "PostTypeId": "1",
    "AcceptedAnswerId": "64958942",
    "CreationDate": "2020-11-15T19:43:42.410",
    "Score": "7",
    "ViewCount": "4410",
    "Body": "<p>Using Spring Boot 2.4.0, I'm trying to configure the <code>spring-boot:build-image</code> task to push an image to my private GitHub container registry.</p> <p>I used <a href='https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image-example-publish' rel='noreferrer'>these instructions</a> to configure my POM as follows:</p> <pre class='lang-xml prettyprint-override'><code>            &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;image&gt;                         &lt;name&gt;ghcr.io/abc/${project.artifactId}:${project.version}&lt;/name&gt;                         &lt;publish&gt;true&lt;/publish&gt;                     &lt;/image&gt;                     &lt;docker&gt;                         &lt;publishRegistry&gt;                             &lt;username&gt;abc&lt;/username&gt;                             &lt;token&gt;mytoken&lt;/token&gt;                             &lt;url&gt;https://ghcr.io&lt;/url&gt;                         &lt;/publishRegistry&gt;                     &lt;/docker&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt; </code></pre> <p>When I execute the <code>spring-boot:build-image</code> task, it builds the image but I get the following error when it tries to push:</p> <pre><code>[INFO] Successfully built image 'ghcr.io/abc/def:1.5.0' [INFO] [INFO]  &gt; Pushing image 'ghcr.io/abc/def:1.5.0' 100% Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0:build-image failed: Error response received when pushing image: error parsing HTTP 405 response body: unexpected end of JSON input: &quot;&quot; -&gt; [Help 1] </code></pre> <p>I can manually push the image using <code>docker push</code>, and I have tried doing a <code>docker login</code> which doesn't help either. I am also not behind any firewall or proxy.</p> ",
    "OwnerUserId": "657224",
    "LastEditorUserId": "657224",
    "LastEditDate": "2020-11-16T00:50:21.490",
    "LastActivityDate": "2020-11-22T20:04:35.763",
    "Title": "Maven Spring Boot Cannot Push Docker Image",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64849028",
    "PostTypeId": "1",
    "AcceptedAnswerId": "64958942",
    "CreationDate": "2020-11-15T19:43:42.410",
    "Score": "7",
    "ViewCount": "4410",
    "Body": "<p>Using Spring Boot 2.4.0, I'm trying to configure the <code>spring-boot:build-image</code> task to push an image to my private GitHub container registry.</p> <p>I used <a href='https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#build-image-example-publish' rel='noreferrer'>these instructions</a> to configure my POM as follows:</p> <pre class='lang-xml prettyprint-override'><code>            &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;image&gt;                         &lt;name&gt;ghcr.io/abc/${project.artifactId}:${project.version}&lt;/name&gt;                         &lt;publish&gt;true&lt;/publish&gt;                     &lt;/image&gt;                     &lt;docker&gt;                         &lt;publishRegistry&gt;                             &lt;username&gt;abc&lt;/username&gt;                             &lt;token&gt;mytoken&lt;/token&gt;                             &lt;url&gt;https://ghcr.io&lt;/url&gt;                         &lt;/publishRegistry&gt;                     &lt;/docker&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt; </code></pre> <p>When I execute the <code>spring-boot:build-image</code> task, it builds the image but I get the following error when it tries to push:</p> <pre><code>[INFO] Successfully built image 'ghcr.io/abc/def:1.5.0' [INFO] [INFO]  &gt; Pushing image 'ghcr.io/abc/def:1.5.0' 100% Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0:build-image failed: Error response received when pushing image: error parsing HTTP 405 response body: unexpected end of JSON input: &quot;&quot; -&gt; [Help 1] </code></pre> <p>I can manually push the image using <code>docker push</code>, and I have tried doing a <code>docker login</code> which doesn't help either. I am also not behind any firewall or proxy.</p> ",
    "OwnerUserId": "657224",
    "LastEditorUserId": "657224",
    "LastEditDate": "2020-11-16T00:50:21.490",
    "LastActivityDate": "2020-11-22T20:04:35.763",
    "Title": "Maven Spring Boot Cannot Push Docker Image",
    "Tags": "<spring-boot><docker><spring-boot-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "65437831",
    "PostTypeId": "1",
    "AcceptedAnswerId": "65506155",
    "CreationDate": "2020-12-24T11:42:26.827",
    "Score": "7",
    "ViewCount": "3559",
    "Body": "<p>I have the following multi-stage <code>dockerfile</code> that attempts to copy each module of my multi-module <code>java maven</code> project and build my <code>ear</code> file using <code>mvn clean install</code>.</p> <p><strong>dockerfile:</strong></p> <pre><code># Copy files from local to maven image and build ear FROM maven:3.5-jdk-8 AS build   COPY module1 /usr/src/app/src   COPY module2 /usr/src/app/src   COPY module3 /usr/src/app/src   COPY pom.xml /usr/src/app   RUN mvn -f /usr/src/app/pom.xml clean install  # Create server image + rest of docker file (working ok) </code></pre> <p>The error that I am getting is as follows:</p> <pre><code>Step 8/20 : RUN mvn -f /usr/src/app/pom.xml clean install  ---&gt; Running in cf9d8c1ef9ed [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.company.web:api:21.01-SNAPSHOT:   Could not find artifact com.company.parent:jee6:pom:1.0.1-SNAPSHOT and   'parent.relativePath' points at wrong local POM @ line 8, column 10  @ [ERROR] The build could not read 1 project -&gt; [Help 1] </code></pre> <p>The section in the <code>pom.xml</code> that corresponds to this error:</p> <pre><code>&lt;parent&gt; &lt;groupId&gt;com.company.parent&lt;/groupId&gt; &lt;artifactId&gt;jee6&lt;/artifactId&gt; &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; </code></pre> <p>I assume this issue because when trying to run the command in the maven docker image it cannot see my local <code>.m2</code> folder? And the dependency that it is looking for is a private dependency on my local machine.</p> <p>Would also copying my maven <code>settings.xml</code> help?</p> <p>How can I resolve this? I do not want someone to have to have Maven installed on their machine in order to run this dockerfile.</p> ",
    "OwnerUserId": "12268910",
    "LastEditorUserId": "1744774",
    "LastEditDate": "2021-01-01T13:08:57.680",
    "LastActivityDate": "2021-01-01T13:08:57.680",
    "Title": "Multi Module Maven Project and Docker: Cannot find artifact?",
    "Tags": "<java><docker><maven><dependencies><pom.xml>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "28078524",
    "PostTypeId": "1",
    "AcceptedAnswerId": "28127197",
    "CreationDate": "2015-01-21T23:03:47.697",
    "Score": "6",
    "ViewCount": "18530",
    "Body": "<p>I've an image which needs to connect to a repository in runtime, but it seams that Docker container is not able to read ~/.m2/settings.xml file located in host machine.</p>  <p>Is there any way to let docker now where maven configuration file is located? Or actually import the maven configuration file to the container?</p> ",
    "OwnerUserId": "3476247",
    "LastEditorUserId": "3476247",
    "LastEditDate": "2015-01-24T15:48:02.517",
    "LastActivityDate": "2015-01-25T00:10:43.127",
    "Title": "Docker - maven connect to specific repository in runtime",
    "Tags": "<java><xml><maven><docker>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "32015945",
    "PostTypeId": "1",
    "CreationDate": "2015-08-14T17:49:56.303",
    "Score": "6",
    "ViewCount": "1966",
    "Body": "<p>I am using a Jenkins server as CI. I am using a maven docker to run the maven tasks. So here is my problem and my doubts. </p>  <p>With jenkins I use the maven plugin to configure and compile the maven tasks. If I want to build I run the <strong>Build with Parameters</strong>, if I want to create an snapshot or release I run the <strong><em>Perform Maven Release</em></strong> and here I can specify the version. </p>  <p>But with docker is more complicated because I have to use arguments for the mvn command. So:</p>  <p>How do I set options to create a release or snapshot version?</p>  <p>I have the settings.xml file with my nexus url and also with the user/password, but the problems is using it with docker. </p>  <p>I am using docker.io/maven image.</p> ",
    "OwnerUserId": "988174",
    "LastActivityDate": "2015-08-14T20:52:09.197",
    "Title": "How to set maven options to run for release or snapshot",
    "Tags": "<java><maven><jenkins><docker><maven-release-plugin>",
    "AnswerCount": "2",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "35450248",
    "PostTypeId": "1",
    "AcceptedAnswerId": "36735247",
    "CreationDate": "2016-02-17T07:19:06.233",
    "Score": "6",
    "ViewCount": "8148",
    "Body": "<p>I use <a href='https://github.com/rhuss/docker-maven-plugin' rel='noreferrer'>Docker Maven Plugin</a></p>  <p>When test-integration starts i can connect to mysql on container in terminal with this command:</p>  <pre><code>mysql -h 127.0.0.1 -P 32795 -uroot -p </code></pre>  <p>and everythings works good but when i want to connect mysql in java app with JDBC with this code:</p>  <pre><code>Class.forName('com.mysql.jdbc.Driver').newInstance(); Connection connection = DriverManager.getConnection(     'jdbc:mysql://127.0.0.1:' + System.getProperty('mysqlPort') + '/dashboardmanager',     'root',     'root' ); </code></pre>  <p>i get this error:</p>  <pre><code>org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Cannot create PoolableConnectionFactory (Communications link failure  The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.)     at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80) ~[spring-jdbc-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615) ~[spring-jdbc-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:866) ~[spring-jdbc-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:927) ~[spring-jdbc-4.2.4.RELEASE.jar:4.2.4.RELEASE]     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:937) ~[spring-jdbc-4.2.4.RELEASE.jar:4.2.4.RELEASE] </code></pre>  <p>I tried:</p>  <pre><code>export _JAVA_OPTIONS='-Djava.net.preferIPv4Stack=true' </code></pre>  <p>and</p>  <pre><code>System.setProperty('java.net.preferIPv4Stack' , 'true'); </code></pre>  <p>but nothing changed.</p>  <p><a href='https://github.com/rhuss/docker-maven-plugin' rel='noreferrer'>Docker Maven Plugin</a> Conf:</p>  <pre><code>&lt;plugin&gt;             &lt;groupId&gt;org.jolokia&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;${docker-maven-plugin.version}&lt;/version&gt;             &lt;configuration&gt;                 &lt;images&gt;                     &lt;image&gt;                         &lt;name&gt;mysql:5.7.11&lt;/name&gt;                         &lt;run&gt;                             &lt;env&gt;                                 &lt;MYSQL_ROOT_PASSWORD&gt;root&lt;/MYSQL_ROOT_PASSWORD&gt;                                 &lt;MYSQL_DATABASE&gt;dashboardmanager&lt;/MYSQL_DATABASE&gt;                             &lt;/env&gt;                             &lt;ports&gt;                                 &lt;port&gt;mysqlPort:3306&lt;/port&gt;                             &lt;/ports&gt;                         &lt;/run&gt;                     &lt;/image&gt;                 &lt;/images&gt;             &lt;/configuration&gt;             &lt;executions&gt;                 &lt;execution&gt;                     &lt;id&gt;start&lt;/id&gt;                     &lt;phase&gt;pre-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;start&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                     &lt;id&gt;stop&lt;/id&gt;                     &lt;phase&gt;post-integration-test&lt;/phase&gt;                     &lt;goals&gt;                         &lt;goal&gt;stop&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;             &lt;/executions&gt;         &lt;/plugin&gt; </code></pre> ",
    "OwnerUserId": "1528519",
    "LastActivityDate": "2017-04-07T15:06:25.713",
    "Title": "Can't connect to mySql docker container with JDBC",
    "Tags": "<java><mysql><maven><jdbc><docker>",
    "AnswerCount": "2",
    "CommentCount": "9",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "37191662",
    "PostTypeId": "1",
    "CreationDate": "2016-05-12T15:42:21.597",
    "Score": "6",
    "ViewCount": "2178",
    "Body": "<p>I've got a Spring Boot project which I want to built an image from and push to a Docker private registry. I've followed <a href='https://spring.io/guides/gs/spring-boot-docker/' rel='nofollow'>Spring Boot official docs</a> for that, using the <a href='https://github.com/spotify/docker-maven-plugin' rel='nofollow'>Spotify Docker Maven plugin</a>. That worked well when publishing my image to a docker local instance using Boot2Docker.</p>  <p>Now I'm trying to do the same with a remote private repo (an unsecured one) and I'm struggling with it. I've followed the plugin documentation for that and that's how my configuration looks like:</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;         &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.4.9&lt;/version&gt;             &lt;configuration&gt;                 &lt;imageName&gt;service-discovery&lt;/imageName&gt;                 &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;                 &lt;resources&gt;                     &lt;resource&gt;                         &lt;targetPath&gt;/&lt;/targetPath&gt;                         &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                         &lt;include&gt;${project.build.finalName}.war&lt;/include&gt;                     &lt;/resource&gt;                 &lt;/resources&gt;             &lt;/configuration&gt;               &lt;executions&gt;                 &lt;execution&gt;                   &lt;id&gt;build-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;build&lt;/goal&gt;                   &lt;/goals&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                   &lt;id&gt;tag-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;tag&lt;/goal&gt;                   &lt;/goals&gt;                   &lt;configuration&gt;                     &lt;image&gt;service-discovery&lt;/image&gt;                     &lt;newName&gt;develop01.mycompany.com:5000/service-discovery&lt;/newName&gt;                   &lt;/configuration&gt;                 &lt;/execution&gt;               &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>My registry is accessible through <code>http://develop01.mycompany.com:5000</code>, but the docker plugin seems not to be able to find it.</p>  <p>Executing <em>mvn clean install</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:build (buil   d-image) on project service-discovery: Exception caught: java.util.concurrent.Ex   ecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingExcepti   on: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [lo   calhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused: connec   t -> [Help 1]</p> </blockquote>  <p>Executing <em>mvn docker:tag -DpushImage</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:tag (defaul   t-cli) on project service-discovery: The parameters 'image', 'newName' for goal   com.spotify:docker-maven-plugin:0.4.9:tag are missing or invalid -> [Help 1]</p> </blockquote>  <p>So the plugin seems not to recognize the parameters into the image goal (in fact, it looks like it's trying to connect to a local Docker instance when executing <em>mvn clean install</em>).</p>  <p><strong>Software:</strong></p>  <ul> <li>docker version: Server: 1.11.0</li> <li>docker-maven-plugin version: 0.4.9</li> <li>maven version: 3.2.3</li> </ul>  <p>A link to the <a href='https://github.com/spotify/docker-maven-plugin/issues/227' rel='nofollow'>GitHub issue</a> I created</p>  <hr>  <p><strong>Update</strong></p>  <p>I have set my DOCKER_HOST environment variable to <code>tcp://develop01.mycompany.com:5000</code> and now the plugin seems to pick it. Still don't understand why I have to do it through an environment variable, when I'm declaring the server name in the execution configuration. All in all, that's the error I'm getting right now:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   com.spotify:docker-maven-plugin:0.4.9:build (buil d-image) on project   service-discovery: Exception caught: Request error: GET http   ://develop01.mycompany.com:5000/version: 404: HTTP 404 Not Found ->   [Help 1]</p> </blockquote>  <p>In fact, the /version endpoint of my registry returns 404. The /v2 endpoint however, returns an empty JSON. Is the plugin trying to deal with a previous docker version API?</p> ",
    "OwnerUserId": "1199132",
    "LastEditorUserId": "482717",
    "LastEditDate": "2016-09-21T16:14:33.497",
    "LastActivityDate": "2016-09-21T16:14:33.497",
    "Title": "Cannot push to remote repo using the (spotify) Docker maven plugin",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "0",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "37191662",
    "PostTypeId": "1",
    "CreationDate": "2016-05-12T15:42:21.597",
    "Score": "6",
    "ViewCount": "2178",
    "Body": "<p>I've got a Spring Boot project which I want to built an image from and push to a Docker private registry. I've followed <a href='https://spring.io/guides/gs/spring-boot-docker/' rel='nofollow'>Spring Boot official docs</a> for that, using the <a href='https://github.com/spotify/docker-maven-plugin' rel='nofollow'>Spotify Docker Maven plugin</a>. That worked well when publishing my image to a docker local instance using Boot2Docker.</p>  <p>Now I'm trying to do the same with a remote private repo (an unsecured one) and I'm struggling with it. I've followed the plugin documentation for that and that's how my configuration looks like:</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;         &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.4.9&lt;/version&gt;             &lt;configuration&gt;                 &lt;imageName&gt;service-discovery&lt;/imageName&gt;                 &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;                 &lt;resources&gt;                     &lt;resource&gt;                         &lt;targetPath&gt;/&lt;/targetPath&gt;                         &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                         &lt;include&gt;${project.build.finalName}.war&lt;/include&gt;                     &lt;/resource&gt;                 &lt;/resources&gt;             &lt;/configuration&gt;               &lt;executions&gt;                 &lt;execution&gt;                   &lt;id&gt;build-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;build&lt;/goal&gt;                   &lt;/goals&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                   &lt;id&gt;tag-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;tag&lt;/goal&gt;                   &lt;/goals&gt;                   &lt;configuration&gt;                     &lt;image&gt;service-discovery&lt;/image&gt;                     &lt;newName&gt;develop01.mycompany.com:5000/service-discovery&lt;/newName&gt;                   &lt;/configuration&gt;                 &lt;/execution&gt;               &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>My registry is accessible through <code>http://develop01.mycompany.com:5000</code>, but the docker plugin seems not to be able to find it.</p>  <p>Executing <em>mvn clean install</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:build (buil   d-image) on project service-discovery: Exception caught: java.util.concurrent.Ex   ecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingExcepti   on: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [lo   calhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused: connec   t -> [Help 1]</p> </blockquote>  <p>Executing <em>mvn docker:tag -DpushImage</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:tag (defaul   t-cli) on project service-discovery: The parameters 'image', 'newName' for goal   com.spotify:docker-maven-plugin:0.4.9:tag are missing or invalid -> [Help 1]</p> </blockquote>  <p>So the plugin seems not to recognize the parameters into the image goal (in fact, it looks like it's trying to connect to a local Docker instance when executing <em>mvn clean install</em>).</p>  <p><strong>Software:</strong></p>  <ul> <li>docker version: Server: 1.11.0</li> <li>docker-maven-plugin version: 0.4.9</li> <li>maven version: 3.2.3</li> </ul>  <p>A link to the <a href='https://github.com/spotify/docker-maven-plugin/issues/227' rel='nofollow'>GitHub issue</a> I created</p>  <hr>  <p><strong>Update</strong></p>  <p>I have set my DOCKER_HOST environment variable to <code>tcp://develop01.mycompany.com:5000</code> and now the plugin seems to pick it. Still don't understand why I have to do it through an environment variable, when I'm declaring the server name in the execution configuration. All in all, that's the error I'm getting right now:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   com.spotify:docker-maven-plugin:0.4.9:build (buil d-image) on project   service-discovery: Exception caught: Request error: GET http   ://develop01.mycompany.com:5000/version: 404: HTTP 404 Not Found ->   [Help 1]</p> </blockquote>  <p>In fact, the /version endpoint of my registry returns 404. The /v2 endpoint however, returns an empty JSON. Is the plugin trying to deal with a previous docker version API?</p> ",
    "OwnerUserId": "1199132",
    "LastEditorUserId": "482717",
    "LastEditDate": "2016-09-21T16:14:33.497",
    "LastActivityDate": "2016-09-21T16:14:33.497",
    "Title": "Cannot push to remote repo using the (spotify) Docker maven plugin",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "0",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "37191662",
    "PostTypeId": "1",
    "CreationDate": "2016-05-12T15:42:21.597",
    "Score": "6",
    "ViewCount": "2178",
    "Body": "<p>I've got a Spring Boot project which I want to built an image from and push to a Docker private registry. I've followed <a href='https://spring.io/guides/gs/spring-boot-docker/' rel='nofollow'>Spring Boot official docs</a> for that, using the <a href='https://github.com/spotify/docker-maven-plugin' rel='nofollow'>Spotify Docker Maven plugin</a>. That worked well when publishing my image to a docker local instance using Boot2Docker.</p>  <p>Now I'm trying to do the same with a remote private repo (an unsecured one) and I'm struggling with it. I've followed the plugin documentation for that and that's how my configuration looks like:</p>  <pre><code>&lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;         &lt;plugin&gt;             &lt;groupId&gt;com.spotify&lt;/groupId&gt;             &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;             &lt;version&gt;0.4.9&lt;/version&gt;             &lt;configuration&gt;                 &lt;imageName&gt;service-discovery&lt;/imageName&gt;                 &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;                 &lt;resources&gt;                     &lt;resource&gt;                         &lt;targetPath&gt;/&lt;/targetPath&gt;                         &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                         &lt;include&gt;${project.build.finalName}.war&lt;/include&gt;                     &lt;/resource&gt;                 &lt;/resources&gt;             &lt;/configuration&gt;               &lt;executions&gt;                 &lt;execution&gt;                   &lt;id&gt;build-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;build&lt;/goal&gt;                   &lt;/goals&gt;                 &lt;/execution&gt;                 &lt;execution&gt;                   &lt;id&gt;tag-image&lt;/id&gt;                   &lt;phase&gt;package&lt;/phase&gt;                   &lt;goals&gt;                     &lt;goal&gt;tag&lt;/goal&gt;                   &lt;/goals&gt;                   &lt;configuration&gt;                     &lt;image&gt;service-discovery&lt;/image&gt;                     &lt;newName&gt;develop01.mycompany.com:5000/service-discovery&lt;/newName&gt;                   &lt;/configuration&gt;                 &lt;/execution&gt;               &lt;/executions&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>My registry is accessible through <code>http://develop01.mycompany.com:5000</code>, but the docker plugin seems not to be able to find it.</p>  <p>Executing <em>mvn clean install</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:build (buil   d-image) on project service-discovery: Exception caught: java.util.concurrent.Ex   ecutionException: com.spotify.docker.client.shaded.javax.ws.rs.ProcessingExcepti   on: org.apache.http.conn.HttpHostConnectException: Connect to localhost:2375 [lo   calhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused: connec   t -> [Help 1]</p> </blockquote>  <p>Executing <em>mvn docker:tag -DpushImage</em> throws:</p>  <blockquote>   <p>[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.4.9:tag (defaul   t-cli) on project service-discovery: The parameters 'image', 'newName' for goal   com.spotify:docker-maven-plugin:0.4.9:tag are missing or invalid -> [Help 1]</p> </blockquote>  <p>So the plugin seems not to recognize the parameters into the image goal (in fact, it looks like it's trying to connect to a local Docker instance when executing <em>mvn clean install</em>).</p>  <p><strong>Software:</strong></p>  <ul> <li>docker version: Server: 1.11.0</li> <li>docker-maven-plugin version: 0.4.9</li> <li>maven version: 3.2.3</li> </ul>  <p>A link to the <a href='https://github.com/spotify/docker-maven-plugin/issues/227' rel='nofollow'>GitHub issue</a> I created</p>  <hr>  <p><strong>Update</strong></p>  <p>I have set my DOCKER_HOST environment variable to <code>tcp://develop01.mycompany.com:5000</code> and now the plugin seems to pick it. Still don't understand why I have to do it through an environment variable, when I'm declaring the server name in the execution configuration. All in all, that's the error I'm getting right now:</p>  <blockquote>   <p>[ERROR] Failed to execute goal   com.spotify:docker-maven-plugin:0.4.9:build (buil d-image) on project   service-discovery: Exception caught: Request error: GET http   ://develop01.mycompany.com:5000/version: 404: HTTP 404 Not Found ->   [Help 1]</p> </blockquote>  <p>In fact, the /version endpoint of my registry returns 404. The /v2 endpoint however, returns an empty JSON. Is the plugin trying to deal with a previous docker version API?</p> ",
    "OwnerUserId": "1199132",
    "LastEditorUserId": "482717",
    "LastEditDate": "2016-09-21T16:14:33.497",
    "LastActivityDate": "2016-09-21T16:14:33.497",
    "Title": "Cannot push to remote repo using the (spotify) Docker maven plugin",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "0",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "38293073",
    "PostTypeId": "1",
    "AcceptedAnswerId": "38294215",
    "CreationDate": "2016-07-10T14:42:19.643",
    "Score": "6",
    "ViewCount": "7523",
    "Body": "<p>I'm trying to create a Dockerfile to then build a Maven project.</p>  <p>I wonder how to fix the Dockerfile and what command to then execute.</p>  <p>I would like to know how to run the build so that it does NOT download all the Maven dependencies every time it builds when the source code, sitting in the src/ directory, has NOT changed.</p>  <p>Here is my Dockerfile file:</p>  <pre><code>FROM maven:3.3.9-jdk-8  RUN mkdir -p /usr/src/app  WORKDIR /usr/src/app  RUN cd /usr/src/app  ADD pom.xml /usr/src/app  RUN mvn dependency:resolve  ADD src /usr/src/app  RUN mvn package  ENTRYPOINT ['mvn'] CMD ['package'] </code></pre>  <p>Should I run the <code>docker run --rm -it toolbox</code> command or the <code>docker build -t toolbox .</code> command ?</p>  <p>Both of these above commands run fine, except that they both download all the Maven dependencies even if the source code has not been touched.</p> ",
    "OwnerUserId": "958373",
    "LastActivityDate": "2016-07-10T16:46:07.940",
    "Title": "Do not download all Maven dependencies on a Docker build",
    "Tags": "<maven><docker>",
    "AnswerCount": "1",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "40898608",
    "PostTypeId": "1",
    "AcceptedAnswerId": "40997695",
    "CreationDate": "2016-11-30T21:32:01.990",
    "Score": "6",
    "ViewCount": "3059",
    "Body": "<p><strong>TL/DR: How can I cache the <code>pom.xml</code> file's <code>&lt;parent&gt;</code> so my build can be run in offline mode?</strong></p>  <p>I'm using Docker to build a maven project. My goal is to add two steps to the build: one to download all of the dependencies, and another to build the project. Here's what my Dockerfile looks like so far:</p>  <pre><code>FROM maven:3.3-jdk-8  # Download the project dependencies (so they can be cached by Docker) ADD pom.xml /runtime/ WORKDIR /runtime RUN mvn dependency:go-offline RUN mvn dependency:resolve-plugins  # Mount the local repository ADD . /runtime  # Build the service RUN mvn clean package -o -DskipTests </code></pre>  <p><strike>This seems to work fine for the plugins. I checked the <code>/root/.m2/repository</code> and everything seems to be in order.</strike></p>  <p><strike>Edit: When double checking for the <code>/root/.m2/repository</code> directory, it's no longer there. For some reason, Maven isn't saving any of the dependencies to this location.</strike></p>  <p><strong>Edit 2: After building the Docker image, there's no <code>/root/.m2/repository</code> directory. However, if I run <code>mvn dependency:go-offline</code> from within a shell inside the Docker container, the directory is created without a problem.</strong></p>  <p>When I attempt build my application, I get the following error:</p>  <pre><code>[ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.example:service:1.2: Cannot access central (http://jcenter.bintray.com) in offline mode and the artifact org.springframework.boot:spring-boot-starter-parent:pom:1.4.0.M3 has not been downloaded from it before. and 'parent.relativePath' points at wrong local POM @ line 14, column 13  @ [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR] [ERROR]   The project com.sample:service:1.2 (/runtime/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.oe:graph-service:1.2: Cannot access central (http://jcenter.bintray.com) in offline mode and the artifact org.springframework.boot:spring-boot-starter-parent:pom:1.4.0.M3 has not been downloaded from it before. and 'parent.relativePath' points at wrong local POM @ line 14, column 13 -&gt; [Help 2] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException </code></pre>  <p>The problem seems to be that <code>mvn dependency:go-offline</code> isn't resolving the parent. When I run the build in offline mode, it breaks.</p>  <p>Here are the relevant portions of my <code>pom.xml</code> file:</p>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;  &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'          xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      ...      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.4.0.M3&lt;/version&gt;     &lt;/parent&gt;      ...      &lt;repositories&gt;         &lt;repository&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;false&lt;/enabled&gt;             &lt;/snapshots&gt;             &lt;id&gt;central&lt;/id&gt;             &lt;name&gt;bintray&lt;/name&gt;             &lt;url&gt;http://jcenter.bintray.com&lt;/url&gt;         &lt;/repository&gt;          &lt;repository&gt;             &lt;id&gt;repository.springsource.snapshot&lt;/id&gt;             &lt;name&gt;SpringSource Snapshot Repository&lt;/name&gt;             &lt;url&gt;http://repo.springsource.org/snapshot&lt;/url&gt;         &lt;/repository&gt;          &lt;repository&gt;             &lt;id&gt;spring-milestones&lt;/id&gt;             &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;         &lt;/repository&gt;     &lt;/repositories&gt;      &lt;dependencies&gt;        ...          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.scala&lt;/groupId&gt;             &lt;artifactId&gt;spring-scala_2.11&lt;/artifactId&gt;             &lt;version&gt;1.0.0.BUILD-SNAPSHOT&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;!-- disabling Spring cloud AWS until proper testing harnesses can be set up --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;             &lt;artifactId&gt;httpcore&lt;/artifactId&gt;             &lt;version&gt;LATEST&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;             &lt;artifactId&gt;spring-cloud-aws-autoconfigure&lt;/artifactId&gt;             &lt;version&gt;1.1.0.RELEASE&lt;/version&gt;         &lt;/dependency&gt;          ...     &lt;/dependencies&gt;      ... &lt;/project&gt; </code></pre> ",
    "OwnerUserId": "262125",
    "LastEditorUserId": "262125",
    "LastEditDate": "2016-12-02T20:50:24.150",
    "LastActivityDate": "2016-12-06T14:27:46.830",
    "Title": "Caching Maven parent in offline build",
    "Tags": "<java><maven><docker>",
    "AnswerCount": "2",
    "CommentCount": "8",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44537781",
    "PostTypeId": "1",
    "CreationDate": "2017-06-14T07:06:10.760",
    "Score": "6",
    "ViewCount": "1250",
    "Body": "<p>My application uses some additional files which I have inside the resource folder. When I do the regular build with Maven and package my app into JAR, I can see all my resources in case I unzip this archive. </p>  <p>But when I create a docker image I use spring-boot-maven-plugin to make my JAR archive executable. For some reason <strong>my resources aren't being added to the new repacked JAR</strong>. Moreover I <strong>can not even unzip it</strong> because it is corrupted.</p>  <p>Here is the way I set the repackage goal in my pom.xml:</p>  <pre><code>&lt;id&gt;prod&lt;/id&gt;         &lt;build&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;                     &lt;configuration&gt;                         &lt;mainClass&gt;ApplicationName&lt;/mainClass&gt;                         &lt;executable&gt;true&lt;/executable&gt;                         &lt;arguments&gt;                             &lt;argument&gt;--spring.profiles.active=prod&lt;/argument&gt;                         &lt;/arguments&gt;                         &lt;!--&lt;addResources&gt;true&lt;/addResources&gt;--&gt;                     &lt;/configuration&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;goals&gt;                                 &lt;goal&gt;repackage&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;!--&lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;--&gt;                                 &lt;!--&lt;layout&gt;JAR&lt;/layout&gt;--&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/build&gt; </code></pre>  <p>I want to add that when I run my image in docker it works fine <strong>but all the needed resources are missing</strong>.</p>  <p>Has anyone run into the same problem? Or maybe you can suggest how to fix it.</p> ",
    "OwnerUserId": "4624052",
    "LastActivityDate": "2017-06-14T07:06:10.760",
    "Title": "Resources are missing from JAR file after repackage with spring boot maven plugin",
    "Tags": "<maven><docker><spring-boot><spring-boot-maven-plugin><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44537781",
    "PostTypeId": "1",
    "CreationDate": "2017-06-14T07:06:10.760",
    "Score": "6",
    "ViewCount": "1250",
    "Body": "<p>My application uses some additional files which I have inside the resource folder. When I do the regular build with Maven and package my app into JAR, I can see all my resources in case I unzip this archive. </p>  <p>But when I create a docker image I use spring-boot-maven-plugin to make my JAR archive executable. For some reason <strong>my resources aren't being added to the new repacked JAR</strong>. Moreover I <strong>can not even unzip it</strong> because it is corrupted.</p>  <p>Here is the way I set the repackage goal in my pom.xml:</p>  <pre><code>&lt;id&gt;prod&lt;/id&gt;         &lt;build&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;                     &lt;configuration&gt;                         &lt;mainClass&gt;ApplicationName&lt;/mainClass&gt;                         &lt;executable&gt;true&lt;/executable&gt;                         &lt;arguments&gt;                             &lt;argument&gt;--spring.profiles.active=prod&lt;/argument&gt;                         &lt;/arguments&gt;                         &lt;!--&lt;addResources&gt;true&lt;/addResources&gt;--&gt;                     &lt;/configuration&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;goals&gt;                                 &lt;goal&gt;repackage&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;!--&lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;--&gt;                                 &lt;!--&lt;layout&gt;JAR&lt;/layout&gt;--&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/build&gt; </code></pre>  <p>I want to add that when I run my image in docker it works fine <strong>but all the needed resources are missing</strong>.</p>  <p>Has anyone run into the same problem? Or maybe you can suggest how to fix it.</p> ",
    "OwnerUserId": "4624052",
    "LastActivityDate": "2017-06-14T07:06:10.760",
    "Title": "Resources are missing from JAR file after repackage with spring boot maven plugin",
    "Tags": "<maven><docker><spring-boot><spring-boot-maven-plugin><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44537781",
    "PostTypeId": "1",
    "CreationDate": "2017-06-14T07:06:10.760",
    "Score": "6",
    "ViewCount": "1250",
    "Body": "<p>My application uses some additional files which I have inside the resource folder. When I do the regular build with Maven and package my app into JAR, I can see all my resources in case I unzip this archive. </p>  <p>But when I create a docker image I use spring-boot-maven-plugin to make my JAR archive executable. For some reason <strong>my resources aren't being added to the new repacked JAR</strong>. Moreover I <strong>can not even unzip it</strong> because it is corrupted.</p>  <p>Here is the way I set the repackage goal in my pom.xml:</p>  <pre><code>&lt;id&gt;prod&lt;/id&gt;         &lt;build&gt;             &lt;plugins&gt;                 &lt;plugin&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;                     &lt;configuration&gt;                         &lt;mainClass&gt;ApplicationName&lt;/mainClass&gt;                         &lt;executable&gt;true&lt;/executable&gt;                         &lt;arguments&gt;                             &lt;argument&gt;--spring.profiles.active=prod&lt;/argument&gt;                         &lt;/arguments&gt;                         &lt;!--&lt;addResources&gt;true&lt;/addResources&gt;--&gt;                     &lt;/configuration&gt;                     &lt;executions&gt;                         &lt;execution&gt;                             &lt;goals&gt;                                 &lt;goal&gt;repackage&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;configuration&gt;                                 &lt;!--&lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;--&gt;                                 &lt;!--&lt;layout&gt;JAR&lt;/layout&gt;--&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                 &lt;/plugin&gt;             &lt;/plugins&gt;         &lt;/build&gt; </code></pre>  <p>I want to add that when I run my image in docker it works fine <strong>but all the needed resources are missing</strong>.</p>  <p>Has anyone run into the same problem? Or maybe you can suggest how to fix it.</p> ",
    "OwnerUserId": "4624052",
    "LastActivityDate": "2017-06-14T07:06:10.760",
    "Title": "Resources are missing from JAR file after repackage with spring boot maven plugin",
    "Tags": "<maven><docker><spring-boot><spring-boot-maven-plugin><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44667063",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44694167",
    "CreationDate": "2017-06-21T04:49:23.627",
    "Score": "6",
    "ViewCount": "14268",
    "Body": "<p>I have a very simple demo of using Spring Boot + Docker Compose + Eureka. </p>  <p>My server runs on port 8671 with the following application properties:</p>  <pre><code>server:   port: 8761 eureka:   instance:     prefer-ip-address: true   client:     registerWithEureka: false     fetchRegistry: false   server:     waitTimeInMsWhenSyncEmpty: 0 </code></pre>  <p>My Eureka client runs on port 9000 with the following application properties:</p>  <pre><code>server:   port: 9000 spring:   application:     name: user-registration eureka:   client:     registerWithEureka: true     fetchRegistry: true     serviceUrl:       defaultZone: http://localhost:8761/eureka/   instance:     prefer-ip-address: true </code></pre>  <p>When I start up my docker.compose file in the parent maven project, this is the contents of my docker-compose file:</p>  <pre><code>eureka-server:   image: rosenthal/eureka-server ports:    - '8761:8761' user-registration:   image: rosenthal/user-registration   ports:    - '9000:9000'   links:    - eureka-server </code></pre>  <p>When I run my application by first starting the eureka server, following by the client via </p>  <pre><code>mvn spring-boot:run  </code></pre>  <p>The server successfully registers my client (I call it user-registration).</p>  <p>When I run my application through docker-compose, the client fails to register with the following output:</p>  <pre><code> DiscoveryClient_USER-REGISTRATION/0fd640cbc3ba:user-registration:9000:   registering service...  user-registration_1  | 2017-06-21 04:36:05.120 ERROR 1 --- [nfoReplicator-0]          c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error  user-registration_1  |   user-registration_1  | com.sun.jersey.api.client.ClientHandlerException:   java.net.ConnectException: Connection refused (Connection refused) </code></pre>  <p>My first assumption was that running docker-compose ran into a race condition on waiting for the server to start, but my eureka client seems to have a heartbeat trying to call home to the server it's configured with. This means it's just not able to find the Eureka server I have registered (and is running, I can navigate to it on localhost:8671).</p>  <p>What am I missing here? Everything runs fine running locally with spring-boot starting up with it's own embedded tomcat containers. As soon as I start to do it with docker-compose, it doesn't want to work.</p>  <h2>EDIT</h2>  <p>I realized my problem, I believe. So docker doesn't run on localhost, it runs on the public IP it is assigned when I start up docker. Navigating to this ip + port shows my service running for Eureka Server. The client still doesn't register.</p>  <p>SO, I made changes to the application.yml file for my eureka client to:</p>  <pre><code>serviceUrl:   defaultZone: http://192.168.59.103:8761/eureka/ </code></pre>  <p>That IP is the one my docker daemon is running under. Now, it misses the first registration when I do docker-compose, but the second heartbeat picks up my client. </p>  <p>How can I ensure the client waits until the server is FULLY up? I used the proper docker 'links' field in my docket compose file, but it didn't work as I hoped. Additionally, how can I see the defaultZone file to be my DOCKER_HOST IP?</p>  <h2>Final result</h2>  <p>The resulting docker-compose file that got everything working for me was:</p>  <pre><code>eureka-server:   image: thorrism/eureka-server   ports:    - '8761:8761' user-registration:   image: thorrism/user-registration   ports:    - '9000:9000'   links:    - eureka-server   environment:     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka </code></pre> ",
    "OwnerUserId": "5203863",
    "LastEditorUserId": "5203863",
    "LastEditDate": "2017-06-21T16:52:46.653",
    "LastActivityDate": "2021-12-23T15:35:28.220",
    "Title": "Docker and Eureka with Spring Boot failing to register clients",
    "Tags": "<java><spring><maven><docker><spring-boot>",
    "AnswerCount": "5",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44667063",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44694167",
    "CreationDate": "2017-06-21T04:49:23.627",
    "Score": "6",
    "ViewCount": "14268",
    "Body": "<p>I have a very simple demo of using Spring Boot + Docker Compose + Eureka. </p>  <p>My server runs on port 8671 with the following application properties:</p>  <pre><code>server:   port: 8761 eureka:   instance:     prefer-ip-address: true   client:     registerWithEureka: false     fetchRegistry: false   server:     waitTimeInMsWhenSyncEmpty: 0 </code></pre>  <p>My Eureka client runs on port 9000 with the following application properties:</p>  <pre><code>server:   port: 9000 spring:   application:     name: user-registration eureka:   client:     registerWithEureka: true     fetchRegistry: true     serviceUrl:       defaultZone: http://localhost:8761/eureka/   instance:     prefer-ip-address: true </code></pre>  <p>When I start up my docker.compose file in the parent maven project, this is the contents of my docker-compose file:</p>  <pre><code>eureka-server:   image: rosenthal/eureka-server ports:    - '8761:8761' user-registration:   image: rosenthal/user-registration   ports:    - '9000:9000'   links:    - eureka-server </code></pre>  <p>When I run my application by first starting the eureka server, following by the client via </p>  <pre><code>mvn spring-boot:run  </code></pre>  <p>The server successfully registers my client (I call it user-registration).</p>  <p>When I run my application through docker-compose, the client fails to register with the following output:</p>  <pre><code> DiscoveryClient_USER-REGISTRATION/0fd640cbc3ba:user-registration:9000:   registering service...  user-registration_1  | 2017-06-21 04:36:05.120 ERROR 1 --- [nfoReplicator-0]          c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error  user-registration_1  |   user-registration_1  | com.sun.jersey.api.client.ClientHandlerException:   java.net.ConnectException: Connection refused (Connection refused) </code></pre>  <p>My first assumption was that running docker-compose ran into a race condition on waiting for the server to start, but my eureka client seems to have a heartbeat trying to call home to the server it's configured with. This means it's just not able to find the Eureka server I have registered (and is running, I can navigate to it on localhost:8671).</p>  <p>What am I missing here? Everything runs fine running locally with spring-boot starting up with it's own embedded tomcat containers. As soon as I start to do it with docker-compose, it doesn't want to work.</p>  <h2>EDIT</h2>  <p>I realized my problem, I believe. So docker doesn't run on localhost, it runs on the public IP it is assigned when I start up docker. Navigating to this ip + port shows my service running for Eureka Server. The client still doesn't register.</p>  <p>SO, I made changes to the application.yml file for my eureka client to:</p>  <pre><code>serviceUrl:   defaultZone: http://192.168.59.103:8761/eureka/ </code></pre>  <p>That IP is the one my docker daemon is running under. Now, it misses the first registration when I do docker-compose, but the second heartbeat picks up my client. </p>  <p>How can I ensure the client waits until the server is FULLY up? I used the proper docker 'links' field in my docket compose file, but it didn't work as I hoped. Additionally, how can I see the defaultZone file to be my DOCKER_HOST IP?</p>  <h2>Final result</h2>  <p>The resulting docker-compose file that got everything working for me was:</p>  <pre><code>eureka-server:   image: thorrism/eureka-server   ports:    - '8761:8761' user-registration:   image: thorrism/user-registration   ports:    - '9000:9000'   links:    - eureka-server   environment:     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka </code></pre> ",
    "OwnerUserId": "5203863",
    "LastEditorUserId": "5203863",
    "LastEditDate": "2017-06-21T16:52:46.653",
    "LastActivityDate": "2021-12-23T15:35:28.220",
    "Title": "Docker and Eureka with Spring Boot failing to register clients",
    "Tags": "<java><spring><maven><docker><spring-boot>",
    "AnswerCount": "5",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44667063",
    "PostTypeId": "1",
    "AcceptedAnswerId": "44694167",
    "CreationDate": "2017-06-21T04:49:23.627",
    "Score": "6",
    "ViewCount": "14268",
    "Body": "<p>I have a very simple demo of using Spring Boot + Docker Compose + Eureka. </p>  <p>My server runs on port 8671 with the following application properties:</p>  <pre><code>server:   port: 8761 eureka:   instance:     prefer-ip-address: true   client:     registerWithEureka: false     fetchRegistry: false   server:     waitTimeInMsWhenSyncEmpty: 0 </code></pre>  <p>My Eureka client runs on port 9000 with the following application properties:</p>  <pre><code>server:   port: 9000 spring:   application:     name: user-registration eureka:   client:     registerWithEureka: true     fetchRegistry: true     serviceUrl:       defaultZone: http://localhost:8761/eureka/   instance:     prefer-ip-address: true </code></pre>  <p>When I start up my docker.compose file in the parent maven project, this is the contents of my docker-compose file:</p>  <pre><code>eureka-server:   image: rosenthal/eureka-server ports:    - '8761:8761' user-registration:   image: rosenthal/user-registration   ports:    - '9000:9000'   links:    - eureka-server </code></pre>  <p>When I run my application by first starting the eureka server, following by the client via </p>  <pre><code>mvn spring-boot:run  </code></pre>  <p>The server successfully registers my client (I call it user-registration).</p>  <p>When I run my application through docker-compose, the client fails to register with the following output:</p>  <pre><code> DiscoveryClient_USER-REGISTRATION/0fd640cbc3ba:user-registration:9000:   registering service...  user-registration_1  | 2017-06-21 04:36:05.120 ERROR 1 --- [nfoReplicator-0]          c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error  user-registration_1  |   user-registration_1  | com.sun.jersey.api.client.ClientHandlerException:   java.net.ConnectException: Connection refused (Connection refused) </code></pre>  <p>My first assumption was that running docker-compose ran into a race condition on waiting for the server to start, but my eureka client seems to have a heartbeat trying to call home to the server it's configured with. This means it's just not able to find the Eureka server I have registered (and is running, I can navigate to it on localhost:8671).</p>  <p>What am I missing here? Everything runs fine running locally with spring-boot starting up with it's own embedded tomcat containers. As soon as I start to do it with docker-compose, it doesn't want to work.</p>  <h2>EDIT</h2>  <p>I realized my problem, I believe. So docker doesn't run on localhost, it runs on the public IP it is assigned when I start up docker. Navigating to this ip + port shows my service running for Eureka Server. The client still doesn't register.</p>  <p>SO, I made changes to the application.yml file for my eureka client to:</p>  <pre><code>serviceUrl:   defaultZone: http://192.168.59.103:8761/eureka/ </code></pre>  <p>That IP is the one my docker daemon is running under. Now, it misses the first registration when I do docker-compose, but the second heartbeat picks up my client. </p>  <p>How can I ensure the client waits until the server is FULLY up? I used the proper docker 'links' field in my docket compose file, but it didn't work as I hoped. Additionally, how can I see the defaultZone file to be my DOCKER_HOST IP?</p>  <h2>Final result</h2>  <p>The resulting docker-compose file that got everything working for me was:</p>  <pre><code>eureka-server:   image: thorrism/eureka-server   ports:    - '8761:8761' user-registration:   image: thorrism/user-registration   ports:    - '9000:9000'   links:    - eureka-server   environment:     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka </code></pre> ",
    "OwnerUserId": "5203863",
    "LastEditorUserId": "5203863",
    "LastEditDate": "2017-06-21T16:52:46.653",
    "LastActivityDate": "2021-12-23T15:35:28.220",
    "Title": "Docker and Eureka with Spring Boot failing to register clients",
    "Tags": "<java><spring><maven><docker><spring-boot>",
    "AnswerCount": "5",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45063118",
    "PostTypeId": "1",
    "CreationDate": "2017-07-12T16:27:18.947",
    "Score": "6",
    "ViewCount": "1336",
    "Body": "<p>I am using <a href='https://hub.docker.com/r/heroku/java/' rel='nofollow noreferrer'>Heroku Java Docker Image</a> and <a href='https://github.com/docker/compose' rel='nofollow noreferrer'>docker-compose</a> to run dropwizard java based web service locally.</p>  <p>When I run <code>docker-compose build web</code> command to build code, It goes to download few dependencies each time. So build process turnaround time increased.</p>  <p>My project docker file is only single line : <code>FROM heroku/java</code></p>  <p>Here are build log:</p>  <pre><code>[INFO] ------------------------------------------------------------------------ [INFO] Building generator-app-server 0.0.2-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 9.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 14.7 KB/sec) [INFO]  [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 5.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 4.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 5.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 20.0 KB/sec) [INFO] Deleting /app/user/target [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ generator-app-server --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 7 resources [INFO]  [INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ generator-app-server --- Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.jar (1502 KB at 24.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom Downloaded: https://repo.maven.apache.org/maven2/org/mapstruct/mapstruct-processor/1.1.0.Final/mapstruct-processor-1.1.0.Final.pom (12 KB at 4.9 KB/sec) </code></pre>  <p><code>docker-compose build</code> not using cached dependencies for above libs. How to forcefully use cached dependencies?</p>  <p>Googled a lot but no luck. Share if anyone had faced and fixed.</p>  <p><b>Update:</b></p>  <pre><code>Dockerfile FROM heroku/java  docker-compose.yml web:   build: .   command: 'bash -c ''java $JAVA_OPTS -jar target/generator-app-server-0.0.2-SNAPSHOT.jar db migrate config.yml &amp;&amp; java $JAVA_OPTS -Ddw.server.connector.port=$PORT -jar target/generator-app-server-0.0.2-SNAPSHOT.jar server config.yml'''   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql shell:   build: .   command: bash   working_dir: /app/user   environment:     PORT: 8080     DATABASE_URL: 'postgres://postgres:@herokuPostgresql:5432/postgres'   ports:     - '8080:8080'   links:     - herokuPostgresql   volumes:     - '.:/app/user' herokuPostgresql:   image: postgres </code></pre> ",
    "OwnerUserId": "722683",
    "LastEditorUserId": "722683",
    "LastEditDate": "2017-07-12T17:11:09.837",
    "LastActivityDate": "2017-07-13T17:44:00.783",
    "Title": "docker-compose build download few pom dependencies each time",
    "Tags": "<maven><heroku><docker-compose><dockerfile><dropwizard>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45685232",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45685743",
    "CreationDate": "2017-08-15T01:20:44.837",
    "Score": "6",
    "ViewCount": "3892",
    "Body": "<p>I am new to Docker. I am using spring boot and when we build the project using maven, it will create jar file like app-.jar and then I am coping this jar file using ADD command in DockerFile. Now If I change the version number in pom.xml, then I need to manually update the JAR file name in DockerFile. Is there anyway by which I can dynamically get the version number which is in the pom.xml and update the JAR file name automatically in the DockerFile?</p> ",
    "OwnerUserId": "8441512",
    "LastActivityDate": "2017-08-15T02:37:53.053",
    "Title": "Dynamically get JAR filename in DockerFile",
    "Tags": "<maven><docker><jar><dockerfile>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "48523558",
    "PostTypeId": "1",
    "AcceptedAnswerId": "48525718",
    "CreationDate": "2018-01-30T14:16:04.850",
    "Score": "6",
    "ViewCount": "13748",
    "Body": "<p>I am having a problem starting a .jar file within a Docker Container. The error message I am getting is: </p>  <blockquote>   <p>Exception in thread 'main' java.lang.ClassNotFoundException:   ccinfw.MainApplication</p> </blockquote>  <p>I have added information below. Why am I getting this error and how can I fix it?</p>  <p>TIA</p>  <p><strong>Manifest File</strong></p>  <pre><code>Manifest-Version: 1.0 Implementation-Title: SpringBootErrorHandlingDemoy Implementation-Version: 0.0.1-SNAPSHOT Archiver-Version: Plexus Archiver Built-By: root Implementation-Vendor-Id: ccinfw Spring-Boot-Version: 1.5.4.RELEASE Implementation-Vendor: Pivotal Software, Inc. Main-Class: org.springframework.boot.loader.JarLauncher Start-Class: ccinfw.MainApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Created-By: Apache Maven 3.3.9 Build-Jdk: 1.8.0_131 Implementation-URL: http://maven.apache.org </code></pre>  <p><strong>ran jar -xvf BackEndRestFunctionality-0.0.1-SNAPSHOT.jar > expanded. Below is a portion of the output. MainApplication.class does exist in the jar file</strong></p>  <pre><code> [... snip ...]   inflated: BOOT-INF/classes/ccinfw/security/user/ApplicationUser.class  inflated: BOOT-INF/classes/ccinfw/security/security/SecurityConstants.class  inflated: BOOT-INF/classes/ccinfw/security/security/AccountCredentials.class  inflated: BOOT-INF/classes/ccinfw/security/security/WebSecurity.class  inflated: BOOT-INF/classes/ccinfw/security/security/JWTAuthenticationFilter.class  inflated: BOOT-INF/classes/ccinfw/security/security/JWTAuthorizationFilter.class  **inflated: BOOT-INF/classes/ccinfw/MainApplication.class**  inflated: BOOT-INF/classes/ccinfw/dao/MstrgenroletypeDAO.class  inflated: BOOT-INF/classes/application.properties   created: META-INF/maven/   created: META-INF/maven/ccinfw/   created: META-INF/maven/ccinfw/BackEndRestFunctionality/  inflated: META-INF/maven/ccinfw/BackEndRestFunctionality/pom.xml  inflated: META-INF/maven/ccinfw/BackEndRestFunctionality/pom.properties   created: BOOT-INF/lib/ extracted: BOOT-INF/lib/slf4j-api-1.7.25.jar  [... snip ...] </code></pre>  <p><strong>I am using the following software</strong></p>  <pre><code>jenkins-slave-one:/var/jenkins/workspace/build-cc-restapi-dev/target/docker# java -version openjdk version '1.8.0_131' OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.16.04.3-b11) OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)  jenkins-slave-one:/var/jenkins/workspace/build-cc-restapi-dev/target/docker# javac -version javac 1.8.0_131  jenkins-slave-one:/var/jenkins/workspace/build-cc-restapi-dev/target/docker# mvn -version Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T16:41:47+00:00) Maven home: /opt/maven Java version: 1.8.0_131, vendor: Oracle Corporation Java home: /usr/lib/jvm/java-8-openjdk-amd64/jre Default locale: en_US, platform encoding: UTF-8 OS name: 'linux', version: '4.4.0-87-generic', arch: 'amd64', family: 'unix' </code></pre>  <p><strong>Maven Dependencies</strong></p>  <p><a href='https://i.stack.imgur.com/MziS8.png' rel='noreferrer'><img src='https://i.stack.imgur.com/MziS8.png' alt='enter image description here'></a></p>  <p><strong>I am getting the following error message when starting it:</strong></p>  <pre><code>Exception in thread 'main' java.lang.ClassNotFoundException: ccinfw.MainApplication at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:94) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:46) at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) </code></pre>  <p><strong>the maven command executed within Jenkins</strong></p>  <pre><code>$ /opt/maven/bin/mvn -f /var/jenkins/workspace/build-cc-restapi-dev/pom.xml -Pdevelopment clean package docker:build -B </code></pre>  <p><strong>portion of pom.xml file responsible for building</strong></p>  <p></p>  <pre><code>&lt;profile&gt;     &lt;id&gt;development&lt;/id&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;test&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;run&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;configuration&gt;                             &lt;tasks&gt;                                  &lt;copy                                     file='${project.build.outputDirectory}/application.development.properties'                                     tofile='${project.build.outputDirectory}/application.properties' /&gt;                             &lt;/tasks&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;com.spotify&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                  &lt;configuration&gt;                     &lt;imageName&gt;apostx-cc-restapi-dev&lt;/imageName&gt;                      &lt;baseImage&gt;java:8&lt;/baseImage&gt;                     &lt;entryPoint&gt;['java', '-jar', '/${project.build.finalName}.jar']&lt;/entryPoint&gt;                     &lt;!-- copy the service's jar file from target into the root directory                          of the image --&gt;                     &lt;resources&gt;                         &lt;resource&gt;                             &lt;targetPath&gt;/&lt;/targetPath&gt;                             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                         &lt;/resource&gt;                     &lt;/resources&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;!-- Build an executable JAR --&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;                 &lt;!-- &lt;version&gt;2.6&lt;/version&gt; --&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;analyze&lt;/id&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;configuration&gt;                             &lt;failBuild&gt;true&lt;/failBuild&gt;                             &lt;ignoreDirect&gt;false&lt;/ignoreDirect&gt;                         &lt;/configuration&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;                 &lt;configuration&gt;                     &lt;archive&gt;                         &lt;manifest&gt;                             &lt;mainClass&gt;ccinfw.MainApplication&lt;/mainClass&gt;                         &lt;/manifest&gt;                     &lt;/archive&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/profile&gt; </code></pre>  <p><strong>the Dockerfile being accessed</strong></p>  <pre><code>FROM java:8 ADD /BackEndRestFunctionality-0.0.1-SNAPSHOT.jar // ENTRYPOINT ['java', '-jar', '/BackEndRestFunctionality-0.0.1-SNAPSHOT.jar'] ~ </code></pre>  <p><strong>Here is a part of the Jenkins log file where the Docker Image file is being built using the generated .jar file - again - the .jar file works fine when ran on its own</strong></p>  <pre><code>[INFO] Copying /var/jenkins/workspace/build-cc-restapi-dev/target/BackEndRestFunctionality-0.0.1-SNAPSHOT.jar -&gt; /var/jenkins/workspace/build-cc-restapi-dev/target/docker/BackEndRestFunctionality-0.0.1-SNAPSHOT.jar [INFO] Building image apostx-cc-restapi-dev Step 1/3 : FROM java:8  ---&gt; d23bdf5b1b1b Step 2/3 : ADD /BackEndRestFunctionality-0.0.1-SNAPSHOT.jar //  ---&gt; abfcb05b4173 Removing intermediate container f573f737009a Step 3/3 : ENTRYPOINT java -jar /BackEndRestFunctionality-0.0.1-SNAPSHOT.jar  ---&gt; Running in 28bb20467e70  ---&gt; 2ffb803f96dc Removing intermediate container 28bb20467e70 ProgressMessage{id=null, status=null, stream=null, error=null, progress=null, progressDetail=null} Successfully built 2ffb803f96dc Successfully tagged apostx-cc-restapi-dev:latest [INFO] Built apostx-cc-restapi-dev [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 30.181 s [INFO] Finished at: 2018-01-30T06:18:18+00:00 [INFO] Final Memory: 36M/95M [INFO] ------------------------------------------------------------------------ </code></pre>  <p><strong>Docker Image Layers</strong></p>  <pre><code>351.5 MB     RUN set -x &amp;&amp; apt-get update &amp;&amp; apt-get install -y openjdk-8-jdk='$JAVA_DEBIAN_VERSION' ca-certificates-java='$CA_CERTIFICATES_JAVA_VERSION' &amp;&amp; rm -rf /var/lib/apt/lists/* &amp;&amp; [ '$JAVA_HOME' = '$(docker-java-home)' ] 123 MB   ADD file:89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da957 in / 122.6 MB     RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends bzr git mercurial openssh-client subversion procps &amp;&amp; rm -rf /var/lib/apt/lists/* 44.3 MB      RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates curl wget &amp;&amp; rm -rf /var/lib/apt/lists/* 32.9 MB      ADD file:565dae161b3b516b50d596648650278591d96fe820e36a3eeef0ee7c33d7915d in // 1.3 MB   RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends bzip2 unzip xz-utils &amp;&amp; rm -rf /var/lib/apt/lists/* 418.5 kB     RUN /var/lib/dpkg/info/ca-certificates-java.postinst configure 87 B     RUN { echo '#!/bin/sh'; echo 'set -e'; echo; echo 'dirname '$(dirname '$(readlink -f '$(which javac || which java)')')''; } &gt; /usr/local/bin/docker-java-home &amp;&amp; chmod +x /usr/local/bin/docker-java-home 55 B     RUN echo 'deb http://deb.debian.org/debian jessie-backports main' &gt; /etc/apt/sources.list.d/jessie-backports.list 0 B      CMD ['/bin/bash'] 0 B      ENV LANG=C.UTF-8 0 B      ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 0 B      ENV JAVA_VERSION=8u111 0 B      ENV JAVA_DEBIAN_VERSION=8u111-b14-2~bpo8+1 0 B      ENV CA_CERTIFICATES_JAVA_VERSION=20140324 0 B      ENTRYPOINT ['java' '-jar' '/BackEndRestFunctionality-0.0.1-SNAPSHOT.jar']  </code></pre> ",
    "OwnerUserId": "2707727",
    "LastEditorUserId": "2707727",
    "LastEditDate": "2018-01-30T14:40:28.553",
    "LastActivityDate": "2023-02-02T20:55:25.743",
    "Title": "getting a java.lang.ClassNotFoundException when starting a Docker container",
    "Tags": "<java><maven><docker>",
    "AnswerCount": "4",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "51540952",
    "PostTypeId": "1",
    "CreationDate": "2018-07-26T14:12:25.923",
    "Score": "6",
    "ViewCount": "1492",
    "Body": "<p>I have a problem accessing <strong>parent.parent.version</strong> from grandchild pom.</p>  <p>Here is the exact description of the problem:</p>  <p>Parent pom:</p>  <pre><code>&lt;groupId&gt;com.parent&lt;/groupId&gt; &lt;artifactId&gt;parent&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;1.6-SNAPSHOT&lt;/version&gt; . . . &lt;properties&gt;     &lt;child.version&gt;1.3-SNAPSHOT&lt;/child.version&gt; &lt;/properties&gt; </code></pre>  <p>Child pom:</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;com.parent&lt;/groupId&gt;     &lt;artifactId&gt;parent&lt;/artifactId&gt;     &lt;version&gt;1.6-SNAPSHOT&lt;/version&gt; &lt;/parent&gt;  &lt;groupId&gt;com.child&lt;/groupId&gt; &lt;artifactId&gt;child&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;${child.version}&lt;/version&gt; </code></pre>  <p>GrandChild pom:</p>  <pre><code>&lt;parent&gt;     &lt;groupId&gt;com.child&lt;/groupId&gt;     &lt;artifactId&gt;child&lt;/artifactId&gt;     &lt;version&gt;${child.version}&lt;/version&gt; &lt;/parent&gt;  &lt;groupId&gt;com.grandchild&lt;/groupId&gt; &lt;artifactId&gt;grandchild&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;${project.parent.version}&lt;/version&gt; . . . &lt;profiles&gt; &lt;plugin&gt;    &lt;groupId&gt;com.spotify&lt;/groupId&gt;    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;    &lt;version&gt;1.0.0&lt;/version&gt;    &lt;configuration&gt;       &lt;imageName&gt;artifactory:6001/${project.name}:${parent.parent.version}&lt;/imageName&gt;       &lt;serverId&gt;docker&lt;/serverId&gt;       &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;       &lt;resources&gt;          &lt;resource&gt;             &lt;targetPath&gt;/&lt;/targetPath&gt;             &lt;directory&gt;${project.build.directory}&lt;/directory&gt;             &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;          &lt;/resource&gt;       &lt;/resources&gt;    &lt;/configuration&gt;    &lt;executions&gt;       &lt;execution&gt;          &lt;phase&gt;package&lt;/phase&gt;          &lt;goals&gt;             &lt;goal&gt;build&lt;/goal&gt;          &lt;/goals&gt;       &lt;/execution&gt;    &lt;/executions&gt; &lt;/plugin&gt; &lt;/profile&gt; </code></pre>  <p>Whenever I build this project, I get below exception:</p>  <blockquote>   <p>Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (default) on project grandchild: Exception caught: The template variable 'parent.parent.version' has no value -> [Help 1]</p> </blockquote>  <p>How do I get parent.parent.version(main project version) from grandchild pom. <br/><strong>Docker version should be same as main project version. Thats the goal for me!!!</strong></p> ",
    "OwnerUserId": "5270186",
    "LastActivityDate": "2018-07-26T14:12:25.923",
    "Title": "Maven 3: Accessing parent.parent.version from grandchild pom",
    "Tags": "<java><maven><pom.xml><parent-pom><docker-maven-plugin>",
    "AnswerCount": "0",
    "CommentCount": "2",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "51801388",
    "PostTypeId": "1",
    "CreationDate": "2018-08-11T15:54:50.953",
    "Score": "6",
    "ViewCount": "1760",
    "Body": "<p>I have a <code>maven</code> <code>spring-boot</code> project deployed on appengine that I am building and deploying using Google Cloud Build using the following builder image: <a href='https://github.com/strudeau/mvn-gcloud-builder' rel='nofollow noreferrer'>https://github.com/strudeau/mvn-gcloud-builder</a></p>  <p>When performing a build, most of the time is spent downloading the plugins and dependencies from maven. I would like to be able to mount a persistent volume to this Docker image so as to be able to keep a persistent <code>.M2</code> directory where my plugins and dependencies would be stored to avoid having them downloaded each time I do a build.</p>  <p><code>Google Cloud Filestore</code> would probably be ideal if it weren't for the fact that you have to provision 1TB of data or more which becomes ridiculously expensive for a small non-production profit project.</p>  <ul> <li>Is there a way to mount a bucket as a filesystem on the docker image?</li> <li>Can I mount a <code>Google Persistent Disk</code>?</li> </ul> ",
    "OwnerUserId": "7182586",
    "LastEditorUserId": "8304665",
    "LastEditDate": "2019-08-01T16:11:33.133",
    "LastActivityDate": "2019-08-01T16:11:33.133",
    "Title": "How to connect persistent storage to Google Cloud Build?",
    "Tags": "<maven><docker><google-cloud-storage><google-cloud-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52892488",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52942964",
    "CreationDate": "2018-10-19T12:37:00.097",
    "Score": "6",
    "ViewCount": "2290",
    "Body": "<p>I'm trying to build/deploy a spring boot in a docker container.</p>  <pre><code>FROM maven:3.5.3-jdk-8-slim AS build COPY ./pom.xml /app/pom.xml RUN cd /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:go-offline dependency:resolve-plugins -B COPY . /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml --batch-mode package -DskipTests </code></pre>  <p>As you can see, I'm caching all dependencies with the first mvn command so that every change in my code app will not trigger a new bulk of dependencies downloads. It works for most of the dependencies but some are still downloaded (even if cached). This is the log of the second mvn command (package):</p>  <pre><code>[INFO] Scanning for projects... [INFO]  [INFO] ----------------------&lt; xxx:xxx &gt;---------------------- [INFO] Building xxxx 0.0.0 [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- apt-maven-plugin:1.1.3:process (default) @ vsol-java --- [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar ... </code></pre>  <p>(BTW, the (0 B at 0 B/s) is a little bit strange...just a check?)</p>  <p>If I launch a container based on the step after the first maven command (mvn dependency:...) (the one that should cached all dependencies) </p>  <pre><code>root@3281a837a236:/usr/share/maven/ref/repository# ls -lh org/codehaus/plexus/plexus-utils/1.5.15 total 244K -rw-r--r-- 1 root root  202 Oct 19 12:07 _remote.repositories -rw-r--r-- 1 root root 223K Oct 19 12:07 plexus-utils-1.5.15.jar -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.jar.sha1 -rw-r--r-- 1 root root 6.7K Oct 19 12:07 plexus-utils-1.5.15.pom -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.pom.sha1 </code></pre>  <p>The lib seems to be there but, I can see this in the log from mvn package:</p>  <p>[INFO] Downloading from spring-releases: <a href='https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar' rel='noreferrer'>https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar</a></p>  <p>If I run mvn package in offline mode, it fails because it can't reach <a href='https://repo.spring.io/libs-release' rel='noreferrer'>https://repo.spring.io/libs-release</a>.</p>  <p>So it looks like it is cached but maven still try to download this file. I've tried this in my pom.xml</p>  <pre><code>        &lt;pluginRepository&gt;             &lt;id&gt;spring-releases&lt;/id&gt;             &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/snapshots&gt;             &lt;releases&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/releases&gt;         &lt;/pluginRepository&gt; </code></pre>  <p>But no effect.</p>  <p>Any idea? Thanks!</p> ",
    "OwnerUserId": "2813807",
    "LastEditorUserId": "2813807",
    "LastEditDate": "2018-10-19T12:43:47.393",
    "LastActivityDate": "2018-10-23T06:59:56.110",
    "Title": "Maven/Docker: cache all dependencies",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52892488",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52942964",
    "CreationDate": "2018-10-19T12:37:00.097",
    "Score": "6",
    "ViewCount": "2290",
    "Body": "<p>I'm trying to build/deploy a spring boot in a docker container.</p>  <pre><code>FROM maven:3.5.3-jdk-8-slim AS build COPY ./pom.xml /app/pom.xml RUN cd /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:go-offline dependency:resolve-plugins -B COPY . /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml --batch-mode package -DskipTests </code></pre>  <p>As you can see, I'm caching all dependencies with the first mvn command so that every change in my code app will not trigger a new bulk of dependencies downloads. It works for most of the dependencies but some are still downloaded (even if cached). This is the log of the second mvn command (package):</p>  <pre><code>[INFO] Scanning for projects... [INFO]  [INFO] ----------------------&lt; xxx:xxx &gt;---------------------- [INFO] Building xxxx 0.0.0 [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- apt-maven-plugin:1.1.3:process (default) @ vsol-java --- [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar ... </code></pre>  <p>(BTW, the (0 B at 0 B/s) is a little bit strange...just a check?)</p>  <p>If I launch a container based on the step after the first maven command (mvn dependency:...) (the one that should cached all dependencies) </p>  <pre><code>root@3281a837a236:/usr/share/maven/ref/repository# ls -lh org/codehaus/plexus/plexus-utils/1.5.15 total 244K -rw-r--r-- 1 root root  202 Oct 19 12:07 _remote.repositories -rw-r--r-- 1 root root 223K Oct 19 12:07 plexus-utils-1.5.15.jar -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.jar.sha1 -rw-r--r-- 1 root root 6.7K Oct 19 12:07 plexus-utils-1.5.15.pom -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.pom.sha1 </code></pre>  <p>The lib seems to be there but, I can see this in the log from mvn package:</p>  <p>[INFO] Downloading from spring-releases: <a href='https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar' rel='noreferrer'>https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar</a></p>  <p>If I run mvn package in offline mode, it fails because it can't reach <a href='https://repo.spring.io/libs-release' rel='noreferrer'>https://repo.spring.io/libs-release</a>.</p>  <p>So it looks like it is cached but maven still try to download this file. I've tried this in my pom.xml</p>  <pre><code>        &lt;pluginRepository&gt;             &lt;id&gt;spring-releases&lt;/id&gt;             &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/snapshots&gt;             &lt;releases&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/releases&gt;         &lt;/pluginRepository&gt; </code></pre>  <p>But no effect.</p>  <p>Any idea? Thanks!</p> ",
    "OwnerUserId": "2813807",
    "LastEditorUserId": "2813807",
    "LastEditDate": "2018-10-19T12:43:47.393",
    "LastActivityDate": "2018-10-23T06:59:56.110",
    "Title": "Maven/Docker: cache all dependencies",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52892488",
    "PostTypeId": "1",
    "AcceptedAnswerId": "52942964",
    "CreationDate": "2018-10-19T12:37:00.097",
    "Score": "6",
    "ViewCount": "2290",
    "Body": "<p>I'm trying to build/deploy a spring boot in a docker container.</p>  <pre><code>FROM maven:3.5.3-jdk-8-slim AS build COPY ./pom.xml /app/pom.xml RUN cd /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:go-offline dependency:resolve-plugins -B COPY . /app RUN mvn -f /app/pom.xml -s /usr/share/maven/ref/settings-docker.xml --batch-mode package -DskipTests </code></pre>  <p>As you can see, I'm caching all dependencies with the first mvn command so that every change in my code app will not trigger a new bulk of dependencies downloads. It works for most of the dependencies but some are still downloaded (even if cached). This is the log of the second mvn command (package):</p>  <pre><code>[INFO] Scanning for projects... [INFO]  [INFO] ----------------------&lt; xxx:xxx &gt;---------------------- [INFO] Building xxxx 0.0.0 [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- apt-maven-plugin:1.1.3:process (default) @ vsol-java --- [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom [INFO] Downloaded from spring-releases: https://repo.spring.io/libs-release/org/apache/commons/commons-parent/3/commons-parent-3.pom (0 B at 0 B/s) [INFO] Downloading from spring-releases: https://repo.spring.io/libs-release/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar ... </code></pre>  <p>(BTW, the (0 B at 0 B/s) is a little bit strange...just a check?)</p>  <p>If I launch a container based on the step after the first maven command (mvn dependency:...) (the one that should cached all dependencies) </p>  <pre><code>root@3281a837a236:/usr/share/maven/ref/repository# ls -lh org/codehaus/plexus/plexus-utils/1.5.15 total 244K -rw-r--r-- 1 root root  202 Oct 19 12:07 _remote.repositories -rw-r--r-- 1 root root 223K Oct 19 12:07 plexus-utils-1.5.15.jar -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.jar.sha1 -rw-r--r-- 1 root root 6.7K Oct 19 12:07 plexus-utils-1.5.15.pom -rw-r--r-- 1 root root   40 Oct 19 12:07 plexus-utils-1.5.15.pom.sha1 </code></pre>  <p>The lib seems to be there but, I can see this in the log from mvn package:</p>  <p>[INFO] Downloading from spring-releases: <a href='https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar' rel='noreferrer'>https://repo.spring.io/libs-release/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar</a></p>  <p>If I run mvn package in offline mode, it fails because it can't reach <a href='https://repo.spring.io/libs-release' rel='noreferrer'>https://repo.spring.io/libs-release</a>.</p>  <p>So it looks like it is cached but maven still try to download this file. I've tried this in my pom.xml</p>  <pre><code>        &lt;pluginRepository&gt;             &lt;id&gt;spring-releases&lt;/id&gt;             &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;             &lt;snapshots&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/snapshots&gt;             &lt;releases&gt;                 &lt;enabled&gt;true&lt;/enabled&gt;                 &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;             &lt;/releases&gt;         &lt;/pluginRepository&gt; </code></pre>  <p>But no effect.</p>  <p>Any idea? Thanks!</p> ",
    "OwnerUserId": "2813807",
    "LastEditorUserId": "2813807",
    "LastEditDate": "2018-10-19T12:43:47.393",
    "LastActivityDate": "2018-10-23T06:59:56.110",
    "Title": "Maven/Docker: cache all dependencies",
    "Tags": "<maven><docker><spring-boot>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "55956323",
    "PostTypeId": "1",
    "CreationDate": "2019-05-02T16:06:09.590",
    "Score": "6",
    "ViewCount": "6646",
    "Body": "<p>How does the config file provider plugin work?</p>  <p>I have a Jenkinsfile for a declarative pipeline (multi-branch build) that contains:</p>  <pre><code>configFileProvider([configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {     sh 'mvn -B -s $MAVEN_SETTINGS -DWHERE='$WHERE' deploy' } </code></pre>  <p>I have tried running this on two different Jenkins installations one which is installed directly and runs as daemon and another running as a container (jenkinsci/blueocean).</p>  <p>When run on the direct the Jenkins Config File Provider plugin is able to provide the required settings.</p>  <pre><code>provisioning config files... copy managed file [Maven settings] to file:/var/lib/jenkins/workspace/redacted@tmp/config8989354118161621860tmp </code></pre>  <p>When run under the jenkinsci/blueocean container it fails with:</p>  <pre><code>provisioning config files... not able to provide the file [ManagedFile: id=maven-settings, targetLocation=null, variable=MAVEN_SETTINGS], can't be resolved by any provider - maybe it got deleted by an administrator </code></pre>  <p>I have created a managed maven-settings.xml file with id maven-settings for blue/ocean but it is not being picked up. I've also tried copying it to ~/.m2/settings.xml</p>  <p>By contrast the working installation does not have any managed files (settings.xml or otherwise) and I am unable to locate any maven settings file in the workspace. I'm not sure what the @tmp directory is. It is deleted by the time a build finishes.</p>  <p>So my question is:</p>  <p><strong>Where should I put the settings to make the configFileProvider pass them on for the jenkinsci/blueocean build job?</strong> </p>  <p>How does the config file provider plugin work?</p>  <p>I have no idea what its doing so its hard to debug. The source is <a href='https://github.com/jenkinsci/config-file-provider-plugin' rel='nofollow noreferrer'>here</a> but Java, Maven &amp; Jenkins are not my main area.</p>  <p>What differences are there when Jenkins itself run as a container?</p>  <p><a href='https://stackoverflow.com/a/43796714/1569204'>This answer</a> suggests the the config file provider is unnecessary.</p>  <p>There is a <a href='https://stackoverflow.com/questions/41110028/how-do-you-provide-a-managed-file-to-a-jenkins-build-using-docker-image'>similar question</a> which is unanswered but it relates to a maven plugin.</p> ",
    "OwnerUserId": "1569204",
    "LastEditorUserId": "1569204",
    "LastEditDate": "2019-05-14T15:12:47.327",
    "LastActivityDate": "2022-06-29T13:51:44.290",
    "Title": "How does the Jenkins config file provider plugin work?",
    "Tags": "<maven><docker><jenkins>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57198251",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57199247",
    "CreationDate": "2019-07-25T09:09:08.607",
    "Score": "6",
    "ViewCount": "8780",
    "Body": "<p>i am trying to create a docket container with Java,Maven and Tomcat. </p>  <p>So far, i'm able to create a container with Maven and compile my java code and create the final WAR file.</p>  <p>But i want to <strong>copy this WAR file to a particular folder</strong>(webapp folder of tomcat) of another container which is of Tomcat.</p>  <p>Approach one, Dockerfile</p>  <pre><code>FROM maven:3.6.1-jdk-8 as maven_builder  ENV HOME=/app  WORKDIR $HOME  ADD pom.xml $HOME  RUN ['/usr/local/bin/mvn-entrypoint.sh', 'mvn', 'verify', 'clean', '--fail-never']  ADD . $HOME  RUN ['mvn','clean','install','-T','2C','-DskipTests=true']  FROM tomcat:8.5.43-jdk8  COPY --from=maven_builder $HOME/wc_admin/target/wc-admin.war /usr/local/tomcat/webapps </code></pre>  <p>i tried to simply copy it, but the intermediate container is deleted before copying.</p>  <p>Approach 2,  i am trying to write a YAML for docker-compose and use shared volume concept.</p>  <pre><code>version: '3' services:     maven-build:         build: .         volumes:             - 'myshare:/shared'      tomcat-build:         image: 'tomcat:8.5.43-jdk8'         ports:             - '8080:8080'         volumes:             - 'myshare:/shared'  volumes:   myshare:     driver: local ' </code></pre>  <p>i'm not able to figure out, how do i copy a particular file from one container(i.e maven_build) to another container (i.e tomcat's webapp folder).</p> ",
    "OwnerUserId": "8287269",
    "LastActivityDate": "2019-07-25T09:59:53.253",
    "Title": "Docker with Maven and Tomcat",
    "Tags": "<java><maven><docker><tomcat>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57366246",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57366462",
    "CreationDate": "2019-08-05T21:22:24.043",
    "Score": "6",
    "ViewCount": "5998",
    "Body": "<p>I\u2019m trying to build a Docker image from my DockerFile but  keep getting an error like it can't find the parent <code>pom.xml</code> to perform a maven command in the docker file and build the project. Ive been looking around and you see what people do is the add to the child <code>pom.xml</code> a reference to the parent pom.xml y tried adding a <code>relativePath&gt;.. /pom.xml/relativePath&gt;</code> to the child but still won't work.</p>  <h2>Maven-multimodule project</h2>  <p>[<img src='https://i.stack.imgur.com/koK4I.png' alt='project structure[1]'></p>  <h2>DockerFile</h2>  <pre><code>FROM alpine/git as clone WORKDIR /app RUN git clone https://github.com/RicardoVargasLeslie/manager.git  FROM openjdk:8-jdk-alpine as build WORKDIR /workspace/app  COPY mvnw . COPY .mvn .mvn COPY pom.xml . COPY src src  RUN ./mvnw install -DskipTests  ENTRYPOINT ['java','-jar','/Web-0.0.1-SNAPSHOT.jar'] </code></pre>  <h2>Child-pom.xml(Web)</h2>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;         &lt;artifactId&gt;core&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;         &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;     &lt;/parent&gt;     &lt;artifactId&gt;Web&lt;/artifactId&gt;     &lt;name&gt;Web&lt;/name&gt;     &lt;description&gt;Web Module&lt;/description&gt; </code></pre>  <h2>Parent-pom.xml(Core)</h2>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;     &lt;artifactId&gt;core&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;Core&lt;/name&gt;     &lt;description&gt;Core Module&lt;/description&gt;     &lt;packaging&gt;pom&lt;/packaging&gt; </code></pre>  <h3>Docker comand to build image</h3>  <pre><code>docker build -t rest-api . </code></pre>  <h2>Comand-line Trace</h2>  <pre><code>$ docker build -t rest-api . Sending build context to Docker daemon  42.92MB Step 1/11 : FROM alpine/git as clone  ---&gt; a1d22e4b51ad Step 2/11 : WORKDIR /app  ---&gt; Using cache  ---&gt; e53f5b4941b5 Step 3/11 : RUN git clone https://github.com/RicardoVargasLeslie/manager.git  ---&gt; Using cache  ---&gt; 490b2afea22c Step 4/11 : FROM openjdk:8-jdk-alpine as build  ---&gt; a3562aa0b991 Step 5/11 : WORKDIR /workspace/app  ---&gt; Using cache  ---&gt; 0b7c106319e9 Step 6/11 : COPY mvnw .  ---&gt; Using cache  ---&gt; 2c7ab0b79d25 Step 7/11 : COPY .mvn .mvn  ---&gt; Using cache  ---&gt; eb9ec36b737a Step 8/11 : COPY pom.xml .  ---&gt; Using cache  ---&gt; 2296a5fbd6ae Step 9/11 : COPY src src  ---&gt; Using cache  ---&gt; 022a609f4376 Step 10/11 : RUN ./mvnw install -DskipTests  ---&gt; Running in 897cff2e3c3b [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10  @ [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR] [ERROR]   The project com.imricki.manager:Web:[unknown-version] (/workspace/app/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10 -&gt; [Help 2] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException The command '/bin/sh -c ./mvnw install -DskipTests' returned a non-zero code: 1 </code></pre>  <p>I\u2019m  not sure what wron or how to make the build work,thanks for any help.</p> ",
    "OwnerUserId": "4814583",
    "LastActivityDate": "2023-07-04T07:32:10.747",
    "Title": "Non-resolvable parent POM on Docker Build",
    "Tags": "<java><maven><spring-boot><docker><pom.xml>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57366246",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57366462",
    "CreationDate": "2019-08-05T21:22:24.043",
    "Score": "6",
    "ViewCount": "5998",
    "Body": "<p>I\u2019m trying to build a Docker image from my DockerFile but  keep getting an error like it can't find the parent <code>pom.xml</code> to perform a maven command in the docker file and build the project. Ive been looking around and you see what people do is the add to the child <code>pom.xml</code> a reference to the parent pom.xml y tried adding a <code>relativePath&gt;.. /pom.xml/relativePath&gt;</code> to the child but still won't work.</p>  <h2>Maven-multimodule project</h2>  <p>[<img src='https://i.stack.imgur.com/koK4I.png' alt='project structure[1]'></p>  <h2>DockerFile</h2>  <pre><code>FROM alpine/git as clone WORKDIR /app RUN git clone https://github.com/RicardoVargasLeslie/manager.git  FROM openjdk:8-jdk-alpine as build WORKDIR /workspace/app  COPY mvnw . COPY .mvn .mvn COPY pom.xml . COPY src src  RUN ./mvnw install -DskipTests  ENTRYPOINT ['java','-jar','/Web-0.0.1-SNAPSHOT.jar'] </code></pre>  <h2>Child-pom.xml(Web)</h2>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;         &lt;artifactId&gt;core&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;         &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;     &lt;/parent&gt;     &lt;artifactId&gt;Web&lt;/artifactId&gt;     &lt;name&gt;Web&lt;/name&gt;     &lt;description&gt;Web Module&lt;/description&gt; </code></pre>  <h2>Parent-pom.xml(Core)</h2>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;     &lt;artifactId&gt;core&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;Core&lt;/name&gt;     &lt;description&gt;Core Module&lt;/description&gt;     &lt;packaging&gt;pom&lt;/packaging&gt; </code></pre>  <h3>Docker comand to build image</h3>  <pre><code>docker build -t rest-api . </code></pre>  <h2>Comand-line Trace</h2>  <pre><code>$ docker build -t rest-api . Sending build context to Docker daemon  42.92MB Step 1/11 : FROM alpine/git as clone  ---&gt; a1d22e4b51ad Step 2/11 : WORKDIR /app  ---&gt; Using cache  ---&gt; e53f5b4941b5 Step 3/11 : RUN git clone https://github.com/RicardoVargasLeslie/manager.git  ---&gt; Using cache  ---&gt; 490b2afea22c Step 4/11 : FROM openjdk:8-jdk-alpine as build  ---&gt; a3562aa0b991 Step 5/11 : WORKDIR /workspace/app  ---&gt; Using cache  ---&gt; 0b7c106319e9 Step 6/11 : COPY mvnw .  ---&gt; Using cache  ---&gt; 2c7ab0b79d25 Step 7/11 : COPY .mvn .mvn  ---&gt; Using cache  ---&gt; eb9ec36b737a Step 8/11 : COPY pom.xml .  ---&gt; Using cache  ---&gt; 2296a5fbd6ae Step 9/11 : COPY src src  ---&gt; Using cache  ---&gt; 022a609f4376 Step 10/11 : RUN ./mvnw install -DskipTests  ---&gt; Running in 897cff2e3c3b [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10  @ [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR] [ERROR]   The project com.imricki.manager:Web:[unknown-version] (/workspace/app/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10 -&gt; [Help 2] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException The command '/bin/sh -c ./mvnw install -DskipTests' returned a non-zero code: 1 </code></pre>  <p>I\u2019m  not sure what wron or how to make the build work,thanks for any help.</p> ",
    "OwnerUserId": "4814583",
    "LastActivityDate": "2023-07-04T07:32:10.747",
    "Title": "Non-resolvable parent POM on Docker Build",
    "Tags": "<java><maven><spring-boot><docker><pom.xml>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57366246",
    "PostTypeId": "1",
    "AcceptedAnswerId": "57366462",
    "CreationDate": "2019-08-05T21:22:24.043",
    "Score": "6",
    "ViewCount": "5998",
    "Body": "<p>I\u2019m trying to build a Docker image from my DockerFile but  keep getting an error like it can't find the parent <code>pom.xml</code> to perform a maven command in the docker file and build the project. Ive been looking around and you see what people do is the add to the child <code>pom.xml</code> a reference to the parent pom.xml y tried adding a <code>relativePath&gt;.. /pom.xml/relativePath&gt;</code> to the child but still won't work.</p>  <h2>Maven-multimodule project</h2>  <p>[<img src='https://i.stack.imgur.com/koK4I.png' alt='project structure[1]'></p>  <h2>DockerFile</h2>  <pre><code>FROM alpine/git as clone WORKDIR /app RUN git clone https://github.com/RicardoVargasLeslie/manager.git  FROM openjdk:8-jdk-alpine as build WORKDIR /workspace/app  COPY mvnw . COPY .mvn .mvn COPY pom.xml . COPY src src  RUN ./mvnw install -DskipTests  ENTRYPOINT ['java','-jar','/Web-0.0.1-SNAPSHOT.jar'] </code></pre>  <h2>Child-pom.xml(Web)</h2>  <pre><code>&lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;         &lt;artifactId&gt;core&lt;/artifactId&gt;         &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;         &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;     &lt;/parent&gt;     &lt;artifactId&gt;Web&lt;/artifactId&gt;     &lt;name&gt;Web&lt;/name&gt;     &lt;description&gt;Web Module&lt;/description&gt; </code></pre>  <h2>Parent-pom.xml(Core)</h2>  <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0'     xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;         &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;     &lt;groupId&gt;com.imricki.manager&lt;/groupId&gt;     &lt;artifactId&gt;core&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;name&gt;Core&lt;/name&gt;     &lt;description&gt;Core Module&lt;/description&gt;     &lt;packaging&gt;pom&lt;/packaging&gt; </code></pre>  <h3>Docker comand to build image</h3>  <pre><code>docker build -t rest-api . </code></pre>  <h2>Comand-line Trace</h2>  <pre><code>$ docker build -t rest-api . Sending build context to Docker daemon  42.92MB Step 1/11 : FROM alpine/git as clone  ---&gt; a1d22e4b51ad Step 2/11 : WORKDIR /app  ---&gt; Using cache  ---&gt; e53f5b4941b5 Step 3/11 : RUN git clone https://github.com/RicardoVargasLeslie/manager.git  ---&gt; Using cache  ---&gt; 490b2afea22c Step 4/11 : FROM openjdk:8-jdk-alpine as build  ---&gt; a3562aa0b991 Step 5/11 : WORKDIR /workspace/app  ---&gt; Using cache  ---&gt; 0b7c106319e9 Step 6/11 : COPY mvnw .  ---&gt; Using cache  ---&gt; 2c7ab0b79d25 Step 7/11 : COPY .mvn .mvn  ---&gt; Using cache  ---&gt; eb9ec36b737a Step 8/11 : COPY pom.xml .  ---&gt; Using cache  ---&gt; 2296a5fbd6ae Step 9/11 : COPY src src  ---&gt; Using cache  ---&gt; 022a609f4376 Step 10/11 : RUN ./mvnw install -DskipTests  ---&gt; Running in 897cff2e3c3b [INFO] Scanning for projects... [ERROR] [ERROR] Some problems were encountered while processing the POMs: [FATAL] Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10  @ [ERROR] The build could not read 1 project -&gt; [Help 1] [ERROR] [ERROR]   The project com.imricki.manager:Web:[unknown-version] (/workspace/app/pom.xml) has 1 error [ERROR]     Non-resolvable parent POM for com.imricki.manager:Web:[unknown-version]: Could not find artifact com.imricki.manager:core:pom:0.0.1-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 5, column 10 -&gt; [Help 2] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException The command '/bin/sh -c ./mvnw install -DskipTests' returned a non-zero code: 1 </code></pre>  <p>I\u2019m  not sure what wron or how to make the build work,thanks for any help.</p> ",
    "OwnerUserId": "4814583",
    "LastActivityDate": "2023-07-04T07:32:10.747",
    "Title": "Non-resolvable parent POM on Docker Build",
    "Tags": "<java><maven><spring-boot><docker><pom.xml>",
    "AnswerCount": "2",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63433361",
    "PostTypeId": "1",
    "CreationDate": "2020-08-16T05:06:51.137",
    "Score": "6",
    "ViewCount": "3549",
    "Body": "<p>I made a Java project which uses an own library, which is installed in my local m2 repository. Now, I'm trying to create a Docker image that generates the jar in a build stage. It fails because it can't resolve dependencies for project of my own library. Is there any way to tell maven (from container) to use my local m2 repository (outside container) so it could resolve my library dependency when I run <code>mvn package</code>?</p> ",
    "OwnerUserId": "6716090",
    "LastActivityDate": "2023-02-13T12:04:27.693",
    "Title": "Use local m2 repository in docker build stage",
    "Tags": "<java><docker><maven><dependencies>",
    "AnswerCount": "2",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63492180",
    "PostTypeId": "1",
    "CreationDate": "2020-08-19T17:33:30.387",
    "Score": "6",
    "ViewCount": "1459",
    "Body": "<p>I am trying to build a docker image for my basic Spring Boot application using the spring-boot-maven-plugin:build-image goal.</p> <p>It fails with the below error:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: **Docker API call to 'localhost/v1.24/containers/eaaba1e2a727547ae53df3c1f7c4420ba821914b4392ea12ff47326ee03eeaa5/start' failed with status code 400 &quot;Bad Request&quot;** -&gt; [Help 1] </code></pre> <p>I have tried with both <strong>Spring Boot 2.3.3.RELEASE</strong> as well as <strong>2.4.0-M2</strong> and I get the same error.</p> <p>I have Docker Desktop running on a Windows 10 machine.</p> <p><code>$ docker version</code></p> <pre><code>**Client: Docker Engine - Community  Version:           19.03.12  API version:       1.40**  Go version:        go1.13.10  Git commit:        48a66213fe  Built:             Mon Jun 22 15:43:18 2020  OS/Arch:           windows/amd64  Experimental:      false  **Server: Docker Engine - Community  Engine:   Version:          19.03.12   API version:      1.40 (minimum version 1.12)**   Go version:       go1.13.10   Git commit:       48a66213fe   Built:            Mon Jun 22 15:49:27 2020   OS/Arch:          linux/amd64   Experimental:     false  containerd:   Version:          v1.2.13   GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429  runc:   Version:          1.0.0-rc10   GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd  docker-init:   Version:          0.18.0   GitCommit:        fec3683 </code></pre> <p>Full stack trace:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot; -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.springframework.boot.buildpack.platform.docker.transport.DockerEngineException: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:136)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ContainerApi.start (DockerApi.java:264)     at org.springframework.boot.buildpack.platform.build.Lifecycle.run (Lifecycle.java:148)     at org.springframework.boot.buildpack.platform.build.Lifecycle.execute (Lifecycle.java:113)     at org.springframework.boot.buildpack.platform.build.Builder.executeLifecycle (Builder.java:133)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:72)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:152)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:144)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) </code></pre> ",
    "OwnerUserId": "11447153",
    "LastEditorUserId": "3630528",
    "LastEditDate": "2020-08-19T20:34:08.647",
    "LastActivityDate": "2020-08-19T22:25:05.167",
    "Title": "spring-boot-maven-plugin:build-image fails with 400 Bad Request",
    "Tags": "<spring-boot><docker><maven>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63492180",
    "PostTypeId": "1",
    "CreationDate": "2020-08-19T17:33:30.387",
    "Score": "6",
    "ViewCount": "1459",
    "Body": "<p>I am trying to build a docker image for my basic Spring Boot application using the spring-boot-maven-plugin:build-image goal.</p> <p>It fails with the below error:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: **Docker API call to 'localhost/v1.24/containers/eaaba1e2a727547ae53df3c1f7c4420ba821914b4392ea12ff47326ee03eeaa5/start' failed with status code 400 &quot;Bad Request&quot;** -&gt; [Help 1] </code></pre> <p>I have tried with both <strong>Spring Boot 2.3.3.RELEASE</strong> as well as <strong>2.4.0-M2</strong> and I get the same error.</p> <p>I have Docker Desktop running on a Windows 10 machine.</p> <p><code>$ docker version</code></p> <pre><code>**Client: Docker Engine - Community  Version:           19.03.12  API version:       1.40**  Go version:        go1.13.10  Git commit:        48a66213fe  Built:             Mon Jun 22 15:43:18 2020  OS/Arch:           windows/amd64  Experimental:      false  **Server: Docker Engine - Community  Engine:   Version:          19.03.12   API version:      1.40 (minimum version 1.12)**   Go version:       go1.13.10   Git commit:       48a66213fe   Built:            Mon Jun 22 15:49:27 2020   OS/Arch:          linux/amd64   Experimental:     false  containerd:   Version:          v1.2.13   GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429  runc:   Version:          1.0.0-rc10   GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd  docker-init:   Version:          0.18.0   GitCommit:        fec3683 </code></pre> <p>Full stack trace:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot; -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.springframework.boot.buildpack.platform.docker.transport.DockerEngineException: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:136)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ContainerApi.start (DockerApi.java:264)     at org.springframework.boot.buildpack.platform.build.Lifecycle.run (Lifecycle.java:148)     at org.springframework.boot.buildpack.platform.build.Lifecycle.execute (Lifecycle.java:113)     at org.springframework.boot.buildpack.platform.build.Builder.executeLifecycle (Builder.java:133)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:72)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:152)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:144)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) </code></pre> ",
    "OwnerUserId": "11447153",
    "LastEditorUserId": "3630528",
    "LastEditDate": "2020-08-19T20:34:08.647",
    "LastActivityDate": "2020-08-19T22:25:05.167",
    "Title": "spring-boot-maven-plugin:build-image fails with 400 Bad Request",
    "Tags": "<spring-boot><docker><maven>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "63492180",
    "PostTypeId": "1",
    "CreationDate": "2020-08-19T17:33:30.387",
    "Score": "6",
    "ViewCount": "1459",
    "Body": "<p>I am trying to build a docker image for my basic Spring Boot application using the spring-boot-maven-plugin:build-image goal.</p> <p>It fails with the below error:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: **Docker API call to 'localhost/v1.24/containers/eaaba1e2a727547ae53df3c1f7c4420ba821914b4392ea12ff47326ee03eeaa5/start' failed with status code 400 &quot;Bad Request&quot;** -&gt; [Help 1] </code></pre> <p>I have tried with both <strong>Spring Boot 2.3.3.RELEASE</strong> as well as <strong>2.4.0-M2</strong> and I get the same error.</p> <p>I have Docker Desktop running on a Windows 10 machine.</p> <p><code>$ docker version</code></p> <pre><code>**Client: Docker Engine - Community  Version:           19.03.12  API version:       1.40**  Go version:        go1.13.10  Git commit:        48a66213fe  Built:             Mon Jun 22 15:43:18 2020  OS/Arch:           windows/amd64  Experimental:      false  **Server: Docker Engine - Community  Engine:   Version:          19.03.12   API version:      1.40 (minimum version 1.12)**   Go version:       go1.13.10   Git commit:       48a66213fe   Built:            Mon Jun 22 15:49:27 2020   OS/Arch:          linux/amd64   Experimental:     false  containerd:   Version:          v1.2.13   GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429  runc:   Version:          1.0.0-rc10   GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd  docker-init:   Version:          0.18.0   GitCommit:        fec3683 </code></pre> <p>Full stack trace:</p> <pre><code>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot; -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image (default-cli) on project spring-docker: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-M2:build-image failed: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.springframework.boot.buildpack.platform.docker.transport.DockerEngineException: Docker API call to 'localhost/v1.24/containers/cbdb316cb8cb0fbdf641bc7347f56701429d7a887fb240768e8710d36ca5f836/start' failed with status code 400 &quot;Bad Request&quot;     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:136)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ContainerApi.start (DockerApi.java:264)     at org.springframework.boot.buildpack.platform.build.Lifecycle.run (Lifecycle.java:148)     at org.springframework.boot.buildpack.platform.build.Lifecycle.execute (Lifecycle.java:113)     at org.springframework.boot.buildpack.platform.build.Builder.executeLifecycle (Builder.java:133)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:72)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:152)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:144)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) </code></pre> ",
    "OwnerUserId": "11447153",
    "LastEditorUserId": "3630528",
    "LastEditDate": "2020-08-19T20:34:08.647",
    "LastActivityDate": "2020-08-19T22:25:05.167",
    "Title": "spring-boot-maven-plugin:build-image fails with 400 Bad Request",
    "Tags": "<spring-boot><docker><maven>",
    "AnswerCount": "1",
    "CommentCount": "6",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "64104769",
    "PostTypeId": "1",
    "AcceptedAnswerId": "64108998",
    "CreationDate": "2020-09-28T15:04:21.723",
    "Score": "6",
    "ViewCount": "3074",
    "Body": "<p>For the past few months I have been experimenting with docker and have enjoyed the benefits of building and running java applications inside containers.</p> <p>A few weeks ago I stumbled upon the <a href='https://github.com/GoogleContainerTools/jib' rel='noreferrer'>jib maven plugin</a> and noticed that jib can build images to docker registries <strong>without using a docker daemon</strong>.</p> <p>After adding jib to one of my projects and running <code>mvn clean install jib:build</code>(on a VM which doesn't have docker installed), I was surprised that jib actually built and pushed an image containing my project to a remote registry.</p> <p>Out of curiosity, I went online to read more about how jib builds and pushes docker images without having docker installed but found little to no information on the subject. I managed to find an <a href='https://www.projectatomic.io/blog/2018/03/the-many-ways-to-build-oci-images/' rel='noreferrer'>article</a> which explains a few ways of creating images without using docker and also tried to understand how the maven goal <code>jib:build</code> works by reading it's <a href='https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java' rel='noreferrer' title='https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java'>source code</a> but neither of the two gave me any insights on what's happening behind the sceneces when you run <code>jib:build</code>.</p> <p>I would greatly appreciate if someone shares more about the jib maven plugin and how it actually builds and pushes an image behind the scenes without using a docker daemon.</p> ",
    "OwnerUserId": "6749813",
    "LastActivityDate": "2023-03-03T13:18:22.590",
    "Title": "How does the Jib maven plugin build images without using a docker daemon?",
    "Tags": "<java><docker><maven><jib><maven-jib>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "72277087",
    "PostTypeId": "1",
    "CreationDate": "2022-05-17T15:49:14.753",
    "Score": "6",
    "ViewCount": "12528",
    "Body": "<p>I am on windows and this is the plugin configuration:</p> <pre><code>&lt;plugin&gt;     &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;     &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;3.2.1&lt;/version&gt;     &lt;configuration&gt;         &lt;container&gt;             &lt;ports&gt;                 &lt;port&gt;8080&lt;/port&gt;             &lt;/ports&gt;             &lt;format&gt;OCI&lt;/format&gt;         &lt;/container&gt;     &lt;/configuration&gt; &lt;/plugin&gt; </code></pre> <p>This is the command I run:</p> <pre><code>.\\mvnw clean install jib:dockerBuild -Dimage=fullstack:v1 </code></pre> <p>This is the error I keep getting no matter what I do:</p> <pre><code>[ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:3.2.1:dockerBuild (default-cli) on project SpringBootFullStack: Build  to Docker daemon failed, perhaps you should make sure your credentials for 'registry-1.docker.io/library/eclipse-temurin' are set up correc tly. See https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#what-should-i-do-when-the-registry-responds-with-unauthorized f or help: Unauthorized for registry-1.docker.io/library/eclipse-temurin: 401 Unauthorized [ERROR] {&quot;details&quot;:&quot;incorrect username or password&quot;} [ERROR] -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>How should I go about it? I've read the documentation on jib github repo on authenticating but I don't really understand how to procede and feel overwhelmed</p> <p>UPDATE</p> <p>I ran <code>docker login</code> and I get:</p> <pre><code>Authenticating with existing credentials... Login Succeeded </code></pre> <p>but the error persists (and I figured I didn't include some part of the logging maybe:</p> <pre><code>[INFO] Using credentials from Docker config (C:\\Users\\david\\.docker\\config.json) for openjdk:17 [INFO] Executing tasks:                                [INFO] [============                  ] 40.0% complete [INFO] &gt; building image to Docker daemon               [INFO]                                                 [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  2.964 s [INFO] Finished at: 2022-05-17T19:39:12+02:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal com.google.cloud.tools:jib-maven-plugin:3.2.1:dockerBuild (default-cli) on project SpringBootFullStack: Build  to Docker daemon failed, perhaps you should make sure your credentials for 'registry-1.docker.io/library/openjdk' are set up correctly. See  Unauthorized for registry-1.docker.io/library/openjdk: 401 Unauthorized [ERROR] {&quot;details&quot;:&quot;incorrect username or password&quot;} [ERROR] -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException </code></pre> <p>UPDATE 2</p> <p>this is also the content of the file logs refer to in order to get username and password:</p> <pre><code>{     &quot;auths&quot;: {         &quot;https://index.docker.io/v1/&quot;: {}     },     &quot;credsStore&quot;: &quot;desktop&quot; } </code></pre> <p>UPDATE 3</p> <p>After two days of trying I decided to look for something else that would do the same job: <a href='https://spring.io/guides/gs/spring-boot-docker/' rel='noreferrer'>https://spring.io/guides/gs/spring-boot-docker/</a> And with this the job was done in ~10 minutes. Life really is crazy</p> ",
    "OwnerUserId": "15046825",
    "LastEditorUserId": "15046825",
    "LastEditDate": "2022-05-19T21:14:22.717",
    "LastActivityDate": "2024-01-10T10:42:00.293",
    "Title": "401 Unauthorized when using jib to create docker image",
    "Tags": "<java><docker><maven><jib><maven-jib>",
    "AnswerCount": "11",
    "CommentCount": "6",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "31696439",
    "PostTypeId": "1",
    "AcceptedAnswerId": "31710204",
    "CreationDate": "2015-07-29T09:28:27.153",
    "Score": "55",
    "ViewCount": "64612",
    "Body": "<p><em>What I want to do is build a docker image for my Java application but the following considerations should be true for most compiled languages.</em></p> <h1>problem</h1> <p>On my build server I want to produce a docker image for my application as the deliverable. For this I have to compile the application using some build tool (typically Gradle, Maven or Ant) and then add the created JAR file to the docker image. As I want the docker image to just execute the JAR file I will of course start from a base image with Java already installed.</p> <h1>There are three ways of doing this:</h1> <h2>let the build tool control the process</h2> <p>In this case my build tool controls the whole process. So it prepares the JAR file and after the JAR is created it calls Docker to create the image. This works as the JAR is created beforehand and Docker can be  oblivious of the build process needed to create the JAR.</p> <p>But my Dockerfile is no longer standalone. It depends on steps to happen outside of Docker for it work. In my Dockerfile I will have a <code>COPY</code> or <code>ADD</code> statement that is supposed to copy the JAR file to the image. This statement will fail when the jar is not created beforehand. So just executing the Dockerfile might not work. This becomes a problem if you want to integrate with services that just build using the present Dockerfile like the auto-build feature on DockerHub.</p> <h2>let Docker control the build</h2> <p>In this case all necessary steps to create the image are added to the Dockerfile so the image can be created by just executing the Docker build.</p> <p>The main problem with this approach is that there is no way to add to a Dockerfile commands that should be executed outside the docker image being created. This means I have to add my source code and my build tools to the docker image and build my JAR file inside the image. This will result in my image being bigger than it has to be due to all the files added that will be unnecessary at runtime. This will also add extra layers to my image.</p> <h3>Edit:</h3> <p>As @adrian-mouat pointed out if I would add the sources, build the application and deleted the sources in one RUN statement I could avoid adding unnecessary files and layers to the Docker image. This would mean creating some insane chained command.</p> <h2>two separate builds</h2> <p>In this case we split our build in two: first we create the JAR file using our build tool and upload it to a repository (Maven or Ivy repository). We then trigger a separate Docker build that just adds the JAR file from the repository.</p> <h1>conclusion</h1> <p>In my opinion the better way would be <em>letting the build tool control the process</em>. This is will result in a clean docker image and as the image is what we want to deliver this is of importance. To avoid having a potentially not working Dockerfile lying around this should be created as part of the build. So no one would accidentally use it to start a broken build.</p> <p>But this will not allow me to integrate with DockerHub.</p> <h1>question</h1> <p>Is there another way I am missing?</p> <h1>update June 2020</h1> <p>In the years since I first created this question a lot of stuff has changed. At this point I would advocate using <a href='https://github.com/GoogleContainerTools/jib' rel='noreferrer'>Googel's JIB Tool</a>. It integrates with the most common Java Build Tools (Maven and Gradle) and allows you to create container directly from your build. This is much more concise than any of the old approaches I considered all these years ago.</p> <h1>update February 2021</h1> <p>I found this blog post and video from James Ward that reflects better what is currently state of the art. <a href='https://cloud.google.com/blog/topics/developers-practitioners/comparing-containerization-methods-buildpacks-jib-and-dockerfile' rel='noreferrer'>https://cloud.google.com/blog/topics/developers-practitioners/comparing-containerization-methods-buildpacks-jib-and-dockerfile</a></p> ",
    "OwnerUserId": "2481404",
    "LastEditorUserId": "2481404",
    "LastEditDate": "2021-02-26T14:01:27.760",
    "LastActivityDate": "2021-02-26T14:01:27.760",
    "Title": "How to build a docker container for a Java application",
    "Tags": "<java><maven><gradle><docker><dockerfile>",
    "AnswerCount": "6",
    "CommentCount": "6",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "34713722",
    "PostTypeId": "1",
    "AcceptedAnswerId": "34715019",
    "CreationDate": "2016-01-11T03:21:31.987",
    "Score": "5",
    "ViewCount": "4649",
    "Body": "<p>I am trying to build a docker image using docker-maven plugin, and plan to execute the mvn command using jenkins. I have jenkins.war deployed on a tomcat instance instead of a standalone app, which runs as a non-root user. The problem is that docker needs to be run as root user, so maven commands need to be run as root user, and hence jenkins/tomcat needs to run as root user which is not a good practice (although my non-root-user is also sudoer so I guess won't matter much). </p>  <p>So bottom line, I see two solutions : Either run docker as non-root user (and need help on how to do that)  OR  Need to run jenkins as root (And not sure how to achieve that as I changed environment variable /config and still its not switching to root). </p>  <p>Any advice on which solution to choose and how to implement it ? </p> ",
    "OwnerUserId": "3175401",
    "LastActivityDate": "2019-11-14T11:48:25.180",
    "Title": "Running docker as non-root user OR running jenkins on tomcat as root user",
    "Tags": "<maven><tomcat><jenkins><docker><devops>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "36842719",
    "PostTypeId": "1",
    "AcceptedAnswerId": "36843137",
    "CreationDate": "2016-04-25T13:57:12.227",
    "Score": "5",
    "ViewCount": "15830",
    "Body": "<p>I am building a development pipeline. The Docker images will be created automatically after a successful and tested version of my java application be deployed on a <strong>private</strong> Maven repository (Sonatype Nexus).</p>  <p>Once my application is built successfully, I need to publish it in somewhere, and  Docker needs to have access to download it and create a container.</p>  <p>I thought on Docker accessing the Nexus Maven repository, but I did not find how can <code>wget</code> download a jar from a <strong>private repository</strong>. I did not found on Nexus documentation how I can pass authentication parameters to access a private URL. Does anyone know that?</p>  <p>PS: I also accept advice of easier solutions to accomplish this.</p> ",
    "OwnerUserId": "399113",
    "LastEditorUserId": "399113",
    "LastEditDate": "2016-04-26T13:54:45.120",
    "LastActivityDate": "2016-04-26T13:56:43.120",
    "Title": "Docker Automated build downloading private jars from a Maven Sonatype Nexus repository",
    "Tags": "<java><maven><docker><nexus><continuous-deployment>",
    "AnswerCount": "2",
    "CommentCount": "2",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "37963689",
    "PostTypeId": "1",
    "AcceptedAnswerId": "37964149",
    "CreationDate": "2016-06-22T09:19:26.750",
    "Score": "5",
    "ViewCount": "1599",
    "Body": "<p>I was wondering if it would be possible to make the <code>maven-release-plugin</code> run a specific script before the commit of the new tag.   </p>  <p>The reason is, I have a Dockerfile that I want to update with the new version of my project.</p> ",
    "OwnerUserId": "4552808",
    "LastEditorUserId": "1033581",
    "LastEditDate": "2017-03-19T17:07:36.853",
    "LastActivityDate": "2017-03-19T17:07:36.853",
    "Title": "maven-release-plugin automatically run a script before commit",
    "Tags": "<maven><docker><maven-release-plugin>",
    "AnswerCount": "2",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "38692481",
    "PostTypeId": "1",
    "AcceptedAnswerId": "39218734",
    "CreationDate": "2016-08-01T06:43:42.563",
    "Score": "5",
    "ViewCount": "3415",
    "Body": "<h3>Background</h3>  <p>I am trying to create a compiler web service, so a user could post code written in some language I made a compiler for, then it would compile, run, and return the printed results. My second iteration involves using Docker images to isolate the running of the code POST'ed into my running web server. </p>  <h3>Problem</h3>  <p>I am trying to write the posted code to a text file to run my compiler on it, but my compiler is failing on trying to create a file. My file paths should be correct, and my other test route is working. Here is some demo code that I'm trying to run, but fails:</p>  <pre><code>try (Writer writer = new BufferedWriter(new OutputStreamWriter(                 new FileOutputStream('/raw/compile-source.slacc'), 'utf-8'))) {             writer.write(req.body());         } </code></pre>  <p>In my Dockerfile that I'm using to start this, I have created the /raw directory, if it matters. I'm imagining that Docker doesn't want Java processes to create arbitrary files. Any thoughts? Below is my Dockerfile.</p>  <h3>My Dockerfile</h3>  <pre><code>FROM java:8  # Install maven RUN apt-get update RUN apt-get install -y maven  WORKDIR /code  # Prepare by downloading dependencies ADD pom.xml /code/pom.xml RUN ['mvn', 'dependency:resolve'] RUN ['mvn', 'verify']  # Adding source, compile and package into a fat jar ADD src /code/src RUN ['mvn', 'package']  CMD ['java', '-version']  CMD ['mkdir', '/raw'] CMD ['mkdir', '/classfiles']; CMD ['mkdir', '/out']; EXPOSE 4567 CMD ['mvn', 'exec:java'] </code></pre> ",
    "OwnerUserId": "4467844",
    "LastActivityDate": "2016-08-30T04:22:35.203",
    "Title": "Write to file in Java App running on Docker",
    "Tags": "<java><maven><docker>",
    "AnswerCount": "1",
    "CommentCount": "4",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "40131609",
    "PostTypeId": "1",
    "AcceptedAnswerId": "40167253",
    "CreationDate": "2016-10-19T12:36:38.543",
    "Score": "5",
    "ViewCount": "3005",
    "Body": "<p>I am using Bitbucket Pipelines for building a project from our university.</p>  <p>Here is my configuration from bitbucket-pipelines.yml:</p>  <pre><code>image: maven:3.3.9-jdk-8  pipelines:   default:     - step:         script: # Modify the commands below to build your repository.           - mvn -f EasyDiet_JavaFX_View/pom.xml clean install </code></pre>  <p>And here is some of the compilation error -> relates to JavaFX:</p>  <pre><code>ERROR] COMPILATION ERROR :  [INFO] ------------------------------------------------------------- [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[11,19] package javafx.fxml does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[12,28] package javafx.scene.control does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[13,27] package javafx.scene.layout does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[14,27] package javafx.scene.layout does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[15,20] package javafx.stage does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[27,13] cannot find symbol   symbol:   class VBox   location: class at.fhv.easyDiet.teamC.presentation.patientFile.PatientFileController [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[29,13] cannot find symbol   symbol:   class BorderPane   location: class at.fhv.easyDiet.teamC.presentation.patientFile.PatientFileController [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[336,12] cannot find symbol   symbol:   class Stage   location: class at.fhv.easyDiet.teamC.presentation.patientFile.PatientFileController </code></pre>  <p>And here some output of the build failure:</p>  <pre><code>    INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 12.828 s [INFO] Finished at: 2016-10-19T10:18:57+00:00 [INFO] Final Memory: 19M/282M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project easydiet-view: Compilation failure: Compilation failure: [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[11,19] package javafx.fxml does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[12,28] package javafx.scene.control does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[13,27] package javafx.scene.layout does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[14,27] package javafx.scene.layout does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[15,20] package javafx.stage does not exist [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[27,13] cannot find symbol [ERROR] symbol:   class VBox [ERROR] location: class at.fhv.easyDiet.teamC.presentation.patientFile.PatientFileController [ERROR] /opt/atlassian/pipelines/agent/build/EasyDiet_JavaFX_View/src/at/fhv/easyDiet/teamC/presentation/patientFile/PatientFileController.java:[29,13] cannot find symbol [ERROR] symbol:   class BorderPane [ERROR] location: class at.fhv.easyDiet.teamC.presentation.patientFile.PatientFileController </code></pre>  <p>If i build it locally on my Mac it works fine, but if i try with Bitbucket Pipelines i only get those errors. I have already tried with the default maven:3.3.3 image.</p>  <p>How is it possible to build JavaFX in Bitbucket Pipelines?</p> ",
    "OwnerUserId": "5661641",
    "LastActivityDate": "2019-09-04T08:15:19.517",
    "Title": "Bitbucket Pipelines - mvn clean install not working with JavaFX",
    "Tags": "<docker><continuous-integration><maven-3><bitbucket-pipelines>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "44589875",
    "PostTypeId": "1",
    "CreationDate": "2017-06-16T12:59:38.873",
    "Score": "5",
    "ViewCount": "21953",
    "Body": "<p>I am trying to perform &quot;mvn install&quot; to create war file from Dockerfile. Bellow is the Dockerfile</p> <pre><code>FROM scratch FROM ubuntu:16.04  RUN mkdir /opt/java8 RUN mkdir /opt/tomcat8 RUN mkdir /opt/maven3  ENV JAVA_HOME /opt/java8 ENV CATALINA_HOME /opt/tomcat8  ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$M2_HOME/bin  ADD jdk1.8.0_112 /opt/java8 ADD apache-tomcat-8.0.38 /opt/tomcat8  WORKDIR /home/veni/git/M_UserTP RUN mvn install  WORKDIR /home/veni/git/M_UserTP/target  RUN mv M_UserTP.war  /home/veni/Documents/dhaval_bhoot/docker_images/tomcat1  ADD M_UserTP.war /opt/tomcat8/webapps  EXPOSE 8080  CMD [&quot;catalina.sh&quot;, &quot;run&quot;] </code></pre> <p>I also added the path of bin directory of maven in PATH environment variable.</p> <p>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/veni/Documents/apache-maven-3.3.9/bin/</p> <p>This path I set from root user in my machine, I also added same path in PATH variable as normal user already.</p> <p>So now I exit from root user and come back by sudo su to be root user and check PATH variable, it has not path of maven</p> <h1>So when I make docker build of image I get the bellow error</h1> <p>/bin/sh: 1: mvn: not found The command '/bin/sh -c mvn install' returned a non-zero code: 127</p> ",
    "OwnerUserId": "7480534",
    "LastEditorUserId": "-1",
    "LastEditDate": "2020-06-20T09:12:55.060",
    "LastActivityDate": "2020-11-12T01:01:53.493",
    "Title": "I am trying to perform mvn install from Dockerfile but it is not working says mvn not found",
    "Tags": "<maven><docker><build>",
    "AnswerCount": "4",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "45909245",
    "PostTypeId": "1",
    "AcceptedAnswerId": "45909457",
    "CreationDate": "2017-08-27T20:52:11.000",
    "Score": "5",
    "ViewCount": "1985",
    "Body": "<p>I'm developing Spring Data JPA project that targets a MySQL database, and I want to run end-to-end integration tests from Maven.</p>  <p>So far, I've configured <code>io.fabric8.docker-maven-plugin</code> to spin up a MySQL container during <code>pre-integration-test</code> phase. It will use a random available port, which I need to pass to my <code>application.properties</code> file.</p>  <p>I've tried <a href='https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html' rel='nofollow noreferrer'>Automatic property expansion using Maven</a> but I suspect that the <code>mysql.port</code> maven property is only getting resolved <em>after</em> the spring properties are getting updated.</p>  <p>pom.xml</p>  <pre><code>    &lt;?xml version='1.0' encoding='UTF-8'?&gt; &lt;project xmlns='http://maven.apache.org/POM/4.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'     xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;example&lt;/groupId&gt;     &lt;artifactId&gt;pass-port-number-from-docker-maven-plugin-to-spring-property&lt;/artifactId&gt;     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;          &lt;!-- other jpa dependencies ... --&gt;      &lt;/dependencies&gt;      &lt;build&gt;          &lt;resources&gt;             &lt;resource&gt;                 &lt;directory&gt;src/main/resources&lt;/directory&gt;                 &lt;filtering&gt;true&lt;/filtering&gt;             &lt;/resource&gt;         &lt;/resources&gt;          &lt;plugins&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                     &lt;goal&gt;integration-test&lt;/goal&gt;                     &lt;goal&gt;verify&lt;/goal&gt;                     &lt;/goals&gt;                 &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;          &lt;/plugins&gt;     &lt;/build&gt;      &lt;profiles&gt;         &lt;profile&gt;             &lt;id&gt;docker-test&lt;/id&gt;             &lt;properties&gt;                 &lt;docker-maven.version&gt;0.21.0&lt;/docker-maven.version&gt;             &lt;/properties&gt;             &lt;build&gt;                 &lt;resources&gt;                     &lt;resource&gt;                         &lt;directory&gt;src/main/resources&lt;/directory&gt;                         &lt;filtering&gt;true&lt;/filtering&gt;                     &lt;/resource&gt;                 &lt;/resources&gt;                 &lt;plugins&gt;                      &lt;plugin&gt;                         &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;                         &lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;                         &lt;version&gt;3.0.0&lt;/version&gt;                         &lt;executions&gt;                         &lt;execution&gt;                             &lt;id&gt;reserve-network-port&lt;/id&gt;                             &lt;goals&gt;                             &lt;goal&gt;reserve-network-port&lt;/goal&gt;                             &lt;/goals&gt;                             &lt;phase&gt;process-resources&lt;/phase&gt;                             &lt;configuration&gt;                             &lt;portNames&gt;                                 &lt;portName&gt;mysql.port&lt;/portName&gt;                             &lt;/portNames&gt;                             &lt;/configuration&gt;                         &lt;/execution&gt;                         &lt;/executions&gt;                     &lt;/plugin&gt;                      &lt;plugin&gt;                     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                     &lt;version&gt;${docker-maven.version}&lt;/version&gt;                      &lt;configuration&gt;                         &lt;images&gt;                             &lt;image&gt;                             &lt;alias&gt;mysql&lt;/alias&gt;                             &lt;name&gt;mysql:5.7&lt;/name&gt;                             &lt;run&gt;                                 &lt;env&gt;                                     &lt;MYSQL_ROOT_PASSWORD&gt;my-secret-pw&lt;/MYSQL_ROOT_PASSWORD&gt;                                 &lt;/env&gt;                                 &lt;ports&gt;                                     &lt;port&gt;mysql.port:3306&lt;/port&gt;                                 &lt;/ports&gt;                                 &lt;wait&gt;                                     &lt;log&gt;ready for connections&lt;/log&gt;                                     &lt;!-- &lt;time&gt;20000&lt;/time&gt; --&gt;                                 &lt;/wait&gt;                                 &lt;log&gt;                                     &lt;prefix&gt;mysql&lt;/prefix&gt;                                     &lt;date&gt;ISO8601&lt;/date&gt;                                     &lt;color&gt;blue&lt;/color&gt;                                 &lt;/log&gt;                             &lt;/run&gt;                             &lt;/image&gt;                         &lt;/images&gt;                     &lt;/configuration&gt;                      &lt;!-- Connect start/stop to pre- and                         post-integration-test phase, respectively if you want to start                         your docker containers during integration tests --&gt;                     &lt;executions&gt;                         &lt;execution&gt;                         &lt;id&gt;start&lt;/id&gt;                         &lt;phase&gt;pre-integration-test&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;start&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;/execution&gt;                         &lt;execution&gt;                         &lt;id&gt;stop&lt;/id&gt;                         &lt;phase&gt;post-integration-test&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;stop&lt;/goal&gt;                         &lt;/goals&gt;                         &lt;/execution&gt;                     &lt;/executions&gt;                     &lt;/plugin&gt;                 &lt;/plugins&gt;             &lt;/build&gt;         &lt;/profile&gt;     &lt;/profiles&gt;  &lt;/project&gt; </code></pre>  <p>application.properties</p>  <pre><code>mysql.port = @mysql.port@ </code></pre>  <p>When I run my test I get a connection error, and when I inspect <code>target/classes/application.properties</code> I see that <code>@mysql.port@</code> hasn't been updated.</p>  <p>Any suggestions would be much appreciated.</p> ",
    "OwnerUserId": "6606982",
    "LastEditorUserId": "6606982",
    "LastEditDate": "2017-08-28T05:31:18.280",
    "LastActivityDate": "2017-08-28T05:31:18.280",
    "Title": "Pass port number from docker-maven-plugin to spring property",
    "Tags": "<spring><maven><spring-data-jpa><maven-docker-plugin>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "47302658",
    "PostTypeId": "1",
    "AcceptedAnswerId": "47307991",
    "CreationDate": "2017-11-15T08:31:58.980",
    "Score": "5",
    "ViewCount": "4684",
    "Body": "<p>I'm trying to build CI/CD pipeline with Jenkins for Maven project. I can't seem to find any decent examples on how to use .jar file produced by mvn package in another Jenkins declarative pipeline stage. I need the jar file to make an docker-image before uploading it to docker-registry. Here's my relevant parts of jenkinsfile:</p>  <pre><code>pipeline {   agent none   stages{     stage('Build Jar'){         agent {           docker {             image 'maven:3-alpine'             args '-v /root/.m2:/root/.m2'           }         }         steps {             sh 'mvn package'             stash includes: 'target/*.jar', name: 'targetfiles'         }     }     stage('Deploy') {         agent {             node {                 label 'DockerDefault'             }          }        steps {             script{                 def image = docker.build('image-name:test', ' .')             }       }     }   } } </code></pre>  <p>Dockerfile:</p>  <pre><code>#install OS FROM centos #install java RUN yum install -y java #make directory structure to store temporary files RUN mkdir -p /store #put jar into container ADD target/AdWordsProducer-1.0-SNAPSHOT-shaded.jar adwordsproducer.jar #run jar ENTRYPOINT ['java', '-jar', '/adwordsproducer.jar'] </code></pre>  <p><strong>EDIT 1----------------------------------------------------------------------:</strong></p>  <p>Laszlos answer did the trick, as I noticed that my .jar file was under different name than dockerfile assumed.  Here is my working final jenkinsfile:</p>  <pre><code>pipeline {   agent none   stages{     stage('Build Jar'){         agent {           docker {             image 'maven:3-alpine'             args '-v /root/.m2:/root/.m2'           }         }         steps {             sh 'mvn package'             stash includes: 'target/*.jar', name: 'targetfiles'         }     }     stage('Deploy') {         agent {             node {                 label 'DockerDefault'             }          }        steps {             script{                 unstash 'targetfiles'                 sh 'ls -l -R'                 def image = docker.build('image-name:test', ' .')             }       }     }   } } </code></pre>  <p>And modified dockerfile:</p>  <pre><code>#install OS FROM centos #install java RUN yum install -y java #make directory structure to store temporary files RUN mkdir -p /store #put jar into container #ADD target/AdWordsProducer-1.0-SNAPSHOT-shaded.jar adwordsproducer.jar ADD target/AdWordsProducer-1.0-SNAPSHOT.jar adwordsproducer.jar #run jar ENTRYPOINT ['java', '-jar', '/adwordsproducer.jar'] </code></pre> ",
    "OwnerUserId": "1754089",
    "LastEditorUserId": "1754089",
    "LastEditDate": "2017-11-15T15:03:01.970",
    "LastActivityDate": "2017-11-15T15:03:01.970",
    "Title": "How can I use Jar produced by mvn package in another Jenkins declarative pipeline stage?",
    "Tags": "<java><maven><docker><jenkins><devops>",
    "AnswerCount": "2",
    "CommentCount": "3",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 3.0"
  },
  {
    "Id": "50610998",
    "PostTypeId": "1",
    "CreationDate": "2018-05-30T18:07:59.927",
    "Score": "5",
    "ViewCount": "6450",
    "Body": "<p>In attempts to make a standalone JAR that I can launch cleanly and independently, I've ran into issues involving Jersey and my desirable, fat JAR. The final jar will be moved to a Docker image.</p>  <p>The error that I am getting is essentially this:</p>  <pre><code>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.glassfish.jersey.server.ResourceConfig]: Factory method 'jerseyResourceConfig' threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 48 common frames omitted Caused by: org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:89)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:65)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.addResourceFinder(PackageNamesScanner.java:282)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.init(PackageNamesScanner.java:198)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:154)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:110)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:680)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:660)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 49 common frames omitted Caused by: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory) </code></pre>  <p>Here is my build profile in my POM file:</p>  <pre><code>&lt;profile&gt;     &lt;id&gt;d2&lt;/id&gt;     &lt;activation&gt;         &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;     &lt;/activation&gt;     &lt;properties&gt;         &lt;packaging.type&gt;jar&lt;/packaging.type&gt;         &lt;log.dir&gt;logs&lt;/log.dir&gt;         &lt;!-- updates bootstrap.properties --&gt;         &lt;config.override.path&gt;./conf&lt;/config.override.path&gt;     &lt;/properties&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;requiresUnpack&gt;                         &lt;dependency&gt;                             &lt;groupId&gt;my.com&lt;/groupId&gt;                             &lt;artifactId&gt;myArtifact&lt;/artifactId&gt;                         &lt;/dependency&gt;                     &lt;/requiresUnpack&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/profile&gt; </code></pre>  <p>Finally, here are all of the jersey dependencies that I am using:</p>  <pre><code>org.springframework.boot:spring-boot-starter-jersey:jar:1.5.12.RELEASE:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-spring3:jar:2.25.1:compile |  |  \\- org.glassfish.jersey.media:jersey-media-json-jackson:jar:2.25.1:compile |  |     +- org.glassfish.jersey.ext:jersey-entity-filtering:jar:2.25.1:compile ................................................................................ |     |  +- org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.17:compile ................................................................................ |  \\- io.swagger:swagger-jersey2-jaxrs:jar:1.5.6:compile |     +- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |     |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b32:compile |     |  \\- org.glassfish.jersey.core:jersey-common:jar:2.25.1:compile |     |     +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.25.1:compile |     \\- org.glassfish.jersey.media:jersey-media-multipart:jar:2.25.1:compile </code></pre>  <p>I've read through all of the sources that are referenced from this <a href='https://stackoverflow.com/questions/42194680/spring-boot-application-wont-run-when-trying-to-run-from-the-jar-file?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa'>SO question</a>. I was led through a few github issues that both Spring and Jersey have apparently fixed, yet I am still dealing with these complications.  The unique thing about my complication is that the boot-inf/classes that are not found is directly inside my jar and referencing the project itself. Its not complaining about a different, depended on jar, its complaining about the project's own /BOOT-INF/classes.</p>  <p>Any additional insight not mentioned in the aforementioned SO question would be extremely useful! I find that Java is incredibly more difficult to work with in Docker than any other stack that I've experienced (python-django and node-js). Let me know if more information is desired.</p> ",
    "OwnerUserId": "4930850",
    "LastEditorUserId": "4930850",
    "LastEditDate": "2018-06-04T16:58:24.103",
    "LastActivityDate": "2019-04-01T07:48:25.557",
    "Title": "/BOOT-INF/classes (No such file or directory) on spring boot java project",
    "Tags": "<java><maven><docker><spring-boot><jersey-2.0>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50610998",
    "PostTypeId": "1",
    "CreationDate": "2018-05-30T18:07:59.927",
    "Score": "5",
    "ViewCount": "6450",
    "Body": "<p>In attempts to make a standalone JAR that I can launch cleanly and independently, I've ran into issues involving Jersey and my desirable, fat JAR. The final jar will be moved to a Docker image.</p>  <p>The error that I am getting is essentially this:</p>  <pre><code>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.glassfish.jersey.server.ResourceConfig]: Factory method 'jerseyResourceConfig' threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 48 common frames omitted Caused by: org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:89)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:65)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.addResourceFinder(PackageNamesScanner.java:282)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.init(PackageNamesScanner.java:198)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:154)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:110)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:680)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:660)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 49 common frames omitted Caused by: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory) </code></pre>  <p>Here is my build profile in my POM file:</p>  <pre><code>&lt;profile&gt;     &lt;id&gt;d2&lt;/id&gt;     &lt;activation&gt;         &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;     &lt;/activation&gt;     &lt;properties&gt;         &lt;packaging.type&gt;jar&lt;/packaging.type&gt;         &lt;log.dir&gt;logs&lt;/log.dir&gt;         &lt;!-- updates bootstrap.properties --&gt;         &lt;config.override.path&gt;./conf&lt;/config.override.path&gt;     &lt;/properties&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;requiresUnpack&gt;                         &lt;dependency&gt;                             &lt;groupId&gt;my.com&lt;/groupId&gt;                             &lt;artifactId&gt;myArtifact&lt;/artifactId&gt;                         &lt;/dependency&gt;                     &lt;/requiresUnpack&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/profile&gt; </code></pre>  <p>Finally, here are all of the jersey dependencies that I am using:</p>  <pre><code>org.springframework.boot:spring-boot-starter-jersey:jar:1.5.12.RELEASE:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-spring3:jar:2.25.1:compile |  |  \\- org.glassfish.jersey.media:jersey-media-json-jackson:jar:2.25.1:compile |  |     +- org.glassfish.jersey.ext:jersey-entity-filtering:jar:2.25.1:compile ................................................................................ |     |  +- org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.17:compile ................................................................................ |  \\- io.swagger:swagger-jersey2-jaxrs:jar:1.5.6:compile |     +- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |     |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b32:compile |     |  \\- org.glassfish.jersey.core:jersey-common:jar:2.25.1:compile |     |     +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.25.1:compile |     \\- org.glassfish.jersey.media:jersey-media-multipart:jar:2.25.1:compile </code></pre>  <p>I've read through all of the sources that are referenced from this <a href='https://stackoverflow.com/questions/42194680/spring-boot-application-wont-run-when-trying-to-run-from-the-jar-file?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa'>SO question</a>. I was led through a few github issues that both Spring and Jersey have apparently fixed, yet I am still dealing with these complications.  The unique thing about my complication is that the boot-inf/classes that are not found is directly inside my jar and referencing the project itself. Its not complaining about a different, depended on jar, its complaining about the project's own /BOOT-INF/classes.</p>  <p>Any additional insight not mentioned in the aforementioned SO question would be extremely useful! I find that Java is incredibly more difficult to work with in Docker than any other stack that I've experienced (python-django and node-js). Let me know if more information is desired.</p> ",
    "OwnerUserId": "4930850",
    "LastEditorUserId": "4930850",
    "LastEditDate": "2018-06-04T16:58:24.103",
    "LastActivityDate": "2019-04-01T07:48:25.557",
    "Title": "/BOOT-INF/classes (No such file or directory) on spring boot java project",
    "Tags": "<java><maven><docker><spring-boot><jersey-2.0>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50610998",
    "PostTypeId": "1",
    "CreationDate": "2018-05-30T18:07:59.927",
    "Score": "5",
    "ViewCount": "6450",
    "Body": "<p>In attempts to make a standalone JAR that I can launch cleanly and independently, I've ran into issues involving Jersey and my desirable, fat JAR. The final jar will be moved to a Docker image.</p>  <p>The error that I am getting is essentially this:</p>  <pre><code>Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.glassfish.jersey.server.ResourceConfig]: Factory method 'jerseyResourceConfig' threw exception; nested exception is org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 48 common frames omitted Caused by: org.glassfish.jersey.server.internal.scanning.ResourceFinderException: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:89)     at org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.create(JarZipSchemeResourceFinderFactory.java:65)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.addResourceFinder(PackageNamesScanner.java:282)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.init(PackageNamesScanner.java:198)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:154)     at org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.&lt;init&gt;(PackageNamesScanner.java:110)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:680)     at org.glassfish.jersey.server.ResourceConfig.packages(ResourceConfig.java:660)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 49 common frames omitted Caused by: java.io.FileNotFoundException: /dir/myproject/target/myproject-1.0.0-SNAPSHOT.jar!/BOOT-INF/classes (No such file or directory) </code></pre>  <p>Here is my build profile in my POM file:</p>  <pre><code>&lt;profile&gt;     &lt;id&gt;d2&lt;/id&gt;     &lt;activation&gt;         &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;     &lt;/activation&gt;     &lt;properties&gt;         &lt;packaging.type&gt;jar&lt;/packaging.type&gt;         &lt;log.dir&gt;logs&lt;/log.dir&gt;         &lt;!-- updates bootstrap.properties --&gt;         &lt;config.override.path&gt;./conf&lt;/config.override.path&gt;     &lt;/properties&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;requiresUnpack&gt;                         &lt;dependency&gt;                             &lt;groupId&gt;my.com&lt;/groupId&gt;                             &lt;artifactId&gt;myArtifact&lt;/artifactId&gt;                         &lt;/dependency&gt;                     &lt;/requiresUnpack&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt; &lt;/profile&gt; </code></pre>  <p>Finally, here are all of the jersey dependencies that I am using:</p>  <pre><code>org.springframework.boot:spring-boot-starter-jersey:jar:1.5.12.RELEASE:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.25.1:compile |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-spring3:jar:2.25.1:compile |  |  \\- org.glassfish.jersey.media:jersey-media-json-jackson:jar:2.25.1:compile |  |     +- org.glassfish.jersey.ext:jersey-entity-filtering:jar:2.25.1:compile ................................................................................ |     |  +- org.glassfish.jersey.connectors:jersey-apache-connector:jar:2.17:compile ................................................................................ |  \\- io.swagger:swagger-jersey2-jaxrs:jar:1.5.6:compile |     +- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |     |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b32:compile |     |  \\- org.glassfish.jersey.core:jersey-common:jar:2.25.1:compile |     |     +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.25.1:compile |     \\- org.glassfish.jersey.media:jersey-media-multipart:jar:2.25.1:compile </code></pre>  <p>I've read through all of the sources that are referenced from this <a href='https://stackoverflow.com/questions/42194680/spring-boot-application-wont-run-when-trying-to-run-from-the-jar-file?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa'>SO question</a>. I was led through a few github issues that both Spring and Jersey have apparently fixed, yet I am still dealing with these complications.  The unique thing about my complication is that the boot-inf/classes that are not found is directly inside my jar and referencing the project itself. Its not complaining about a different, depended on jar, its complaining about the project's own /BOOT-INF/classes.</p>  <p>Any additional insight not mentioned in the aforementioned SO question would be extremely useful! I find that Java is incredibly more difficult to work with in Docker than any other stack that I've experienced (python-django and node-js). Let me know if more information is desired.</p> ",
    "OwnerUserId": "4930850",
    "LastEditorUserId": "4930850",
    "LastEditDate": "2018-06-04T16:58:24.103",
    "LastActivityDate": "2019-04-01T07:48:25.557",
    "Title": "/BOOT-INF/classes (No such file or directory) on spring boot java project",
    "Tags": "<java><maven><docker><spring-boot><jersey-2.0>",
    "AnswerCount": "1",
    "CommentCount": "3",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50896123",
    "PostTypeId": "1",
    "CreationDate": "2018-06-17T11:17:56.970",
    "Score": "5",
    "ViewCount": "5362",
    "Body": "<p>I am creating a docker file for my Spring Boot application.</p>  <p>Here is the file:</p>  <pre><code>FROM openjdk:8-jdk-alpine COPY eureka/target/eureka-1.0.jar app.jar ENTRYPOINT ['java','-Djava.security.egd=file:/dev/./urandom','-jar','/app.jar'] </code></pre>  <p>The name of the jar file (it is eureka-1.0.jar in this case) is defined in the pom.xml</p>  <pre><code>&lt;artifactId&gt;eureka&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; </code></pre>  <p>My question is; when I change the file name in the pom, I am having to reflect the change to the docker file manually, which is ruining the automatic deployment process. </p>  <p>What is the best practice to get the file name that was defined in the pom.xml, from within the docker file? </p>  <p><em>(In case it matters for best practices: there are multiple docker files all similar to this one and they are used by a docker-compose.yml)</em></p> ",
    "OwnerUserId": "7948092",
    "LastActivityDate": "2021-01-17T09:10:31.127",
    "Title": "What is the best practice to get the file name that was defined in the pom.xml, from within the docker file?",
    "Tags": "<java><maven><docker><spring-boot><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50896123",
    "PostTypeId": "1",
    "CreationDate": "2018-06-17T11:17:56.970",
    "Score": "5",
    "ViewCount": "5362",
    "Body": "<p>I am creating a docker file for my Spring Boot application.</p>  <p>Here is the file:</p>  <pre><code>FROM openjdk:8-jdk-alpine COPY eureka/target/eureka-1.0.jar app.jar ENTRYPOINT ['java','-Djava.security.egd=file:/dev/./urandom','-jar','/app.jar'] </code></pre>  <p>The name of the jar file (it is eureka-1.0.jar in this case) is defined in the pom.xml</p>  <pre><code>&lt;artifactId&gt;eureka&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; </code></pre>  <p>My question is; when I change the file name in the pom, I am having to reflect the change to the docker file manually, which is ruining the automatic deployment process. </p>  <p>What is the best practice to get the file name that was defined in the pom.xml, from within the docker file? </p>  <p><em>(In case it matters for best practices: there are multiple docker files all similar to this one and they are used by a docker-compose.yml)</em></p> ",
    "OwnerUserId": "7948092",
    "LastActivityDate": "2021-01-17T09:10:31.127",
    "Title": "What is the best practice to get the file name that was defined in the pom.xml, from within the docker file?",
    "Tags": "<java><maven><docker><spring-boot><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "50896123",
    "PostTypeId": "1",
    "CreationDate": "2018-06-17T11:17:56.970",
    "Score": "5",
    "ViewCount": "5362",
    "Body": "<p>I am creating a docker file for my Spring Boot application.</p>  <p>Here is the file:</p>  <pre><code>FROM openjdk:8-jdk-alpine COPY eureka/target/eureka-1.0.jar app.jar ENTRYPOINT ['java','-Djava.security.egd=file:/dev/./urandom','-jar','/app.jar'] </code></pre>  <p>The name of the jar file (it is eureka-1.0.jar in this case) is defined in the pom.xml</p>  <pre><code>&lt;artifactId&gt;eureka&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; </code></pre>  <p>My question is; when I change the file name in the pom, I am having to reflect the change to the docker file manually, which is ruining the automatic deployment process. </p>  <p>What is the best practice to get the file name that was defined in the pom.xml, from within the docker file? </p>  <p><em>(In case it matters for best practices: there are multiple docker files all similar to this one and they are used by a docker-compose.yml)</em></p> ",
    "OwnerUserId": "7948092",
    "LastActivityDate": "2021-01-17T09:10:31.127",
    "Title": "What is the best practice to get the file name that was defined in the pom.xml, from within the docker file?",
    "Tags": "<java><maven><docker><spring-boot><dockerfile>",
    "AnswerCount": "3",
    "CommentCount": "0",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "52768974",
    "PostTypeId": "1",
    "CreationDate": "2018-10-11T21:10:07.190",
    "Score": "5",
    "ViewCount": "5929",
    "Body": "<p>I have a .jar that contains multiple <code>public static void main</code>(<code>psvm</code>)'s that I want to be able to call when I do <code>docker run ... -e &lt;class.path.from.env&gt;</code> on the image and pass an environment variable to specify the class path. Something like this:</p>  <pre><code>  &lt;plugin&gt;     &lt;groupId&gt;io.fabric8&lt;/groupId&gt;     &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;     &lt;configuration&gt;       &lt;images&gt;         &lt;image&gt;           &lt;name&gt;${project.artifactId}&lt;/name&gt;           &lt;build&gt;             &lt;from&gt;java:8-jre&lt;/from&gt;             &lt;tags&gt;               &lt;tag&gt;${build.environment}-latest&lt;/tag&gt;               &lt;tag&gt;${build.environment}-${build.number}&lt;/tag&gt;             &lt;/tags&gt;             &lt;entryPoint&gt;               &lt;exec&gt;                 &lt;arg&gt;java&lt;/arg&gt;                 &lt;arg&gt;-Duser.timezone=UTC&lt;/arg&gt;                 &lt;arg&gt;-cp&lt;/arg&gt;                 &lt;arg&gt;/opt/${project.artifactId}-${project.version}.jar&lt;/arg&gt;                 &lt;arg&gt;${class.path.from.env}&lt;/arg&gt;               &lt;/exec&gt;             &lt;/entryPoint&gt;             &lt;assembly&gt;               &lt;basedir&gt;/opt&lt;/basedir&gt;               &lt;inline&gt;                 &lt;files&gt;                   &lt;file&gt;                     &lt;source&gt;target/${project.artifactId}-${project.version}.jar&lt;/source&gt;                   &lt;/file&gt;                 &lt;/files&gt;               &lt;/inline&gt;             &lt;/assembly&gt;           &lt;/build&gt;         &lt;/image&gt;       &lt;/images&gt;     &lt;/configuration&gt;   &lt;/plugin&gt; </code></pre>  <p>Although I read the whole documentation for <code>docker-maven-plugin</code>, I'm not sure how I can make this work. Basically where do I declare the environment variable <code>class.path.from.env</code> and how can I make sure it gets the one I pass through <code>-e</code> in <code>docker run ...</code>?</p> ",
    "OwnerUserId": "4438271",
    "LastEditorUserId": "145989",
    "LastEditDate": "2019-08-14T05:12:16.937",
    "LastActivityDate": "2019-08-14T05:33:19.217",
    "Title": "docker-maven-plugin: how do I pass environment variable from `docker run ... -e <value>` to build or run step?",
    "Tags": "<maven><docker><environment-variables><docker-maven-plugin>",
    "AnswerCount": "1",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "54202708",
    "PostTypeId": "1",
    "CreationDate": "2019-01-15T16:12:52.360",
    "Score": "5",
    "ViewCount": "1464",
    "Body": "<p>On my development machine, I can build my image in about 30 seconds. <a href='https://github.com/Azure-Samples/iot-edge-sample-java/blob/master/modules/SampleModule/Dockerfile.amd64' rel='noreferrer'>This</a> is the Dockerfile I'm building from.</p>  <p>However, now I need to deploy my application on a Raspberry Pi, and now I have to target ARM. The project linked above also contains an <a href='https://github.com/Azure-Samples/iot-edge-sample-java/blob/master/modules/SampleModule/Dockerfile.arm32v7' rel='noreferrer'>ARM Dockerfile</a> that I'm using. However, this is <em>extremely</em> slow, no matter how I build it. It takes at least 20 minutes, regardless of how I've approached the build. This is what I've tried:</p>  <ul> <li><a href='https://ownyourbits.com/2018/06/27/running-and-building-arm-docker-containers-in-x86/' rel='noreferrer'>Using qemu to build on my developer machine.</a> Docker version 18.09.1, build 4c52b90, qemu-arm version 2.11.1</li> <li>Building on a Rasbperry Pi 3 Model B, Docker version 18.09.0, build 4d60db4.</li> <li>Enabling remote access to the daemon on Raspberry and using dockers -H flag to target that daemon from my development machine.</li> </ul>  <p>Fetching dependencies using maven is excruciatingly slow and takes up the bulk of the time spent creating the image, even when the dependencies are in our mirrored internal repository.</p>  <p>Is there any way to speed the process up? Can the Dockerfiles be improved? Am I at fault, or is it like this building for ARM, if so, why?</p> ",
    "OwnerUserId": "1688639",
    "LastActivityDate": "2019-01-15T16:12:52.360",
    "Title": "Docker on ARM extremely slow",
    "Tags": "<maven><docker><arm>",
    "AnswerCount": "0",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "56269584",
    "PostTypeId": "1",
    "CreationDate": "2019-05-23T06:54:28.520",
    "Score": "5",
    "ViewCount": "1613",
    "Body": "<p>We have a docker image that runs a git clone command for a particular repository and then runs maven build . When running this image locally, it works fine. When running this image in an AWS VM, it works fine.</p>  <p>The problem we have is that when we run this image inside ACI (Azure Container Instances) or on an Azure VM - the download artefacts step inside the maven build has some connection issues - the jar downloads slow down very very much (sometimes) - and even timeout (sometimes).</p>  <p>We parameterize the repository that is built with this image - and the timeout issue only occurs on a few projects. As far as we can tell those projects do not have anything special.</p>  <p>For a particular configuration of the vm and the mvn commands we actually run - the connection issue occurs at the same set of artefacts.</p>  <p>If we change the mvn commands - the place where the connection issue occurs changes.</p>  <ol> <li><p>Initially we had a single <code>mvn clean package</code> command executed after the git clone - that was generating an issue on a particular set of jars. We then added <code>mvn dependency:resolve-plugins</code>, <code>mvn compile dependency:resolve</code> and finally <code>mvn clean package</code>. We did this because we thought that some tests that were running initially might have caused the connection issues - and so we moved the artefact download step first. This did not solve the issue - just changed the place where the jar downloads freeze.</p></li> <li><p>Changed the mvn thread count configuration and also the VM core and memory sizes - but this did not help.</p></li> <li><p>We set a TCP Keepalive flag on the VM - as to avoid a possible Azure NAT/Load Balancer timeout that was killing our connections.  This was a solution suggested by Azure support and we also found it here:  <a href='https://stackoverflow.com/questions/42024619/maven-build-gets-connection-reset-when-downloading-artifacts'>Maven build gets connection reset when downloading artifacts</a>  We configured it based on the azure guide: <a href='https://github.com/wbuchwalter/azure-content/blob/master/includes/guidance-tcp-session-timeout-include.md' rel='nofollow noreferrer'>https://github.com/wbuchwalter/azure-content/blob/master/includes/guidance-tcp-session-timeout-include.md</a></p></li> </ol>  <pre><code>&gt; sysctl net.ipv4.tcp_keepalive_time net.ipv4.tcp_keepalive_intvl net.ipv4.tcp_keepalive_probes net.ipv4.tcp_keepalive_time = 60 net.ipv4.tcp_keepalive_intvl = 10 net.ipv4.tcp_keepalive_probes = 20 </code></pre>  <p>This is a sample of the mvn log:</p>  <pre><code>14:10:48,505 [BasicRepositoryConnector-repo.maven.apache.org-27-0] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/regexp/regexp/1.3/regexp-1.3.jar 14:10:48,506 [BasicRepositoryConnector-repo.maven.apache.org-27-2] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/scm/maven-scm-provider-cvs-commons/1.7/maven-scm-provider-cvs-commons-1.7.jar 14:10:48,505 [BasicRepositoryConnector-repo.maven.apache.org-27-1] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/scm/maven-scm-provider-git-commons/1.7/maven-scm-provider-git-commons-1.7.jar 14:10:48,521 [BasicRepositoryConnector-repo.maven.apache.org-27-3] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/tmatesoft/sqljet/sqljet/1.0.4/sqljet-1.0.4.jar 14:10:48,523 [BasicRepositoryConnector-repo.maven.apache.org-27-4] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/antlr-runtime/3.1.3/antlr-runtime-3.1.3.jar 14:10:48,540 [BasicRepositoryConnector-repo.maven.apache.org-27-0] [INFO] Downloaded from central: https://repo.maven.apache.org/maven2/regexp/regexp/1.3/regexp-1.3.jar (25 kB at 706 kB/s) 14:10:48,540 [BasicRepositoryConnector-repo.maven.apache.org-27-0] [INFO] Downloading from central: https://repo.maven.apache.org/maven2/org/antlr/stringtemplate/3.2/stringtemplate-3.2.jar 14:10:48,564 [BasicRepositoryConnector-repo.maven.apache.org-27-0] [INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/stringtemplate/3.2/stringtemplate-3.2.jar (172 kB at 4.0 MB/s) 14:26:32,150 [BasicRepositoryConnector-repo.maven.apache.org-27-2] [INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/scm/maven-scm-provider-cvs-commons/1.7/maven-scm-provider-cvs-commons-1.7.jar (80 kB at 84 B/s) 14:26:32,157 [BasicRepositoryConnector-repo.maven.apache.org-27-4] [INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/antlr/antlr-runtime/3.1.3/antlr-runtime-3.1.3.jar (151 kB at 159 B/s) 14:26:32,199 [BasicRepositoryConnector-repo.maven.apache.org-27-3] [INFO] Downloaded from central: https://repo.maven.apache.org/maven2/org/tmatesoft/sqljet/sqljet/1.0.4/sqljet-1.0.4.jar (744 kB at 788 B/s) </code></pre>  <p>Notice the suspicious: (151 kB at 159 B/s), (80 kB at 84 B/s), (744 kB at 788 B/s)</p>  <p>We have examples of executions that run just fine - and examples of executions that timeout (1 hour) - and examples of executions that take close to 1h.</p>  <p>Solutions:</p>  <ul> <li><p>We have options to pre-cache some of the jars in the initial docker image - and thus not need maven to handle them. But the docker image that handles this build needs to do run for any git repo (Java + Maven) and we cannot know what dependecies those projects have. </p></li> <li><p>Similar to the other point, have options to create an external volume that is shared between running containers and to cache the jars there.</p></li> <li><p>We have options to restart the maven build once it fails - because part of the dependencies would have already been downloaded and it will not get stuck at the same place.</p></li> </ul>  <p>We reached out to Azure support and they recommended the TCP Keep-alive configuration - but that did not solve our problem.</p>  <p>We want to understand the root cause of the issue - is it a docker config ? is it a maven bug ? is it an azure specific issue ? The connection issue occurs roughly 9/10 executions - i have no ideea why it works - and no ideea why it doesn't work :) The solutions I mentioned before are just work-arounds - they do not fix it - just ignore it.</p>  <p><strong>Found the problem</strong></p>  <p>The issue is that Maven reuses the same HTTP Connections for the download of the pom/jar files. <a href='https://maven.apache.org/guides/mini/guide-http-settings.html#Maven_3.0.4' rel='nofollow noreferrer'>https://maven.apache.org/guides/mini/guide-http-settings.html#Maven_3.0.4</a> Thus - our scenario is along the following lines:</p>  <p>Project</p>  <p>-- module 1 - download some pom/jars - keep connection active</p>  <p>-- module 2 - runs some plugins / tests - lasts more that 5 minutes</p>  <p>-- module 3 - tries to download some pom/jars</p>  <p>Azure - the NAT configuration: <a href='https://github.com/wbuchwalter/azure-content/blob/master/includes/guidance-tcp-session-timeout-include.md' rel='nofollow noreferrer'>https://github.com/wbuchwalter/azure-content/blob/master/includes/guidance-tcp-session-timeout-include.md</a> kills any idle connections after 4 minutes. </p>  <p>So during the execution of module 2 - all of the connections initially opened and used by module 1 get closed - and module 3 does not know it.</p>  <p>Our solution - given the NAT 4 minute timeout cannot be configured - is to use tcp keep-alive or to force Maven to use a different connection pool implementation or to use an eviction manager to would 'nicely' close out these idle connections before NAT can close them 'forcefully'.</p> ",
    "OwnerUserId": "876158",
    "LastEditorUserId": "876158",
    "LastEditDate": "2019-06-13T13:47:38.927",
    "LastActivityDate": "2019-06-13T13:47:38.927",
    "Title": "Maven build download artefacts connection slow/reset when running inside a Docker Container on Azure",
    "Tags": "<java><azure><maven><docker>",
    "AnswerCount": "0",
    "CommentCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57303048",
    "PostTypeId": "1",
    "CreationDate": "2019-08-01T06:35:08.437",
    "Score": "5",
    "ViewCount": "1806",
    "Body": "<p><a href='https://www.testcontainers.org/modules/docker_compose/' rel='nofollow noreferrer'>Test-containers</a> project alllows start docker contaniders from compose file. They have <a href='https://www.testcontainers.org/test_framework_integration/junit_4/' rel='nofollow noreferrer'>integration with JUnit</a>. But when test phase is finished, all I have is maven log - all started containers were removed by that time. It would be nice if6 for example I run <code>Application</code> and <code>Database</code> containers 4 times for 4 tests. So maven target folder should contains the following: <code>target/test-containers/&lt;start-id&gt;/Application.log</code> and <code>target/test-containers/&lt;start-id&gt;/Database.log</code>.</p> <p>Is there a way to configure test-containers or JUnit or both to redirect log from started containers into some folder?</p> ",
    "OwnerUserId": "1251549",
    "LastEditorUserId": "-1",
    "LastEditDate": "2020-06-20T09:12:55.060",
    "LastActivityDate": "2019-08-01T06:46:08.033",
    "Title": "How store container logs from test-containers?",
    "Tags": "<java><maven><docker><junit><testcontainers>",
    "AnswerCount": "0",
    "CommentCount": "1",
    "FavoriteCount": "0",
    "ContentLicense": "CC BY-SA 4.0"
  },
  {
    "Id": "57464720",
    "PostTypeId": "1",
    "CreationDate": "2019-08-12T16:15:38.490",
    "Score": "5",
    "ViewCount": "5798",
    "Body": "<p>I've been trying to create a multi-stage docker build for my spring-boot-application. The problem is on every change on the master branch, the pom.xml file changes (thanks to maven release plugin), so it's kind of hard to make use of docker build-cache during the build stage and all the dependencies will be downloaded every time I run the build. As far as I know, I can't mount volumes during the building of the image. The experimental version of the docker allows you to mount volumes during the build but it's still experimental so I'm trying to avoid it.</p>  <p>So I decided to try my luck with docker-compose, where the first service will run 'mvn package' inside the container and create a jar file inside a shared volume, which will be then used by the second service to build its own image (basically adding that jar inside its image), which will be published to docker hub. Whatever I was trying to do didn't seem right. Now I'm not really expert of docker-compose here, but is this the right approach to do it?<br> I'm using <code>Docker version 18.09.0, build 4d60db4</code></p>  <pre><code>version: '3' #Specify all the services you want to create services:   #service name   build-service:     context: .     dockerfile: Dockerfile-build     volumes:       - ./:/usr/app       - '$(HOME)'/.m2:/usr/mvn/.m2   spring-app:     conext: .     dockerfile: Dockerfile-jar     volumes:       - ./:/usr/app </code></pre>  <p>Is there any way to make use of local .m2 repository during the first stage. Or any other suggestions are welcome.</p> ",
    "OwnerUserId": "5700299",
    "LastActivityDate": "2019-08-13T05:43:19.073",
    "Title": "How to use maven local repository in Multi-stage docker build?",
    "Tags": "<java><maven><docker-compose><dockerfile><docker-multi-stage-build>",
    "AnswerCount": "1",
    "CommentCount": "1",
    "ContentLicense": "CC BY-SA 4.0"
  }
]